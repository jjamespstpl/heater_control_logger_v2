
heater_ctrl_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8b4  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800e970  0800e970  0000f970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f014  0800f014  000111e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800f014  0800f014  000111e4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800f014  0800f014  000111e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f014  0800f014  00010014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f018  0800f018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800f01c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  200001e4  0800f200  000111e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  0800f200  0001175c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000111e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a390  00000000  00000000  0001120c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ac  00000000  00000000  0002b59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  0002eb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001280  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a152  00000000  00000000  00031550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d398  00000000  00000000  0004b6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a150b  00000000  00000000  00068a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109f45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a2c  00000000  00000000  00109f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b7  00000000  00000000  001109b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e4 	.word	0x200001e4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800e954 	.word	0x0800e954

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e8 	.word	0x200001e8
 80000fc:	0800e954 	.word	0x0800e954

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f002 f84b 	bl	80024d0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 ff8f 	bl	8002368 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f002 f83d 	bl	80024d0 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f002 f833 	bl	80024d0 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 ffb9 	bl	80023f0 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 ffaf 	bl	80023f0 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fbc3 	bl	8000c34 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb4b 	bl	8000b54 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fbb5 	bl	8000c34 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fbab 	bl	8000c34 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fb59 	bl	8000ba4 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fb4f 	bl	8000ba4 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)

08000514 <__aeabi_f2uiz>:
 8000514:	219e      	movs	r1, #158	@ 0x9e
 8000516:	b510      	push	{r4, lr}
 8000518:	05c9      	lsls	r1, r1, #23
 800051a:	1c04      	adds	r4, r0, #0
 800051c:	f7ff fff0 	bl	8000500 <__aeabi_fcmpge>
 8000520:	2800      	cmp	r0, #0
 8000522:	d103      	bne.n	800052c <__aeabi_f2uiz+0x18>
 8000524:	1c20      	adds	r0, r4, #0
 8000526:	f000 ff8b 	bl	8001440 <__aeabi_f2iz>
 800052a:	bd10      	pop	{r4, pc}
 800052c:	219e      	movs	r1, #158	@ 0x9e
 800052e:	1c20      	adds	r0, r4, #0
 8000530:	05c9      	lsls	r1, r1, #23
 8000532:	f000 fd21 	bl	8000f78 <__aeabi_fsub>
 8000536:	f000 ff83 	bl	8001440 <__aeabi_f2iz>
 800053a:	2380      	movs	r3, #128	@ 0x80
 800053c:	061b      	lsls	r3, r3, #24
 800053e:	469c      	mov	ip, r3
 8000540:	4460      	add	r0, ip
 8000542:	e7f2      	b.n	800052a <__aeabi_f2uiz+0x16>

08000544 <__aeabi_fadd>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	024b      	lsls	r3, r1, #9
 8000548:	0a5a      	lsrs	r2, r3, #9
 800054a:	4694      	mov	ip, r2
 800054c:	004a      	lsls	r2, r1, #1
 800054e:	0fc9      	lsrs	r1, r1, #31
 8000550:	46ce      	mov	lr, r9
 8000552:	4647      	mov	r7, r8
 8000554:	4689      	mov	r9, r1
 8000556:	0045      	lsls	r5, r0, #1
 8000558:	0246      	lsls	r6, r0, #9
 800055a:	0e2d      	lsrs	r5, r5, #24
 800055c:	0e12      	lsrs	r2, r2, #24
 800055e:	b580      	push	{r7, lr}
 8000560:	0999      	lsrs	r1, r3, #6
 8000562:	0a77      	lsrs	r7, r6, #9
 8000564:	0fc4      	lsrs	r4, r0, #31
 8000566:	09b6      	lsrs	r6, r6, #6
 8000568:	1aab      	subs	r3, r5, r2
 800056a:	454c      	cmp	r4, r9
 800056c:	d020      	beq.n	80005b0 <__aeabi_fadd+0x6c>
 800056e:	2b00      	cmp	r3, #0
 8000570:	dd0c      	ble.n	800058c <__aeabi_fadd+0x48>
 8000572:	2a00      	cmp	r2, #0
 8000574:	d134      	bne.n	80005e0 <__aeabi_fadd+0x9c>
 8000576:	2900      	cmp	r1, #0
 8000578:	d02a      	beq.n	80005d0 <__aeabi_fadd+0x8c>
 800057a:	1e5a      	subs	r2, r3, #1
 800057c:	2b01      	cmp	r3, #1
 800057e:	d100      	bne.n	8000582 <__aeabi_fadd+0x3e>
 8000580:	e08f      	b.n	80006a2 <__aeabi_fadd+0x15e>
 8000582:	2bff      	cmp	r3, #255	@ 0xff
 8000584:	d100      	bne.n	8000588 <__aeabi_fadd+0x44>
 8000586:	e0cd      	b.n	8000724 <__aeabi_fadd+0x1e0>
 8000588:	0013      	movs	r3, r2
 800058a:	e02f      	b.n	80005ec <__aeabi_fadd+0xa8>
 800058c:	2b00      	cmp	r3, #0
 800058e:	d060      	beq.n	8000652 <__aeabi_fadd+0x10e>
 8000590:	1b53      	subs	r3, r2, r5
 8000592:	2d00      	cmp	r5, #0
 8000594:	d000      	beq.n	8000598 <__aeabi_fadd+0x54>
 8000596:	e0ee      	b.n	8000776 <__aeabi_fadd+0x232>
 8000598:	2e00      	cmp	r6, #0
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0x5a>
 800059c:	e13e      	b.n	800081c <__aeabi_fadd+0x2d8>
 800059e:	1e5c      	subs	r4, r3, #1
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d100      	bne.n	80005a6 <__aeabi_fadd+0x62>
 80005a4:	e16b      	b.n	800087e <__aeabi_fadd+0x33a>
 80005a6:	2bff      	cmp	r3, #255	@ 0xff
 80005a8:	d100      	bne.n	80005ac <__aeabi_fadd+0x68>
 80005aa:	e0b9      	b.n	8000720 <__aeabi_fadd+0x1dc>
 80005ac:	0023      	movs	r3, r4
 80005ae:	e0e7      	b.n	8000780 <__aeabi_fadd+0x23c>
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dc00      	bgt.n	80005b6 <__aeabi_fadd+0x72>
 80005b4:	e0a4      	b.n	8000700 <__aeabi_fadd+0x1bc>
 80005b6:	2a00      	cmp	r2, #0
 80005b8:	d069      	beq.n	800068e <__aeabi_fadd+0x14a>
 80005ba:	2dff      	cmp	r5, #255	@ 0xff
 80005bc:	d100      	bne.n	80005c0 <__aeabi_fadd+0x7c>
 80005be:	e0b1      	b.n	8000724 <__aeabi_fadd+0x1e0>
 80005c0:	2280      	movs	r2, #128	@ 0x80
 80005c2:	04d2      	lsls	r2, r2, #19
 80005c4:	4311      	orrs	r1, r2
 80005c6:	2b1b      	cmp	r3, #27
 80005c8:	dc00      	bgt.n	80005cc <__aeabi_fadd+0x88>
 80005ca:	e0e9      	b.n	80007a0 <__aeabi_fadd+0x25c>
 80005cc:	002b      	movs	r3, r5
 80005ce:	3605      	adds	r6, #5
 80005d0:	08f7      	lsrs	r7, r6, #3
 80005d2:	2bff      	cmp	r3, #255	@ 0xff
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0x94>
 80005d6:	e0a5      	b.n	8000724 <__aeabi_fadd+0x1e0>
 80005d8:	027a      	lsls	r2, r7, #9
 80005da:	0a52      	lsrs	r2, r2, #9
 80005dc:	b2d8      	uxtb	r0, r3
 80005de:	e030      	b.n	8000642 <__aeabi_fadd+0xfe>
 80005e0:	2dff      	cmp	r5, #255	@ 0xff
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fadd+0xa2>
 80005e4:	e09e      	b.n	8000724 <__aeabi_fadd+0x1e0>
 80005e6:	2280      	movs	r2, #128	@ 0x80
 80005e8:	04d2      	lsls	r2, r2, #19
 80005ea:	4311      	orrs	r1, r2
 80005ec:	2001      	movs	r0, #1
 80005ee:	2b1b      	cmp	r3, #27
 80005f0:	dc08      	bgt.n	8000604 <__aeabi_fadd+0xc0>
 80005f2:	0008      	movs	r0, r1
 80005f4:	2220      	movs	r2, #32
 80005f6:	40d8      	lsrs	r0, r3
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	4099      	lsls	r1, r3
 80005fc:	000b      	movs	r3, r1
 80005fe:	1e5a      	subs	r2, r3, #1
 8000600:	4193      	sbcs	r3, r2
 8000602:	4318      	orrs	r0, r3
 8000604:	1a36      	subs	r6, r6, r0
 8000606:	0173      	lsls	r3, r6, #5
 8000608:	d400      	bmi.n	800060c <__aeabi_fadd+0xc8>
 800060a:	e071      	b.n	80006f0 <__aeabi_fadd+0x1ac>
 800060c:	01b6      	lsls	r6, r6, #6
 800060e:	09b7      	lsrs	r7, r6, #6
 8000610:	0038      	movs	r0, r7
 8000612:	f003 f835 	bl	8003680 <__clzsi2>
 8000616:	003b      	movs	r3, r7
 8000618:	3805      	subs	r0, #5
 800061a:	4083      	lsls	r3, r0
 800061c:	4285      	cmp	r5, r0
 800061e:	dd4d      	ble.n	80006bc <__aeabi_fadd+0x178>
 8000620:	4eb4      	ldr	r6, [pc, #720]	@ (80008f4 <__aeabi_fadd+0x3b0>)
 8000622:	1a2d      	subs	r5, r5, r0
 8000624:	401e      	ands	r6, r3
 8000626:	075a      	lsls	r2, r3, #29
 8000628:	d068      	beq.n	80006fc <__aeabi_fadd+0x1b8>
 800062a:	220f      	movs	r2, #15
 800062c:	4013      	ands	r3, r2
 800062e:	2b04      	cmp	r3, #4
 8000630:	d064      	beq.n	80006fc <__aeabi_fadd+0x1b8>
 8000632:	3604      	adds	r6, #4
 8000634:	0173      	lsls	r3, r6, #5
 8000636:	d561      	bpl.n	80006fc <__aeabi_fadd+0x1b8>
 8000638:	1c68      	adds	r0, r5, #1
 800063a:	2dfe      	cmp	r5, #254	@ 0xfe
 800063c:	d154      	bne.n	80006e8 <__aeabi_fadd+0x1a4>
 800063e:	20ff      	movs	r0, #255	@ 0xff
 8000640:	2200      	movs	r2, #0
 8000642:	05c0      	lsls	r0, r0, #23
 8000644:	4310      	orrs	r0, r2
 8000646:	07e4      	lsls	r4, r4, #31
 8000648:	4320      	orrs	r0, r4
 800064a:	bcc0      	pop	{r6, r7}
 800064c:	46b9      	mov	r9, r7
 800064e:	46b0      	mov	r8, r6
 8000650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000652:	22fe      	movs	r2, #254	@ 0xfe
 8000654:	4690      	mov	r8, r2
 8000656:	1c68      	adds	r0, r5, #1
 8000658:	0002      	movs	r2, r0
 800065a:	4640      	mov	r0, r8
 800065c:	4210      	tst	r0, r2
 800065e:	d16b      	bne.n	8000738 <__aeabi_fadd+0x1f4>
 8000660:	2d00      	cmp	r5, #0
 8000662:	d000      	beq.n	8000666 <__aeabi_fadd+0x122>
 8000664:	e0dd      	b.n	8000822 <__aeabi_fadd+0x2de>
 8000666:	2e00      	cmp	r6, #0
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x128>
 800066a:	e102      	b.n	8000872 <__aeabi_fadd+0x32e>
 800066c:	2900      	cmp	r1, #0
 800066e:	d0b3      	beq.n	80005d8 <__aeabi_fadd+0x94>
 8000670:	2280      	movs	r2, #128	@ 0x80
 8000672:	1a77      	subs	r7, r6, r1
 8000674:	04d2      	lsls	r2, r2, #19
 8000676:	4217      	tst	r7, r2
 8000678:	d100      	bne.n	800067c <__aeabi_fadd+0x138>
 800067a:	e136      	b.n	80008ea <__aeabi_fadd+0x3a6>
 800067c:	464c      	mov	r4, r9
 800067e:	1b8e      	subs	r6, r1, r6
 8000680:	d061      	beq.n	8000746 <__aeabi_fadd+0x202>
 8000682:	2001      	movs	r0, #1
 8000684:	4216      	tst	r6, r2
 8000686:	d130      	bne.n	80006ea <__aeabi_fadd+0x1a6>
 8000688:	2300      	movs	r3, #0
 800068a:	08f7      	lsrs	r7, r6, #3
 800068c:	e7a4      	b.n	80005d8 <__aeabi_fadd+0x94>
 800068e:	2900      	cmp	r1, #0
 8000690:	d09e      	beq.n	80005d0 <__aeabi_fadd+0x8c>
 8000692:	1e5a      	subs	r2, r3, #1
 8000694:	2b01      	cmp	r3, #1
 8000696:	d100      	bne.n	800069a <__aeabi_fadd+0x156>
 8000698:	e0ca      	b.n	8000830 <__aeabi_fadd+0x2ec>
 800069a:	2bff      	cmp	r3, #255	@ 0xff
 800069c:	d042      	beq.n	8000724 <__aeabi_fadd+0x1e0>
 800069e:	0013      	movs	r3, r2
 80006a0:	e791      	b.n	80005c6 <__aeabi_fadd+0x82>
 80006a2:	1a71      	subs	r1, r6, r1
 80006a4:	014b      	lsls	r3, r1, #5
 80006a6:	d400      	bmi.n	80006aa <__aeabi_fadd+0x166>
 80006a8:	e0d1      	b.n	800084e <__aeabi_fadd+0x30a>
 80006aa:	018f      	lsls	r7, r1, #6
 80006ac:	09bf      	lsrs	r7, r7, #6
 80006ae:	0038      	movs	r0, r7
 80006b0:	f002 ffe6 	bl	8003680 <__clzsi2>
 80006b4:	003b      	movs	r3, r7
 80006b6:	3805      	subs	r0, #5
 80006b8:	4083      	lsls	r3, r0
 80006ba:	2501      	movs	r5, #1
 80006bc:	2220      	movs	r2, #32
 80006be:	1b40      	subs	r0, r0, r5
 80006c0:	3001      	adds	r0, #1
 80006c2:	1a12      	subs	r2, r2, r0
 80006c4:	001e      	movs	r6, r3
 80006c6:	4093      	lsls	r3, r2
 80006c8:	40c6      	lsrs	r6, r0
 80006ca:	1e5a      	subs	r2, r3, #1
 80006cc:	4193      	sbcs	r3, r2
 80006ce:	431e      	orrs	r6, r3
 80006d0:	d039      	beq.n	8000746 <__aeabi_fadd+0x202>
 80006d2:	0773      	lsls	r3, r6, #29
 80006d4:	d100      	bne.n	80006d8 <__aeabi_fadd+0x194>
 80006d6:	e11b      	b.n	8000910 <__aeabi_fadd+0x3cc>
 80006d8:	230f      	movs	r3, #15
 80006da:	2500      	movs	r5, #0
 80006dc:	4033      	ands	r3, r6
 80006de:	2b04      	cmp	r3, #4
 80006e0:	d1a7      	bne.n	8000632 <__aeabi_fadd+0xee>
 80006e2:	2001      	movs	r0, #1
 80006e4:	0172      	lsls	r2, r6, #5
 80006e6:	d57c      	bpl.n	80007e2 <__aeabi_fadd+0x29e>
 80006e8:	b2c0      	uxtb	r0, r0
 80006ea:	01b2      	lsls	r2, r6, #6
 80006ec:	0a52      	lsrs	r2, r2, #9
 80006ee:	e7a8      	b.n	8000642 <__aeabi_fadd+0xfe>
 80006f0:	0773      	lsls	r3, r6, #29
 80006f2:	d003      	beq.n	80006fc <__aeabi_fadd+0x1b8>
 80006f4:	230f      	movs	r3, #15
 80006f6:	4033      	ands	r3, r6
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d19a      	bne.n	8000632 <__aeabi_fadd+0xee>
 80006fc:	002b      	movs	r3, r5
 80006fe:	e767      	b.n	80005d0 <__aeabi_fadd+0x8c>
 8000700:	2b00      	cmp	r3, #0
 8000702:	d023      	beq.n	800074c <__aeabi_fadd+0x208>
 8000704:	1b53      	subs	r3, r2, r5
 8000706:	2d00      	cmp	r5, #0
 8000708:	d17b      	bne.n	8000802 <__aeabi_fadd+0x2be>
 800070a:	2e00      	cmp	r6, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_fadd+0x1cc>
 800070e:	e086      	b.n	800081e <__aeabi_fadd+0x2da>
 8000710:	1e5d      	subs	r5, r3, #1
 8000712:	2b01      	cmp	r3, #1
 8000714:	d100      	bne.n	8000718 <__aeabi_fadd+0x1d4>
 8000716:	e08b      	b.n	8000830 <__aeabi_fadd+0x2ec>
 8000718:	2bff      	cmp	r3, #255	@ 0xff
 800071a:	d002      	beq.n	8000722 <__aeabi_fadd+0x1de>
 800071c:	002b      	movs	r3, r5
 800071e:	e075      	b.n	800080c <__aeabi_fadd+0x2c8>
 8000720:	464c      	mov	r4, r9
 8000722:	4667      	mov	r7, ip
 8000724:	2f00      	cmp	r7, #0
 8000726:	d100      	bne.n	800072a <__aeabi_fadd+0x1e6>
 8000728:	e789      	b.n	800063e <__aeabi_fadd+0xfa>
 800072a:	2280      	movs	r2, #128	@ 0x80
 800072c:	03d2      	lsls	r2, r2, #15
 800072e:	433a      	orrs	r2, r7
 8000730:	0252      	lsls	r2, r2, #9
 8000732:	20ff      	movs	r0, #255	@ 0xff
 8000734:	0a52      	lsrs	r2, r2, #9
 8000736:	e784      	b.n	8000642 <__aeabi_fadd+0xfe>
 8000738:	1a77      	subs	r7, r6, r1
 800073a:	017b      	lsls	r3, r7, #5
 800073c:	d46b      	bmi.n	8000816 <__aeabi_fadd+0x2d2>
 800073e:	2f00      	cmp	r7, #0
 8000740:	d000      	beq.n	8000744 <__aeabi_fadd+0x200>
 8000742:	e765      	b.n	8000610 <__aeabi_fadd+0xcc>
 8000744:	2400      	movs	r4, #0
 8000746:	2000      	movs	r0, #0
 8000748:	2200      	movs	r2, #0
 800074a:	e77a      	b.n	8000642 <__aeabi_fadd+0xfe>
 800074c:	22fe      	movs	r2, #254	@ 0xfe
 800074e:	1c6b      	adds	r3, r5, #1
 8000750:	421a      	tst	r2, r3
 8000752:	d149      	bne.n	80007e8 <__aeabi_fadd+0x2a4>
 8000754:	2d00      	cmp	r5, #0
 8000756:	d000      	beq.n	800075a <__aeabi_fadd+0x216>
 8000758:	e09f      	b.n	800089a <__aeabi_fadd+0x356>
 800075a:	2e00      	cmp	r6, #0
 800075c:	d100      	bne.n	8000760 <__aeabi_fadd+0x21c>
 800075e:	e0ba      	b.n	80008d6 <__aeabi_fadd+0x392>
 8000760:	2900      	cmp	r1, #0
 8000762:	d100      	bne.n	8000766 <__aeabi_fadd+0x222>
 8000764:	e0cf      	b.n	8000906 <__aeabi_fadd+0x3c2>
 8000766:	1872      	adds	r2, r6, r1
 8000768:	0153      	lsls	r3, r2, #5
 800076a:	d400      	bmi.n	800076e <__aeabi_fadd+0x22a>
 800076c:	e0cd      	b.n	800090a <__aeabi_fadd+0x3c6>
 800076e:	0192      	lsls	r2, r2, #6
 8000770:	2001      	movs	r0, #1
 8000772:	0a52      	lsrs	r2, r2, #9
 8000774:	e765      	b.n	8000642 <__aeabi_fadd+0xfe>
 8000776:	2aff      	cmp	r2, #255	@ 0xff
 8000778:	d0d2      	beq.n	8000720 <__aeabi_fadd+0x1dc>
 800077a:	2080      	movs	r0, #128	@ 0x80
 800077c:	04c0      	lsls	r0, r0, #19
 800077e:	4306      	orrs	r6, r0
 8000780:	2001      	movs	r0, #1
 8000782:	2b1b      	cmp	r3, #27
 8000784:	dc08      	bgt.n	8000798 <__aeabi_fadd+0x254>
 8000786:	0030      	movs	r0, r6
 8000788:	2420      	movs	r4, #32
 800078a:	40d8      	lsrs	r0, r3
 800078c:	1ae3      	subs	r3, r4, r3
 800078e:	409e      	lsls	r6, r3
 8000790:	0033      	movs	r3, r6
 8000792:	1e5c      	subs	r4, r3, #1
 8000794:	41a3      	sbcs	r3, r4
 8000796:	4318      	orrs	r0, r3
 8000798:	464c      	mov	r4, r9
 800079a:	0015      	movs	r5, r2
 800079c:	1a0e      	subs	r6, r1, r0
 800079e:	e732      	b.n	8000606 <__aeabi_fadd+0xc2>
 80007a0:	0008      	movs	r0, r1
 80007a2:	2220      	movs	r2, #32
 80007a4:	40d8      	lsrs	r0, r3
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	4099      	lsls	r1, r3
 80007aa:	000b      	movs	r3, r1
 80007ac:	1e5a      	subs	r2, r3, #1
 80007ae:	4193      	sbcs	r3, r2
 80007b0:	4303      	orrs	r3, r0
 80007b2:	18f6      	adds	r6, r6, r3
 80007b4:	0173      	lsls	r3, r6, #5
 80007b6:	d59b      	bpl.n	80006f0 <__aeabi_fadd+0x1ac>
 80007b8:	3501      	adds	r5, #1
 80007ba:	2dff      	cmp	r5, #255	@ 0xff
 80007bc:	d100      	bne.n	80007c0 <__aeabi_fadd+0x27c>
 80007be:	e73e      	b.n	800063e <__aeabi_fadd+0xfa>
 80007c0:	2301      	movs	r3, #1
 80007c2:	494d      	ldr	r1, [pc, #308]	@ (80008f8 <__aeabi_fadd+0x3b4>)
 80007c4:	0872      	lsrs	r2, r6, #1
 80007c6:	4033      	ands	r3, r6
 80007c8:	400a      	ands	r2, r1
 80007ca:	431a      	orrs	r2, r3
 80007cc:	0016      	movs	r6, r2
 80007ce:	0753      	lsls	r3, r2, #29
 80007d0:	d004      	beq.n	80007dc <__aeabi_fadd+0x298>
 80007d2:	230f      	movs	r3, #15
 80007d4:	4013      	ands	r3, r2
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d000      	beq.n	80007dc <__aeabi_fadd+0x298>
 80007da:	e72a      	b.n	8000632 <__aeabi_fadd+0xee>
 80007dc:	0173      	lsls	r3, r6, #5
 80007de:	d500      	bpl.n	80007e2 <__aeabi_fadd+0x29e>
 80007e0:	e72a      	b.n	8000638 <__aeabi_fadd+0xf4>
 80007e2:	002b      	movs	r3, r5
 80007e4:	08f7      	lsrs	r7, r6, #3
 80007e6:	e6f7      	b.n	80005d8 <__aeabi_fadd+0x94>
 80007e8:	2bff      	cmp	r3, #255	@ 0xff
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x2aa>
 80007ec:	e727      	b.n	800063e <__aeabi_fadd+0xfa>
 80007ee:	1871      	adds	r1, r6, r1
 80007f0:	0849      	lsrs	r1, r1, #1
 80007f2:	074a      	lsls	r2, r1, #29
 80007f4:	d02f      	beq.n	8000856 <__aeabi_fadd+0x312>
 80007f6:	220f      	movs	r2, #15
 80007f8:	400a      	ands	r2, r1
 80007fa:	2a04      	cmp	r2, #4
 80007fc:	d02b      	beq.n	8000856 <__aeabi_fadd+0x312>
 80007fe:	1d0e      	adds	r6, r1, #4
 8000800:	e6e6      	b.n	80005d0 <__aeabi_fadd+0x8c>
 8000802:	2aff      	cmp	r2, #255	@ 0xff
 8000804:	d08d      	beq.n	8000722 <__aeabi_fadd+0x1de>
 8000806:	2080      	movs	r0, #128	@ 0x80
 8000808:	04c0      	lsls	r0, r0, #19
 800080a:	4306      	orrs	r6, r0
 800080c:	2b1b      	cmp	r3, #27
 800080e:	dd24      	ble.n	800085a <__aeabi_fadd+0x316>
 8000810:	0013      	movs	r3, r2
 8000812:	1d4e      	adds	r6, r1, #5
 8000814:	e6dc      	b.n	80005d0 <__aeabi_fadd+0x8c>
 8000816:	464c      	mov	r4, r9
 8000818:	1b8f      	subs	r7, r1, r6
 800081a:	e6f9      	b.n	8000610 <__aeabi_fadd+0xcc>
 800081c:	464c      	mov	r4, r9
 800081e:	000e      	movs	r6, r1
 8000820:	e6d6      	b.n	80005d0 <__aeabi_fadd+0x8c>
 8000822:	2e00      	cmp	r6, #0
 8000824:	d149      	bne.n	80008ba <__aeabi_fadd+0x376>
 8000826:	2900      	cmp	r1, #0
 8000828:	d068      	beq.n	80008fc <__aeabi_fadd+0x3b8>
 800082a:	4667      	mov	r7, ip
 800082c:	464c      	mov	r4, r9
 800082e:	e77c      	b.n	800072a <__aeabi_fadd+0x1e6>
 8000830:	1870      	adds	r0, r6, r1
 8000832:	0143      	lsls	r3, r0, #5
 8000834:	d574      	bpl.n	8000920 <__aeabi_fadd+0x3dc>
 8000836:	4930      	ldr	r1, [pc, #192]	@ (80008f8 <__aeabi_fadd+0x3b4>)
 8000838:	0840      	lsrs	r0, r0, #1
 800083a:	4001      	ands	r1, r0
 800083c:	0743      	lsls	r3, r0, #29
 800083e:	d009      	beq.n	8000854 <__aeabi_fadd+0x310>
 8000840:	230f      	movs	r3, #15
 8000842:	4003      	ands	r3, r0
 8000844:	2b04      	cmp	r3, #4
 8000846:	d005      	beq.n	8000854 <__aeabi_fadd+0x310>
 8000848:	2302      	movs	r3, #2
 800084a:	1d0e      	adds	r6, r1, #4
 800084c:	e6c0      	b.n	80005d0 <__aeabi_fadd+0x8c>
 800084e:	2301      	movs	r3, #1
 8000850:	08cf      	lsrs	r7, r1, #3
 8000852:	e6c1      	b.n	80005d8 <__aeabi_fadd+0x94>
 8000854:	2302      	movs	r3, #2
 8000856:	08cf      	lsrs	r7, r1, #3
 8000858:	e6be      	b.n	80005d8 <__aeabi_fadd+0x94>
 800085a:	2520      	movs	r5, #32
 800085c:	0030      	movs	r0, r6
 800085e:	40d8      	lsrs	r0, r3
 8000860:	1aeb      	subs	r3, r5, r3
 8000862:	409e      	lsls	r6, r3
 8000864:	0033      	movs	r3, r6
 8000866:	1e5d      	subs	r5, r3, #1
 8000868:	41ab      	sbcs	r3, r5
 800086a:	4303      	orrs	r3, r0
 800086c:	0015      	movs	r5, r2
 800086e:	185e      	adds	r6, r3, r1
 8000870:	e7a0      	b.n	80007b4 <__aeabi_fadd+0x270>
 8000872:	2900      	cmp	r1, #0
 8000874:	d100      	bne.n	8000878 <__aeabi_fadd+0x334>
 8000876:	e765      	b.n	8000744 <__aeabi_fadd+0x200>
 8000878:	464c      	mov	r4, r9
 800087a:	4667      	mov	r7, ip
 800087c:	e6ac      	b.n	80005d8 <__aeabi_fadd+0x94>
 800087e:	1b8f      	subs	r7, r1, r6
 8000880:	017b      	lsls	r3, r7, #5
 8000882:	d52e      	bpl.n	80008e2 <__aeabi_fadd+0x39e>
 8000884:	01bf      	lsls	r7, r7, #6
 8000886:	09bf      	lsrs	r7, r7, #6
 8000888:	0038      	movs	r0, r7
 800088a:	f002 fef9 	bl	8003680 <__clzsi2>
 800088e:	003b      	movs	r3, r7
 8000890:	3805      	subs	r0, #5
 8000892:	4083      	lsls	r3, r0
 8000894:	464c      	mov	r4, r9
 8000896:	3501      	adds	r5, #1
 8000898:	e710      	b.n	80006bc <__aeabi_fadd+0x178>
 800089a:	2e00      	cmp	r6, #0
 800089c:	d100      	bne.n	80008a0 <__aeabi_fadd+0x35c>
 800089e:	e740      	b.n	8000722 <__aeabi_fadd+0x1de>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	d100      	bne.n	80008a6 <__aeabi_fadd+0x362>
 80008a4:	e741      	b.n	800072a <__aeabi_fadd+0x1e6>
 80008a6:	2380      	movs	r3, #128	@ 0x80
 80008a8:	03db      	lsls	r3, r3, #15
 80008aa:	429f      	cmp	r7, r3
 80008ac:	d200      	bcs.n	80008b0 <__aeabi_fadd+0x36c>
 80008ae:	e73c      	b.n	800072a <__aeabi_fadd+0x1e6>
 80008b0:	459c      	cmp	ip, r3
 80008b2:	d300      	bcc.n	80008b6 <__aeabi_fadd+0x372>
 80008b4:	e739      	b.n	800072a <__aeabi_fadd+0x1e6>
 80008b6:	4667      	mov	r7, ip
 80008b8:	e737      	b.n	800072a <__aeabi_fadd+0x1e6>
 80008ba:	2900      	cmp	r1, #0
 80008bc:	d100      	bne.n	80008c0 <__aeabi_fadd+0x37c>
 80008be:	e734      	b.n	800072a <__aeabi_fadd+0x1e6>
 80008c0:	2380      	movs	r3, #128	@ 0x80
 80008c2:	03db      	lsls	r3, r3, #15
 80008c4:	429f      	cmp	r7, r3
 80008c6:	d200      	bcs.n	80008ca <__aeabi_fadd+0x386>
 80008c8:	e72f      	b.n	800072a <__aeabi_fadd+0x1e6>
 80008ca:	459c      	cmp	ip, r3
 80008cc:	d300      	bcc.n	80008d0 <__aeabi_fadd+0x38c>
 80008ce:	e72c      	b.n	800072a <__aeabi_fadd+0x1e6>
 80008d0:	464c      	mov	r4, r9
 80008d2:	4667      	mov	r7, ip
 80008d4:	e729      	b.n	800072a <__aeabi_fadd+0x1e6>
 80008d6:	2900      	cmp	r1, #0
 80008d8:	d100      	bne.n	80008dc <__aeabi_fadd+0x398>
 80008da:	e734      	b.n	8000746 <__aeabi_fadd+0x202>
 80008dc:	2300      	movs	r3, #0
 80008de:	08cf      	lsrs	r7, r1, #3
 80008e0:	e67a      	b.n	80005d8 <__aeabi_fadd+0x94>
 80008e2:	464c      	mov	r4, r9
 80008e4:	2301      	movs	r3, #1
 80008e6:	08ff      	lsrs	r7, r7, #3
 80008e8:	e676      	b.n	80005d8 <__aeabi_fadd+0x94>
 80008ea:	2f00      	cmp	r7, #0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_fadd+0x3ac>
 80008ee:	e729      	b.n	8000744 <__aeabi_fadd+0x200>
 80008f0:	08ff      	lsrs	r7, r7, #3
 80008f2:	e671      	b.n	80005d8 <__aeabi_fadd+0x94>
 80008f4:	fbffffff 	.word	0xfbffffff
 80008f8:	7dffffff 	.word	0x7dffffff
 80008fc:	2280      	movs	r2, #128	@ 0x80
 80008fe:	2400      	movs	r4, #0
 8000900:	20ff      	movs	r0, #255	@ 0xff
 8000902:	03d2      	lsls	r2, r2, #15
 8000904:	e69d      	b.n	8000642 <__aeabi_fadd+0xfe>
 8000906:	2300      	movs	r3, #0
 8000908:	e666      	b.n	80005d8 <__aeabi_fadd+0x94>
 800090a:	2300      	movs	r3, #0
 800090c:	08d7      	lsrs	r7, r2, #3
 800090e:	e663      	b.n	80005d8 <__aeabi_fadd+0x94>
 8000910:	2001      	movs	r0, #1
 8000912:	0172      	lsls	r2, r6, #5
 8000914:	d500      	bpl.n	8000918 <__aeabi_fadd+0x3d4>
 8000916:	e6e7      	b.n	80006e8 <__aeabi_fadd+0x1a4>
 8000918:	0031      	movs	r1, r6
 800091a:	2300      	movs	r3, #0
 800091c:	08cf      	lsrs	r7, r1, #3
 800091e:	e65b      	b.n	80005d8 <__aeabi_fadd+0x94>
 8000920:	2301      	movs	r3, #1
 8000922:	08c7      	lsrs	r7, r0, #3
 8000924:	e658      	b.n	80005d8 <__aeabi_fadd+0x94>
 8000926:	46c0      	nop			@ (mov r8, r8)

08000928 <__aeabi_fdiv>:
 8000928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800092a:	4646      	mov	r6, r8
 800092c:	464f      	mov	r7, r9
 800092e:	46d6      	mov	lr, sl
 8000930:	0245      	lsls	r5, r0, #9
 8000932:	b5c0      	push	{r6, r7, lr}
 8000934:	0fc3      	lsrs	r3, r0, #31
 8000936:	0047      	lsls	r7, r0, #1
 8000938:	4698      	mov	r8, r3
 800093a:	1c0e      	adds	r6, r1, #0
 800093c:	0a6d      	lsrs	r5, r5, #9
 800093e:	0e3f      	lsrs	r7, r7, #24
 8000940:	d05b      	beq.n	80009fa <__aeabi_fdiv+0xd2>
 8000942:	2fff      	cmp	r7, #255	@ 0xff
 8000944:	d021      	beq.n	800098a <__aeabi_fdiv+0x62>
 8000946:	2380      	movs	r3, #128	@ 0x80
 8000948:	00ed      	lsls	r5, r5, #3
 800094a:	04db      	lsls	r3, r3, #19
 800094c:	431d      	orrs	r5, r3
 800094e:	2300      	movs	r3, #0
 8000950:	4699      	mov	r9, r3
 8000952:	469a      	mov	sl, r3
 8000954:	3f7f      	subs	r7, #127	@ 0x7f
 8000956:	0274      	lsls	r4, r6, #9
 8000958:	0073      	lsls	r3, r6, #1
 800095a:	0a64      	lsrs	r4, r4, #9
 800095c:	0e1b      	lsrs	r3, r3, #24
 800095e:	0ff6      	lsrs	r6, r6, #31
 8000960:	2b00      	cmp	r3, #0
 8000962:	d020      	beq.n	80009a6 <__aeabi_fdiv+0x7e>
 8000964:	2bff      	cmp	r3, #255	@ 0xff
 8000966:	d043      	beq.n	80009f0 <__aeabi_fdiv+0xc8>
 8000968:	2280      	movs	r2, #128	@ 0x80
 800096a:	2000      	movs	r0, #0
 800096c:	00e4      	lsls	r4, r4, #3
 800096e:	04d2      	lsls	r2, r2, #19
 8000970:	4314      	orrs	r4, r2
 8000972:	3b7f      	subs	r3, #127	@ 0x7f
 8000974:	4642      	mov	r2, r8
 8000976:	1aff      	subs	r7, r7, r3
 8000978:	464b      	mov	r3, r9
 800097a:	4072      	eors	r2, r6
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d900      	bls.n	8000982 <__aeabi_fdiv+0x5a>
 8000980:	e09d      	b.n	8000abe <__aeabi_fdiv+0x196>
 8000982:	4971      	ldr	r1, [pc, #452]	@ (8000b48 <__aeabi_fdiv+0x220>)
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	58cb      	ldr	r3, [r1, r3]
 8000988:	469f      	mov	pc, r3
 800098a:	2d00      	cmp	r5, #0
 800098c:	d15a      	bne.n	8000a44 <__aeabi_fdiv+0x11c>
 800098e:	2308      	movs	r3, #8
 8000990:	4699      	mov	r9, r3
 8000992:	3b06      	subs	r3, #6
 8000994:	0274      	lsls	r4, r6, #9
 8000996:	469a      	mov	sl, r3
 8000998:	0073      	lsls	r3, r6, #1
 800099a:	27ff      	movs	r7, #255	@ 0xff
 800099c:	0a64      	lsrs	r4, r4, #9
 800099e:	0e1b      	lsrs	r3, r3, #24
 80009a0:	0ff6      	lsrs	r6, r6, #31
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1de      	bne.n	8000964 <__aeabi_fdiv+0x3c>
 80009a6:	2c00      	cmp	r4, #0
 80009a8:	d13b      	bne.n	8000a22 <__aeabi_fdiv+0xfa>
 80009aa:	2301      	movs	r3, #1
 80009ac:	4642      	mov	r2, r8
 80009ae:	4649      	mov	r1, r9
 80009b0:	4072      	eors	r2, r6
 80009b2:	4319      	orrs	r1, r3
 80009b4:	290e      	cmp	r1, #14
 80009b6:	d818      	bhi.n	80009ea <__aeabi_fdiv+0xc2>
 80009b8:	4864      	ldr	r0, [pc, #400]	@ (8000b4c <__aeabi_fdiv+0x224>)
 80009ba:	0089      	lsls	r1, r1, #2
 80009bc:	5841      	ldr	r1, [r0, r1]
 80009be:	468f      	mov	pc, r1
 80009c0:	4653      	mov	r3, sl
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fdiv+0xa0>
 80009c6:	e0b8      	b.n	8000b3a <__aeabi_fdiv+0x212>
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	d06e      	beq.n	8000aaa <__aeabi_fdiv+0x182>
 80009cc:	4642      	mov	r2, r8
 80009ce:	002c      	movs	r4, r5
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d140      	bne.n	8000a56 <__aeabi_fdiv+0x12e>
 80009d4:	2000      	movs	r0, #0
 80009d6:	2400      	movs	r4, #0
 80009d8:	05c0      	lsls	r0, r0, #23
 80009da:	4320      	orrs	r0, r4
 80009dc:	07d2      	lsls	r2, r2, #31
 80009de:	4310      	orrs	r0, r2
 80009e0:	bce0      	pop	{r5, r6, r7}
 80009e2:	46ba      	mov	sl, r7
 80009e4:	46b1      	mov	r9, r6
 80009e6:	46a8      	mov	r8, r5
 80009e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ea:	20ff      	movs	r0, #255	@ 0xff
 80009ec:	2400      	movs	r4, #0
 80009ee:	e7f3      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 80009f0:	2c00      	cmp	r4, #0
 80009f2:	d120      	bne.n	8000a36 <__aeabi_fdiv+0x10e>
 80009f4:	2302      	movs	r3, #2
 80009f6:	3fff      	subs	r7, #255	@ 0xff
 80009f8:	e7d8      	b.n	80009ac <__aeabi_fdiv+0x84>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d105      	bne.n	8000a0a <__aeabi_fdiv+0xe2>
 80009fe:	2304      	movs	r3, #4
 8000a00:	4699      	mov	r9, r3
 8000a02:	3b03      	subs	r3, #3
 8000a04:	2700      	movs	r7, #0
 8000a06:	469a      	mov	sl, r3
 8000a08:	e7a5      	b.n	8000956 <__aeabi_fdiv+0x2e>
 8000a0a:	0028      	movs	r0, r5
 8000a0c:	f002 fe38 	bl	8003680 <__clzsi2>
 8000a10:	2776      	movs	r7, #118	@ 0x76
 8000a12:	1f43      	subs	r3, r0, #5
 8000a14:	409d      	lsls	r5, r3
 8000a16:	2300      	movs	r3, #0
 8000a18:	427f      	negs	r7, r7
 8000a1a:	4699      	mov	r9, r3
 8000a1c:	469a      	mov	sl, r3
 8000a1e:	1a3f      	subs	r7, r7, r0
 8000a20:	e799      	b.n	8000956 <__aeabi_fdiv+0x2e>
 8000a22:	0020      	movs	r0, r4
 8000a24:	f002 fe2c 	bl	8003680 <__clzsi2>
 8000a28:	1f43      	subs	r3, r0, #5
 8000a2a:	409c      	lsls	r4, r3
 8000a2c:	2376      	movs	r3, #118	@ 0x76
 8000a2e:	425b      	negs	r3, r3
 8000a30:	1a1b      	subs	r3, r3, r0
 8000a32:	2000      	movs	r0, #0
 8000a34:	e79e      	b.n	8000974 <__aeabi_fdiv+0x4c>
 8000a36:	2303      	movs	r3, #3
 8000a38:	464a      	mov	r2, r9
 8000a3a:	431a      	orrs	r2, r3
 8000a3c:	4691      	mov	r9, r2
 8000a3e:	2003      	movs	r0, #3
 8000a40:	33fc      	adds	r3, #252	@ 0xfc
 8000a42:	e797      	b.n	8000974 <__aeabi_fdiv+0x4c>
 8000a44:	230c      	movs	r3, #12
 8000a46:	4699      	mov	r9, r3
 8000a48:	3b09      	subs	r3, #9
 8000a4a:	27ff      	movs	r7, #255	@ 0xff
 8000a4c:	469a      	mov	sl, r3
 8000a4e:	e782      	b.n	8000956 <__aeabi_fdiv+0x2e>
 8000a50:	2803      	cmp	r0, #3
 8000a52:	d02c      	beq.n	8000aae <__aeabi_fdiv+0x186>
 8000a54:	0032      	movs	r2, r6
 8000a56:	0038      	movs	r0, r7
 8000a58:	307f      	adds	r0, #127	@ 0x7f
 8000a5a:	2800      	cmp	r0, #0
 8000a5c:	dd47      	ble.n	8000aee <__aeabi_fdiv+0x1c6>
 8000a5e:	0763      	lsls	r3, r4, #29
 8000a60:	d004      	beq.n	8000a6c <__aeabi_fdiv+0x144>
 8000a62:	230f      	movs	r3, #15
 8000a64:	4023      	ands	r3, r4
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	d000      	beq.n	8000a6c <__aeabi_fdiv+0x144>
 8000a6a:	3404      	adds	r4, #4
 8000a6c:	0123      	lsls	r3, r4, #4
 8000a6e:	d503      	bpl.n	8000a78 <__aeabi_fdiv+0x150>
 8000a70:	0038      	movs	r0, r7
 8000a72:	4b37      	ldr	r3, [pc, #220]	@ (8000b50 <__aeabi_fdiv+0x228>)
 8000a74:	3080      	adds	r0, #128	@ 0x80
 8000a76:	401c      	ands	r4, r3
 8000a78:	28fe      	cmp	r0, #254	@ 0xfe
 8000a7a:	dcb6      	bgt.n	80009ea <__aeabi_fdiv+0xc2>
 8000a7c:	01a4      	lsls	r4, r4, #6
 8000a7e:	0a64      	lsrs	r4, r4, #9
 8000a80:	b2c0      	uxtb	r0, r0
 8000a82:	e7a9      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 8000a84:	2480      	movs	r4, #128	@ 0x80
 8000a86:	2200      	movs	r2, #0
 8000a88:	20ff      	movs	r0, #255	@ 0xff
 8000a8a:	03e4      	lsls	r4, r4, #15
 8000a8c:	e7a4      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 8000a8e:	2380      	movs	r3, #128	@ 0x80
 8000a90:	03db      	lsls	r3, r3, #15
 8000a92:	421d      	tst	r5, r3
 8000a94:	d001      	beq.n	8000a9a <__aeabi_fdiv+0x172>
 8000a96:	421c      	tst	r4, r3
 8000a98:	d00b      	beq.n	8000ab2 <__aeabi_fdiv+0x18a>
 8000a9a:	2480      	movs	r4, #128	@ 0x80
 8000a9c:	03e4      	lsls	r4, r4, #15
 8000a9e:	432c      	orrs	r4, r5
 8000aa0:	0264      	lsls	r4, r4, #9
 8000aa2:	4642      	mov	r2, r8
 8000aa4:	20ff      	movs	r0, #255	@ 0xff
 8000aa6:	0a64      	lsrs	r4, r4, #9
 8000aa8:	e796      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 8000aaa:	4646      	mov	r6, r8
 8000aac:	002c      	movs	r4, r5
 8000aae:	2380      	movs	r3, #128	@ 0x80
 8000ab0:	03db      	lsls	r3, r3, #15
 8000ab2:	431c      	orrs	r4, r3
 8000ab4:	0264      	lsls	r4, r4, #9
 8000ab6:	0032      	movs	r2, r6
 8000ab8:	20ff      	movs	r0, #255	@ 0xff
 8000aba:	0a64      	lsrs	r4, r4, #9
 8000abc:	e78c      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 8000abe:	016d      	lsls	r5, r5, #5
 8000ac0:	0160      	lsls	r0, r4, #5
 8000ac2:	4285      	cmp	r5, r0
 8000ac4:	d22d      	bcs.n	8000b22 <__aeabi_fdiv+0x1fa>
 8000ac6:	231b      	movs	r3, #27
 8000ac8:	2400      	movs	r4, #0
 8000aca:	3f01      	subs	r7, #1
 8000acc:	2601      	movs	r6, #1
 8000ace:	0029      	movs	r1, r5
 8000ad0:	0064      	lsls	r4, r4, #1
 8000ad2:	006d      	lsls	r5, r5, #1
 8000ad4:	2900      	cmp	r1, #0
 8000ad6:	db01      	blt.n	8000adc <__aeabi_fdiv+0x1b4>
 8000ad8:	4285      	cmp	r5, r0
 8000ada:	d301      	bcc.n	8000ae0 <__aeabi_fdiv+0x1b8>
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	4334      	orrs	r4, r6
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1f3      	bne.n	8000ace <__aeabi_fdiv+0x1a6>
 8000ae6:	1e6b      	subs	r3, r5, #1
 8000ae8:	419d      	sbcs	r5, r3
 8000aea:	432c      	orrs	r4, r5
 8000aec:	e7b3      	b.n	8000a56 <__aeabi_fdiv+0x12e>
 8000aee:	2301      	movs	r3, #1
 8000af0:	1a1b      	subs	r3, r3, r0
 8000af2:	2b1b      	cmp	r3, #27
 8000af4:	dd00      	ble.n	8000af8 <__aeabi_fdiv+0x1d0>
 8000af6:	e76d      	b.n	80009d4 <__aeabi_fdiv+0xac>
 8000af8:	0021      	movs	r1, r4
 8000afa:	379e      	adds	r7, #158	@ 0x9e
 8000afc:	40d9      	lsrs	r1, r3
 8000afe:	40bc      	lsls	r4, r7
 8000b00:	000b      	movs	r3, r1
 8000b02:	1e61      	subs	r1, r4, #1
 8000b04:	418c      	sbcs	r4, r1
 8000b06:	4323      	orrs	r3, r4
 8000b08:	0759      	lsls	r1, r3, #29
 8000b0a:	d004      	beq.n	8000b16 <__aeabi_fdiv+0x1ee>
 8000b0c:	210f      	movs	r1, #15
 8000b0e:	4019      	ands	r1, r3
 8000b10:	2904      	cmp	r1, #4
 8000b12:	d000      	beq.n	8000b16 <__aeabi_fdiv+0x1ee>
 8000b14:	3304      	adds	r3, #4
 8000b16:	0159      	lsls	r1, r3, #5
 8000b18:	d413      	bmi.n	8000b42 <__aeabi_fdiv+0x21a>
 8000b1a:	019b      	lsls	r3, r3, #6
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	0a5c      	lsrs	r4, r3, #9
 8000b20:	e75a      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 8000b22:	231a      	movs	r3, #26
 8000b24:	2401      	movs	r4, #1
 8000b26:	1a2d      	subs	r5, r5, r0
 8000b28:	e7d0      	b.n	8000acc <__aeabi_fdiv+0x1a4>
 8000b2a:	1e98      	subs	r0, r3, #2
 8000b2c:	4243      	negs	r3, r0
 8000b2e:	4158      	adcs	r0, r3
 8000b30:	4240      	negs	r0, r0
 8000b32:	0032      	movs	r2, r6
 8000b34:	2400      	movs	r4, #0
 8000b36:	b2c0      	uxtb	r0, r0
 8000b38:	e74e      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 8000b3a:	4642      	mov	r2, r8
 8000b3c:	20ff      	movs	r0, #255	@ 0xff
 8000b3e:	2400      	movs	r4, #0
 8000b40:	e74a      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 8000b42:	2001      	movs	r0, #1
 8000b44:	2400      	movs	r4, #0
 8000b46:	e747      	b.n	80009d8 <__aeabi_fdiv+0xb0>
 8000b48:	0800eb00 	.word	0x0800eb00
 8000b4c:	0800eb40 	.word	0x0800eb40
 8000b50:	f7ffffff 	.word	0xf7ffffff

08000b54 <__eqsf2>:
 8000b54:	b570      	push	{r4, r5, r6, lr}
 8000b56:	0042      	lsls	r2, r0, #1
 8000b58:	024e      	lsls	r6, r1, #9
 8000b5a:	004c      	lsls	r4, r1, #1
 8000b5c:	0245      	lsls	r5, r0, #9
 8000b5e:	0a6d      	lsrs	r5, r5, #9
 8000b60:	0e12      	lsrs	r2, r2, #24
 8000b62:	0fc3      	lsrs	r3, r0, #31
 8000b64:	0a76      	lsrs	r6, r6, #9
 8000b66:	0e24      	lsrs	r4, r4, #24
 8000b68:	0fc9      	lsrs	r1, r1, #31
 8000b6a:	2aff      	cmp	r2, #255	@ 0xff
 8000b6c:	d010      	beq.n	8000b90 <__eqsf2+0x3c>
 8000b6e:	2cff      	cmp	r4, #255	@ 0xff
 8000b70:	d00c      	beq.n	8000b8c <__eqsf2+0x38>
 8000b72:	2001      	movs	r0, #1
 8000b74:	42a2      	cmp	r2, r4
 8000b76:	d10a      	bne.n	8000b8e <__eqsf2+0x3a>
 8000b78:	42b5      	cmp	r5, r6
 8000b7a:	d108      	bne.n	8000b8e <__eqsf2+0x3a>
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d00f      	beq.n	8000ba0 <__eqsf2+0x4c>
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	d104      	bne.n	8000b8e <__eqsf2+0x3a>
 8000b84:	0028      	movs	r0, r5
 8000b86:	1e43      	subs	r3, r0, #1
 8000b88:	4198      	sbcs	r0, r3
 8000b8a:	e000      	b.n	8000b8e <__eqsf2+0x3a>
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
 8000b90:	2001      	movs	r0, #1
 8000b92:	2cff      	cmp	r4, #255	@ 0xff
 8000b94:	d1fb      	bne.n	8000b8e <__eqsf2+0x3a>
 8000b96:	4335      	orrs	r5, r6
 8000b98:	d1f9      	bne.n	8000b8e <__eqsf2+0x3a>
 8000b9a:	404b      	eors	r3, r1
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	e7f6      	b.n	8000b8e <__eqsf2+0x3a>
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	e7f4      	b.n	8000b8e <__eqsf2+0x3a>

08000ba4 <__gesf2>:
 8000ba4:	b530      	push	{r4, r5, lr}
 8000ba6:	0042      	lsls	r2, r0, #1
 8000ba8:	0244      	lsls	r4, r0, #9
 8000baa:	024d      	lsls	r5, r1, #9
 8000bac:	0fc3      	lsrs	r3, r0, #31
 8000bae:	0048      	lsls	r0, r1, #1
 8000bb0:	0a64      	lsrs	r4, r4, #9
 8000bb2:	0e12      	lsrs	r2, r2, #24
 8000bb4:	0a6d      	lsrs	r5, r5, #9
 8000bb6:	0e00      	lsrs	r0, r0, #24
 8000bb8:	0fc9      	lsrs	r1, r1, #31
 8000bba:	2aff      	cmp	r2, #255	@ 0xff
 8000bbc:	d018      	beq.n	8000bf0 <__gesf2+0x4c>
 8000bbe:	28ff      	cmp	r0, #255	@ 0xff
 8000bc0:	d00a      	beq.n	8000bd8 <__gesf2+0x34>
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d11e      	bne.n	8000c04 <__gesf2+0x60>
 8000bc6:	2800      	cmp	r0, #0
 8000bc8:	d10a      	bne.n	8000be0 <__gesf2+0x3c>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d029      	beq.n	8000c22 <__gesf2+0x7e>
 8000bce:	2c00      	cmp	r4, #0
 8000bd0:	d12d      	bne.n	8000c2e <__gesf2+0x8a>
 8000bd2:	0048      	lsls	r0, r1, #1
 8000bd4:	3801      	subs	r0, #1
 8000bd6:	bd30      	pop	{r4, r5, pc}
 8000bd8:	2d00      	cmp	r5, #0
 8000bda:	d125      	bne.n	8000c28 <__gesf2+0x84>
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	d101      	bne.n	8000be4 <__gesf2+0x40>
 8000be0:	2c00      	cmp	r4, #0
 8000be2:	d0f6      	beq.n	8000bd2 <__gesf2+0x2e>
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d019      	beq.n	8000c1c <__gesf2+0x78>
 8000be8:	2001      	movs	r0, #1
 8000bea:	425b      	negs	r3, r3
 8000bec:	4318      	orrs	r0, r3
 8000bee:	e7f2      	b.n	8000bd6 <__gesf2+0x32>
 8000bf0:	2c00      	cmp	r4, #0
 8000bf2:	d119      	bne.n	8000c28 <__gesf2+0x84>
 8000bf4:	28ff      	cmp	r0, #255	@ 0xff
 8000bf6:	d1f7      	bne.n	8000be8 <__gesf2+0x44>
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	d115      	bne.n	8000c28 <__gesf2+0x84>
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d1f2      	bne.n	8000be8 <__gesf2+0x44>
 8000c02:	e7e8      	b.n	8000bd6 <__gesf2+0x32>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d0ef      	beq.n	8000be8 <__gesf2+0x44>
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	d1ed      	bne.n	8000be8 <__gesf2+0x44>
 8000c0c:	4282      	cmp	r2, r0
 8000c0e:	dceb      	bgt.n	8000be8 <__gesf2+0x44>
 8000c10:	db04      	blt.n	8000c1c <__gesf2+0x78>
 8000c12:	42ac      	cmp	r4, r5
 8000c14:	d8e8      	bhi.n	8000be8 <__gesf2+0x44>
 8000c16:	2000      	movs	r0, #0
 8000c18:	42ac      	cmp	r4, r5
 8000c1a:	d2dc      	bcs.n	8000bd6 <__gesf2+0x32>
 8000c1c:	0058      	lsls	r0, r3, #1
 8000c1e:	3801      	subs	r0, #1
 8000c20:	e7d9      	b.n	8000bd6 <__gesf2+0x32>
 8000c22:	2c00      	cmp	r4, #0
 8000c24:	d0d7      	beq.n	8000bd6 <__gesf2+0x32>
 8000c26:	e7df      	b.n	8000be8 <__gesf2+0x44>
 8000c28:	2002      	movs	r0, #2
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	e7d3      	b.n	8000bd6 <__gesf2+0x32>
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d1da      	bne.n	8000be8 <__gesf2+0x44>
 8000c32:	e7ee      	b.n	8000c12 <__gesf2+0x6e>

08000c34 <__lesf2>:
 8000c34:	b530      	push	{r4, r5, lr}
 8000c36:	0042      	lsls	r2, r0, #1
 8000c38:	0244      	lsls	r4, r0, #9
 8000c3a:	024d      	lsls	r5, r1, #9
 8000c3c:	0fc3      	lsrs	r3, r0, #31
 8000c3e:	0048      	lsls	r0, r1, #1
 8000c40:	0a64      	lsrs	r4, r4, #9
 8000c42:	0e12      	lsrs	r2, r2, #24
 8000c44:	0a6d      	lsrs	r5, r5, #9
 8000c46:	0e00      	lsrs	r0, r0, #24
 8000c48:	0fc9      	lsrs	r1, r1, #31
 8000c4a:	2aff      	cmp	r2, #255	@ 0xff
 8000c4c:	d017      	beq.n	8000c7e <__lesf2+0x4a>
 8000c4e:	28ff      	cmp	r0, #255	@ 0xff
 8000c50:	d00a      	beq.n	8000c68 <__lesf2+0x34>
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	d11b      	bne.n	8000c8e <__lesf2+0x5a>
 8000c56:	2800      	cmp	r0, #0
 8000c58:	d10a      	bne.n	8000c70 <__lesf2+0x3c>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d01d      	beq.n	8000c9a <__lesf2+0x66>
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d12d      	bne.n	8000cbe <__lesf2+0x8a>
 8000c62:	0048      	lsls	r0, r1, #1
 8000c64:	3801      	subs	r0, #1
 8000c66:	e011      	b.n	8000c8c <__lesf2+0x58>
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d10e      	bne.n	8000c8a <__lesf2+0x56>
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	d101      	bne.n	8000c74 <__lesf2+0x40>
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d0f6      	beq.n	8000c62 <__lesf2+0x2e>
 8000c74:	428b      	cmp	r3, r1
 8000c76:	d10c      	bne.n	8000c92 <__lesf2+0x5e>
 8000c78:	0058      	lsls	r0, r3, #1
 8000c7a:	3801      	subs	r0, #1
 8000c7c:	e006      	b.n	8000c8c <__lesf2+0x58>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d103      	bne.n	8000c8a <__lesf2+0x56>
 8000c82:	28ff      	cmp	r0, #255	@ 0xff
 8000c84:	d105      	bne.n	8000c92 <__lesf2+0x5e>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d015      	beq.n	8000cb6 <__lesf2+0x82>
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	bd30      	pop	{r4, r5, pc}
 8000c8e:	2800      	cmp	r0, #0
 8000c90:	d106      	bne.n	8000ca0 <__lesf2+0x6c>
 8000c92:	2001      	movs	r0, #1
 8000c94:	425b      	negs	r3, r3
 8000c96:	4318      	orrs	r0, r3
 8000c98:	e7f8      	b.n	8000c8c <__lesf2+0x58>
 8000c9a:	2c00      	cmp	r4, #0
 8000c9c:	d0f6      	beq.n	8000c8c <__lesf2+0x58>
 8000c9e:	e7f8      	b.n	8000c92 <__lesf2+0x5e>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d1f6      	bne.n	8000c92 <__lesf2+0x5e>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	dcf4      	bgt.n	8000c92 <__lesf2+0x5e>
 8000ca8:	dbe6      	blt.n	8000c78 <__lesf2+0x44>
 8000caa:	42ac      	cmp	r4, r5
 8000cac:	d8f1      	bhi.n	8000c92 <__lesf2+0x5e>
 8000cae:	2000      	movs	r0, #0
 8000cb0:	42ac      	cmp	r4, r5
 8000cb2:	d2eb      	bcs.n	8000c8c <__lesf2+0x58>
 8000cb4:	e7e0      	b.n	8000c78 <__lesf2+0x44>
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d1ea      	bne.n	8000c92 <__lesf2+0x5e>
 8000cbc:	e7e6      	b.n	8000c8c <__lesf2+0x58>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d1e7      	bne.n	8000c92 <__lesf2+0x5e>
 8000cc2:	e7f2      	b.n	8000caa <__lesf2+0x76>

08000cc4 <__aeabi_fmul>:
 8000cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc6:	464f      	mov	r7, r9
 8000cc8:	4646      	mov	r6, r8
 8000cca:	46d6      	mov	lr, sl
 8000ccc:	0044      	lsls	r4, r0, #1
 8000cce:	b5c0      	push	{r6, r7, lr}
 8000cd0:	0246      	lsls	r6, r0, #9
 8000cd2:	1c0f      	adds	r7, r1, #0
 8000cd4:	0a76      	lsrs	r6, r6, #9
 8000cd6:	0e24      	lsrs	r4, r4, #24
 8000cd8:	0fc5      	lsrs	r5, r0, #31
 8000cda:	2c00      	cmp	r4, #0
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_fmul+0x1c>
 8000cde:	e0da      	b.n	8000e96 <__aeabi_fmul+0x1d2>
 8000ce0:	2cff      	cmp	r4, #255	@ 0xff
 8000ce2:	d074      	beq.n	8000dce <__aeabi_fmul+0x10a>
 8000ce4:	2380      	movs	r3, #128	@ 0x80
 8000ce6:	00f6      	lsls	r6, r6, #3
 8000ce8:	04db      	lsls	r3, r3, #19
 8000cea:	431e      	orrs	r6, r3
 8000cec:	2300      	movs	r3, #0
 8000cee:	4699      	mov	r9, r3
 8000cf0:	469a      	mov	sl, r3
 8000cf2:	3c7f      	subs	r4, #127	@ 0x7f
 8000cf4:	027b      	lsls	r3, r7, #9
 8000cf6:	0a5b      	lsrs	r3, r3, #9
 8000cf8:	4698      	mov	r8, r3
 8000cfa:	007b      	lsls	r3, r7, #1
 8000cfc:	0e1b      	lsrs	r3, r3, #24
 8000cfe:	0fff      	lsrs	r7, r7, #31
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d074      	beq.n	8000dee <__aeabi_fmul+0x12a>
 8000d04:	2bff      	cmp	r3, #255	@ 0xff
 8000d06:	d100      	bne.n	8000d0a <__aeabi_fmul+0x46>
 8000d08:	e08e      	b.n	8000e28 <__aeabi_fmul+0x164>
 8000d0a:	4642      	mov	r2, r8
 8000d0c:	2180      	movs	r1, #128	@ 0x80
 8000d0e:	00d2      	lsls	r2, r2, #3
 8000d10:	04c9      	lsls	r1, r1, #19
 8000d12:	4311      	orrs	r1, r2
 8000d14:	3b7f      	subs	r3, #127	@ 0x7f
 8000d16:	002a      	movs	r2, r5
 8000d18:	18e4      	adds	r4, r4, r3
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	407a      	eors	r2, r7
 8000d1e:	4688      	mov	r8, r1
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	2b0a      	cmp	r3, #10
 8000d24:	dc75      	bgt.n	8000e12 <__aeabi_fmul+0x14e>
 8000d26:	464b      	mov	r3, r9
 8000d28:	2000      	movs	r0, #0
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	dd0f      	ble.n	8000d4e <__aeabi_fmul+0x8a>
 8000d2e:	4649      	mov	r1, r9
 8000d30:	2301      	movs	r3, #1
 8000d32:	408b      	lsls	r3, r1
 8000d34:	21a6      	movs	r1, #166	@ 0xa6
 8000d36:	00c9      	lsls	r1, r1, #3
 8000d38:	420b      	tst	r3, r1
 8000d3a:	d169      	bne.n	8000e10 <__aeabi_fmul+0x14c>
 8000d3c:	2190      	movs	r1, #144	@ 0x90
 8000d3e:	0089      	lsls	r1, r1, #2
 8000d40:	420b      	tst	r3, r1
 8000d42:	d000      	beq.n	8000d46 <__aeabi_fmul+0x82>
 8000d44:	e100      	b.n	8000f48 <__aeabi_fmul+0x284>
 8000d46:	2188      	movs	r1, #136	@ 0x88
 8000d48:	4219      	tst	r1, r3
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_fmul+0x8a>
 8000d4c:	e0f5      	b.n	8000f3a <__aeabi_fmul+0x276>
 8000d4e:	4641      	mov	r1, r8
 8000d50:	0409      	lsls	r1, r1, #16
 8000d52:	0c09      	lsrs	r1, r1, #16
 8000d54:	4643      	mov	r3, r8
 8000d56:	0008      	movs	r0, r1
 8000d58:	0c35      	lsrs	r5, r6, #16
 8000d5a:	0436      	lsls	r6, r6, #16
 8000d5c:	0c1b      	lsrs	r3, r3, #16
 8000d5e:	0c36      	lsrs	r6, r6, #16
 8000d60:	4370      	muls	r0, r6
 8000d62:	4369      	muls	r1, r5
 8000d64:	435e      	muls	r6, r3
 8000d66:	435d      	muls	r5, r3
 8000d68:	1876      	adds	r6, r6, r1
 8000d6a:	0c03      	lsrs	r3, r0, #16
 8000d6c:	199b      	adds	r3, r3, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d903      	bls.n	8000d7a <__aeabi_fmul+0xb6>
 8000d72:	2180      	movs	r1, #128	@ 0x80
 8000d74:	0249      	lsls	r1, r1, #9
 8000d76:	468c      	mov	ip, r1
 8000d78:	4465      	add	r5, ip
 8000d7a:	0400      	lsls	r0, r0, #16
 8000d7c:	0419      	lsls	r1, r3, #16
 8000d7e:	0c00      	lsrs	r0, r0, #16
 8000d80:	1809      	adds	r1, r1, r0
 8000d82:	018e      	lsls	r6, r1, #6
 8000d84:	1e70      	subs	r0, r6, #1
 8000d86:	4186      	sbcs	r6, r0
 8000d88:	0c1b      	lsrs	r3, r3, #16
 8000d8a:	0e89      	lsrs	r1, r1, #26
 8000d8c:	195b      	adds	r3, r3, r5
 8000d8e:	430e      	orrs	r6, r1
 8000d90:	019b      	lsls	r3, r3, #6
 8000d92:	431e      	orrs	r6, r3
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	d46c      	bmi.n	8000e72 <__aeabi_fmul+0x1ae>
 8000d98:	0023      	movs	r3, r4
 8000d9a:	337f      	adds	r3, #127	@ 0x7f
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	dc00      	bgt.n	8000da2 <__aeabi_fmul+0xde>
 8000da0:	e0b1      	b.n	8000f06 <__aeabi_fmul+0x242>
 8000da2:	0015      	movs	r5, r2
 8000da4:	0771      	lsls	r1, r6, #29
 8000da6:	d00b      	beq.n	8000dc0 <__aeabi_fmul+0xfc>
 8000da8:	200f      	movs	r0, #15
 8000daa:	0021      	movs	r1, r4
 8000dac:	4030      	ands	r0, r6
 8000dae:	2804      	cmp	r0, #4
 8000db0:	d006      	beq.n	8000dc0 <__aeabi_fmul+0xfc>
 8000db2:	3604      	adds	r6, #4
 8000db4:	0132      	lsls	r2, r6, #4
 8000db6:	d503      	bpl.n	8000dc0 <__aeabi_fmul+0xfc>
 8000db8:	4b6e      	ldr	r3, [pc, #440]	@ (8000f74 <__aeabi_fmul+0x2b0>)
 8000dba:	401e      	ands	r6, r3
 8000dbc:	000b      	movs	r3, r1
 8000dbe:	3380      	adds	r3, #128	@ 0x80
 8000dc0:	2bfe      	cmp	r3, #254	@ 0xfe
 8000dc2:	dd00      	ble.n	8000dc6 <__aeabi_fmul+0x102>
 8000dc4:	e0bd      	b.n	8000f42 <__aeabi_fmul+0x27e>
 8000dc6:	01b2      	lsls	r2, r6, #6
 8000dc8:	0a52      	lsrs	r2, r2, #9
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	e048      	b.n	8000e60 <__aeabi_fmul+0x19c>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d000      	beq.n	8000dd4 <__aeabi_fmul+0x110>
 8000dd2:	e092      	b.n	8000efa <__aeabi_fmul+0x236>
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	4699      	mov	r9, r3
 8000dd8:	3b06      	subs	r3, #6
 8000dda:	469a      	mov	sl, r3
 8000ddc:	027b      	lsls	r3, r7, #9
 8000dde:	0a5b      	lsrs	r3, r3, #9
 8000de0:	4698      	mov	r8, r3
 8000de2:	007b      	lsls	r3, r7, #1
 8000de4:	24ff      	movs	r4, #255	@ 0xff
 8000de6:	0e1b      	lsrs	r3, r3, #24
 8000de8:	0fff      	lsrs	r7, r7, #31
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d18a      	bne.n	8000d04 <__aeabi_fmul+0x40>
 8000dee:	4642      	mov	r2, r8
 8000df0:	2a00      	cmp	r2, #0
 8000df2:	d164      	bne.n	8000ebe <__aeabi_fmul+0x1fa>
 8000df4:	4649      	mov	r1, r9
 8000df6:	3201      	adds	r2, #1
 8000df8:	4311      	orrs	r1, r2
 8000dfa:	4689      	mov	r9, r1
 8000dfc:	290a      	cmp	r1, #10
 8000dfe:	dc08      	bgt.n	8000e12 <__aeabi_fmul+0x14e>
 8000e00:	407d      	eors	r5, r7
 8000e02:	2001      	movs	r0, #1
 8000e04:	b2ea      	uxtb	r2, r5
 8000e06:	2902      	cmp	r1, #2
 8000e08:	dc91      	bgt.n	8000d2e <__aeabi_fmul+0x6a>
 8000e0a:	0015      	movs	r5, r2
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	e027      	b.n	8000e60 <__aeabi_fmul+0x19c>
 8000e10:	0015      	movs	r5, r2
 8000e12:	4653      	mov	r3, sl
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d100      	bne.n	8000e1a <__aeabi_fmul+0x156>
 8000e18:	e093      	b.n	8000f42 <__aeabi_fmul+0x27e>
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d01a      	beq.n	8000e54 <__aeabi_fmul+0x190>
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d12c      	bne.n	8000e7c <__aeabi_fmul+0x1b8>
 8000e22:	2300      	movs	r3, #0
 8000e24:	2200      	movs	r2, #0
 8000e26:	e01b      	b.n	8000e60 <__aeabi_fmul+0x19c>
 8000e28:	4643      	mov	r3, r8
 8000e2a:	34ff      	adds	r4, #255	@ 0xff
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d055      	beq.n	8000edc <__aeabi_fmul+0x218>
 8000e30:	2103      	movs	r1, #3
 8000e32:	464b      	mov	r3, r9
 8000e34:	430b      	orrs	r3, r1
 8000e36:	0019      	movs	r1, r3
 8000e38:	2b0a      	cmp	r3, #10
 8000e3a:	dc00      	bgt.n	8000e3e <__aeabi_fmul+0x17a>
 8000e3c:	e092      	b.n	8000f64 <__aeabi_fmul+0x2a0>
 8000e3e:	2b0f      	cmp	r3, #15
 8000e40:	d000      	beq.n	8000e44 <__aeabi_fmul+0x180>
 8000e42:	e08c      	b.n	8000f5e <__aeabi_fmul+0x29a>
 8000e44:	2280      	movs	r2, #128	@ 0x80
 8000e46:	03d2      	lsls	r2, r2, #15
 8000e48:	4216      	tst	r6, r2
 8000e4a:	d003      	beq.n	8000e54 <__aeabi_fmul+0x190>
 8000e4c:	4643      	mov	r3, r8
 8000e4e:	4213      	tst	r3, r2
 8000e50:	d100      	bne.n	8000e54 <__aeabi_fmul+0x190>
 8000e52:	e07d      	b.n	8000f50 <__aeabi_fmul+0x28c>
 8000e54:	2280      	movs	r2, #128	@ 0x80
 8000e56:	03d2      	lsls	r2, r2, #15
 8000e58:	4332      	orrs	r2, r6
 8000e5a:	0252      	lsls	r2, r2, #9
 8000e5c:	0a52      	lsrs	r2, r2, #9
 8000e5e:	23ff      	movs	r3, #255	@ 0xff
 8000e60:	05d8      	lsls	r0, r3, #23
 8000e62:	07ed      	lsls	r5, r5, #31
 8000e64:	4310      	orrs	r0, r2
 8000e66:	4328      	orrs	r0, r5
 8000e68:	bce0      	pop	{r5, r6, r7}
 8000e6a:	46ba      	mov	sl, r7
 8000e6c:	46b1      	mov	r9, r6
 8000e6e:	46a8      	mov	r8, r5
 8000e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e72:	2301      	movs	r3, #1
 8000e74:	0015      	movs	r5, r2
 8000e76:	0871      	lsrs	r1, r6, #1
 8000e78:	401e      	ands	r6, r3
 8000e7a:	430e      	orrs	r6, r1
 8000e7c:	0023      	movs	r3, r4
 8000e7e:	3380      	adds	r3, #128	@ 0x80
 8000e80:	1c61      	adds	r1, r4, #1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	dd41      	ble.n	8000f0a <__aeabi_fmul+0x246>
 8000e86:	0772      	lsls	r2, r6, #29
 8000e88:	d094      	beq.n	8000db4 <__aeabi_fmul+0xf0>
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	4032      	ands	r2, r6
 8000e8e:	2a04      	cmp	r2, #4
 8000e90:	d000      	beq.n	8000e94 <__aeabi_fmul+0x1d0>
 8000e92:	e78e      	b.n	8000db2 <__aeabi_fmul+0xee>
 8000e94:	e78e      	b.n	8000db4 <__aeabi_fmul+0xf0>
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d105      	bne.n	8000ea6 <__aeabi_fmul+0x1e2>
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	4699      	mov	r9, r3
 8000e9e:	3b03      	subs	r3, #3
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	469a      	mov	sl, r3
 8000ea4:	e726      	b.n	8000cf4 <__aeabi_fmul+0x30>
 8000ea6:	0030      	movs	r0, r6
 8000ea8:	f002 fbea 	bl	8003680 <__clzsi2>
 8000eac:	2476      	movs	r4, #118	@ 0x76
 8000eae:	1f43      	subs	r3, r0, #5
 8000eb0:	409e      	lsls	r6, r3
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	4264      	negs	r4, r4
 8000eb6:	4699      	mov	r9, r3
 8000eb8:	469a      	mov	sl, r3
 8000eba:	1a24      	subs	r4, r4, r0
 8000ebc:	e71a      	b.n	8000cf4 <__aeabi_fmul+0x30>
 8000ebe:	4640      	mov	r0, r8
 8000ec0:	f002 fbde 	bl	8003680 <__clzsi2>
 8000ec4:	464b      	mov	r3, r9
 8000ec6:	1a24      	subs	r4, r4, r0
 8000ec8:	3c76      	subs	r4, #118	@ 0x76
 8000eca:	2b0a      	cmp	r3, #10
 8000ecc:	dca1      	bgt.n	8000e12 <__aeabi_fmul+0x14e>
 8000ece:	4643      	mov	r3, r8
 8000ed0:	3805      	subs	r0, #5
 8000ed2:	4083      	lsls	r3, r0
 8000ed4:	407d      	eors	r5, r7
 8000ed6:	4698      	mov	r8, r3
 8000ed8:	b2ea      	uxtb	r2, r5
 8000eda:	e724      	b.n	8000d26 <__aeabi_fmul+0x62>
 8000edc:	464a      	mov	r2, r9
 8000ede:	3302      	adds	r3, #2
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	002a      	movs	r2, r5
 8000ee4:	407a      	eors	r2, r7
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	2b0a      	cmp	r3, #10
 8000eea:	dc92      	bgt.n	8000e12 <__aeabi_fmul+0x14e>
 8000eec:	4649      	mov	r1, r9
 8000eee:	0015      	movs	r5, r2
 8000ef0:	2900      	cmp	r1, #0
 8000ef2:	d026      	beq.n	8000f42 <__aeabi_fmul+0x27e>
 8000ef4:	4699      	mov	r9, r3
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	e719      	b.n	8000d2e <__aeabi_fmul+0x6a>
 8000efa:	230c      	movs	r3, #12
 8000efc:	4699      	mov	r9, r3
 8000efe:	3b09      	subs	r3, #9
 8000f00:	24ff      	movs	r4, #255	@ 0xff
 8000f02:	469a      	mov	sl, r3
 8000f04:	e6f6      	b.n	8000cf4 <__aeabi_fmul+0x30>
 8000f06:	0015      	movs	r5, r2
 8000f08:	0021      	movs	r1, r4
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b1b      	cmp	r3, #27
 8000f10:	dd00      	ble.n	8000f14 <__aeabi_fmul+0x250>
 8000f12:	e786      	b.n	8000e22 <__aeabi_fmul+0x15e>
 8000f14:	319e      	adds	r1, #158	@ 0x9e
 8000f16:	0032      	movs	r2, r6
 8000f18:	408e      	lsls	r6, r1
 8000f1a:	40da      	lsrs	r2, r3
 8000f1c:	1e73      	subs	r3, r6, #1
 8000f1e:	419e      	sbcs	r6, r3
 8000f20:	4332      	orrs	r2, r6
 8000f22:	0753      	lsls	r3, r2, #29
 8000f24:	d004      	beq.n	8000f30 <__aeabi_fmul+0x26c>
 8000f26:	230f      	movs	r3, #15
 8000f28:	4013      	ands	r3, r2
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	d000      	beq.n	8000f30 <__aeabi_fmul+0x26c>
 8000f2e:	3204      	adds	r2, #4
 8000f30:	0153      	lsls	r3, r2, #5
 8000f32:	d510      	bpl.n	8000f56 <__aeabi_fmul+0x292>
 8000f34:	2301      	movs	r3, #1
 8000f36:	2200      	movs	r2, #0
 8000f38:	e792      	b.n	8000e60 <__aeabi_fmul+0x19c>
 8000f3a:	003d      	movs	r5, r7
 8000f3c:	4646      	mov	r6, r8
 8000f3e:	4682      	mov	sl, r0
 8000f40:	e767      	b.n	8000e12 <__aeabi_fmul+0x14e>
 8000f42:	23ff      	movs	r3, #255	@ 0xff
 8000f44:	2200      	movs	r2, #0
 8000f46:	e78b      	b.n	8000e60 <__aeabi_fmul+0x19c>
 8000f48:	2280      	movs	r2, #128	@ 0x80
 8000f4a:	2500      	movs	r5, #0
 8000f4c:	03d2      	lsls	r2, r2, #15
 8000f4e:	e786      	b.n	8000e5e <__aeabi_fmul+0x19a>
 8000f50:	003d      	movs	r5, r7
 8000f52:	431a      	orrs	r2, r3
 8000f54:	e783      	b.n	8000e5e <__aeabi_fmul+0x19a>
 8000f56:	0192      	lsls	r2, r2, #6
 8000f58:	2300      	movs	r3, #0
 8000f5a:	0a52      	lsrs	r2, r2, #9
 8000f5c:	e780      	b.n	8000e60 <__aeabi_fmul+0x19c>
 8000f5e:	003d      	movs	r5, r7
 8000f60:	4646      	mov	r6, r8
 8000f62:	e777      	b.n	8000e54 <__aeabi_fmul+0x190>
 8000f64:	002a      	movs	r2, r5
 8000f66:	2301      	movs	r3, #1
 8000f68:	407a      	eors	r2, r7
 8000f6a:	408b      	lsls	r3, r1
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	e6e9      	b.n	8000d46 <__aeabi_fmul+0x82>
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	f7ffffff 	.word	0xf7ffffff

08000f78 <__aeabi_fsub>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	4647      	mov	r7, r8
 8000f7c:	46ce      	mov	lr, r9
 8000f7e:	0243      	lsls	r3, r0, #9
 8000f80:	b580      	push	{r7, lr}
 8000f82:	0a5f      	lsrs	r7, r3, #9
 8000f84:	099b      	lsrs	r3, r3, #6
 8000f86:	0045      	lsls	r5, r0, #1
 8000f88:	004a      	lsls	r2, r1, #1
 8000f8a:	469c      	mov	ip, r3
 8000f8c:	024b      	lsls	r3, r1, #9
 8000f8e:	0fc4      	lsrs	r4, r0, #31
 8000f90:	0fce      	lsrs	r6, r1, #31
 8000f92:	0e2d      	lsrs	r5, r5, #24
 8000f94:	0a58      	lsrs	r0, r3, #9
 8000f96:	0e12      	lsrs	r2, r2, #24
 8000f98:	0999      	lsrs	r1, r3, #6
 8000f9a:	2aff      	cmp	r2, #255	@ 0xff
 8000f9c:	d06b      	beq.n	8001076 <__aeabi_fsub+0xfe>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	405e      	eors	r6, r3
 8000fa2:	1aab      	subs	r3, r5, r2
 8000fa4:	42b4      	cmp	r4, r6
 8000fa6:	d04b      	beq.n	8001040 <__aeabi_fsub+0xc8>
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	dc00      	bgt.n	8000fae <__aeabi_fsub+0x36>
 8000fac:	e0ff      	b.n	80011ae <__aeabi_fsub+0x236>
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_fsub+0x3c>
 8000fb2:	e088      	b.n	80010c6 <__aeabi_fsub+0x14e>
 8000fb4:	2dff      	cmp	r5, #255	@ 0xff
 8000fb6:	d100      	bne.n	8000fba <__aeabi_fsub+0x42>
 8000fb8:	e0ef      	b.n	800119a <__aeabi_fsub+0x222>
 8000fba:	2280      	movs	r2, #128	@ 0x80
 8000fbc:	04d2      	lsls	r2, r2, #19
 8000fbe:	4311      	orrs	r1, r2
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	2b1b      	cmp	r3, #27
 8000fc4:	dc08      	bgt.n	8000fd8 <__aeabi_fsub+0x60>
 8000fc6:	0008      	movs	r0, r1
 8000fc8:	2220      	movs	r2, #32
 8000fca:	40d8      	lsrs	r0, r3
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	4099      	lsls	r1, r3
 8000fd0:	000b      	movs	r3, r1
 8000fd2:	1e5a      	subs	r2, r3, #1
 8000fd4:	4193      	sbcs	r3, r2
 8000fd6:	4318      	orrs	r0, r3
 8000fd8:	4663      	mov	r3, ip
 8000fda:	1a1b      	subs	r3, r3, r0
 8000fdc:	469c      	mov	ip, r3
 8000fde:	4663      	mov	r3, ip
 8000fe0:	015b      	lsls	r3, r3, #5
 8000fe2:	d400      	bmi.n	8000fe6 <__aeabi_fsub+0x6e>
 8000fe4:	e0cd      	b.n	8001182 <__aeabi_fsub+0x20a>
 8000fe6:	4663      	mov	r3, ip
 8000fe8:	019f      	lsls	r7, r3, #6
 8000fea:	09bf      	lsrs	r7, r7, #6
 8000fec:	0038      	movs	r0, r7
 8000fee:	f002 fb47 	bl	8003680 <__clzsi2>
 8000ff2:	003b      	movs	r3, r7
 8000ff4:	3805      	subs	r0, #5
 8000ff6:	4083      	lsls	r3, r0
 8000ff8:	4285      	cmp	r5, r0
 8000ffa:	dc00      	bgt.n	8000ffe <__aeabi_fsub+0x86>
 8000ffc:	e0a2      	b.n	8001144 <__aeabi_fsub+0x1cc>
 8000ffe:	4ab7      	ldr	r2, [pc, #732]	@ (80012dc <__aeabi_fsub+0x364>)
 8001000:	1a2d      	subs	r5, r5, r0
 8001002:	401a      	ands	r2, r3
 8001004:	4694      	mov	ip, r2
 8001006:	075a      	lsls	r2, r3, #29
 8001008:	d100      	bne.n	800100c <__aeabi_fsub+0x94>
 800100a:	e0c3      	b.n	8001194 <__aeabi_fsub+0x21c>
 800100c:	220f      	movs	r2, #15
 800100e:	4013      	ands	r3, r2
 8001010:	2b04      	cmp	r3, #4
 8001012:	d100      	bne.n	8001016 <__aeabi_fsub+0x9e>
 8001014:	e0be      	b.n	8001194 <__aeabi_fsub+0x21c>
 8001016:	2304      	movs	r3, #4
 8001018:	4698      	mov	r8, r3
 800101a:	44c4      	add	ip, r8
 800101c:	4663      	mov	r3, ip
 800101e:	015b      	lsls	r3, r3, #5
 8001020:	d400      	bmi.n	8001024 <__aeabi_fsub+0xac>
 8001022:	e0b7      	b.n	8001194 <__aeabi_fsub+0x21c>
 8001024:	1c68      	adds	r0, r5, #1
 8001026:	2dfe      	cmp	r5, #254	@ 0xfe
 8001028:	d000      	beq.n	800102c <__aeabi_fsub+0xb4>
 800102a:	e0a5      	b.n	8001178 <__aeabi_fsub+0x200>
 800102c:	20ff      	movs	r0, #255	@ 0xff
 800102e:	2200      	movs	r2, #0
 8001030:	05c0      	lsls	r0, r0, #23
 8001032:	4310      	orrs	r0, r2
 8001034:	07e4      	lsls	r4, r4, #31
 8001036:	4320      	orrs	r0, r4
 8001038:	bcc0      	pop	{r6, r7}
 800103a:	46b9      	mov	r9, r7
 800103c:	46b0      	mov	r8, r6
 800103e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001040:	2b00      	cmp	r3, #0
 8001042:	dc00      	bgt.n	8001046 <__aeabi_fsub+0xce>
 8001044:	e1eb      	b.n	800141e <__aeabi_fsub+0x4a6>
 8001046:	2a00      	cmp	r2, #0
 8001048:	d046      	beq.n	80010d8 <__aeabi_fsub+0x160>
 800104a:	2dff      	cmp	r5, #255	@ 0xff
 800104c:	d100      	bne.n	8001050 <__aeabi_fsub+0xd8>
 800104e:	e0a4      	b.n	800119a <__aeabi_fsub+0x222>
 8001050:	2280      	movs	r2, #128	@ 0x80
 8001052:	04d2      	lsls	r2, r2, #19
 8001054:	4311      	orrs	r1, r2
 8001056:	2b1b      	cmp	r3, #27
 8001058:	dc00      	bgt.n	800105c <__aeabi_fsub+0xe4>
 800105a:	e0fb      	b.n	8001254 <__aeabi_fsub+0x2dc>
 800105c:	2305      	movs	r3, #5
 800105e:	4698      	mov	r8, r3
 8001060:	002b      	movs	r3, r5
 8001062:	44c4      	add	ip, r8
 8001064:	4662      	mov	r2, ip
 8001066:	08d7      	lsrs	r7, r2, #3
 8001068:	2bff      	cmp	r3, #255	@ 0xff
 800106a:	d100      	bne.n	800106e <__aeabi_fsub+0xf6>
 800106c:	e095      	b.n	800119a <__aeabi_fsub+0x222>
 800106e:	027a      	lsls	r2, r7, #9
 8001070:	0a52      	lsrs	r2, r2, #9
 8001072:	b2d8      	uxtb	r0, r3
 8001074:	e7dc      	b.n	8001030 <__aeabi_fsub+0xb8>
 8001076:	002b      	movs	r3, r5
 8001078:	3bff      	subs	r3, #255	@ 0xff
 800107a:	4699      	mov	r9, r3
 800107c:	2900      	cmp	r1, #0
 800107e:	d118      	bne.n	80010b2 <__aeabi_fsub+0x13a>
 8001080:	2301      	movs	r3, #1
 8001082:	405e      	eors	r6, r3
 8001084:	42b4      	cmp	r4, r6
 8001086:	d100      	bne.n	800108a <__aeabi_fsub+0x112>
 8001088:	e0ca      	b.n	8001220 <__aeabi_fsub+0x2a8>
 800108a:	464b      	mov	r3, r9
 800108c:	2b00      	cmp	r3, #0
 800108e:	d02d      	beq.n	80010ec <__aeabi_fsub+0x174>
 8001090:	2d00      	cmp	r5, #0
 8001092:	d000      	beq.n	8001096 <__aeabi_fsub+0x11e>
 8001094:	e13c      	b.n	8001310 <__aeabi_fsub+0x398>
 8001096:	23ff      	movs	r3, #255	@ 0xff
 8001098:	4664      	mov	r4, ip
 800109a:	2c00      	cmp	r4, #0
 800109c:	d100      	bne.n	80010a0 <__aeabi_fsub+0x128>
 800109e:	e15f      	b.n	8001360 <__aeabi_fsub+0x3e8>
 80010a0:	1e5d      	subs	r5, r3, #1
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d100      	bne.n	80010a8 <__aeabi_fsub+0x130>
 80010a6:	e174      	b.n	8001392 <__aeabi_fsub+0x41a>
 80010a8:	0034      	movs	r4, r6
 80010aa:	2bff      	cmp	r3, #255	@ 0xff
 80010ac:	d074      	beq.n	8001198 <__aeabi_fsub+0x220>
 80010ae:	002b      	movs	r3, r5
 80010b0:	e103      	b.n	80012ba <__aeabi_fsub+0x342>
 80010b2:	42b4      	cmp	r4, r6
 80010b4:	d100      	bne.n	80010b8 <__aeabi_fsub+0x140>
 80010b6:	e09c      	b.n	80011f2 <__aeabi_fsub+0x27a>
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d017      	beq.n	80010ec <__aeabi_fsub+0x174>
 80010bc:	2d00      	cmp	r5, #0
 80010be:	d0ea      	beq.n	8001096 <__aeabi_fsub+0x11e>
 80010c0:	0007      	movs	r7, r0
 80010c2:	0034      	movs	r4, r6
 80010c4:	e06c      	b.n	80011a0 <__aeabi_fsub+0x228>
 80010c6:	2900      	cmp	r1, #0
 80010c8:	d0cc      	beq.n	8001064 <__aeabi_fsub+0xec>
 80010ca:	1e5a      	subs	r2, r3, #1
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d02b      	beq.n	8001128 <__aeabi_fsub+0x1b0>
 80010d0:	2bff      	cmp	r3, #255	@ 0xff
 80010d2:	d062      	beq.n	800119a <__aeabi_fsub+0x222>
 80010d4:	0013      	movs	r3, r2
 80010d6:	e773      	b.n	8000fc0 <__aeabi_fsub+0x48>
 80010d8:	2900      	cmp	r1, #0
 80010da:	d0c3      	beq.n	8001064 <__aeabi_fsub+0xec>
 80010dc:	1e5a      	subs	r2, r3, #1
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d100      	bne.n	80010e4 <__aeabi_fsub+0x16c>
 80010e2:	e11e      	b.n	8001322 <__aeabi_fsub+0x3aa>
 80010e4:	2bff      	cmp	r3, #255	@ 0xff
 80010e6:	d058      	beq.n	800119a <__aeabi_fsub+0x222>
 80010e8:	0013      	movs	r3, r2
 80010ea:	e7b4      	b.n	8001056 <__aeabi_fsub+0xde>
 80010ec:	22fe      	movs	r2, #254	@ 0xfe
 80010ee:	1c6b      	adds	r3, r5, #1
 80010f0:	421a      	tst	r2, r3
 80010f2:	d10d      	bne.n	8001110 <__aeabi_fsub+0x198>
 80010f4:	2d00      	cmp	r5, #0
 80010f6:	d060      	beq.n	80011ba <__aeabi_fsub+0x242>
 80010f8:	4663      	mov	r3, ip
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d000      	beq.n	8001100 <__aeabi_fsub+0x188>
 80010fe:	e120      	b.n	8001342 <__aeabi_fsub+0x3ca>
 8001100:	2900      	cmp	r1, #0
 8001102:	d000      	beq.n	8001106 <__aeabi_fsub+0x18e>
 8001104:	e128      	b.n	8001358 <__aeabi_fsub+0x3e0>
 8001106:	2280      	movs	r2, #128	@ 0x80
 8001108:	2400      	movs	r4, #0
 800110a:	20ff      	movs	r0, #255	@ 0xff
 800110c:	03d2      	lsls	r2, r2, #15
 800110e:	e78f      	b.n	8001030 <__aeabi_fsub+0xb8>
 8001110:	4663      	mov	r3, ip
 8001112:	1a5f      	subs	r7, r3, r1
 8001114:	017b      	lsls	r3, r7, #5
 8001116:	d500      	bpl.n	800111a <__aeabi_fsub+0x1a2>
 8001118:	e0fe      	b.n	8001318 <__aeabi_fsub+0x3a0>
 800111a:	2f00      	cmp	r7, #0
 800111c:	d000      	beq.n	8001120 <__aeabi_fsub+0x1a8>
 800111e:	e765      	b.n	8000fec <__aeabi_fsub+0x74>
 8001120:	2400      	movs	r4, #0
 8001122:	2000      	movs	r0, #0
 8001124:	2200      	movs	r2, #0
 8001126:	e783      	b.n	8001030 <__aeabi_fsub+0xb8>
 8001128:	4663      	mov	r3, ip
 800112a:	1a59      	subs	r1, r3, r1
 800112c:	014b      	lsls	r3, r1, #5
 800112e:	d400      	bmi.n	8001132 <__aeabi_fsub+0x1ba>
 8001130:	e119      	b.n	8001366 <__aeabi_fsub+0x3ee>
 8001132:	018f      	lsls	r7, r1, #6
 8001134:	09bf      	lsrs	r7, r7, #6
 8001136:	0038      	movs	r0, r7
 8001138:	f002 faa2 	bl	8003680 <__clzsi2>
 800113c:	003b      	movs	r3, r7
 800113e:	3805      	subs	r0, #5
 8001140:	4083      	lsls	r3, r0
 8001142:	2501      	movs	r5, #1
 8001144:	2220      	movs	r2, #32
 8001146:	1b40      	subs	r0, r0, r5
 8001148:	3001      	adds	r0, #1
 800114a:	1a12      	subs	r2, r2, r0
 800114c:	0019      	movs	r1, r3
 800114e:	4093      	lsls	r3, r2
 8001150:	40c1      	lsrs	r1, r0
 8001152:	1e5a      	subs	r2, r3, #1
 8001154:	4193      	sbcs	r3, r2
 8001156:	4319      	orrs	r1, r3
 8001158:	468c      	mov	ip, r1
 800115a:	1e0b      	subs	r3, r1, #0
 800115c:	d0e1      	beq.n	8001122 <__aeabi_fsub+0x1aa>
 800115e:	075b      	lsls	r3, r3, #29
 8001160:	d100      	bne.n	8001164 <__aeabi_fsub+0x1ec>
 8001162:	e152      	b.n	800140a <__aeabi_fsub+0x492>
 8001164:	230f      	movs	r3, #15
 8001166:	2500      	movs	r5, #0
 8001168:	400b      	ands	r3, r1
 800116a:	2b04      	cmp	r3, #4
 800116c:	d000      	beq.n	8001170 <__aeabi_fsub+0x1f8>
 800116e:	e752      	b.n	8001016 <__aeabi_fsub+0x9e>
 8001170:	2001      	movs	r0, #1
 8001172:	014a      	lsls	r2, r1, #5
 8001174:	d400      	bmi.n	8001178 <__aeabi_fsub+0x200>
 8001176:	e092      	b.n	800129e <__aeabi_fsub+0x326>
 8001178:	b2c0      	uxtb	r0, r0
 800117a:	4663      	mov	r3, ip
 800117c:	019a      	lsls	r2, r3, #6
 800117e:	0a52      	lsrs	r2, r2, #9
 8001180:	e756      	b.n	8001030 <__aeabi_fsub+0xb8>
 8001182:	4663      	mov	r3, ip
 8001184:	075b      	lsls	r3, r3, #29
 8001186:	d005      	beq.n	8001194 <__aeabi_fsub+0x21c>
 8001188:	230f      	movs	r3, #15
 800118a:	4662      	mov	r2, ip
 800118c:	4013      	ands	r3, r2
 800118e:	2b04      	cmp	r3, #4
 8001190:	d000      	beq.n	8001194 <__aeabi_fsub+0x21c>
 8001192:	e740      	b.n	8001016 <__aeabi_fsub+0x9e>
 8001194:	002b      	movs	r3, r5
 8001196:	e765      	b.n	8001064 <__aeabi_fsub+0xec>
 8001198:	0007      	movs	r7, r0
 800119a:	2f00      	cmp	r7, #0
 800119c:	d100      	bne.n	80011a0 <__aeabi_fsub+0x228>
 800119e:	e745      	b.n	800102c <__aeabi_fsub+0xb4>
 80011a0:	2280      	movs	r2, #128	@ 0x80
 80011a2:	03d2      	lsls	r2, r2, #15
 80011a4:	433a      	orrs	r2, r7
 80011a6:	0252      	lsls	r2, r2, #9
 80011a8:	20ff      	movs	r0, #255	@ 0xff
 80011aa:	0a52      	lsrs	r2, r2, #9
 80011ac:	e740      	b.n	8001030 <__aeabi_fsub+0xb8>
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d179      	bne.n	80012a6 <__aeabi_fsub+0x32e>
 80011b2:	22fe      	movs	r2, #254	@ 0xfe
 80011b4:	1c6b      	adds	r3, r5, #1
 80011b6:	421a      	tst	r2, r3
 80011b8:	d1aa      	bne.n	8001110 <__aeabi_fsub+0x198>
 80011ba:	4663      	mov	r3, ip
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d100      	bne.n	80011c2 <__aeabi_fsub+0x24a>
 80011c0:	e0f5      	b.n	80013ae <__aeabi_fsub+0x436>
 80011c2:	2900      	cmp	r1, #0
 80011c4:	d100      	bne.n	80011c8 <__aeabi_fsub+0x250>
 80011c6:	e0d1      	b.n	800136c <__aeabi_fsub+0x3f4>
 80011c8:	1a5f      	subs	r7, r3, r1
 80011ca:	2380      	movs	r3, #128	@ 0x80
 80011cc:	04db      	lsls	r3, r3, #19
 80011ce:	421f      	tst	r7, r3
 80011d0:	d100      	bne.n	80011d4 <__aeabi_fsub+0x25c>
 80011d2:	e10e      	b.n	80013f2 <__aeabi_fsub+0x47a>
 80011d4:	4662      	mov	r2, ip
 80011d6:	2401      	movs	r4, #1
 80011d8:	1a8a      	subs	r2, r1, r2
 80011da:	4694      	mov	ip, r2
 80011dc:	2000      	movs	r0, #0
 80011de:	4034      	ands	r4, r6
 80011e0:	2a00      	cmp	r2, #0
 80011e2:	d100      	bne.n	80011e6 <__aeabi_fsub+0x26e>
 80011e4:	e724      	b.n	8001030 <__aeabi_fsub+0xb8>
 80011e6:	2001      	movs	r0, #1
 80011e8:	421a      	tst	r2, r3
 80011ea:	d1c6      	bne.n	800117a <__aeabi_fsub+0x202>
 80011ec:	2300      	movs	r3, #0
 80011ee:	08d7      	lsrs	r7, r2, #3
 80011f0:	e73d      	b.n	800106e <__aeabi_fsub+0xf6>
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d017      	beq.n	8001226 <__aeabi_fsub+0x2ae>
 80011f6:	2d00      	cmp	r5, #0
 80011f8:	d000      	beq.n	80011fc <__aeabi_fsub+0x284>
 80011fa:	e0af      	b.n	800135c <__aeabi_fsub+0x3e4>
 80011fc:	23ff      	movs	r3, #255	@ 0xff
 80011fe:	4665      	mov	r5, ip
 8001200:	2d00      	cmp	r5, #0
 8001202:	d100      	bne.n	8001206 <__aeabi_fsub+0x28e>
 8001204:	e0ad      	b.n	8001362 <__aeabi_fsub+0x3ea>
 8001206:	1e5e      	subs	r6, r3, #1
 8001208:	2b01      	cmp	r3, #1
 800120a:	d100      	bne.n	800120e <__aeabi_fsub+0x296>
 800120c:	e089      	b.n	8001322 <__aeabi_fsub+0x3aa>
 800120e:	2bff      	cmp	r3, #255	@ 0xff
 8001210:	d0c2      	beq.n	8001198 <__aeabi_fsub+0x220>
 8001212:	2e1b      	cmp	r6, #27
 8001214:	dc00      	bgt.n	8001218 <__aeabi_fsub+0x2a0>
 8001216:	e0ab      	b.n	8001370 <__aeabi_fsub+0x3f8>
 8001218:	1d4b      	adds	r3, r1, #5
 800121a:	469c      	mov	ip, r3
 800121c:	0013      	movs	r3, r2
 800121e:	e721      	b.n	8001064 <__aeabi_fsub+0xec>
 8001220:	464b      	mov	r3, r9
 8001222:	2b00      	cmp	r3, #0
 8001224:	d170      	bne.n	8001308 <__aeabi_fsub+0x390>
 8001226:	22fe      	movs	r2, #254	@ 0xfe
 8001228:	1c6b      	adds	r3, r5, #1
 800122a:	421a      	tst	r2, r3
 800122c:	d15e      	bne.n	80012ec <__aeabi_fsub+0x374>
 800122e:	2d00      	cmp	r5, #0
 8001230:	d000      	beq.n	8001234 <__aeabi_fsub+0x2bc>
 8001232:	e0c3      	b.n	80013bc <__aeabi_fsub+0x444>
 8001234:	4663      	mov	r3, ip
 8001236:	2b00      	cmp	r3, #0
 8001238:	d100      	bne.n	800123c <__aeabi_fsub+0x2c4>
 800123a:	e0d0      	b.n	80013de <__aeabi_fsub+0x466>
 800123c:	2900      	cmp	r1, #0
 800123e:	d100      	bne.n	8001242 <__aeabi_fsub+0x2ca>
 8001240:	e094      	b.n	800136c <__aeabi_fsub+0x3f4>
 8001242:	000a      	movs	r2, r1
 8001244:	4462      	add	r2, ip
 8001246:	0153      	lsls	r3, r2, #5
 8001248:	d400      	bmi.n	800124c <__aeabi_fsub+0x2d4>
 800124a:	e0d8      	b.n	80013fe <__aeabi_fsub+0x486>
 800124c:	0192      	lsls	r2, r2, #6
 800124e:	2001      	movs	r0, #1
 8001250:	0a52      	lsrs	r2, r2, #9
 8001252:	e6ed      	b.n	8001030 <__aeabi_fsub+0xb8>
 8001254:	0008      	movs	r0, r1
 8001256:	2220      	movs	r2, #32
 8001258:	40d8      	lsrs	r0, r3
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	4099      	lsls	r1, r3
 800125e:	000b      	movs	r3, r1
 8001260:	1e5a      	subs	r2, r3, #1
 8001262:	4193      	sbcs	r3, r2
 8001264:	4303      	orrs	r3, r0
 8001266:	449c      	add	ip, r3
 8001268:	4663      	mov	r3, ip
 800126a:	015b      	lsls	r3, r3, #5
 800126c:	d589      	bpl.n	8001182 <__aeabi_fsub+0x20a>
 800126e:	3501      	adds	r5, #1
 8001270:	2dff      	cmp	r5, #255	@ 0xff
 8001272:	d100      	bne.n	8001276 <__aeabi_fsub+0x2fe>
 8001274:	e6da      	b.n	800102c <__aeabi_fsub+0xb4>
 8001276:	4662      	mov	r2, ip
 8001278:	2301      	movs	r3, #1
 800127a:	4919      	ldr	r1, [pc, #100]	@ (80012e0 <__aeabi_fsub+0x368>)
 800127c:	4013      	ands	r3, r2
 800127e:	0852      	lsrs	r2, r2, #1
 8001280:	400a      	ands	r2, r1
 8001282:	431a      	orrs	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	4694      	mov	ip, r2
 8001288:	075b      	lsls	r3, r3, #29
 800128a:	d004      	beq.n	8001296 <__aeabi_fsub+0x31e>
 800128c:	230f      	movs	r3, #15
 800128e:	4013      	ands	r3, r2
 8001290:	2b04      	cmp	r3, #4
 8001292:	d000      	beq.n	8001296 <__aeabi_fsub+0x31e>
 8001294:	e6bf      	b.n	8001016 <__aeabi_fsub+0x9e>
 8001296:	4663      	mov	r3, ip
 8001298:	015b      	lsls	r3, r3, #5
 800129a:	d500      	bpl.n	800129e <__aeabi_fsub+0x326>
 800129c:	e6c2      	b.n	8001024 <__aeabi_fsub+0xac>
 800129e:	4663      	mov	r3, ip
 80012a0:	08df      	lsrs	r7, r3, #3
 80012a2:	002b      	movs	r3, r5
 80012a4:	e6e3      	b.n	800106e <__aeabi_fsub+0xf6>
 80012a6:	1b53      	subs	r3, r2, r5
 80012a8:	2d00      	cmp	r5, #0
 80012aa:	d100      	bne.n	80012ae <__aeabi_fsub+0x336>
 80012ac:	e6f4      	b.n	8001098 <__aeabi_fsub+0x120>
 80012ae:	2080      	movs	r0, #128	@ 0x80
 80012b0:	4664      	mov	r4, ip
 80012b2:	04c0      	lsls	r0, r0, #19
 80012b4:	4304      	orrs	r4, r0
 80012b6:	46a4      	mov	ip, r4
 80012b8:	0034      	movs	r4, r6
 80012ba:	2001      	movs	r0, #1
 80012bc:	2b1b      	cmp	r3, #27
 80012be:	dc09      	bgt.n	80012d4 <__aeabi_fsub+0x35c>
 80012c0:	2520      	movs	r5, #32
 80012c2:	4660      	mov	r0, ip
 80012c4:	40d8      	lsrs	r0, r3
 80012c6:	1aeb      	subs	r3, r5, r3
 80012c8:	4665      	mov	r5, ip
 80012ca:	409d      	lsls	r5, r3
 80012cc:	002b      	movs	r3, r5
 80012ce:	1e5d      	subs	r5, r3, #1
 80012d0:	41ab      	sbcs	r3, r5
 80012d2:	4318      	orrs	r0, r3
 80012d4:	1a0b      	subs	r3, r1, r0
 80012d6:	469c      	mov	ip, r3
 80012d8:	0015      	movs	r5, r2
 80012da:	e680      	b.n	8000fde <__aeabi_fsub+0x66>
 80012dc:	fbffffff 	.word	0xfbffffff
 80012e0:	7dffffff 	.word	0x7dffffff
 80012e4:	22fe      	movs	r2, #254	@ 0xfe
 80012e6:	1c6b      	adds	r3, r5, #1
 80012e8:	4213      	tst	r3, r2
 80012ea:	d0a3      	beq.n	8001234 <__aeabi_fsub+0x2bc>
 80012ec:	2bff      	cmp	r3, #255	@ 0xff
 80012ee:	d100      	bne.n	80012f2 <__aeabi_fsub+0x37a>
 80012f0:	e69c      	b.n	800102c <__aeabi_fsub+0xb4>
 80012f2:	4461      	add	r1, ip
 80012f4:	0849      	lsrs	r1, r1, #1
 80012f6:	074a      	lsls	r2, r1, #29
 80012f8:	d049      	beq.n	800138e <__aeabi_fsub+0x416>
 80012fa:	220f      	movs	r2, #15
 80012fc:	400a      	ands	r2, r1
 80012fe:	2a04      	cmp	r2, #4
 8001300:	d045      	beq.n	800138e <__aeabi_fsub+0x416>
 8001302:	1d0a      	adds	r2, r1, #4
 8001304:	4694      	mov	ip, r2
 8001306:	e6ad      	b.n	8001064 <__aeabi_fsub+0xec>
 8001308:	2d00      	cmp	r5, #0
 800130a:	d100      	bne.n	800130e <__aeabi_fsub+0x396>
 800130c:	e776      	b.n	80011fc <__aeabi_fsub+0x284>
 800130e:	e68d      	b.n	800102c <__aeabi_fsub+0xb4>
 8001310:	0034      	movs	r4, r6
 8001312:	20ff      	movs	r0, #255	@ 0xff
 8001314:	2200      	movs	r2, #0
 8001316:	e68b      	b.n	8001030 <__aeabi_fsub+0xb8>
 8001318:	4663      	mov	r3, ip
 800131a:	2401      	movs	r4, #1
 800131c:	1acf      	subs	r7, r1, r3
 800131e:	4034      	ands	r4, r6
 8001320:	e664      	b.n	8000fec <__aeabi_fsub+0x74>
 8001322:	4461      	add	r1, ip
 8001324:	014b      	lsls	r3, r1, #5
 8001326:	d56d      	bpl.n	8001404 <__aeabi_fsub+0x48c>
 8001328:	0848      	lsrs	r0, r1, #1
 800132a:	4944      	ldr	r1, [pc, #272]	@ (800143c <__aeabi_fsub+0x4c4>)
 800132c:	4001      	ands	r1, r0
 800132e:	0743      	lsls	r3, r0, #29
 8001330:	d02c      	beq.n	800138c <__aeabi_fsub+0x414>
 8001332:	230f      	movs	r3, #15
 8001334:	4003      	ands	r3, r0
 8001336:	2b04      	cmp	r3, #4
 8001338:	d028      	beq.n	800138c <__aeabi_fsub+0x414>
 800133a:	1d0b      	adds	r3, r1, #4
 800133c:	469c      	mov	ip, r3
 800133e:	2302      	movs	r3, #2
 8001340:	e690      	b.n	8001064 <__aeabi_fsub+0xec>
 8001342:	2900      	cmp	r1, #0
 8001344:	d100      	bne.n	8001348 <__aeabi_fsub+0x3d0>
 8001346:	e72b      	b.n	80011a0 <__aeabi_fsub+0x228>
 8001348:	2380      	movs	r3, #128	@ 0x80
 800134a:	03db      	lsls	r3, r3, #15
 800134c:	429f      	cmp	r7, r3
 800134e:	d200      	bcs.n	8001352 <__aeabi_fsub+0x3da>
 8001350:	e726      	b.n	80011a0 <__aeabi_fsub+0x228>
 8001352:	4298      	cmp	r0, r3
 8001354:	d300      	bcc.n	8001358 <__aeabi_fsub+0x3e0>
 8001356:	e723      	b.n	80011a0 <__aeabi_fsub+0x228>
 8001358:	2401      	movs	r4, #1
 800135a:	4034      	ands	r4, r6
 800135c:	0007      	movs	r7, r0
 800135e:	e71f      	b.n	80011a0 <__aeabi_fsub+0x228>
 8001360:	0034      	movs	r4, r6
 8001362:	468c      	mov	ip, r1
 8001364:	e67e      	b.n	8001064 <__aeabi_fsub+0xec>
 8001366:	2301      	movs	r3, #1
 8001368:	08cf      	lsrs	r7, r1, #3
 800136a:	e680      	b.n	800106e <__aeabi_fsub+0xf6>
 800136c:	2300      	movs	r3, #0
 800136e:	e67e      	b.n	800106e <__aeabi_fsub+0xf6>
 8001370:	2020      	movs	r0, #32
 8001372:	4665      	mov	r5, ip
 8001374:	1b80      	subs	r0, r0, r6
 8001376:	4085      	lsls	r5, r0
 8001378:	4663      	mov	r3, ip
 800137a:	0028      	movs	r0, r5
 800137c:	40f3      	lsrs	r3, r6
 800137e:	1e45      	subs	r5, r0, #1
 8001380:	41a8      	sbcs	r0, r5
 8001382:	4303      	orrs	r3, r0
 8001384:	469c      	mov	ip, r3
 8001386:	0015      	movs	r5, r2
 8001388:	448c      	add	ip, r1
 800138a:	e76d      	b.n	8001268 <__aeabi_fsub+0x2f0>
 800138c:	2302      	movs	r3, #2
 800138e:	08cf      	lsrs	r7, r1, #3
 8001390:	e66d      	b.n	800106e <__aeabi_fsub+0xf6>
 8001392:	1b0f      	subs	r7, r1, r4
 8001394:	017b      	lsls	r3, r7, #5
 8001396:	d528      	bpl.n	80013ea <__aeabi_fsub+0x472>
 8001398:	01bf      	lsls	r7, r7, #6
 800139a:	09bf      	lsrs	r7, r7, #6
 800139c:	0038      	movs	r0, r7
 800139e:	f002 f96f 	bl	8003680 <__clzsi2>
 80013a2:	003b      	movs	r3, r7
 80013a4:	3805      	subs	r0, #5
 80013a6:	4083      	lsls	r3, r0
 80013a8:	0034      	movs	r4, r6
 80013aa:	2501      	movs	r5, #1
 80013ac:	e6ca      	b.n	8001144 <__aeabi_fsub+0x1cc>
 80013ae:	2900      	cmp	r1, #0
 80013b0:	d100      	bne.n	80013b4 <__aeabi_fsub+0x43c>
 80013b2:	e6b5      	b.n	8001120 <__aeabi_fsub+0x1a8>
 80013b4:	2401      	movs	r4, #1
 80013b6:	0007      	movs	r7, r0
 80013b8:	4034      	ands	r4, r6
 80013ba:	e658      	b.n	800106e <__aeabi_fsub+0xf6>
 80013bc:	4663      	mov	r3, ip
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d100      	bne.n	80013c4 <__aeabi_fsub+0x44c>
 80013c2:	e6e9      	b.n	8001198 <__aeabi_fsub+0x220>
 80013c4:	2900      	cmp	r1, #0
 80013c6:	d100      	bne.n	80013ca <__aeabi_fsub+0x452>
 80013c8:	e6ea      	b.n	80011a0 <__aeabi_fsub+0x228>
 80013ca:	2380      	movs	r3, #128	@ 0x80
 80013cc:	03db      	lsls	r3, r3, #15
 80013ce:	429f      	cmp	r7, r3
 80013d0:	d200      	bcs.n	80013d4 <__aeabi_fsub+0x45c>
 80013d2:	e6e5      	b.n	80011a0 <__aeabi_fsub+0x228>
 80013d4:	4298      	cmp	r0, r3
 80013d6:	d300      	bcc.n	80013da <__aeabi_fsub+0x462>
 80013d8:	e6e2      	b.n	80011a0 <__aeabi_fsub+0x228>
 80013da:	0007      	movs	r7, r0
 80013dc:	e6e0      	b.n	80011a0 <__aeabi_fsub+0x228>
 80013de:	2900      	cmp	r1, #0
 80013e0:	d100      	bne.n	80013e4 <__aeabi_fsub+0x46c>
 80013e2:	e69e      	b.n	8001122 <__aeabi_fsub+0x1aa>
 80013e4:	2300      	movs	r3, #0
 80013e6:	08cf      	lsrs	r7, r1, #3
 80013e8:	e641      	b.n	800106e <__aeabi_fsub+0xf6>
 80013ea:	0034      	movs	r4, r6
 80013ec:	2301      	movs	r3, #1
 80013ee:	08ff      	lsrs	r7, r7, #3
 80013f0:	e63d      	b.n	800106e <__aeabi_fsub+0xf6>
 80013f2:	2f00      	cmp	r7, #0
 80013f4:	d100      	bne.n	80013f8 <__aeabi_fsub+0x480>
 80013f6:	e693      	b.n	8001120 <__aeabi_fsub+0x1a8>
 80013f8:	2300      	movs	r3, #0
 80013fa:	08ff      	lsrs	r7, r7, #3
 80013fc:	e637      	b.n	800106e <__aeabi_fsub+0xf6>
 80013fe:	2300      	movs	r3, #0
 8001400:	08d7      	lsrs	r7, r2, #3
 8001402:	e634      	b.n	800106e <__aeabi_fsub+0xf6>
 8001404:	2301      	movs	r3, #1
 8001406:	08cf      	lsrs	r7, r1, #3
 8001408:	e631      	b.n	800106e <__aeabi_fsub+0xf6>
 800140a:	2280      	movs	r2, #128	@ 0x80
 800140c:	000b      	movs	r3, r1
 800140e:	04d2      	lsls	r2, r2, #19
 8001410:	2001      	movs	r0, #1
 8001412:	4013      	ands	r3, r2
 8001414:	4211      	tst	r1, r2
 8001416:	d000      	beq.n	800141a <__aeabi_fsub+0x4a2>
 8001418:	e6ae      	b.n	8001178 <__aeabi_fsub+0x200>
 800141a:	08cf      	lsrs	r7, r1, #3
 800141c:	e627      	b.n	800106e <__aeabi_fsub+0xf6>
 800141e:	2b00      	cmp	r3, #0
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x4ac>
 8001422:	e75f      	b.n	80012e4 <__aeabi_fsub+0x36c>
 8001424:	1b56      	subs	r6, r2, r5
 8001426:	2d00      	cmp	r5, #0
 8001428:	d101      	bne.n	800142e <__aeabi_fsub+0x4b6>
 800142a:	0033      	movs	r3, r6
 800142c:	e6e7      	b.n	80011fe <__aeabi_fsub+0x286>
 800142e:	2380      	movs	r3, #128	@ 0x80
 8001430:	4660      	mov	r0, ip
 8001432:	04db      	lsls	r3, r3, #19
 8001434:	4318      	orrs	r0, r3
 8001436:	4684      	mov	ip, r0
 8001438:	e6eb      	b.n	8001212 <__aeabi_fsub+0x29a>
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	7dffffff 	.word	0x7dffffff

08001440 <__aeabi_f2iz>:
 8001440:	0241      	lsls	r1, r0, #9
 8001442:	0042      	lsls	r2, r0, #1
 8001444:	0fc3      	lsrs	r3, r0, #31
 8001446:	0a49      	lsrs	r1, r1, #9
 8001448:	2000      	movs	r0, #0
 800144a:	0e12      	lsrs	r2, r2, #24
 800144c:	2a7e      	cmp	r2, #126	@ 0x7e
 800144e:	dd03      	ble.n	8001458 <__aeabi_f2iz+0x18>
 8001450:	2a9d      	cmp	r2, #157	@ 0x9d
 8001452:	dd02      	ble.n	800145a <__aeabi_f2iz+0x1a>
 8001454:	4a09      	ldr	r2, [pc, #36]	@ (800147c <__aeabi_f2iz+0x3c>)
 8001456:	1898      	adds	r0, r3, r2
 8001458:	4770      	bx	lr
 800145a:	2080      	movs	r0, #128	@ 0x80
 800145c:	0400      	lsls	r0, r0, #16
 800145e:	4301      	orrs	r1, r0
 8001460:	2a95      	cmp	r2, #149	@ 0x95
 8001462:	dc07      	bgt.n	8001474 <__aeabi_f2iz+0x34>
 8001464:	2096      	movs	r0, #150	@ 0x96
 8001466:	1a82      	subs	r2, r0, r2
 8001468:	40d1      	lsrs	r1, r2
 800146a:	4248      	negs	r0, r1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f3      	bne.n	8001458 <__aeabi_f2iz+0x18>
 8001470:	0008      	movs	r0, r1
 8001472:	e7f1      	b.n	8001458 <__aeabi_f2iz+0x18>
 8001474:	3a96      	subs	r2, #150	@ 0x96
 8001476:	4091      	lsls	r1, r2
 8001478:	e7f7      	b.n	800146a <__aeabi_f2iz+0x2a>
 800147a:	46c0      	nop			@ (mov r8, r8)
 800147c:	7fffffff 	.word	0x7fffffff

08001480 <__aeabi_i2f>:
 8001480:	b570      	push	{r4, r5, r6, lr}
 8001482:	2800      	cmp	r0, #0
 8001484:	d012      	beq.n	80014ac <__aeabi_i2f+0x2c>
 8001486:	17c3      	asrs	r3, r0, #31
 8001488:	18c5      	adds	r5, r0, r3
 800148a:	405d      	eors	r5, r3
 800148c:	0fc4      	lsrs	r4, r0, #31
 800148e:	0028      	movs	r0, r5
 8001490:	f002 f8f6 	bl	8003680 <__clzsi2>
 8001494:	239e      	movs	r3, #158	@ 0x9e
 8001496:	1a1b      	subs	r3, r3, r0
 8001498:	2b96      	cmp	r3, #150	@ 0x96
 800149a:	dc0f      	bgt.n	80014bc <__aeabi_i2f+0x3c>
 800149c:	2808      	cmp	r0, #8
 800149e:	d038      	beq.n	8001512 <__aeabi_i2f+0x92>
 80014a0:	3808      	subs	r0, #8
 80014a2:	4085      	lsls	r5, r0
 80014a4:	026d      	lsls	r5, r5, #9
 80014a6:	0a6d      	lsrs	r5, r5, #9
 80014a8:	b2d8      	uxtb	r0, r3
 80014aa:	e002      	b.n	80014b2 <__aeabi_i2f+0x32>
 80014ac:	2400      	movs	r4, #0
 80014ae:	2000      	movs	r0, #0
 80014b0:	2500      	movs	r5, #0
 80014b2:	05c0      	lsls	r0, r0, #23
 80014b4:	4328      	orrs	r0, r5
 80014b6:	07e4      	lsls	r4, r4, #31
 80014b8:	4320      	orrs	r0, r4
 80014ba:	bd70      	pop	{r4, r5, r6, pc}
 80014bc:	2b99      	cmp	r3, #153	@ 0x99
 80014be:	dc14      	bgt.n	80014ea <__aeabi_i2f+0x6a>
 80014c0:	1f42      	subs	r2, r0, #5
 80014c2:	4095      	lsls	r5, r2
 80014c4:	002a      	movs	r2, r5
 80014c6:	4915      	ldr	r1, [pc, #84]	@ (800151c <__aeabi_i2f+0x9c>)
 80014c8:	4011      	ands	r1, r2
 80014ca:	0755      	lsls	r5, r2, #29
 80014cc:	d01c      	beq.n	8001508 <__aeabi_i2f+0x88>
 80014ce:	250f      	movs	r5, #15
 80014d0:	402a      	ands	r2, r5
 80014d2:	2a04      	cmp	r2, #4
 80014d4:	d018      	beq.n	8001508 <__aeabi_i2f+0x88>
 80014d6:	3104      	adds	r1, #4
 80014d8:	08ca      	lsrs	r2, r1, #3
 80014da:	0149      	lsls	r1, r1, #5
 80014dc:	d515      	bpl.n	800150a <__aeabi_i2f+0x8a>
 80014de:	239f      	movs	r3, #159	@ 0x9f
 80014e0:	0252      	lsls	r2, r2, #9
 80014e2:	1a18      	subs	r0, r3, r0
 80014e4:	0a55      	lsrs	r5, r2, #9
 80014e6:	b2c0      	uxtb	r0, r0
 80014e8:	e7e3      	b.n	80014b2 <__aeabi_i2f+0x32>
 80014ea:	2205      	movs	r2, #5
 80014ec:	0029      	movs	r1, r5
 80014ee:	1a12      	subs	r2, r2, r0
 80014f0:	40d1      	lsrs	r1, r2
 80014f2:	0002      	movs	r2, r0
 80014f4:	321b      	adds	r2, #27
 80014f6:	4095      	lsls	r5, r2
 80014f8:	002a      	movs	r2, r5
 80014fa:	1e55      	subs	r5, r2, #1
 80014fc:	41aa      	sbcs	r2, r5
 80014fe:	430a      	orrs	r2, r1
 8001500:	4906      	ldr	r1, [pc, #24]	@ (800151c <__aeabi_i2f+0x9c>)
 8001502:	4011      	ands	r1, r2
 8001504:	0755      	lsls	r5, r2, #29
 8001506:	d1e2      	bne.n	80014ce <__aeabi_i2f+0x4e>
 8001508:	08ca      	lsrs	r2, r1, #3
 800150a:	0252      	lsls	r2, r2, #9
 800150c:	0a55      	lsrs	r5, r2, #9
 800150e:	b2d8      	uxtb	r0, r3
 8001510:	e7cf      	b.n	80014b2 <__aeabi_i2f+0x32>
 8001512:	026d      	lsls	r5, r5, #9
 8001514:	0a6d      	lsrs	r5, r5, #9
 8001516:	308e      	adds	r0, #142	@ 0x8e
 8001518:	e7cb      	b.n	80014b2 <__aeabi_i2f+0x32>
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	fbffffff 	.word	0xfbffffff

08001520 <__aeabi_ui2f>:
 8001520:	b510      	push	{r4, lr}
 8001522:	1e04      	subs	r4, r0, #0
 8001524:	d00d      	beq.n	8001542 <__aeabi_ui2f+0x22>
 8001526:	f002 f8ab 	bl	8003680 <__clzsi2>
 800152a:	239e      	movs	r3, #158	@ 0x9e
 800152c:	1a1b      	subs	r3, r3, r0
 800152e:	2b96      	cmp	r3, #150	@ 0x96
 8001530:	dc0c      	bgt.n	800154c <__aeabi_ui2f+0x2c>
 8001532:	2808      	cmp	r0, #8
 8001534:	d034      	beq.n	80015a0 <__aeabi_ui2f+0x80>
 8001536:	3808      	subs	r0, #8
 8001538:	4084      	lsls	r4, r0
 800153a:	0264      	lsls	r4, r4, #9
 800153c:	0a64      	lsrs	r4, r4, #9
 800153e:	b2d8      	uxtb	r0, r3
 8001540:	e001      	b.n	8001546 <__aeabi_ui2f+0x26>
 8001542:	2000      	movs	r0, #0
 8001544:	2400      	movs	r4, #0
 8001546:	05c0      	lsls	r0, r0, #23
 8001548:	4320      	orrs	r0, r4
 800154a:	bd10      	pop	{r4, pc}
 800154c:	2b99      	cmp	r3, #153	@ 0x99
 800154e:	dc13      	bgt.n	8001578 <__aeabi_ui2f+0x58>
 8001550:	1f42      	subs	r2, r0, #5
 8001552:	4094      	lsls	r4, r2
 8001554:	4a14      	ldr	r2, [pc, #80]	@ (80015a8 <__aeabi_ui2f+0x88>)
 8001556:	4022      	ands	r2, r4
 8001558:	0761      	lsls	r1, r4, #29
 800155a:	d01c      	beq.n	8001596 <__aeabi_ui2f+0x76>
 800155c:	210f      	movs	r1, #15
 800155e:	4021      	ands	r1, r4
 8001560:	2904      	cmp	r1, #4
 8001562:	d018      	beq.n	8001596 <__aeabi_ui2f+0x76>
 8001564:	3204      	adds	r2, #4
 8001566:	08d4      	lsrs	r4, r2, #3
 8001568:	0152      	lsls	r2, r2, #5
 800156a:	d515      	bpl.n	8001598 <__aeabi_ui2f+0x78>
 800156c:	239f      	movs	r3, #159	@ 0x9f
 800156e:	0264      	lsls	r4, r4, #9
 8001570:	1a18      	subs	r0, r3, r0
 8001572:	0a64      	lsrs	r4, r4, #9
 8001574:	b2c0      	uxtb	r0, r0
 8001576:	e7e6      	b.n	8001546 <__aeabi_ui2f+0x26>
 8001578:	0002      	movs	r2, r0
 800157a:	0021      	movs	r1, r4
 800157c:	321b      	adds	r2, #27
 800157e:	4091      	lsls	r1, r2
 8001580:	000a      	movs	r2, r1
 8001582:	1e51      	subs	r1, r2, #1
 8001584:	418a      	sbcs	r2, r1
 8001586:	2105      	movs	r1, #5
 8001588:	1a09      	subs	r1, r1, r0
 800158a:	40cc      	lsrs	r4, r1
 800158c:	4314      	orrs	r4, r2
 800158e:	4a06      	ldr	r2, [pc, #24]	@ (80015a8 <__aeabi_ui2f+0x88>)
 8001590:	4022      	ands	r2, r4
 8001592:	0761      	lsls	r1, r4, #29
 8001594:	d1e2      	bne.n	800155c <__aeabi_ui2f+0x3c>
 8001596:	08d4      	lsrs	r4, r2, #3
 8001598:	0264      	lsls	r4, r4, #9
 800159a:	0a64      	lsrs	r4, r4, #9
 800159c:	b2d8      	uxtb	r0, r3
 800159e:	e7d2      	b.n	8001546 <__aeabi_ui2f+0x26>
 80015a0:	0264      	lsls	r4, r4, #9
 80015a2:	0a64      	lsrs	r4, r4, #9
 80015a4:	308e      	adds	r0, #142	@ 0x8e
 80015a6:	e7ce      	b.n	8001546 <__aeabi_ui2f+0x26>
 80015a8:	fbffffff 	.word	0xfbffffff

080015ac <__aeabi_dadd>:
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ae:	464f      	mov	r7, r9
 80015b0:	4646      	mov	r6, r8
 80015b2:	46d6      	mov	lr, sl
 80015b4:	b5c0      	push	{r6, r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	9000      	str	r0, [sp, #0]
 80015ba:	9101      	str	r1, [sp, #4]
 80015bc:	030e      	lsls	r6, r1, #12
 80015be:	004c      	lsls	r4, r1, #1
 80015c0:	0fcd      	lsrs	r5, r1, #31
 80015c2:	0a71      	lsrs	r1, r6, #9
 80015c4:	9e00      	ldr	r6, [sp, #0]
 80015c6:	005f      	lsls	r7, r3, #1
 80015c8:	0f76      	lsrs	r6, r6, #29
 80015ca:	430e      	orrs	r6, r1
 80015cc:	9900      	ldr	r1, [sp, #0]
 80015ce:	9200      	str	r2, [sp, #0]
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	00c9      	lsls	r1, r1, #3
 80015d4:	4689      	mov	r9, r1
 80015d6:	0319      	lsls	r1, r3, #12
 80015d8:	0d7b      	lsrs	r3, r7, #21
 80015da:	4698      	mov	r8, r3
 80015dc:	9b01      	ldr	r3, [sp, #4]
 80015de:	0a49      	lsrs	r1, r1, #9
 80015e0:	0fdb      	lsrs	r3, r3, #31
 80015e2:	469c      	mov	ip, r3
 80015e4:	9b00      	ldr	r3, [sp, #0]
 80015e6:	9a00      	ldr	r2, [sp, #0]
 80015e8:	0f5b      	lsrs	r3, r3, #29
 80015ea:	430b      	orrs	r3, r1
 80015ec:	4641      	mov	r1, r8
 80015ee:	0d64      	lsrs	r4, r4, #21
 80015f0:	00d2      	lsls	r2, r2, #3
 80015f2:	1a61      	subs	r1, r4, r1
 80015f4:	4565      	cmp	r5, ip
 80015f6:	d100      	bne.n	80015fa <__aeabi_dadd+0x4e>
 80015f8:	e0a6      	b.n	8001748 <__aeabi_dadd+0x19c>
 80015fa:	2900      	cmp	r1, #0
 80015fc:	dd72      	ble.n	80016e4 <__aeabi_dadd+0x138>
 80015fe:	4647      	mov	r7, r8
 8001600:	2f00      	cmp	r7, #0
 8001602:	d100      	bne.n	8001606 <__aeabi_dadd+0x5a>
 8001604:	e0dd      	b.n	80017c2 <__aeabi_dadd+0x216>
 8001606:	4fcc      	ldr	r7, [pc, #816]	@ (8001938 <__aeabi_dadd+0x38c>)
 8001608:	42bc      	cmp	r4, r7
 800160a:	d100      	bne.n	800160e <__aeabi_dadd+0x62>
 800160c:	e19a      	b.n	8001944 <__aeabi_dadd+0x398>
 800160e:	2701      	movs	r7, #1
 8001610:	2938      	cmp	r1, #56	@ 0x38
 8001612:	dc17      	bgt.n	8001644 <__aeabi_dadd+0x98>
 8001614:	2780      	movs	r7, #128	@ 0x80
 8001616:	043f      	lsls	r7, r7, #16
 8001618:	433b      	orrs	r3, r7
 800161a:	291f      	cmp	r1, #31
 800161c:	dd00      	ble.n	8001620 <__aeabi_dadd+0x74>
 800161e:	e1dd      	b.n	80019dc <__aeabi_dadd+0x430>
 8001620:	2720      	movs	r7, #32
 8001622:	1a78      	subs	r0, r7, r1
 8001624:	001f      	movs	r7, r3
 8001626:	4087      	lsls	r7, r0
 8001628:	46ba      	mov	sl, r7
 800162a:	0017      	movs	r7, r2
 800162c:	40cf      	lsrs	r7, r1
 800162e:	4684      	mov	ip, r0
 8001630:	0038      	movs	r0, r7
 8001632:	4657      	mov	r7, sl
 8001634:	4307      	orrs	r7, r0
 8001636:	4660      	mov	r0, ip
 8001638:	4082      	lsls	r2, r0
 800163a:	40cb      	lsrs	r3, r1
 800163c:	1e50      	subs	r0, r2, #1
 800163e:	4182      	sbcs	r2, r0
 8001640:	1af6      	subs	r6, r6, r3
 8001642:	4317      	orrs	r7, r2
 8001644:	464b      	mov	r3, r9
 8001646:	1bdf      	subs	r7, r3, r7
 8001648:	45b9      	cmp	r9, r7
 800164a:	4180      	sbcs	r0, r0
 800164c:	4240      	negs	r0, r0
 800164e:	1a36      	subs	r6, r6, r0
 8001650:	0233      	lsls	r3, r6, #8
 8001652:	d400      	bmi.n	8001656 <__aeabi_dadd+0xaa>
 8001654:	e0ff      	b.n	8001856 <__aeabi_dadd+0x2aa>
 8001656:	0276      	lsls	r6, r6, #9
 8001658:	0a76      	lsrs	r6, r6, #9
 800165a:	2e00      	cmp	r6, #0
 800165c:	d100      	bne.n	8001660 <__aeabi_dadd+0xb4>
 800165e:	e13c      	b.n	80018da <__aeabi_dadd+0x32e>
 8001660:	0030      	movs	r0, r6
 8001662:	f002 f80d 	bl	8003680 <__clzsi2>
 8001666:	0003      	movs	r3, r0
 8001668:	3b08      	subs	r3, #8
 800166a:	2120      	movs	r1, #32
 800166c:	0038      	movs	r0, r7
 800166e:	1aca      	subs	r2, r1, r3
 8001670:	40d0      	lsrs	r0, r2
 8001672:	409e      	lsls	r6, r3
 8001674:	0002      	movs	r2, r0
 8001676:	409f      	lsls	r7, r3
 8001678:	4332      	orrs	r2, r6
 800167a:	429c      	cmp	r4, r3
 800167c:	dd00      	ble.n	8001680 <__aeabi_dadd+0xd4>
 800167e:	e1a6      	b.n	80019ce <__aeabi_dadd+0x422>
 8001680:	1b18      	subs	r0, r3, r4
 8001682:	3001      	adds	r0, #1
 8001684:	1a09      	subs	r1, r1, r0
 8001686:	003e      	movs	r6, r7
 8001688:	408f      	lsls	r7, r1
 800168a:	40c6      	lsrs	r6, r0
 800168c:	1e7b      	subs	r3, r7, #1
 800168e:	419f      	sbcs	r7, r3
 8001690:	0013      	movs	r3, r2
 8001692:	408b      	lsls	r3, r1
 8001694:	4337      	orrs	r7, r6
 8001696:	431f      	orrs	r7, r3
 8001698:	40c2      	lsrs	r2, r0
 800169a:	003b      	movs	r3, r7
 800169c:	0016      	movs	r6, r2
 800169e:	2400      	movs	r4, #0
 80016a0:	4313      	orrs	r3, r2
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dadd+0xfa>
 80016a4:	e1df      	b.n	8001a66 <__aeabi_dadd+0x4ba>
 80016a6:	077b      	lsls	r3, r7, #29
 80016a8:	d100      	bne.n	80016ac <__aeabi_dadd+0x100>
 80016aa:	e332      	b.n	8001d12 <__aeabi_dadd+0x766>
 80016ac:	230f      	movs	r3, #15
 80016ae:	003a      	movs	r2, r7
 80016b0:	403b      	ands	r3, r7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d004      	beq.n	80016c0 <__aeabi_dadd+0x114>
 80016b6:	1d3a      	adds	r2, r7, #4
 80016b8:	42ba      	cmp	r2, r7
 80016ba:	41bf      	sbcs	r7, r7
 80016bc:	427f      	negs	r7, r7
 80016be:	19f6      	adds	r6, r6, r7
 80016c0:	0233      	lsls	r3, r6, #8
 80016c2:	d400      	bmi.n	80016c6 <__aeabi_dadd+0x11a>
 80016c4:	e323      	b.n	8001d0e <__aeabi_dadd+0x762>
 80016c6:	4b9c      	ldr	r3, [pc, #624]	@ (8001938 <__aeabi_dadd+0x38c>)
 80016c8:	3401      	adds	r4, #1
 80016ca:	429c      	cmp	r4, r3
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dadd+0x124>
 80016ce:	e0b4      	b.n	800183a <__aeabi_dadd+0x28e>
 80016d0:	4b9a      	ldr	r3, [pc, #616]	@ (800193c <__aeabi_dadd+0x390>)
 80016d2:	0564      	lsls	r4, r4, #21
 80016d4:	401e      	ands	r6, r3
 80016d6:	0d64      	lsrs	r4, r4, #21
 80016d8:	0777      	lsls	r7, r6, #29
 80016da:	08d2      	lsrs	r2, r2, #3
 80016dc:	0276      	lsls	r6, r6, #9
 80016de:	4317      	orrs	r7, r2
 80016e0:	0b36      	lsrs	r6, r6, #12
 80016e2:	e0ac      	b.n	800183e <__aeabi_dadd+0x292>
 80016e4:	2900      	cmp	r1, #0
 80016e6:	d100      	bne.n	80016ea <__aeabi_dadd+0x13e>
 80016e8:	e07e      	b.n	80017e8 <__aeabi_dadd+0x23c>
 80016ea:	4641      	mov	r1, r8
 80016ec:	1b09      	subs	r1, r1, r4
 80016ee:	2c00      	cmp	r4, #0
 80016f0:	d000      	beq.n	80016f4 <__aeabi_dadd+0x148>
 80016f2:	e160      	b.n	80019b6 <__aeabi_dadd+0x40a>
 80016f4:	0034      	movs	r4, r6
 80016f6:	4648      	mov	r0, r9
 80016f8:	4304      	orrs	r4, r0
 80016fa:	d100      	bne.n	80016fe <__aeabi_dadd+0x152>
 80016fc:	e1c9      	b.n	8001a92 <__aeabi_dadd+0x4e6>
 80016fe:	1e4c      	subs	r4, r1, #1
 8001700:	2901      	cmp	r1, #1
 8001702:	d100      	bne.n	8001706 <__aeabi_dadd+0x15a>
 8001704:	e22e      	b.n	8001b64 <__aeabi_dadd+0x5b8>
 8001706:	4d8c      	ldr	r5, [pc, #560]	@ (8001938 <__aeabi_dadd+0x38c>)
 8001708:	42a9      	cmp	r1, r5
 800170a:	d100      	bne.n	800170e <__aeabi_dadd+0x162>
 800170c:	e224      	b.n	8001b58 <__aeabi_dadd+0x5ac>
 800170e:	2701      	movs	r7, #1
 8001710:	2c38      	cmp	r4, #56	@ 0x38
 8001712:	dc11      	bgt.n	8001738 <__aeabi_dadd+0x18c>
 8001714:	0021      	movs	r1, r4
 8001716:	291f      	cmp	r1, #31
 8001718:	dd00      	ble.n	800171c <__aeabi_dadd+0x170>
 800171a:	e20b      	b.n	8001b34 <__aeabi_dadd+0x588>
 800171c:	2420      	movs	r4, #32
 800171e:	0037      	movs	r7, r6
 8001720:	4648      	mov	r0, r9
 8001722:	1a64      	subs	r4, r4, r1
 8001724:	40a7      	lsls	r7, r4
 8001726:	40c8      	lsrs	r0, r1
 8001728:	4307      	orrs	r7, r0
 800172a:	4648      	mov	r0, r9
 800172c:	40a0      	lsls	r0, r4
 800172e:	40ce      	lsrs	r6, r1
 8001730:	1e44      	subs	r4, r0, #1
 8001732:	41a0      	sbcs	r0, r4
 8001734:	1b9b      	subs	r3, r3, r6
 8001736:	4307      	orrs	r7, r0
 8001738:	1bd7      	subs	r7, r2, r7
 800173a:	42ba      	cmp	r2, r7
 800173c:	4192      	sbcs	r2, r2
 800173e:	4252      	negs	r2, r2
 8001740:	4665      	mov	r5, ip
 8001742:	4644      	mov	r4, r8
 8001744:	1a9e      	subs	r6, r3, r2
 8001746:	e783      	b.n	8001650 <__aeabi_dadd+0xa4>
 8001748:	2900      	cmp	r1, #0
 800174a:	dc00      	bgt.n	800174e <__aeabi_dadd+0x1a2>
 800174c:	e09c      	b.n	8001888 <__aeabi_dadd+0x2dc>
 800174e:	4647      	mov	r7, r8
 8001750:	2f00      	cmp	r7, #0
 8001752:	d167      	bne.n	8001824 <__aeabi_dadd+0x278>
 8001754:	001f      	movs	r7, r3
 8001756:	4317      	orrs	r7, r2
 8001758:	d100      	bne.n	800175c <__aeabi_dadd+0x1b0>
 800175a:	e0e4      	b.n	8001926 <__aeabi_dadd+0x37a>
 800175c:	1e48      	subs	r0, r1, #1
 800175e:	2901      	cmp	r1, #1
 8001760:	d100      	bne.n	8001764 <__aeabi_dadd+0x1b8>
 8001762:	e19b      	b.n	8001a9c <__aeabi_dadd+0x4f0>
 8001764:	4f74      	ldr	r7, [pc, #464]	@ (8001938 <__aeabi_dadd+0x38c>)
 8001766:	42b9      	cmp	r1, r7
 8001768:	d100      	bne.n	800176c <__aeabi_dadd+0x1c0>
 800176a:	e0eb      	b.n	8001944 <__aeabi_dadd+0x398>
 800176c:	2701      	movs	r7, #1
 800176e:	0001      	movs	r1, r0
 8001770:	2838      	cmp	r0, #56	@ 0x38
 8001772:	dc11      	bgt.n	8001798 <__aeabi_dadd+0x1ec>
 8001774:	291f      	cmp	r1, #31
 8001776:	dd00      	ble.n	800177a <__aeabi_dadd+0x1ce>
 8001778:	e1c7      	b.n	8001b0a <__aeabi_dadd+0x55e>
 800177a:	2720      	movs	r7, #32
 800177c:	1a78      	subs	r0, r7, r1
 800177e:	001f      	movs	r7, r3
 8001780:	4684      	mov	ip, r0
 8001782:	4087      	lsls	r7, r0
 8001784:	0010      	movs	r0, r2
 8001786:	40c8      	lsrs	r0, r1
 8001788:	4307      	orrs	r7, r0
 800178a:	4660      	mov	r0, ip
 800178c:	4082      	lsls	r2, r0
 800178e:	40cb      	lsrs	r3, r1
 8001790:	1e50      	subs	r0, r2, #1
 8001792:	4182      	sbcs	r2, r0
 8001794:	18f6      	adds	r6, r6, r3
 8001796:	4317      	orrs	r7, r2
 8001798:	444f      	add	r7, r9
 800179a:	454f      	cmp	r7, r9
 800179c:	4180      	sbcs	r0, r0
 800179e:	4240      	negs	r0, r0
 80017a0:	1836      	adds	r6, r6, r0
 80017a2:	0233      	lsls	r3, r6, #8
 80017a4:	d557      	bpl.n	8001856 <__aeabi_dadd+0x2aa>
 80017a6:	4b64      	ldr	r3, [pc, #400]	@ (8001938 <__aeabi_dadd+0x38c>)
 80017a8:	3401      	adds	r4, #1
 80017aa:	429c      	cmp	r4, r3
 80017ac:	d045      	beq.n	800183a <__aeabi_dadd+0x28e>
 80017ae:	2101      	movs	r1, #1
 80017b0:	4b62      	ldr	r3, [pc, #392]	@ (800193c <__aeabi_dadd+0x390>)
 80017b2:	087a      	lsrs	r2, r7, #1
 80017b4:	401e      	ands	r6, r3
 80017b6:	4039      	ands	r1, r7
 80017b8:	430a      	orrs	r2, r1
 80017ba:	07f7      	lsls	r7, r6, #31
 80017bc:	4317      	orrs	r7, r2
 80017be:	0876      	lsrs	r6, r6, #1
 80017c0:	e771      	b.n	80016a6 <__aeabi_dadd+0xfa>
 80017c2:	001f      	movs	r7, r3
 80017c4:	4317      	orrs	r7, r2
 80017c6:	d100      	bne.n	80017ca <__aeabi_dadd+0x21e>
 80017c8:	e0ad      	b.n	8001926 <__aeabi_dadd+0x37a>
 80017ca:	1e4f      	subs	r7, r1, #1
 80017cc:	46bc      	mov	ip, r7
 80017ce:	2901      	cmp	r1, #1
 80017d0:	d100      	bne.n	80017d4 <__aeabi_dadd+0x228>
 80017d2:	e182      	b.n	8001ada <__aeabi_dadd+0x52e>
 80017d4:	4f58      	ldr	r7, [pc, #352]	@ (8001938 <__aeabi_dadd+0x38c>)
 80017d6:	42b9      	cmp	r1, r7
 80017d8:	d100      	bne.n	80017dc <__aeabi_dadd+0x230>
 80017da:	e190      	b.n	8001afe <__aeabi_dadd+0x552>
 80017dc:	4661      	mov	r1, ip
 80017de:	2701      	movs	r7, #1
 80017e0:	2938      	cmp	r1, #56	@ 0x38
 80017e2:	dd00      	ble.n	80017e6 <__aeabi_dadd+0x23a>
 80017e4:	e72e      	b.n	8001644 <__aeabi_dadd+0x98>
 80017e6:	e718      	b.n	800161a <__aeabi_dadd+0x6e>
 80017e8:	4f55      	ldr	r7, [pc, #340]	@ (8001940 <__aeabi_dadd+0x394>)
 80017ea:	1c61      	adds	r1, r4, #1
 80017ec:	4239      	tst	r1, r7
 80017ee:	d000      	beq.n	80017f2 <__aeabi_dadd+0x246>
 80017f0:	e0d0      	b.n	8001994 <__aeabi_dadd+0x3e8>
 80017f2:	0031      	movs	r1, r6
 80017f4:	4648      	mov	r0, r9
 80017f6:	001f      	movs	r7, r3
 80017f8:	4301      	orrs	r1, r0
 80017fa:	4317      	orrs	r7, r2
 80017fc:	2c00      	cmp	r4, #0
 80017fe:	d000      	beq.n	8001802 <__aeabi_dadd+0x256>
 8001800:	e13d      	b.n	8001a7e <__aeabi_dadd+0x4d2>
 8001802:	2900      	cmp	r1, #0
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x25c>
 8001806:	e1bc      	b.n	8001b82 <__aeabi_dadd+0x5d6>
 8001808:	2f00      	cmp	r7, #0
 800180a:	d000      	beq.n	800180e <__aeabi_dadd+0x262>
 800180c:	e1bf      	b.n	8001b8e <__aeabi_dadd+0x5e2>
 800180e:	464b      	mov	r3, r9
 8001810:	2100      	movs	r1, #0
 8001812:	08d8      	lsrs	r0, r3, #3
 8001814:	0777      	lsls	r7, r6, #29
 8001816:	4307      	orrs	r7, r0
 8001818:	08f0      	lsrs	r0, r6, #3
 800181a:	0306      	lsls	r6, r0, #12
 800181c:	054c      	lsls	r4, r1, #21
 800181e:	0b36      	lsrs	r6, r6, #12
 8001820:	0d64      	lsrs	r4, r4, #21
 8001822:	e00c      	b.n	800183e <__aeabi_dadd+0x292>
 8001824:	4f44      	ldr	r7, [pc, #272]	@ (8001938 <__aeabi_dadd+0x38c>)
 8001826:	42bc      	cmp	r4, r7
 8001828:	d100      	bne.n	800182c <__aeabi_dadd+0x280>
 800182a:	e08b      	b.n	8001944 <__aeabi_dadd+0x398>
 800182c:	2701      	movs	r7, #1
 800182e:	2938      	cmp	r1, #56	@ 0x38
 8001830:	dcb2      	bgt.n	8001798 <__aeabi_dadd+0x1ec>
 8001832:	2780      	movs	r7, #128	@ 0x80
 8001834:	043f      	lsls	r7, r7, #16
 8001836:	433b      	orrs	r3, r7
 8001838:	e79c      	b.n	8001774 <__aeabi_dadd+0x1c8>
 800183a:	2600      	movs	r6, #0
 800183c:	2700      	movs	r7, #0
 800183e:	0524      	lsls	r4, r4, #20
 8001840:	4334      	orrs	r4, r6
 8001842:	07ed      	lsls	r5, r5, #31
 8001844:	432c      	orrs	r4, r5
 8001846:	0038      	movs	r0, r7
 8001848:	0021      	movs	r1, r4
 800184a:	b002      	add	sp, #8
 800184c:	bce0      	pop	{r5, r6, r7}
 800184e:	46ba      	mov	sl, r7
 8001850:	46b1      	mov	r9, r6
 8001852:	46a8      	mov	r8, r5
 8001854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001856:	077b      	lsls	r3, r7, #29
 8001858:	d004      	beq.n	8001864 <__aeabi_dadd+0x2b8>
 800185a:	230f      	movs	r3, #15
 800185c:	403b      	ands	r3, r7
 800185e:	2b04      	cmp	r3, #4
 8001860:	d000      	beq.n	8001864 <__aeabi_dadd+0x2b8>
 8001862:	e728      	b.n	80016b6 <__aeabi_dadd+0x10a>
 8001864:	08f8      	lsrs	r0, r7, #3
 8001866:	4b34      	ldr	r3, [pc, #208]	@ (8001938 <__aeabi_dadd+0x38c>)
 8001868:	0777      	lsls	r7, r6, #29
 800186a:	4307      	orrs	r7, r0
 800186c:	08f0      	lsrs	r0, r6, #3
 800186e:	429c      	cmp	r4, r3
 8001870:	d000      	beq.n	8001874 <__aeabi_dadd+0x2c8>
 8001872:	e24a      	b.n	8001d0a <__aeabi_dadd+0x75e>
 8001874:	003b      	movs	r3, r7
 8001876:	4303      	orrs	r3, r0
 8001878:	d059      	beq.n	800192e <__aeabi_dadd+0x382>
 800187a:	2680      	movs	r6, #128	@ 0x80
 800187c:	0336      	lsls	r6, r6, #12
 800187e:	4306      	orrs	r6, r0
 8001880:	0336      	lsls	r6, r6, #12
 8001882:	4c2d      	ldr	r4, [pc, #180]	@ (8001938 <__aeabi_dadd+0x38c>)
 8001884:	0b36      	lsrs	r6, r6, #12
 8001886:	e7da      	b.n	800183e <__aeabi_dadd+0x292>
 8001888:	2900      	cmp	r1, #0
 800188a:	d061      	beq.n	8001950 <__aeabi_dadd+0x3a4>
 800188c:	4641      	mov	r1, r8
 800188e:	1b09      	subs	r1, r1, r4
 8001890:	2c00      	cmp	r4, #0
 8001892:	d100      	bne.n	8001896 <__aeabi_dadd+0x2ea>
 8001894:	e0b9      	b.n	8001a0a <__aeabi_dadd+0x45e>
 8001896:	4c28      	ldr	r4, [pc, #160]	@ (8001938 <__aeabi_dadd+0x38c>)
 8001898:	45a0      	cmp	r8, r4
 800189a:	d100      	bne.n	800189e <__aeabi_dadd+0x2f2>
 800189c:	e1a5      	b.n	8001bea <__aeabi_dadd+0x63e>
 800189e:	2701      	movs	r7, #1
 80018a0:	2938      	cmp	r1, #56	@ 0x38
 80018a2:	dc13      	bgt.n	80018cc <__aeabi_dadd+0x320>
 80018a4:	2480      	movs	r4, #128	@ 0x80
 80018a6:	0424      	lsls	r4, r4, #16
 80018a8:	4326      	orrs	r6, r4
 80018aa:	291f      	cmp	r1, #31
 80018ac:	dd00      	ble.n	80018b0 <__aeabi_dadd+0x304>
 80018ae:	e1c8      	b.n	8001c42 <__aeabi_dadd+0x696>
 80018b0:	2420      	movs	r4, #32
 80018b2:	0037      	movs	r7, r6
 80018b4:	4648      	mov	r0, r9
 80018b6:	1a64      	subs	r4, r4, r1
 80018b8:	40a7      	lsls	r7, r4
 80018ba:	40c8      	lsrs	r0, r1
 80018bc:	4307      	orrs	r7, r0
 80018be:	4648      	mov	r0, r9
 80018c0:	40a0      	lsls	r0, r4
 80018c2:	40ce      	lsrs	r6, r1
 80018c4:	1e44      	subs	r4, r0, #1
 80018c6:	41a0      	sbcs	r0, r4
 80018c8:	199b      	adds	r3, r3, r6
 80018ca:	4307      	orrs	r7, r0
 80018cc:	18bf      	adds	r7, r7, r2
 80018ce:	4297      	cmp	r7, r2
 80018d0:	4192      	sbcs	r2, r2
 80018d2:	4252      	negs	r2, r2
 80018d4:	4644      	mov	r4, r8
 80018d6:	18d6      	adds	r6, r2, r3
 80018d8:	e763      	b.n	80017a2 <__aeabi_dadd+0x1f6>
 80018da:	0038      	movs	r0, r7
 80018dc:	f001 fed0 	bl	8003680 <__clzsi2>
 80018e0:	0003      	movs	r3, r0
 80018e2:	3318      	adds	r3, #24
 80018e4:	2b1f      	cmp	r3, #31
 80018e6:	dc00      	bgt.n	80018ea <__aeabi_dadd+0x33e>
 80018e8:	e6bf      	b.n	800166a <__aeabi_dadd+0xbe>
 80018ea:	003a      	movs	r2, r7
 80018ec:	3808      	subs	r0, #8
 80018ee:	4082      	lsls	r2, r0
 80018f0:	429c      	cmp	r4, r3
 80018f2:	dd00      	ble.n	80018f6 <__aeabi_dadd+0x34a>
 80018f4:	e083      	b.n	80019fe <__aeabi_dadd+0x452>
 80018f6:	1b1b      	subs	r3, r3, r4
 80018f8:	1c58      	adds	r0, r3, #1
 80018fa:	281f      	cmp	r0, #31
 80018fc:	dc00      	bgt.n	8001900 <__aeabi_dadd+0x354>
 80018fe:	e1b4      	b.n	8001c6a <__aeabi_dadd+0x6be>
 8001900:	0017      	movs	r7, r2
 8001902:	3b1f      	subs	r3, #31
 8001904:	40df      	lsrs	r7, r3
 8001906:	2820      	cmp	r0, #32
 8001908:	d005      	beq.n	8001916 <__aeabi_dadd+0x36a>
 800190a:	2340      	movs	r3, #64	@ 0x40
 800190c:	1a1b      	subs	r3, r3, r0
 800190e:	409a      	lsls	r2, r3
 8001910:	1e53      	subs	r3, r2, #1
 8001912:	419a      	sbcs	r2, r3
 8001914:	4317      	orrs	r7, r2
 8001916:	2400      	movs	r4, #0
 8001918:	2f00      	cmp	r7, #0
 800191a:	d00a      	beq.n	8001932 <__aeabi_dadd+0x386>
 800191c:	077b      	lsls	r3, r7, #29
 800191e:	d000      	beq.n	8001922 <__aeabi_dadd+0x376>
 8001920:	e6c4      	b.n	80016ac <__aeabi_dadd+0x100>
 8001922:	0026      	movs	r6, r4
 8001924:	e79e      	b.n	8001864 <__aeabi_dadd+0x2b8>
 8001926:	464b      	mov	r3, r9
 8001928:	000c      	movs	r4, r1
 800192a:	08d8      	lsrs	r0, r3, #3
 800192c:	e79b      	b.n	8001866 <__aeabi_dadd+0x2ba>
 800192e:	2700      	movs	r7, #0
 8001930:	4c01      	ldr	r4, [pc, #4]	@ (8001938 <__aeabi_dadd+0x38c>)
 8001932:	2600      	movs	r6, #0
 8001934:	e783      	b.n	800183e <__aeabi_dadd+0x292>
 8001936:	46c0      	nop			@ (mov r8, r8)
 8001938:	000007ff 	.word	0x000007ff
 800193c:	ff7fffff 	.word	0xff7fffff
 8001940:	000007fe 	.word	0x000007fe
 8001944:	464b      	mov	r3, r9
 8001946:	0777      	lsls	r7, r6, #29
 8001948:	08d8      	lsrs	r0, r3, #3
 800194a:	4307      	orrs	r7, r0
 800194c:	08f0      	lsrs	r0, r6, #3
 800194e:	e791      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001950:	4fcd      	ldr	r7, [pc, #820]	@ (8001c88 <__aeabi_dadd+0x6dc>)
 8001952:	1c61      	adds	r1, r4, #1
 8001954:	4239      	tst	r1, r7
 8001956:	d16b      	bne.n	8001a30 <__aeabi_dadd+0x484>
 8001958:	0031      	movs	r1, r6
 800195a:	4648      	mov	r0, r9
 800195c:	4301      	orrs	r1, r0
 800195e:	2c00      	cmp	r4, #0
 8001960:	d000      	beq.n	8001964 <__aeabi_dadd+0x3b8>
 8001962:	e14b      	b.n	8001bfc <__aeabi_dadd+0x650>
 8001964:	001f      	movs	r7, r3
 8001966:	4317      	orrs	r7, r2
 8001968:	2900      	cmp	r1, #0
 800196a:	d100      	bne.n	800196e <__aeabi_dadd+0x3c2>
 800196c:	e181      	b.n	8001c72 <__aeabi_dadd+0x6c6>
 800196e:	2f00      	cmp	r7, #0
 8001970:	d100      	bne.n	8001974 <__aeabi_dadd+0x3c8>
 8001972:	e74c      	b.n	800180e <__aeabi_dadd+0x262>
 8001974:	444a      	add	r2, r9
 8001976:	454a      	cmp	r2, r9
 8001978:	4180      	sbcs	r0, r0
 800197a:	18f6      	adds	r6, r6, r3
 800197c:	4240      	negs	r0, r0
 800197e:	1836      	adds	r6, r6, r0
 8001980:	0233      	lsls	r3, r6, #8
 8001982:	d500      	bpl.n	8001986 <__aeabi_dadd+0x3da>
 8001984:	e1b0      	b.n	8001ce8 <__aeabi_dadd+0x73c>
 8001986:	0017      	movs	r7, r2
 8001988:	4691      	mov	r9, r2
 800198a:	4337      	orrs	r7, r6
 800198c:	d000      	beq.n	8001990 <__aeabi_dadd+0x3e4>
 800198e:	e73e      	b.n	800180e <__aeabi_dadd+0x262>
 8001990:	2600      	movs	r6, #0
 8001992:	e754      	b.n	800183e <__aeabi_dadd+0x292>
 8001994:	4649      	mov	r1, r9
 8001996:	1a89      	subs	r1, r1, r2
 8001998:	4688      	mov	r8, r1
 800199a:	45c1      	cmp	r9, r8
 800199c:	41bf      	sbcs	r7, r7
 800199e:	1af1      	subs	r1, r6, r3
 80019a0:	427f      	negs	r7, r7
 80019a2:	1bc9      	subs	r1, r1, r7
 80019a4:	020f      	lsls	r7, r1, #8
 80019a6:	d461      	bmi.n	8001a6c <__aeabi_dadd+0x4c0>
 80019a8:	4647      	mov	r7, r8
 80019aa:	430f      	orrs	r7, r1
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dadd+0x404>
 80019ae:	e0bd      	b.n	8001b2c <__aeabi_dadd+0x580>
 80019b0:	000e      	movs	r6, r1
 80019b2:	4647      	mov	r7, r8
 80019b4:	e651      	b.n	800165a <__aeabi_dadd+0xae>
 80019b6:	4cb5      	ldr	r4, [pc, #724]	@ (8001c8c <__aeabi_dadd+0x6e0>)
 80019b8:	45a0      	cmp	r8, r4
 80019ba:	d100      	bne.n	80019be <__aeabi_dadd+0x412>
 80019bc:	e100      	b.n	8001bc0 <__aeabi_dadd+0x614>
 80019be:	2701      	movs	r7, #1
 80019c0:	2938      	cmp	r1, #56	@ 0x38
 80019c2:	dd00      	ble.n	80019c6 <__aeabi_dadd+0x41a>
 80019c4:	e6b8      	b.n	8001738 <__aeabi_dadd+0x18c>
 80019c6:	2480      	movs	r4, #128	@ 0x80
 80019c8:	0424      	lsls	r4, r4, #16
 80019ca:	4326      	orrs	r6, r4
 80019cc:	e6a3      	b.n	8001716 <__aeabi_dadd+0x16a>
 80019ce:	4eb0      	ldr	r6, [pc, #704]	@ (8001c90 <__aeabi_dadd+0x6e4>)
 80019d0:	1ae4      	subs	r4, r4, r3
 80019d2:	4016      	ands	r6, r2
 80019d4:	077b      	lsls	r3, r7, #29
 80019d6:	d000      	beq.n	80019da <__aeabi_dadd+0x42e>
 80019d8:	e73f      	b.n	800185a <__aeabi_dadd+0x2ae>
 80019da:	e743      	b.n	8001864 <__aeabi_dadd+0x2b8>
 80019dc:	000f      	movs	r7, r1
 80019de:	0018      	movs	r0, r3
 80019e0:	3f20      	subs	r7, #32
 80019e2:	40f8      	lsrs	r0, r7
 80019e4:	4684      	mov	ip, r0
 80019e6:	2920      	cmp	r1, #32
 80019e8:	d003      	beq.n	80019f2 <__aeabi_dadd+0x446>
 80019ea:	2740      	movs	r7, #64	@ 0x40
 80019ec:	1a79      	subs	r1, r7, r1
 80019ee:	408b      	lsls	r3, r1
 80019f0:	431a      	orrs	r2, r3
 80019f2:	1e53      	subs	r3, r2, #1
 80019f4:	419a      	sbcs	r2, r3
 80019f6:	4663      	mov	r3, ip
 80019f8:	0017      	movs	r7, r2
 80019fa:	431f      	orrs	r7, r3
 80019fc:	e622      	b.n	8001644 <__aeabi_dadd+0x98>
 80019fe:	48a4      	ldr	r0, [pc, #656]	@ (8001c90 <__aeabi_dadd+0x6e4>)
 8001a00:	1ae1      	subs	r1, r4, r3
 8001a02:	4010      	ands	r0, r2
 8001a04:	0747      	lsls	r7, r0, #29
 8001a06:	08c0      	lsrs	r0, r0, #3
 8001a08:	e707      	b.n	800181a <__aeabi_dadd+0x26e>
 8001a0a:	0034      	movs	r4, r6
 8001a0c:	4648      	mov	r0, r9
 8001a0e:	4304      	orrs	r4, r0
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dadd+0x468>
 8001a12:	e0fa      	b.n	8001c0a <__aeabi_dadd+0x65e>
 8001a14:	1e4c      	subs	r4, r1, #1
 8001a16:	2901      	cmp	r1, #1
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dadd+0x470>
 8001a1a:	e0d7      	b.n	8001bcc <__aeabi_dadd+0x620>
 8001a1c:	4f9b      	ldr	r7, [pc, #620]	@ (8001c8c <__aeabi_dadd+0x6e0>)
 8001a1e:	42b9      	cmp	r1, r7
 8001a20:	d100      	bne.n	8001a24 <__aeabi_dadd+0x478>
 8001a22:	e0e2      	b.n	8001bea <__aeabi_dadd+0x63e>
 8001a24:	2701      	movs	r7, #1
 8001a26:	2c38      	cmp	r4, #56	@ 0x38
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dadd+0x480>
 8001a2a:	e74f      	b.n	80018cc <__aeabi_dadd+0x320>
 8001a2c:	0021      	movs	r1, r4
 8001a2e:	e73c      	b.n	80018aa <__aeabi_dadd+0x2fe>
 8001a30:	4c96      	ldr	r4, [pc, #600]	@ (8001c8c <__aeabi_dadd+0x6e0>)
 8001a32:	42a1      	cmp	r1, r4
 8001a34:	d100      	bne.n	8001a38 <__aeabi_dadd+0x48c>
 8001a36:	e0dd      	b.n	8001bf4 <__aeabi_dadd+0x648>
 8001a38:	444a      	add	r2, r9
 8001a3a:	454a      	cmp	r2, r9
 8001a3c:	4180      	sbcs	r0, r0
 8001a3e:	18f3      	adds	r3, r6, r3
 8001a40:	4240      	negs	r0, r0
 8001a42:	1818      	adds	r0, r3, r0
 8001a44:	07c7      	lsls	r7, r0, #31
 8001a46:	0852      	lsrs	r2, r2, #1
 8001a48:	4317      	orrs	r7, r2
 8001a4a:	0846      	lsrs	r6, r0, #1
 8001a4c:	0752      	lsls	r2, r2, #29
 8001a4e:	d005      	beq.n	8001a5c <__aeabi_dadd+0x4b0>
 8001a50:	220f      	movs	r2, #15
 8001a52:	000c      	movs	r4, r1
 8001a54:	403a      	ands	r2, r7
 8001a56:	2a04      	cmp	r2, #4
 8001a58:	d000      	beq.n	8001a5c <__aeabi_dadd+0x4b0>
 8001a5a:	e62c      	b.n	80016b6 <__aeabi_dadd+0x10a>
 8001a5c:	0776      	lsls	r6, r6, #29
 8001a5e:	08ff      	lsrs	r7, r7, #3
 8001a60:	4337      	orrs	r7, r6
 8001a62:	0900      	lsrs	r0, r0, #4
 8001a64:	e6d9      	b.n	800181a <__aeabi_dadd+0x26e>
 8001a66:	2700      	movs	r7, #0
 8001a68:	2600      	movs	r6, #0
 8001a6a:	e6e8      	b.n	800183e <__aeabi_dadd+0x292>
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	1a57      	subs	r7, r2, r1
 8001a70:	42ba      	cmp	r2, r7
 8001a72:	4192      	sbcs	r2, r2
 8001a74:	1b9e      	subs	r6, r3, r6
 8001a76:	4252      	negs	r2, r2
 8001a78:	4665      	mov	r5, ip
 8001a7a:	1ab6      	subs	r6, r6, r2
 8001a7c:	e5ed      	b.n	800165a <__aeabi_dadd+0xae>
 8001a7e:	2900      	cmp	r1, #0
 8001a80:	d000      	beq.n	8001a84 <__aeabi_dadd+0x4d8>
 8001a82:	e0c6      	b.n	8001c12 <__aeabi_dadd+0x666>
 8001a84:	2f00      	cmp	r7, #0
 8001a86:	d167      	bne.n	8001b58 <__aeabi_dadd+0x5ac>
 8001a88:	2680      	movs	r6, #128	@ 0x80
 8001a8a:	2500      	movs	r5, #0
 8001a8c:	4c7f      	ldr	r4, [pc, #508]	@ (8001c8c <__aeabi_dadd+0x6e0>)
 8001a8e:	0336      	lsls	r6, r6, #12
 8001a90:	e6d5      	b.n	800183e <__aeabi_dadd+0x292>
 8001a92:	4665      	mov	r5, ip
 8001a94:	000c      	movs	r4, r1
 8001a96:	001e      	movs	r6, r3
 8001a98:	08d0      	lsrs	r0, r2, #3
 8001a9a:	e6e4      	b.n	8001866 <__aeabi_dadd+0x2ba>
 8001a9c:	444a      	add	r2, r9
 8001a9e:	454a      	cmp	r2, r9
 8001aa0:	4180      	sbcs	r0, r0
 8001aa2:	18f3      	adds	r3, r6, r3
 8001aa4:	4240      	negs	r0, r0
 8001aa6:	1818      	adds	r0, r3, r0
 8001aa8:	0011      	movs	r1, r2
 8001aaa:	0203      	lsls	r3, r0, #8
 8001aac:	d400      	bmi.n	8001ab0 <__aeabi_dadd+0x504>
 8001aae:	e096      	b.n	8001bde <__aeabi_dadd+0x632>
 8001ab0:	4b77      	ldr	r3, [pc, #476]	@ (8001c90 <__aeabi_dadd+0x6e4>)
 8001ab2:	0849      	lsrs	r1, r1, #1
 8001ab4:	4018      	ands	r0, r3
 8001ab6:	07c3      	lsls	r3, r0, #31
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	0844      	lsrs	r4, r0, #1
 8001abc:	0749      	lsls	r1, r1, #29
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dadd+0x516>
 8001ac0:	e129      	b.n	8001d16 <__aeabi_dadd+0x76a>
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	401a      	ands	r2, r3
 8001ac6:	2a04      	cmp	r2, #4
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dadd+0x520>
 8001aca:	e0ea      	b.n	8001ca2 <__aeabi_dadd+0x6f6>
 8001acc:	1d1f      	adds	r7, r3, #4
 8001ace:	429f      	cmp	r7, r3
 8001ad0:	41b6      	sbcs	r6, r6
 8001ad2:	4276      	negs	r6, r6
 8001ad4:	1936      	adds	r6, r6, r4
 8001ad6:	2402      	movs	r4, #2
 8001ad8:	e6c4      	b.n	8001864 <__aeabi_dadd+0x2b8>
 8001ada:	4649      	mov	r1, r9
 8001adc:	1a8f      	subs	r7, r1, r2
 8001ade:	45b9      	cmp	r9, r7
 8001ae0:	4180      	sbcs	r0, r0
 8001ae2:	1af6      	subs	r6, r6, r3
 8001ae4:	4240      	negs	r0, r0
 8001ae6:	1a36      	subs	r6, r6, r0
 8001ae8:	0233      	lsls	r3, r6, #8
 8001aea:	d406      	bmi.n	8001afa <__aeabi_dadd+0x54e>
 8001aec:	0773      	lsls	r3, r6, #29
 8001aee:	08ff      	lsrs	r7, r7, #3
 8001af0:	2101      	movs	r1, #1
 8001af2:	431f      	orrs	r7, r3
 8001af4:	08f0      	lsrs	r0, r6, #3
 8001af6:	e690      	b.n	800181a <__aeabi_dadd+0x26e>
 8001af8:	4665      	mov	r5, ip
 8001afa:	2401      	movs	r4, #1
 8001afc:	e5ab      	b.n	8001656 <__aeabi_dadd+0xaa>
 8001afe:	464b      	mov	r3, r9
 8001b00:	0777      	lsls	r7, r6, #29
 8001b02:	08d8      	lsrs	r0, r3, #3
 8001b04:	4307      	orrs	r7, r0
 8001b06:	08f0      	lsrs	r0, r6, #3
 8001b08:	e6b4      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001b0a:	000f      	movs	r7, r1
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	3f20      	subs	r7, #32
 8001b10:	40f8      	lsrs	r0, r7
 8001b12:	4684      	mov	ip, r0
 8001b14:	2920      	cmp	r1, #32
 8001b16:	d003      	beq.n	8001b20 <__aeabi_dadd+0x574>
 8001b18:	2740      	movs	r7, #64	@ 0x40
 8001b1a:	1a79      	subs	r1, r7, r1
 8001b1c:	408b      	lsls	r3, r1
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	1e53      	subs	r3, r2, #1
 8001b22:	419a      	sbcs	r2, r3
 8001b24:	4663      	mov	r3, ip
 8001b26:	0017      	movs	r7, r2
 8001b28:	431f      	orrs	r7, r3
 8001b2a:	e635      	b.n	8001798 <__aeabi_dadd+0x1ec>
 8001b2c:	2500      	movs	r5, #0
 8001b2e:	2400      	movs	r4, #0
 8001b30:	2600      	movs	r6, #0
 8001b32:	e684      	b.n	800183e <__aeabi_dadd+0x292>
 8001b34:	000c      	movs	r4, r1
 8001b36:	0035      	movs	r5, r6
 8001b38:	3c20      	subs	r4, #32
 8001b3a:	40e5      	lsrs	r5, r4
 8001b3c:	2920      	cmp	r1, #32
 8001b3e:	d005      	beq.n	8001b4c <__aeabi_dadd+0x5a0>
 8001b40:	2440      	movs	r4, #64	@ 0x40
 8001b42:	1a61      	subs	r1, r4, r1
 8001b44:	408e      	lsls	r6, r1
 8001b46:	4649      	mov	r1, r9
 8001b48:	4331      	orrs	r1, r6
 8001b4a:	4689      	mov	r9, r1
 8001b4c:	4648      	mov	r0, r9
 8001b4e:	1e41      	subs	r1, r0, #1
 8001b50:	4188      	sbcs	r0, r1
 8001b52:	0007      	movs	r7, r0
 8001b54:	432f      	orrs	r7, r5
 8001b56:	e5ef      	b.n	8001738 <__aeabi_dadd+0x18c>
 8001b58:	08d2      	lsrs	r2, r2, #3
 8001b5a:	075f      	lsls	r7, r3, #29
 8001b5c:	4665      	mov	r5, ip
 8001b5e:	4317      	orrs	r7, r2
 8001b60:	08d8      	lsrs	r0, r3, #3
 8001b62:	e687      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001b64:	1a17      	subs	r7, r2, r0
 8001b66:	42ba      	cmp	r2, r7
 8001b68:	4192      	sbcs	r2, r2
 8001b6a:	1b9e      	subs	r6, r3, r6
 8001b6c:	4252      	negs	r2, r2
 8001b6e:	1ab6      	subs	r6, r6, r2
 8001b70:	0233      	lsls	r3, r6, #8
 8001b72:	d4c1      	bmi.n	8001af8 <__aeabi_dadd+0x54c>
 8001b74:	0773      	lsls	r3, r6, #29
 8001b76:	08ff      	lsrs	r7, r7, #3
 8001b78:	4665      	mov	r5, ip
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	431f      	orrs	r7, r3
 8001b7e:	08f0      	lsrs	r0, r6, #3
 8001b80:	e64b      	b.n	800181a <__aeabi_dadd+0x26e>
 8001b82:	2f00      	cmp	r7, #0
 8001b84:	d07b      	beq.n	8001c7e <__aeabi_dadd+0x6d2>
 8001b86:	4665      	mov	r5, ip
 8001b88:	001e      	movs	r6, r3
 8001b8a:	4691      	mov	r9, r2
 8001b8c:	e63f      	b.n	800180e <__aeabi_dadd+0x262>
 8001b8e:	1a81      	subs	r1, r0, r2
 8001b90:	4688      	mov	r8, r1
 8001b92:	45c1      	cmp	r9, r8
 8001b94:	41a4      	sbcs	r4, r4
 8001b96:	1af1      	subs	r1, r6, r3
 8001b98:	4264      	negs	r4, r4
 8001b9a:	1b09      	subs	r1, r1, r4
 8001b9c:	2480      	movs	r4, #128	@ 0x80
 8001b9e:	0424      	lsls	r4, r4, #16
 8001ba0:	4221      	tst	r1, r4
 8001ba2:	d077      	beq.n	8001c94 <__aeabi_dadd+0x6e8>
 8001ba4:	1a10      	subs	r0, r2, r0
 8001ba6:	4282      	cmp	r2, r0
 8001ba8:	4192      	sbcs	r2, r2
 8001baa:	0007      	movs	r7, r0
 8001bac:	1b9e      	subs	r6, r3, r6
 8001bae:	4252      	negs	r2, r2
 8001bb0:	1ab6      	subs	r6, r6, r2
 8001bb2:	4337      	orrs	r7, r6
 8001bb4:	d000      	beq.n	8001bb8 <__aeabi_dadd+0x60c>
 8001bb6:	e0a0      	b.n	8001cfa <__aeabi_dadd+0x74e>
 8001bb8:	4665      	mov	r5, ip
 8001bba:	2400      	movs	r4, #0
 8001bbc:	2600      	movs	r6, #0
 8001bbe:	e63e      	b.n	800183e <__aeabi_dadd+0x292>
 8001bc0:	075f      	lsls	r7, r3, #29
 8001bc2:	08d2      	lsrs	r2, r2, #3
 8001bc4:	4665      	mov	r5, ip
 8001bc6:	4317      	orrs	r7, r2
 8001bc8:	08d8      	lsrs	r0, r3, #3
 8001bca:	e653      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001bcc:	1881      	adds	r1, r0, r2
 8001bce:	4291      	cmp	r1, r2
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	18f0      	adds	r0, r6, r3
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1880      	adds	r0, r0, r2
 8001bd8:	0203      	lsls	r3, r0, #8
 8001bda:	d500      	bpl.n	8001bde <__aeabi_dadd+0x632>
 8001bdc:	e768      	b.n	8001ab0 <__aeabi_dadd+0x504>
 8001bde:	0747      	lsls	r7, r0, #29
 8001be0:	08c9      	lsrs	r1, r1, #3
 8001be2:	430f      	orrs	r7, r1
 8001be4:	08c0      	lsrs	r0, r0, #3
 8001be6:	2101      	movs	r1, #1
 8001be8:	e617      	b.n	800181a <__aeabi_dadd+0x26e>
 8001bea:	08d2      	lsrs	r2, r2, #3
 8001bec:	075f      	lsls	r7, r3, #29
 8001bee:	4317      	orrs	r7, r2
 8001bf0:	08d8      	lsrs	r0, r3, #3
 8001bf2:	e63f      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001bf4:	000c      	movs	r4, r1
 8001bf6:	2600      	movs	r6, #0
 8001bf8:	2700      	movs	r7, #0
 8001bfa:	e620      	b.n	800183e <__aeabi_dadd+0x292>
 8001bfc:	2900      	cmp	r1, #0
 8001bfe:	d156      	bne.n	8001cae <__aeabi_dadd+0x702>
 8001c00:	075f      	lsls	r7, r3, #29
 8001c02:	08d2      	lsrs	r2, r2, #3
 8001c04:	4317      	orrs	r7, r2
 8001c06:	08d8      	lsrs	r0, r3, #3
 8001c08:	e634      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001c0a:	000c      	movs	r4, r1
 8001c0c:	001e      	movs	r6, r3
 8001c0e:	08d0      	lsrs	r0, r2, #3
 8001c10:	e629      	b.n	8001866 <__aeabi_dadd+0x2ba>
 8001c12:	08c1      	lsrs	r1, r0, #3
 8001c14:	0770      	lsls	r0, r6, #29
 8001c16:	4301      	orrs	r1, r0
 8001c18:	08f0      	lsrs	r0, r6, #3
 8001c1a:	2f00      	cmp	r7, #0
 8001c1c:	d062      	beq.n	8001ce4 <__aeabi_dadd+0x738>
 8001c1e:	2480      	movs	r4, #128	@ 0x80
 8001c20:	0324      	lsls	r4, r4, #12
 8001c22:	4220      	tst	r0, r4
 8001c24:	d007      	beq.n	8001c36 <__aeabi_dadd+0x68a>
 8001c26:	08de      	lsrs	r6, r3, #3
 8001c28:	4226      	tst	r6, r4
 8001c2a:	d104      	bne.n	8001c36 <__aeabi_dadd+0x68a>
 8001c2c:	4665      	mov	r5, ip
 8001c2e:	0030      	movs	r0, r6
 8001c30:	08d1      	lsrs	r1, r2, #3
 8001c32:	075b      	lsls	r3, r3, #29
 8001c34:	4319      	orrs	r1, r3
 8001c36:	0f4f      	lsrs	r7, r1, #29
 8001c38:	00c9      	lsls	r1, r1, #3
 8001c3a:	08c9      	lsrs	r1, r1, #3
 8001c3c:	077f      	lsls	r7, r7, #29
 8001c3e:	430f      	orrs	r7, r1
 8001c40:	e618      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001c42:	000c      	movs	r4, r1
 8001c44:	0030      	movs	r0, r6
 8001c46:	3c20      	subs	r4, #32
 8001c48:	40e0      	lsrs	r0, r4
 8001c4a:	4684      	mov	ip, r0
 8001c4c:	2920      	cmp	r1, #32
 8001c4e:	d005      	beq.n	8001c5c <__aeabi_dadd+0x6b0>
 8001c50:	2440      	movs	r4, #64	@ 0x40
 8001c52:	1a61      	subs	r1, r4, r1
 8001c54:	408e      	lsls	r6, r1
 8001c56:	4649      	mov	r1, r9
 8001c58:	4331      	orrs	r1, r6
 8001c5a:	4689      	mov	r9, r1
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1e41      	subs	r1, r0, #1
 8001c60:	4188      	sbcs	r0, r1
 8001c62:	4661      	mov	r1, ip
 8001c64:	0007      	movs	r7, r0
 8001c66:	430f      	orrs	r7, r1
 8001c68:	e630      	b.n	80018cc <__aeabi_dadd+0x320>
 8001c6a:	2120      	movs	r1, #32
 8001c6c:	2700      	movs	r7, #0
 8001c6e:	1a09      	subs	r1, r1, r0
 8001c70:	e50e      	b.n	8001690 <__aeabi_dadd+0xe4>
 8001c72:	001e      	movs	r6, r3
 8001c74:	2f00      	cmp	r7, #0
 8001c76:	d000      	beq.n	8001c7a <__aeabi_dadd+0x6ce>
 8001c78:	e522      	b.n	80016c0 <__aeabi_dadd+0x114>
 8001c7a:	2400      	movs	r4, #0
 8001c7c:	e758      	b.n	8001b30 <__aeabi_dadd+0x584>
 8001c7e:	2500      	movs	r5, #0
 8001c80:	2400      	movs	r4, #0
 8001c82:	2600      	movs	r6, #0
 8001c84:	e5db      	b.n	800183e <__aeabi_dadd+0x292>
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	000007fe 	.word	0x000007fe
 8001c8c:	000007ff 	.word	0x000007ff
 8001c90:	ff7fffff 	.word	0xff7fffff
 8001c94:	4647      	mov	r7, r8
 8001c96:	430f      	orrs	r7, r1
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dadd+0x6f0>
 8001c9a:	e747      	b.n	8001b2c <__aeabi_dadd+0x580>
 8001c9c:	000e      	movs	r6, r1
 8001c9e:	46c1      	mov	r9, r8
 8001ca0:	e5b5      	b.n	800180e <__aeabi_dadd+0x262>
 8001ca2:	08df      	lsrs	r7, r3, #3
 8001ca4:	0764      	lsls	r4, r4, #29
 8001ca6:	2102      	movs	r1, #2
 8001ca8:	4327      	orrs	r7, r4
 8001caa:	0900      	lsrs	r0, r0, #4
 8001cac:	e5b5      	b.n	800181a <__aeabi_dadd+0x26e>
 8001cae:	0019      	movs	r1, r3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0777      	lsls	r7, r6, #29
 8001cb4:	4307      	orrs	r7, r0
 8001cb6:	4311      	orrs	r1, r2
 8001cb8:	08f0      	lsrs	r0, r6, #3
 8001cba:	2900      	cmp	r1, #0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dadd+0x714>
 8001cbe:	e5d9      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001cc0:	2180      	movs	r1, #128	@ 0x80
 8001cc2:	0309      	lsls	r1, r1, #12
 8001cc4:	4208      	tst	r0, r1
 8001cc6:	d007      	beq.n	8001cd8 <__aeabi_dadd+0x72c>
 8001cc8:	08dc      	lsrs	r4, r3, #3
 8001cca:	420c      	tst	r4, r1
 8001ccc:	d104      	bne.n	8001cd8 <__aeabi_dadd+0x72c>
 8001cce:	08d2      	lsrs	r2, r2, #3
 8001cd0:	075b      	lsls	r3, r3, #29
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	0017      	movs	r7, r2
 8001cd6:	0020      	movs	r0, r4
 8001cd8:	0f7b      	lsrs	r3, r7, #29
 8001cda:	00ff      	lsls	r7, r7, #3
 8001cdc:	08ff      	lsrs	r7, r7, #3
 8001cde:	075b      	lsls	r3, r3, #29
 8001ce0:	431f      	orrs	r7, r3
 8001ce2:	e5c7      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001ce4:	000f      	movs	r7, r1
 8001ce6:	e5c5      	b.n	8001874 <__aeabi_dadd+0x2c8>
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <__aeabi_dadd+0x788>)
 8001cea:	08d2      	lsrs	r2, r2, #3
 8001cec:	4033      	ands	r3, r6
 8001cee:	075f      	lsls	r7, r3, #29
 8001cf0:	025b      	lsls	r3, r3, #9
 8001cf2:	2401      	movs	r4, #1
 8001cf4:	4317      	orrs	r7, r2
 8001cf6:	0b1e      	lsrs	r6, r3, #12
 8001cf8:	e5a1      	b.n	800183e <__aeabi_dadd+0x292>
 8001cfa:	4226      	tst	r6, r4
 8001cfc:	d012      	beq.n	8001d24 <__aeabi_dadd+0x778>
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <__aeabi_dadd+0x788>)
 8001d00:	4665      	mov	r5, ip
 8001d02:	0002      	movs	r2, r0
 8001d04:	2401      	movs	r4, #1
 8001d06:	401e      	ands	r6, r3
 8001d08:	e4e6      	b.n	80016d8 <__aeabi_dadd+0x12c>
 8001d0a:	0021      	movs	r1, r4
 8001d0c:	e585      	b.n	800181a <__aeabi_dadd+0x26e>
 8001d0e:	0017      	movs	r7, r2
 8001d10:	e5a8      	b.n	8001864 <__aeabi_dadd+0x2b8>
 8001d12:	003a      	movs	r2, r7
 8001d14:	e4d4      	b.n	80016c0 <__aeabi_dadd+0x114>
 8001d16:	08db      	lsrs	r3, r3, #3
 8001d18:	0764      	lsls	r4, r4, #29
 8001d1a:	431c      	orrs	r4, r3
 8001d1c:	0027      	movs	r7, r4
 8001d1e:	2102      	movs	r1, #2
 8001d20:	0900      	lsrs	r0, r0, #4
 8001d22:	e57a      	b.n	800181a <__aeabi_dadd+0x26e>
 8001d24:	08c0      	lsrs	r0, r0, #3
 8001d26:	0777      	lsls	r7, r6, #29
 8001d28:	4307      	orrs	r7, r0
 8001d2a:	4665      	mov	r5, ip
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	08f0      	lsrs	r0, r6, #3
 8001d30:	e573      	b.n	800181a <__aeabi_dadd+0x26e>
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	ff7fffff 	.word	0xff7fffff

08001d38 <__aeabi_ddiv>:
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3a:	46de      	mov	lr, fp
 8001d3c:	4645      	mov	r5, r8
 8001d3e:	4657      	mov	r7, sl
 8001d40:	464e      	mov	r6, r9
 8001d42:	b5e0      	push	{r5, r6, r7, lr}
 8001d44:	b087      	sub	sp, #28
 8001d46:	9200      	str	r2, [sp, #0]
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	030b      	lsls	r3, r1, #12
 8001d4c:	0b1b      	lsrs	r3, r3, #12
 8001d4e:	469b      	mov	fp, r3
 8001d50:	0fca      	lsrs	r2, r1, #31
 8001d52:	004b      	lsls	r3, r1, #1
 8001d54:	0004      	movs	r4, r0
 8001d56:	4680      	mov	r8, r0
 8001d58:	0d5b      	lsrs	r3, r3, #21
 8001d5a:	9202      	str	r2, [sp, #8]
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_ddiv+0x28>
 8001d5e:	e098      	b.n	8001e92 <__aeabi_ddiv+0x15a>
 8001d60:	4a7c      	ldr	r2, [pc, #496]	@ (8001f54 <__aeabi_ddiv+0x21c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d037      	beq.n	8001dd6 <__aeabi_ddiv+0x9e>
 8001d66:	4659      	mov	r1, fp
 8001d68:	0f42      	lsrs	r2, r0, #29
 8001d6a:	00c9      	lsls	r1, r1, #3
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	2180      	movs	r1, #128	@ 0x80
 8001d70:	0409      	lsls	r1, r1, #16
 8001d72:	4311      	orrs	r1, r2
 8001d74:	00c2      	lsls	r2, r0, #3
 8001d76:	4690      	mov	r8, r2
 8001d78:	4a77      	ldr	r2, [pc, #476]	@ (8001f58 <__aeabi_ddiv+0x220>)
 8001d7a:	4689      	mov	r9, r1
 8001d7c:	4692      	mov	sl, r2
 8001d7e:	449a      	add	sl, r3
 8001d80:	2300      	movs	r3, #0
 8001d82:	2400      	movs	r4, #0
 8001d84:	9303      	str	r3, [sp, #12]
 8001d86:	9e00      	ldr	r6, [sp, #0]
 8001d88:	9f01      	ldr	r7, [sp, #4]
 8001d8a:	033b      	lsls	r3, r7, #12
 8001d8c:	0b1b      	lsrs	r3, r3, #12
 8001d8e:	469b      	mov	fp, r3
 8001d90:	007b      	lsls	r3, r7, #1
 8001d92:	0030      	movs	r0, r6
 8001d94:	0d5b      	lsrs	r3, r3, #21
 8001d96:	0ffd      	lsrs	r5, r7, #31
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d059      	beq.n	8001e50 <__aeabi_ddiv+0x118>
 8001d9c:	4a6d      	ldr	r2, [pc, #436]	@ (8001f54 <__aeabi_ddiv+0x21c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d048      	beq.n	8001e34 <__aeabi_ddiv+0xfc>
 8001da2:	4659      	mov	r1, fp
 8001da4:	0f72      	lsrs	r2, r6, #29
 8001da6:	00c9      	lsls	r1, r1, #3
 8001da8:	430a      	orrs	r2, r1
 8001daa:	2180      	movs	r1, #128	@ 0x80
 8001dac:	0409      	lsls	r1, r1, #16
 8001dae:	4311      	orrs	r1, r2
 8001db0:	468b      	mov	fp, r1
 8001db2:	4969      	ldr	r1, [pc, #420]	@ (8001f58 <__aeabi_ddiv+0x220>)
 8001db4:	00f2      	lsls	r2, r6, #3
 8001db6:	468c      	mov	ip, r1
 8001db8:	4651      	mov	r1, sl
 8001dba:	4463      	add	r3, ip
 8001dbc:	1acb      	subs	r3, r1, r3
 8001dbe:	469a      	mov	sl, r3
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	9e02      	ldr	r6, [sp, #8]
 8001dc4:	406e      	eors	r6, r5
 8001dc6:	b2f6      	uxtb	r6, r6
 8001dc8:	2c0f      	cmp	r4, #15
 8001dca:	d900      	bls.n	8001dce <__aeabi_ddiv+0x96>
 8001dcc:	e0ce      	b.n	8001f6c <__aeabi_ddiv+0x234>
 8001dce:	4b63      	ldr	r3, [pc, #396]	@ (8001f5c <__aeabi_ddiv+0x224>)
 8001dd0:	00a4      	lsls	r4, r4, #2
 8001dd2:	591b      	ldr	r3, [r3, r4]
 8001dd4:	469f      	mov	pc, r3
 8001dd6:	465a      	mov	r2, fp
 8001dd8:	4302      	orrs	r2, r0
 8001dda:	4691      	mov	r9, r2
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_ddiv+0xa8>
 8001dde:	e090      	b.n	8001f02 <__aeabi_ddiv+0x1ca>
 8001de0:	469a      	mov	sl, r3
 8001de2:	2302      	movs	r3, #2
 8001de4:	4690      	mov	r8, r2
 8001de6:	2408      	movs	r4, #8
 8001de8:	9303      	str	r3, [sp, #12]
 8001dea:	e7cc      	b.n	8001d86 <__aeabi_ddiv+0x4e>
 8001dec:	46cb      	mov	fp, r9
 8001dee:	4642      	mov	r2, r8
 8001df0:	9d02      	ldr	r5, [sp, #8]
 8001df2:	9903      	ldr	r1, [sp, #12]
 8001df4:	2902      	cmp	r1, #2
 8001df6:	d100      	bne.n	8001dfa <__aeabi_ddiv+0xc2>
 8001df8:	e1de      	b.n	80021b8 <__aeabi_ddiv+0x480>
 8001dfa:	2903      	cmp	r1, #3
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_ddiv+0xc8>
 8001dfe:	e08d      	b.n	8001f1c <__aeabi_ddiv+0x1e4>
 8001e00:	2901      	cmp	r1, #1
 8001e02:	d000      	beq.n	8001e06 <__aeabi_ddiv+0xce>
 8001e04:	e179      	b.n	80020fa <__aeabi_ddiv+0x3c2>
 8001e06:	002e      	movs	r6, r5
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2400      	movs	r4, #0
 8001e0e:	4690      	mov	r8, r2
 8001e10:	051b      	lsls	r3, r3, #20
 8001e12:	4323      	orrs	r3, r4
 8001e14:	07f6      	lsls	r6, r6, #31
 8001e16:	4333      	orrs	r3, r6
 8001e18:	4640      	mov	r0, r8
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	b007      	add	sp, #28
 8001e1e:	bcf0      	pop	{r4, r5, r6, r7}
 8001e20:	46bb      	mov	fp, r7
 8001e22:	46b2      	mov	sl, r6
 8001e24:	46a9      	mov	r9, r5
 8001e26:	46a0      	mov	r8, r4
 8001e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2400      	movs	r4, #0
 8001e2e:	4690      	mov	r8, r2
 8001e30:	4b48      	ldr	r3, [pc, #288]	@ (8001f54 <__aeabi_ddiv+0x21c>)
 8001e32:	e7ed      	b.n	8001e10 <__aeabi_ddiv+0xd8>
 8001e34:	465a      	mov	r2, fp
 8001e36:	9b00      	ldr	r3, [sp, #0]
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	4b49      	ldr	r3, [pc, #292]	@ (8001f60 <__aeabi_ddiv+0x228>)
 8001e3c:	469c      	mov	ip, r3
 8001e3e:	44e2      	add	sl, ip
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	d159      	bne.n	8001ef8 <__aeabi_ddiv+0x1c0>
 8001e44:	2302      	movs	r3, #2
 8001e46:	431c      	orrs	r4, r3
 8001e48:	2300      	movs	r3, #0
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	469b      	mov	fp, r3
 8001e4e:	e7b8      	b.n	8001dc2 <__aeabi_ddiv+0x8a>
 8001e50:	465a      	mov	r2, fp
 8001e52:	9b00      	ldr	r3, [sp, #0]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	d049      	beq.n	8001eec <__aeabi_ddiv+0x1b4>
 8001e58:	465b      	mov	r3, fp
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_ddiv+0x128>
 8001e5e:	e19c      	b.n	800219a <__aeabi_ddiv+0x462>
 8001e60:	4658      	mov	r0, fp
 8001e62:	f001 fc0d 	bl	8003680 <__clzsi2>
 8001e66:	0002      	movs	r2, r0
 8001e68:	0003      	movs	r3, r0
 8001e6a:	3a0b      	subs	r2, #11
 8001e6c:	271d      	movs	r7, #29
 8001e6e:	9e00      	ldr	r6, [sp, #0]
 8001e70:	1aba      	subs	r2, r7, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	4658      	mov	r0, fp
 8001e76:	40d6      	lsrs	r6, r2
 8001e78:	3908      	subs	r1, #8
 8001e7a:	4088      	lsls	r0, r1
 8001e7c:	0032      	movs	r2, r6
 8001e7e:	4302      	orrs	r2, r0
 8001e80:	4693      	mov	fp, r2
 8001e82:	9a00      	ldr	r2, [sp, #0]
 8001e84:	408a      	lsls	r2, r1
 8001e86:	4937      	ldr	r1, [pc, #220]	@ (8001f64 <__aeabi_ddiv+0x22c>)
 8001e88:	4453      	add	r3, sl
 8001e8a:	468a      	mov	sl, r1
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	449a      	add	sl, r3
 8001e90:	e797      	b.n	8001dc2 <__aeabi_ddiv+0x8a>
 8001e92:	465b      	mov	r3, fp
 8001e94:	4303      	orrs	r3, r0
 8001e96:	4699      	mov	r9, r3
 8001e98:	d021      	beq.n	8001ede <__aeabi_ddiv+0x1a6>
 8001e9a:	465b      	mov	r3, fp
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d100      	bne.n	8001ea2 <__aeabi_ddiv+0x16a>
 8001ea0:	e169      	b.n	8002176 <__aeabi_ddiv+0x43e>
 8001ea2:	4658      	mov	r0, fp
 8001ea4:	f001 fbec 	bl	8003680 <__clzsi2>
 8001ea8:	230b      	movs	r3, #11
 8001eaa:	425b      	negs	r3, r3
 8001eac:	469c      	mov	ip, r3
 8001eae:	0002      	movs	r2, r0
 8001eb0:	4484      	add	ip, r0
 8001eb2:	4666      	mov	r6, ip
 8001eb4:	231d      	movs	r3, #29
 8001eb6:	1b9b      	subs	r3, r3, r6
 8001eb8:	0026      	movs	r6, r4
 8001eba:	0011      	movs	r1, r2
 8001ebc:	4658      	mov	r0, fp
 8001ebe:	40de      	lsrs	r6, r3
 8001ec0:	3908      	subs	r1, #8
 8001ec2:	4088      	lsls	r0, r1
 8001ec4:	0033      	movs	r3, r6
 8001ec6:	4303      	orrs	r3, r0
 8001ec8:	4699      	mov	r9, r3
 8001eca:	0023      	movs	r3, r4
 8001ecc:	408b      	lsls	r3, r1
 8001ece:	4698      	mov	r8, r3
 8001ed0:	4b25      	ldr	r3, [pc, #148]	@ (8001f68 <__aeabi_ddiv+0x230>)
 8001ed2:	2400      	movs	r4, #0
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	469a      	mov	sl, r3
 8001ed8:	2300      	movs	r3, #0
 8001eda:	9303      	str	r3, [sp, #12]
 8001edc:	e753      	b.n	8001d86 <__aeabi_ddiv+0x4e>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	4698      	mov	r8, r3
 8001ee2:	469a      	mov	sl, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	2404      	movs	r4, #4
 8001ee8:	9303      	str	r3, [sp, #12]
 8001eea:	e74c      	b.n	8001d86 <__aeabi_ddiv+0x4e>
 8001eec:	2301      	movs	r3, #1
 8001eee:	431c      	orrs	r4, r3
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	469b      	mov	fp, r3
 8001ef6:	e764      	b.n	8001dc2 <__aeabi_ddiv+0x8a>
 8001ef8:	2303      	movs	r3, #3
 8001efa:	0032      	movs	r2, r6
 8001efc:	2103      	movs	r1, #3
 8001efe:	431c      	orrs	r4, r3
 8001f00:	e75f      	b.n	8001dc2 <__aeabi_ddiv+0x8a>
 8001f02:	469a      	mov	sl, r3
 8001f04:	2303      	movs	r3, #3
 8001f06:	46d9      	mov	r9, fp
 8001f08:	240c      	movs	r4, #12
 8001f0a:	9303      	str	r3, [sp, #12]
 8001f0c:	e73b      	b.n	8001d86 <__aeabi_ddiv+0x4e>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2480      	movs	r4, #128	@ 0x80
 8001f12:	4698      	mov	r8, r3
 8001f14:	2600      	movs	r6, #0
 8001f16:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <__aeabi_ddiv+0x21c>)
 8001f18:	0324      	lsls	r4, r4, #12
 8001f1a:	e779      	b.n	8001e10 <__aeabi_ddiv+0xd8>
 8001f1c:	2480      	movs	r4, #128	@ 0x80
 8001f1e:	465b      	mov	r3, fp
 8001f20:	0324      	lsls	r4, r4, #12
 8001f22:	431c      	orrs	r4, r3
 8001f24:	0324      	lsls	r4, r4, #12
 8001f26:	002e      	movs	r6, r5
 8001f28:	4690      	mov	r8, r2
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <__aeabi_ddiv+0x21c>)
 8001f2c:	0b24      	lsrs	r4, r4, #12
 8001f2e:	e76f      	b.n	8001e10 <__aeabi_ddiv+0xd8>
 8001f30:	2480      	movs	r4, #128	@ 0x80
 8001f32:	464b      	mov	r3, r9
 8001f34:	0324      	lsls	r4, r4, #12
 8001f36:	4223      	tst	r3, r4
 8001f38:	d002      	beq.n	8001f40 <__aeabi_ddiv+0x208>
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	4223      	tst	r3, r4
 8001f3e:	d0f0      	beq.n	8001f22 <__aeabi_ddiv+0x1ea>
 8001f40:	2480      	movs	r4, #128	@ 0x80
 8001f42:	464b      	mov	r3, r9
 8001f44:	0324      	lsls	r4, r4, #12
 8001f46:	431c      	orrs	r4, r3
 8001f48:	0324      	lsls	r4, r4, #12
 8001f4a:	9e02      	ldr	r6, [sp, #8]
 8001f4c:	4b01      	ldr	r3, [pc, #4]	@ (8001f54 <__aeabi_ddiv+0x21c>)
 8001f4e:	0b24      	lsrs	r4, r4, #12
 8001f50:	e75e      	b.n	8001e10 <__aeabi_ddiv+0xd8>
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	000007ff 	.word	0x000007ff
 8001f58:	fffffc01 	.word	0xfffffc01
 8001f5c:	0800eb7c 	.word	0x0800eb7c
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000003f3 	.word	0x000003f3
 8001f68:	fffffc0d 	.word	0xfffffc0d
 8001f6c:	45cb      	cmp	fp, r9
 8001f6e:	d200      	bcs.n	8001f72 <__aeabi_ddiv+0x23a>
 8001f70:	e0f8      	b.n	8002164 <__aeabi_ddiv+0x42c>
 8001f72:	d100      	bne.n	8001f76 <__aeabi_ddiv+0x23e>
 8001f74:	e0f3      	b.n	800215e <__aeabi_ddiv+0x426>
 8001f76:	2301      	movs	r3, #1
 8001f78:	425b      	negs	r3, r3
 8001f7a:	469c      	mov	ip, r3
 8001f7c:	4644      	mov	r4, r8
 8001f7e:	4648      	mov	r0, r9
 8001f80:	2500      	movs	r5, #0
 8001f82:	44e2      	add	sl, ip
 8001f84:	465b      	mov	r3, fp
 8001f86:	0e17      	lsrs	r7, r2, #24
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	431f      	orrs	r7, r3
 8001f8c:	0c19      	lsrs	r1, r3, #16
 8001f8e:	043b      	lsls	r3, r7, #16
 8001f90:	0212      	lsls	r2, r2, #8
 8001f92:	9700      	str	r7, [sp, #0]
 8001f94:	0c1f      	lsrs	r7, r3, #16
 8001f96:	4691      	mov	r9, r2
 8001f98:	9102      	str	r1, [sp, #8]
 8001f9a:	9703      	str	r7, [sp, #12]
 8001f9c:	f7fe f952 	bl	8000244 <__aeabi_uidivmod>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	437a      	muls	r2, r7
 8001fa4:	040b      	lsls	r3, r1, #16
 8001fa6:	0c21      	lsrs	r1, r4, #16
 8001fa8:	4680      	mov	r8, r0
 8001faa:	4319      	orrs	r1, r3
 8001fac:	428a      	cmp	r2, r1
 8001fae:	d909      	bls.n	8001fc4 <__aeabi_ddiv+0x28c>
 8001fb0:	9f00      	ldr	r7, [sp, #0]
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	46bc      	mov	ip, r7
 8001fb6:	425b      	negs	r3, r3
 8001fb8:	4461      	add	r1, ip
 8001fba:	469c      	mov	ip, r3
 8001fbc:	44e0      	add	r8, ip
 8001fbe:	428f      	cmp	r7, r1
 8001fc0:	d800      	bhi.n	8001fc4 <__aeabi_ddiv+0x28c>
 8001fc2:	e15c      	b.n	800227e <__aeabi_ddiv+0x546>
 8001fc4:	1a88      	subs	r0, r1, r2
 8001fc6:	9902      	ldr	r1, [sp, #8]
 8001fc8:	f7fe f93c 	bl	8000244 <__aeabi_uidivmod>
 8001fcc:	9a03      	ldr	r2, [sp, #12]
 8001fce:	0424      	lsls	r4, r4, #16
 8001fd0:	4342      	muls	r2, r0
 8001fd2:	0409      	lsls	r1, r1, #16
 8001fd4:	0c24      	lsrs	r4, r4, #16
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	430c      	orrs	r4, r1
 8001fda:	42a2      	cmp	r2, r4
 8001fdc:	d906      	bls.n	8001fec <__aeabi_ddiv+0x2b4>
 8001fde:	9900      	ldr	r1, [sp, #0]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	468c      	mov	ip, r1
 8001fe4:	4464      	add	r4, ip
 8001fe6:	42a1      	cmp	r1, r4
 8001fe8:	d800      	bhi.n	8001fec <__aeabi_ddiv+0x2b4>
 8001fea:	e142      	b.n	8002272 <__aeabi_ddiv+0x53a>
 8001fec:	1aa0      	subs	r0, r4, r2
 8001fee:	4642      	mov	r2, r8
 8001ff0:	0412      	lsls	r2, r2, #16
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	4693      	mov	fp, r2
 8001ff6:	464b      	mov	r3, r9
 8001ff8:	4659      	mov	r1, fp
 8001ffa:	0c1b      	lsrs	r3, r3, #16
 8001ffc:	001f      	movs	r7, r3
 8001ffe:	9304      	str	r3, [sp, #16]
 8002000:	040b      	lsls	r3, r1, #16
 8002002:	4649      	mov	r1, r9
 8002004:	0409      	lsls	r1, r1, #16
 8002006:	0c09      	lsrs	r1, r1, #16
 8002008:	000c      	movs	r4, r1
 800200a:	0c1b      	lsrs	r3, r3, #16
 800200c:	435c      	muls	r4, r3
 800200e:	0c12      	lsrs	r2, r2, #16
 8002010:	437b      	muls	r3, r7
 8002012:	4688      	mov	r8, r1
 8002014:	4351      	muls	r1, r2
 8002016:	437a      	muls	r2, r7
 8002018:	0c27      	lsrs	r7, r4, #16
 800201a:	46bc      	mov	ip, r7
 800201c:	185b      	adds	r3, r3, r1
 800201e:	4463      	add	r3, ip
 8002020:	4299      	cmp	r1, r3
 8002022:	d903      	bls.n	800202c <__aeabi_ddiv+0x2f4>
 8002024:	2180      	movs	r1, #128	@ 0x80
 8002026:	0249      	lsls	r1, r1, #9
 8002028:	468c      	mov	ip, r1
 800202a:	4462      	add	r2, ip
 800202c:	0c19      	lsrs	r1, r3, #16
 800202e:	0424      	lsls	r4, r4, #16
 8002030:	041b      	lsls	r3, r3, #16
 8002032:	0c24      	lsrs	r4, r4, #16
 8002034:	188a      	adds	r2, r1, r2
 8002036:	191c      	adds	r4, r3, r4
 8002038:	4290      	cmp	r0, r2
 800203a:	d302      	bcc.n	8002042 <__aeabi_ddiv+0x30a>
 800203c:	d116      	bne.n	800206c <__aeabi_ddiv+0x334>
 800203e:	42a5      	cmp	r5, r4
 8002040:	d214      	bcs.n	800206c <__aeabi_ddiv+0x334>
 8002042:	465b      	mov	r3, fp
 8002044:	9f00      	ldr	r7, [sp, #0]
 8002046:	3b01      	subs	r3, #1
 8002048:	444d      	add	r5, r9
 800204a:	9305      	str	r3, [sp, #20]
 800204c:	454d      	cmp	r5, r9
 800204e:	419b      	sbcs	r3, r3
 8002050:	46bc      	mov	ip, r7
 8002052:	425b      	negs	r3, r3
 8002054:	4463      	add	r3, ip
 8002056:	18c0      	adds	r0, r0, r3
 8002058:	4287      	cmp	r7, r0
 800205a:	d300      	bcc.n	800205e <__aeabi_ddiv+0x326>
 800205c:	e102      	b.n	8002264 <__aeabi_ddiv+0x52c>
 800205e:	4282      	cmp	r2, r0
 8002060:	d900      	bls.n	8002064 <__aeabi_ddiv+0x32c>
 8002062:	e129      	b.n	80022b8 <__aeabi_ddiv+0x580>
 8002064:	d100      	bne.n	8002068 <__aeabi_ddiv+0x330>
 8002066:	e124      	b.n	80022b2 <__aeabi_ddiv+0x57a>
 8002068:	9b05      	ldr	r3, [sp, #20]
 800206a:	469b      	mov	fp, r3
 800206c:	1b2c      	subs	r4, r5, r4
 800206e:	42a5      	cmp	r5, r4
 8002070:	41ad      	sbcs	r5, r5
 8002072:	9b00      	ldr	r3, [sp, #0]
 8002074:	1a80      	subs	r0, r0, r2
 8002076:	426d      	negs	r5, r5
 8002078:	1b40      	subs	r0, r0, r5
 800207a:	4283      	cmp	r3, r0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x348>
 800207e:	e10f      	b.n	80022a0 <__aeabi_ddiv+0x568>
 8002080:	9902      	ldr	r1, [sp, #8]
 8002082:	f7fe f8df 	bl	8000244 <__aeabi_uidivmod>
 8002086:	9a03      	ldr	r2, [sp, #12]
 8002088:	040b      	lsls	r3, r1, #16
 800208a:	4342      	muls	r2, r0
 800208c:	0c21      	lsrs	r1, r4, #16
 800208e:	0005      	movs	r5, r0
 8002090:	4319      	orrs	r1, r3
 8002092:	428a      	cmp	r2, r1
 8002094:	d900      	bls.n	8002098 <__aeabi_ddiv+0x360>
 8002096:	e0cb      	b.n	8002230 <__aeabi_ddiv+0x4f8>
 8002098:	1a88      	subs	r0, r1, r2
 800209a:	9902      	ldr	r1, [sp, #8]
 800209c:	f7fe f8d2 	bl	8000244 <__aeabi_uidivmod>
 80020a0:	9a03      	ldr	r2, [sp, #12]
 80020a2:	0424      	lsls	r4, r4, #16
 80020a4:	4342      	muls	r2, r0
 80020a6:	0409      	lsls	r1, r1, #16
 80020a8:	0c24      	lsrs	r4, r4, #16
 80020aa:	0003      	movs	r3, r0
 80020ac:	430c      	orrs	r4, r1
 80020ae:	42a2      	cmp	r2, r4
 80020b0:	d900      	bls.n	80020b4 <__aeabi_ddiv+0x37c>
 80020b2:	e0ca      	b.n	800224a <__aeabi_ddiv+0x512>
 80020b4:	4641      	mov	r1, r8
 80020b6:	1aa4      	subs	r4, r4, r2
 80020b8:	042a      	lsls	r2, r5, #16
 80020ba:	431a      	orrs	r2, r3
 80020bc:	9f04      	ldr	r7, [sp, #16]
 80020be:	0413      	lsls	r3, r2, #16
 80020c0:	0c1b      	lsrs	r3, r3, #16
 80020c2:	4359      	muls	r1, r3
 80020c4:	4640      	mov	r0, r8
 80020c6:	437b      	muls	r3, r7
 80020c8:	469c      	mov	ip, r3
 80020ca:	0c15      	lsrs	r5, r2, #16
 80020cc:	4368      	muls	r0, r5
 80020ce:	0c0b      	lsrs	r3, r1, #16
 80020d0:	4484      	add	ip, r0
 80020d2:	4463      	add	r3, ip
 80020d4:	437d      	muls	r5, r7
 80020d6:	4298      	cmp	r0, r3
 80020d8:	d903      	bls.n	80020e2 <__aeabi_ddiv+0x3aa>
 80020da:	2080      	movs	r0, #128	@ 0x80
 80020dc:	0240      	lsls	r0, r0, #9
 80020de:	4684      	mov	ip, r0
 80020e0:	4465      	add	r5, ip
 80020e2:	0c18      	lsrs	r0, r3, #16
 80020e4:	0409      	lsls	r1, r1, #16
 80020e6:	041b      	lsls	r3, r3, #16
 80020e8:	0c09      	lsrs	r1, r1, #16
 80020ea:	1940      	adds	r0, r0, r5
 80020ec:	185b      	adds	r3, r3, r1
 80020ee:	4284      	cmp	r4, r0
 80020f0:	d327      	bcc.n	8002142 <__aeabi_ddiv+0x40a>
 80020f2:	d023      	beq.n	800213c <__aeabi_ddiv+0x404>
 80020f4:	2301      	movs	r3, #1
 80020f6:	0035      	movs	r5, r6
 80020f8:	431a      	orrs	r2, r3
 80020fa:	4b94      	ldr	r3, [pc, #592]	@ (800234c <__aeabi_ddiv+0x614>)
 80020fc:	4453      	add	r3, sl
 80020fe:	2b00      	cmp	r3, #0
 8002100:	dd60      	ble.n	80021c4 <__aeabi_ddiv+0x48c>
 8002102:	0751      	lsls	r1, r2, #29
 8002104:	d000      	beq.n	8002108 <__aeabi_ddiv+0x3d0>
 8002106:	e086      	b.n	8002216 <__aeabi_ddiv+0x4de>
 8002108:	002e      	movs	r6, r5
 800210a:	08d1      	lsrs	r1, r2, #3
 800210c:	465a      	mov	r2, fp
 800210e:	01d2      	lsls	r2, r2, #7
 8002110:	d506      	bpl.n	8002120 <__aeabi_ddiv+0x3e8>
 8002112:	465a      	mov	r2, fp
 8002114:	4b8e      	ldr	r3, [pc, #568]	@ (8002350 <__aeabi_ddiv+0x618>)
 8002116:	401a      	ands	r2, r3
 8002118:	2380      	movs	r3, #128	@ 0x80
 800211a:	4693      	mov	fp, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4453      	add	r3, sl
 8002120:	4a8c      	ldr	r2, [pc, #560]	@ (8002354 <__aeabi_ddiv+0x61c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	dd00      	ble.n	8002128 <__aeabi_ddiv+0x3f0>
 8002126:	e680      	b.n	8001e2a <__aeabi_ddiv+0xf2>
 8002128:	465a      	mov	r2, fp
 800212a:	0752      	lsls	r2, r2, #29
 800212c:	430a      	orrs	r2, r1
 800212e:	4690      	mov	r8, r2
 8002130:	465a      	mov	r2, fp
 8002132:	055b      	lsls	r3, r3, #21
 8002134:	0254      	lsls	r4, r2, #9
 8002136:	0b24      	lsrs	r4, r4, #12
 8002138:	0d5b      	lsrs	r3, r3, #21
 800213a:	e669      	b.n	8001e10 <__aeabi_ddiv+0xd8>
 800213c:	0035      	movs	r5, r6
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0db      	beq.n	80020fa <__aeabi_ddiv+0x3c2>
 8002142:	9d00      	ldr	r5, [sp, #0]
 8002144:	1e51      	subs	r1, r2, #1
 8002146:	46ac      	mov	ip, r5
 8002148:	4464      	add	r4, ip
 800214a:	42ac      	cmp	r4, r5
 800214c:	d200      	bcs.n	8002150 <__aeabi_ddiv+0x418>
 800214e:	e09e      	b.n	800228e <__aeabi_ddiv+0x556>
 8002150:	4284      	cmp	r4, r0
 8002152:	d200      	bcs.n	8002156 <__aeabi_ddiv+0x41e>
 8002154:	e0e1      	b.n	800231a <__aeabi_ddiv+0x5e2>
 8002156:	d100      	bne.n	800215a <__aeabi_ddiv+0x422>
 8002158:	e0ee      	b.n	8002338 <__aeabi_ddiv+0x600>
 800215a:	000a      	movs	r2, r1
 800215c:	e7ca      	b.n	80020f4 <__aeabi_ddiv+0x3bc>
 800215e:	4542      	cmp	r2, r8
 8002160:	d900      	bls.n	8002164 <__aeabi_ddiv+0x42c>
 8002162:	e708      	b.n	8001f76 <__aeabi_ddiv+0x23e>
 8002164:	464b      	mov	r3, r9
 8002166:	07dc      	lsls	r4, r3, #31
 8002168:	0858      	lsrs	r0, r3, #1
 800216a:	4643      	mov	r3, r8
 800216c:	085b      	lsrs	r3, r3, #1
 800216e:	431c      	orrs	r4, r3
 8002170:	4643      	mov	r3, r8
 8002172:	07dd      	lsls	r5, r3, #31
 8002174:	e706      	b.n	8001f84 <__aeabi_ddiv+0x24c>
 8002176:	f001 fa83 	bl	8003680 <__clzsi2>
 800217a:	2315      	movs	r3, #21
 800217c:	469c      	mov	ip, r3
 800217e:	4484      	add	ip, r0
 8002180:	0002      	movs	r2, r0
 8002182:	4663      	mov	r3, ip
 8002184:	3220      	adds	r2, #32
 8002186:	2b1c      	cmp	r3, #28
 8002188:	dc00      	bgt.n	800218c <__aeabi_ddiv+0x454>
 800218a:	e692      	b.n	8001eb2 <__aeabi_ddiv+0x17a>
 800218c:	0023      	movs	r3, r4
 800218e:	3808      	subs	r0, #8
 8002190:	4083      	lsls	r3, r0
 8002192:	4699      	mov	r9, r3
 8002194:	2300      	movs	r3, #0
 8002196:	4698      	mov	r8, r3
 8002198:	e69a      	b.n	8001ed0 <__aeabi_ddiv+0x198>
 800219a:	f001 fa71 	bl	8003680 <__clzsi2>
 800219e:	0002      	movs	r2, r0
 80021a0:	0003      	movs	r3, r0
 80021a2:	3215      	adds	r2, #21
 80021a4:	3320      	adds	r3, #32
 80021a6:	2a1c      	cmp	r2, #28
 80021a8:	dc00      	bgt.n	80021ac <__aeabi_ddiv+0x474>
 80021aa:	e65f      	b.n	8001e6c <__aeabi_ddiv+0x134>
 80021ac:	9900      	ldr	r1, [sp, #0]
 80021ae:	3808      	subs	r0, #8
 80021b0:	4081      	lsls	r1, r0
 80021b2:	2200      	movs	r2, #0
 80021b4:	468b      	mov	fp, r1
 80021b6:	e666      	b.n	8001e86 <__aeabi_ddiv+0x14e>
 80021b8:	2200      	movs	r2, #0
 80021ba:	002e      	movs	r6, r5
 80021bc:	2400      	movs	r4, #0
 80021be:	4690      	mov	r8, r2
 80021c0:	4b65      	ldr	r3, [pc, #404]	@ (8002358 <__aeabi_ddiv+0x620>)
 80021c2:	e625      	b.n	8001e10 <__aeabi_ddiv+0xd8>
 80021c4:	002e      	movs	r6, r5
 80021c6:	2101      	movs	r1, #1
 80021c8:	1ac9      	subs	r1, r1, r3
 80021ca:	2938      	cmp	r1, #56	@ 0x38
 80021cc:	dd00      	ble.n	80021d0 <__aeabi_ddiv+0x498>
 80021ce:	e61b      	b.n	8001e08 <__aeabi_ddiv+0xd0>
 80021d0:	291f      	cmp	r1, #31
 80021d2:	dc7e      	bgt.n	80022d2 <__aeabi_ddiv+0x59a>
 80021d4:	4861      	ldr	r0, [pc, #388]	@ (800235c <__aeabi_ddiv+0x624>)
 80021d6:	0014      	movs	r4, r2
 80021d8:	4450      	add	r0, sl
 80021da:	465b      	mov	r3, fp
 80021dc:	4082      	lsls	r2, r0
 80021de:	4083      	lsls	r3, r0
 80021e0:	40cc      	lsrs	r4, r1
 80021e2:	1e50      	subs	r0, r2, #1
 80021e4:	4182      	sbcs	r2, r0
 80021e6:	4323      	orrs	r3, r4
 80021e8:	431a      	orrs	r2, r3
 80021ea:	465b      	mov	r3, fp
 80021ec:	40cb      	lsrs	r3, r1
 80021ee:	0751      	lsls	r1, r2, #29
 80021f0:	d009      	beq.n	8002206 <__aeabi_ddiv+0x4ce>
 80021f2:	210f      	movs	r1, #15
 80021f4:	4011      	ands	r1, r2
 80021f6:	2904      	cmp	r1, #4
 80021f8:	d005      	beq.n	8002206 <__aeabi_ddiv+0x4ce>
 80021fa:	1d11      	adds	r1, r2, #4
 80021fc:	4291      	cmp	r1, r2
 80021fe:	4192      	sbcs	r2, r2
 8002200:	4252      	negs	r2, r2
 8002202:	189b      	adds	r3, r3, r2
 8002204:	000a      	movs	r2, r1
 8002206:	0219      	lsls	r1, r3, #8
 8002208:	d400      	bmi.n	800220c <__aeabi_ddiv+0x4d4>
 800220a:	e09b      	b.n	8002344 <__aeabi_ddiv+0x60c>
 800220c:	2200      	movs	r2, #0
 800220e:	2301      	movs	r3, #1
 8002210:	2400      	movs	r4, #0
 8002212:	4690      	mov	r8, r2
 8002214:	e5fc      	b.n	8001e10 <__aeabi_ddiv+0xd8>
 8002216:	210f      	movs	r1, #15
 8002218:	4011      	ands	r1, r2
 800221a:	2904      	cmp	r1, #4
 800221c:	d100      	bne.n	8002220 <__aeabi_ddiv+0x4e8>
 800221e:	e773      	b.n	8002108 <__aeabi_ddiv+0x3d0>
 8002220:	1d11      	adds	r1, r2, #4
 8002222:	4291      	cmp	r1, r2
 8002224:	4192      	sbcs	r2, r2
 8002226:	4252      	negs	r2, r2
 8002228:	002e      	movs	r6, r5
 800222a:	08c9      	lsrs	r1, r1, #3
 800222c:	4493      	add	fp, r2
 800222e:	e76d      	b.n	800210c <__aeabi_ddiv+0x3d4>
 8002230:	9b00      	ldr	r3, [sp, #0]
 8002232:	3d01      	subs	r5, #1
 8002234:	469c      	mov	ip, r3
 8002236:	4461      	add	r1, ip
 8002238:	428b      	cmp	r3, r1
 800223a:	d900      	bls.n	800223e <__aeabi_ddiv+0x506>
 800223c:	e72c      	b.n	8002098 <__aeabi_ddiv+0x360>
 800223e:	428a      	cmp	r2, r1
 8002240:	d800      	bhi.n	8002244 <__aeabi_ddiv+0x50c>
 8002242:	e729      	b.n	8002098 <__aeabi_ddiv+0x360>
 8002244:	1e85      	subs	r5, r0, #2
 8002246:	4461      	add	r1, ip
 8002248:	e726      	b.n	8002098 <__aeabi_ddiv+0x360>
 800224a:	9900      	ldr	r1, [sp, #0]
 800224c:	3b01      	subs	r3, #1
 800224e:	468c      	mov	ip, r1
 8002250:	4464      	add	r4, ip
 8002252:	42a1      	cmp	r1, r4
 8002254:	d900      	bls.n	8002258 <__aeabi_ddiv+0x520>
 8002256:	e72d      	b.n	80020b4 <__aeabi_ddiv+0x37c>
 8002258:	42a2      	cmp	r2, r4
 800225a:	d800      	bhi.n	800225e <__aeabi_ddiv+0x526>
 800225c:	e72a      	b.n	80020b4 <__aeabi_ddiv+0x37c>
 800225e:	1e83      	subs	r3, r0, #2
 8002260:	4464      	add	r4, ip
 8002262:	e727      	b.n	80020b4 <__aeabi_ddiv+0x37c>
 8002264:	4287      	cmp	r7, r0
 8002266:	d000      	beq.n	800226a <__aeabi_ddiv+0x532>
 8002268:	e6fe      	b.n	8002068 <__aeabi_ddiv+0x330>
 800226a:	45a9      	cmp	r9, r5
 800226c:	d900      	bls.n	8002270 <__aeabi_ddiv+0x538>
 800226e:	e6fb      	b.n	8002068 <__aeabi_ddiv+0x330>
 8002270:	e6f5      	b.n	800205e <__aeabi_ddiv+0x326>
 8002272:	42a2      	cmp	r2, r4
 8002274:	d800      	bhi.n	8002278 <__aeabi_ddiv+0x540>
 8002276:	e6b9      	b.n	8001fec <__aeabi_ddiv+0x2b4>
 8002278:	1e83      	subs	r3, r0, #2
 800227a:	4464      	add	r4, ip
 800227c:	e6b6      	b.n	8001fec <__aeabi_ddiv+0x2b4>
 800227e:	428a      	cmp	r2, r1
 8002280:	d800      	bhi.n	8002284 <__aeabi_ddiv+0x54c>
 8002282:	e69f      	b.n	8001fc4 <__aeabi_ddiv+0x28c>
 8002284:	46bc      	mov	ip, r7
 8002286:	1e83      	subs	r3, r0, #2
 8002288:	4698      	mov	r8, r3
 800228a:	4461      	add	r1, ip
 800228c:	e69a      	b.n	8001fc4 <__aeabi_ddiv+0x28c>
 800228e:	000a      	movs	r2, r1
 8002290:	4284      	cmp	r4, r0
 8002292:	d000      	beq.n	8002296 <__aeabi_ddiv+0x55e>
 8002294:	e72e      	b.n	80020f4 <__aeabi_ddiv+0x3bc>
 8002296:	454b      	cmp	r3, r9
 8002298:	d000      	beq.n	800229c <__aeabi_ddiv+0x564>
 800229a:	e72b      	b.n	80020f4 <__aeabi_ddiv+0x3bc>
 800229c:	0035      	movs	r5, r6
 800229e:	e72c      	b.n	80020fa <__aeabi_ddiv+0x3c2>
 80022a0:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <__aeabi_ddiv+0x614>)
 80022a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002360 <__aeabi_ddiv+0x628>)
 80022a4:	4453      	add	r3, sl
 80022a6:	4592      	cmp	sl, r2
 80022a8:	db43      	blt.n	8002332 <__aeabi_ddiv+0x5fa>
 80022aa:	2201      	movs	r2, #1
 80022ac:	2100      	movs	r1, #0
 80022ae:	4493      	add	fp, r2
 80022b0:	e72c      	b.n	800210c <__aeabi_ddiv+0x3d4>
 80022b2:	42ac      	cmp	r4, r5
 80022b4:	d800      	bhi.n	80022b8 <__aeabi_ddiv+0x580>
 80022b6:	e6d7      	b.n	8002068 <__aeabi_ddiv+0x330>
 80022b8:	2302      	movs	r3, #2
 80022ba:	425b      	negs	r3, r3
 80022bc:	469c      	mov	ip, r3
 80022be:	9900      	ldr	r1, [sp, #0]
 80022c0:	444d      	add	r5, r9
 80022c2:	454d      	cmp	r5, r9
 80022c4:	419b      	sbcs	r3, r3
 80022c6:	44e3      	add	fp, ip
 80022c8:	468c      	mov	ip, r1
 80022ca:	425b      	negs	r3, r3
 80022cc:	4463      	add	r3, ip
 80022ce:	18c0      	adds	r0, r0, r3
 80022d0:	e6cc      	b.n	800206c <__aeabi_ddiv+0x334>
 80022d2:	201f      	movs	r0, #31
 80022d4:	4240      	negs	r0, r0
 80022d6:	1ac3      	subs	r3, r0, r3
 80022d8:	4658      	mov	r0, fp
 80022da:	40d8      	lsrs	r0, r3
 80022dc:	2920      	cmp	r1, #32
 80022de:	d004      	beq.n	80022ea <__aeabi_ddiv+0x5b2>
 80022e0:	4659      	mov	r1, fp
 80022e2:	4b20      	ldr	r3, [pc, #128]	@ (8002364 <__aeabi_ddiv+0x62c>)
 80022e4:	4453      	add	r3, sl
 80022e6:	4099      	lsls	r1, r3
 80022e8:	430a      	orrs	r2, r1
 80022ea:	1e53      	subs	r3, r2, #1
 80022ec:	419a      	sbcs	r2, r3
 80022ee:	2307      	movs	r3, #7
 80022f0:	0019      	movs	r1, r3
 80022f2:	4302      	orrs	r2, r0
 80022f4:	2400      	movs	r4, #0
 80022f6:	4011      	ands	r1, r2
 80022f8:	4213      	tst	r3, r2
 80022fa:	d009      	beq.n	8002310 <__aeabi_ddiv+0x5d8>
 80022fc:	3308      	adds	r3, #8
 80022fe:	4013      	ands	r3, r2
 8002300:	2b04      	cmp	r3, #4
 8002302:	d01d      	beq.n	8002340 <__aeabi_ddiv+0x608>
 8002304:	1d13      	adds	r3, r2, #4
 8002306:	4293      	cmp	r3, r2
 8002308:	4189      	sbcs	r1, r1
 800230a:	001a      	movs	r2, r3
 800230c:	4249      	negs	r1, r1
 800230e:	0749      	lsls	r1, r1, #29
 8002310:	08d2      	lsrs	r2, r2, #3
 8002312:	430a      	orrs	r2, r1
 8002314:	4690      	mov	r8, r2
 8002316:	2300      	movs	r3, #0
 8002318:	e57a      	b.n	8001e10 <__aeabi_ddiv+0xd8>
 800231a:	4649      	mov	r1, r9
 800231c:	9f00      	ldr	r7, [sp, #0]
 800231e:	004d      	lsls	r5, r1, #1
 8002320:	454d      	cmp	r5, r9
 8002322:	4189      	sbcs	r1, r1
 8002324:	46bc      	mov	ip, r7
 8002326:	4249      	negs	r1, r1
 8002328:	4461      	add	r1, ip
 800232a:	46a9      	mov	r9, r5
 800232c:	3a02      	subs	r2, #2
 800232e:	1864      	adds	r4, r4, r1
 8002330:	e7ae      	b.n	8002290 <__aeabi_ddiv+0x558>
 8002332:	2201      	movs	r2, #1
 8002334:	4252      	negs	r2, r2
 8002336:	e746      	b.n	80021c6 <__aeabi_ddiv+0x48e>
 8002338:	4599      	cmp	r9, r3
 800233a:	d3ee      	bcc.n	800231a <__aeabi_ddiv+0x5e2>
 800233c:	000a      	movs	r2, r1
 800233e:	e7aa      	b.n	8002296 <__aeabi_ddiv+0x55e>
 8002340:	2100      	movs	r1, #0
 8002342:	e7e5      	b.n	8002310 <__aeabi_ddiv+0x5d8>
 8002344:	0759      	lsls	r1, r3, #29
 8002346:	025b      	lsls	r3, r3, #9
 8002348:	0b1c      	lsrs	r4, r3, #12
 800234a:	e7e1      	b.n	8002310 <__aeabi_ddiv+0x5d8>
 800234c:	000003ff 	.word	0x000003ff
 8002350:	feffffff 	.word	0xfeffffff
 8002354:	000007fe 	.word	0x000007fe
 8002358:	000007ff 	.word	0x000007ff
 800235c:	0000041e 	.word	0x0000041e
 8002360:	fffffc02 	.word	0xfffffc02
 8002364:	0000043e 	.word	0x0000043e

08002368 <__eqdf2>:
 8002368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236a:	4657      	mov	r7, sl
 800236c:	46de      	mov	lr, fp
 800236e:	464e      	mov	r6, r9
 8002370:	4645      	mov	r5, r8
 8002372:	b5e0      	push	{r5, r6, r7, lr}
 8002374:	000d      	movs	r5, r1
 8002376:	0004      	movs	r4, r0
 8002378:	0fe8      	lsrs	r0, r5, #31
 800237a:	4683      	mov	fp, r0
 800237c:	0309      	lsls	r1, r1, #12
 800237e:	0fd8      	lsrs	r0, r3, #31
 8002380:	0b09      	lsrs	r1, r1, #12
 8002382:	4682      	mov	sl, r0
 8002384:	4819      	ldr	r0, [pc, #100]	@ (80023ec <__eqdf2+0x84>)
 8002386:	468c      	mov	ip, r1
 8002388:	031f      	lsls	r7, r3, #12
 800238a:	0069      	lsls	r1, r5, #1
 800238c:	005e      	lsls	r6, r3, #1
 800238e:	0d49      	lsrs	r1, r1, #21
 8002390:	0b3f      	lsrs	r7, r7, #12
 8002392:	0d76      	lsrs	r6, r6, #21
 8002394:	4281      	cmp	r1, r0
 8002396:	d018      	beq.n	80023ca <__eqdf2+0x62>
 8002398:	4286      	cmp	r6, r0
 800239a:	d00f      	beq.n	80023bc <__eqdf2+0x54>
 800239c:	2001      	movs	r0, #1
 800239e:	42b1      	cmp	r1, r6
 80023a0:	d10d      	bne.n	80023be <__eqdf2+0x56>
 80023a2:	45bc      	cmp	ip, r7
 80023a4:	d10b      	bne.n	80023be <__eqdf2+0x56>
 80023a6:	4294      	cmp	r4, r2
 80023a8:	d109      	bne.n	80023be <__eqdf2+0x56>
 80023aa:	45d3      	cmp	fp, sl
 80023ac:	d01c      	beq.n	80023e8 <__eqdf2+0x80>
 80023ae:	2900      	cmp	r1, #0
 80023b0:	d105      	bne.n	80023be <__eqdf2+0x56>
 80023b2:	4660      	mov	r0, ip
 80023b4:	4320      	orrs	r0, r4
 80023b6:	1e43      	subs	r3, r0, #1
 80023b8:	4198      	sbcs	r0, r3
 80023ba:	e000      	b.n	80023be <__eqdf2+0x56>
 80023bc:	2001      	movs	r0, #1
 80023be:	bcf0      	pop	{r4, r5, r6, r7}
 80023c0:	46bb      	mov	fp, r7
 80023c2:	46b2      	mov	sl, r6
 80023c4:	46a9      	mov	r9, r5
 80023c6:	46a0      	mov	r8, r4
 80023c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ca:	2001      	movs	r0, #1
 80023cc:	428e      	cmp	r6, r1
 80023ce:	d1f6      	bne.n	80023be <__eqdf2+0x56>
 80023d0:	4661      	mov	r1, ip
 80023d2:	4339      	orrs	r1, r7
 80023d4:	000f      	movs	r7, r1
 80023d6:	4317      	orrs	r7, r2
 80023d8:	4327      	orrs	r7, r4
 80023da:	d1f0      	bne.n	80023be <__eqdf2+0x56>
 80023dc:	465b      	mov	r3, fp
 80023de:	4652      	mov	r2, sl
 80023e0:	1a98      	subs	r0, r3, r2
 80023e2:	1e43      	subs	r3, r0, #1
 80023e4:	4198      	sbcs	r0, r3
 80023e6:	e7ea      	b.n	80023be <__eqdf2+0x56>
 80023e8:	2000      	movs	r0, #0
 80023ea:	e7e8      	b.n	80023be <__eqdf2+0x56>
 80023ec:	000007ff 	.word	0x000007ff

080023f0 <__gedf2>:
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f2:	4657      	mov	r7, sl
 80023f4:	464e      	mov	r6, r9
 80023f6:	4645      	mov	r5, r8
 80023f8:	46de      	mov	lr, fp
 80023fa:	b5e0      	push	{r5, r6, r7, lr}
 80023fc:	000d      	movs	r5, r1
 80023fe:	030e      	lsls	r6, r1, #12
 8002400:	0049      	lsls	r1, r1, #1
 8002402:	0d49      	lsrs	r1, r1, #21
 8002404:	468a      	mov	sl, r1
 8002406:	0fdf      	lsrs	r7, r3, #31
 8002408:	0fe9      	lsrs	r1, r5, #31
 800240a:	46bc      	mov	ip, r7
 800240c:	b083      	sub	sp, #12
 800240e:	4f2f      	ldr	r7, [pc, #188]	@ (80024cc <__gedf2+0xdc>)
 8002410:	0004      	movs	r4, r0
 8002412:	4680      	mov	r8, r0
 8002414:	9101      	str	r1, [sp, #4]
 8002416:	0058      	lsls	r0, r3, #1
 8002418:	0319      	lsls	r1, r3, #12
 800241a:	4691      	mov	r9, r2
 800241c:	0b36      	lsrs	r6, r6, #12
 800241e:	0b09      	lsrs	r1, r1, #12
 8002420:	0d40      	lsrs	r0, r0, #21
 8002422:	45ba      	cmp	sl, r7
 8002424:	d01d      	beq.n	8002462 <__gedf2+0x72>
 8002426:	42b8      	cmp	r0, r7
 8002428:	d00d      	beq.n	8002446 <__gedf2+0x56>
 800242a:	4657      	mov	r7, sl
 800242c:	2f00      	cmp	r7, #0
 800242e:	d12a      	bne.n	8002486 <__gedf2+0x96>
 8002430:	4334      	orrs	r4, r6
 8002432:	2800      	cmp	r0, #0
 8002434:	d124      	bne.n	8002480 <__gedf2+0x90>
 8002436:	430a      	orrs	r2, r1
 8002438:	d036      	beq.n	80024a8 <__gedf2+0xb8>
 800243a:	2c00      	cmp	r4, #0
 800243c:	d141      	bne.n	80024c2 <__gedf2+0xd2>
 800243e:	4663      	mov	r3, ip
 8002440:	0058      	lsls	r0, r3, #1
 8002442:	3801      	subs	r0, #1
 8002444:	e015      	b.n	8002472 <__gedf2+0x82>
 8002446:	4311      	orrs	r1, r2
 8002448:	d138      	bne.n	80024bc <__gedf2+0xcc>
 800244a:	4653      	mov	r3, sl
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <__gedf2+0x64>
 8002450:	4326      	orrs	r6, r4
 8002452:	d0f4      	beq.n	800243e <__gedf2+0x4e>
 8002454:	9b01      	ldr	r3, [sp, #4]
 8002456:	4563      	cmp	r3, ip
 8002458:	d107      	bne.n	800246a <__gedf2+0x7a>
 800245a:	9b01      	ldr	r3, [sp, #4]
 800245c:	0058      	lsls	r0, r3, #1
 800245e:	3801      	subs	r0, #1
 8002460:	e007      	b.n	8002472 <__gedf2+0x82>
 8002462:	4326      	orrs	r6, r4
 8002464:	d12a      	bne.n	80024bc <__gedf2+0xcc>
 8002466:	4550      	cmp	r0, sl
 8002468:	d021      	beq.n	80024ae <__gedf2+0xbe>
 800246a:	2001      	movs	r0, #1
 800246c:	9b01      	ldr	r3, [sp, #4]
 800246e:	425f      	negs	r7, r3
 8002470:	4338      	orrs	r0, r7
 8002472:	b003      	add	sp, #12
 8002474:	bcf0      	pop	{r4, r5, r6, r7}
 8002476:	46bb      	mov	fp, r7
 8002478:	46b2      	mov	sl, r6
 800247a:	46a9      	mov	r9, r5
 800247c:	46a0      	mov	r8, r4
 800247e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002480:	2c00      	cmp	r4, #0
 8002482:	d0dc      	beq.n	800243e <__gedf2+0x4e>
 8002484:	e7e6      	b.n	8002454 <__gedf2+0x64>
 8002486:	2800      	cmp	r0, #0
 8002488:	d0ef      	beq.n	800246a <__gedf2+0x7a>
 800248a:	9b01      	ldr	r3, [sp, #4]
 800248c:	4563      	cmp	r3, ip
 800248e:	d1ec      	bne.n	800246a <__gedf2+0x7a>
 8002490:	4582      	cmp	sl, r0
 8002492:	dcea      	bgt.n	800246a <__gedf2+0x7a>
 8002494:	dbe1      	blt.n	800245a <__gedf2+0x6a>
 8002496:	428e      	cmp	r6, r1
 8002498:	d8e7      	bhi.n	800246a <__gedf2+0x7a>
 800249a:	d1de      	bne.n	800245a <__gedf2+0x6a>
 800249c:	45c8      	cmp	r8, r9
 800249e:	d8e4      	bhi.n	800246a <__gedf2+0x7a>
 80024a0:	2000      	movs	r0, #0
 80024a2:	45c8      	cmp	r8, r9
 80024a4:	d2e5      	bcs.n	8002472 <__gedf2+0x82>
 80024a6:	e7d8      	b.n	800245a <__gedf2+0x6a>
 80024a8:	2c00      	cmp	r4, #0
 80024aa:	d0e2      	beq.n	8002472 <__gedf2+0x82>
 80024ac:	e7dd      	b.n	800246a <__gedf2+0x7a>
 80024ae:	4311      	orrs	r1, r2
 80024b0:	d104      	bne.n	80024bc <__gedf2+0xcc>
 80024b2:	9b01      	ldr	r3, [sp, #4]
 80024b4:	4563      	cmp	r3, ip
 80024b6:	d1d8      	bne.n	800246a <__gedf2+0x7a>
 80024b8:	2000      	movs	r0, #0
 80024ba:	e7da      	b.n	8002472 <__gedf2+0x82>
 80024bc:	2002      	movs	r0, #2
 80024be:	4240      	negs	r0, r0
 80024c0:	e7d7      	b.n	8002472 <__gedf2+0x82>
 80024c2:	9b01      	ldr	r3, [sp, #4]
 80024c4:	4563      	cmp	r3, ip
 80024c6:	d0e6      	beq.n	8002496 <__gedf2+0xa6>
 80024c8:	e7cf      	b.n	800246a <__gedf2+0x7a>
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	000007ff 	.word	0x000007ff

080024d0 <__ledf2>:
 80024d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d2:	4657      	mov	r7, sl
 80024d4:	464e      	mov	r6, r9
 80024d6:	4645      	mov	r5, r8
 80024d8:	46de      	mov	lr, fp
 80024da:	b5e0      	push	{r5, r6, r7, lr}
 80024dc:	000d      	movs	r5, r1
 80024de:	030e      	lsls	r6, r1, #12
 80024e0:	0049      	lsls	r1, r1, #1
 80024e2:	0d49      	lsrs	r1, r1, #21
 80024e4:	468a      	mov	sl, r1
 80024e6:	0fdf      	lsrs	r7, r3, #31
 80024e8:	0fe9      	lsrs	r1, r5, #31
 80024ea:	46bc      	mov	ip, r7
 80024ec:	b083      	sub	sp, #12
 80024ee:	4f2e      	ldr	r7, [pc, #184]	@ (80025a8 <__ledf2+0xd8>)
 80024f0:	0004      	movs	r4, r0
 80024f2:	4680      	mov	r8, r0
 80024f4:	9101      	str	r1, [sp, #4]
 80024f6:	0058      	lsls	r0, r3, #1
 80024f8:	0319      	lsls	r1, r3, #12
 80024fa:	4691      	mov	r9, r2
 80024fc:	0b36      	lsrs	r6, r6, #12
 80024fe:	0b09      	lsrs	r1, r1, #12
 8002500:	0d40      	lsrs	r0, r0, #21
 8002502:	45ba      	cmp	sl, r7
 8002504:	d01e      	beq.n	8002544 <__ledf2+0x74>
 8002506:	42b8      	cmp	r0, r7
 8002508:	d00d      	beq.n	8002526 <__ledf2+0x56>
 800250a:	4657      	mov	r7, sl
 800250c:	2f00      	cmp	r7, #0
 800250e:	d127      	bne.n	8002560 <__ledf2+0x90>
 8002510:	4334      	orrs	r4, r6
 8002512:	2800      	cmp	r0, #0
 8002514:	d133      	bne.n	800257e <__ledf2+0xae>
 8002516:	430a      	orrs	r2, r1
 8002518:	d034      	beq.n	8002584 <__ledf2+0xb4>
 800251a:	2c00      	cmp	r4, #0
 800251c:	d140      	bne.n	80025a0 <__ledf2+0xd0>
 800251e:	4663      	mov	r3, ip
 8002520:	0058      	lsls	r0, r3, #1
 8002522:	3801      	subs	r0, #1
 8002524:	e015      	b.n	8002552 <__ledf2+0x82>
 8002526:	4311      	orrs	r1, r2
 8002528:	d112      	bne.n	8002550 <__ledf2+0x80>
 800252a:	4653      	mov	r3, sl
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <__ledf2+0x64>
 8002530:	4326      	orrs	r6, r4
 8002532:	d0f4      	beq.n	800251e <__ledf2+0x4e>
 8002534:	9b01      	ldr	r3, [sp, #4]
 8002536:	4563      	cmp	r3, ip
 8002538:	d01d      	beq.n	8002576 <__ledf2+0xa6>
 800253a:	2001      	movs	r0, #1
 800253c:	9b01      	ldr	r3, [sp, #4]
 800253e:	425f      	negs	r7, r3
 8002540:	4338      	orrs	r0, r7
 8002542:	e006      	b.n	8002552 <__ledf2+0x82>
 8002544:	4326      	orrs	r6, r4
 8002546:	d103      	bne.n	8002550 <__ledf2+0x80>
 8002548:	4550      	cmp	r0, sl
 800254a:	d1f6      	bne.n	800253a <__ledf2+0x6a>
 800254c:	4311      	orrs	r1, r2
 800254e:	d01c      	beq.n	800258a <__ledf2+0xba>
 8002550:	2002      	movs	r0, #2
 8002552:	b003      	add	sp, #12
 8002554:	bcf0      	pop	{r4, r5, r6, r7}
 8002556:	46bb      	mov	fp, r7
 8002558:	46b2      	mov	sl, r6
 800255a:	46a9      	mov	r9, r5
 800255c:	46a0      	mov	r8, r4
 800255e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002560:	2800      	cmp	r0, #0
 8002562:	d0ea      	beq.n	800253a <__ledf2+0x6a>
 8002564:	9b01      	ldr	r3, [sp, #4]
 8002566:	4563      	cmp	r3, ip
 8002568:	d1e7      	bne.n	800253a <__ledf2+0x6a>
 800256a:	4582      	cmp	sl, r0
 800256c:	dce5      	bgt.n	800253a <__ledf2+0x6a>
 800256e:	db02      	blt.n	8002576 <__ledf2+0xa6>
 8002570:	428e      	cmp	r6, r1
 8002572:	d8e2      	bhi.n	800253a <__ledf2+0x6a>
 8002574:	d00e      	beq.n	8002594 <__ledf2+0xc4>
 8002576:	9b01      	ldr	r3, [sp, #4]
 8002578:	0058      	lsls	r0, r3, #1
 800257a:	3801      	subs	r0, #1
 800257c:	e7e9      	b.n	8002552 <__ledf2+0x82>
 800257e:	2c00      	cmp	r4, #0
 8002580:	d0cd      	beq.n	800251e <__ledf2+0x4e>
 8002582:	e7d7      	b.n	8002534 <__ledf2+0x64>
 8002584:	2c00      	cmp	r4, #0
 8002586:	d0e4      	beq.n	8002552 <__ledf2+0x82>
 8002588:	e7d7      	b.n	800253a <__ledf2+0x6a>
 800258a:	9b01      	ldr	r3, [sp, #4]
 800258c:	2000      	movs	r0, #0
 800258e:	4563      	cmp	r3, ip
 8002590:	d0df      	beq.n	8002552 <__ledf2+0x82>
 8002592:	e7d2      	b.n	800253a <__ledf2+0x6a>
 8002594:	45c8      	cmp	r8, r9
 8002596:	d8d0      	bhi.n	800253a <__ledf2+0x6a>
 8002598:	2000      	movs	r0, #0
 800259a:	45c8      	cmp	r8, r9
 800259c:	d2d9      	bcs.n	8002552 <__ledf2+0x82>
 800259e:	e7ea      	b.n	8002576 <__ledf2+0xa6>
 80025a0:	9b01      	ldr	r3, [sp, #4]
 80025a2:	4563      	cmp	r3, ip
 80025a4:	d0e4      	beq.n	8002570 <__ledf2+0xa0>
 80025a6:	e7c8      	b.n	800253a <__ledf2+0x6a>
 80025a8:	000007ff 	.word	0x000007ff

080025ac <__aeabi_dmul>:
 80025ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ae:	4657      	mov	r7, sl
 80025b0:	464e      	mov	r6, r9
 80025b2:	46de      	mov	lr, fp
 80025b4:	4645      	mov	r5, r8
 80025b6:	b5e0      	push	{r5, r6, r7, lr}
 80025b8:	001f      	movs	r7, r3
 80025ba:	030b      	lsls	r3, r1, #12
 80025bc:	0b1b      	lsrs	r3, r3, #12
 80025be:	0016      	movs	r6, r2
 80025c0:	469a      	mov	sl, r3
 80025c2:	0fca      	lsrs	r2, r1, #31
 80025c4:	004b      	lsls	r3, r1, #1
 80025c6:	0004      	movs	r4, r0
 80025c8:	4691      	mov	r9, r2
 80025ca:	b085      	sub	sp, #20
 80025cc:	0d5b      	lsrs	r3, r3, #21
 80025ce:	d100      	bne.n	80025d2 <__aeabi_dmul+0x26>
 80025d0:	e1cf      	b.n	8002972 <__aeabi_dmul+0x3c6>
 80025d2:	4acd      	ldr	r2, [pc, #820]	@ (8002908 <__aeabi_dmul+0x35c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d055      	beq.n	8002684 <__aeabi_dmul+0xd8>
 80025d8:	4651      	mov	r1, sl
 80025da:	0f42      	lsrs	r2, r0, #29
 80025dc:	00c9      	lsls	r1, r1, #3
 80025de:	430a      	orrs	r2, r1
 80025e0:	2180      	movs	r1, #128	@ 0x80
 80025e2:	0409      	lsls	r1, r1, #16
 80025e4:	4311      	orrs	r1, r2
 80025e6:	00c2      	lsls	r2, r0, #3
 80025e8:	4690      	mov	r8, r2
 80025ea:	4ac8      	ldr	r2, [pc, #800]	@ (800290c <__aeabi_dmul+0x360>)
 80025ec:	468a      	mov	sl, r1
 80025ee:	4693      	mov	fp, r2
 80025f0:	449b      	add	fp, r3
 80025f2:	2300      	movs	r3, #0
 80025f4:	2500      	movs	r5, #0
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	033c      	lsls	r4, r7, #12
 80025fa:	007b      	lsls	r3, r7, #1
 80025fc:	0ffa      	lsrs	r2, r7, #31
 80025fe:	9601      	str	r6, [sp, #4]
 8002600:	0b24      	lsrs	r4, r4, #12
 8002602:	0d5b      	lsrs	r3, r3, #21
 8002604:	9200      	str	r2, [sp, #0]
 8002606:	d100      	bne.n	800260a <__aeabi_dmul+0x5e>
 8002608:	e188      	b.n	800291c <__aeabi_dmul+0x370>
 800260a:	4abf      	ldr	r2, [pc, #764]	@ (8002908 <__aeabi_dmul+0x35c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d100      	bne.n	8002612 <__aeabi_dmul+0x66>
 8002610:	e092      	b.n	8002738 <__aeabi_dmul+0x18c>
 8002612:	4abe      	ldr	r2, [pc, #760]	@ (800290c <__aeabi_dmul+0x360>)
 8002614:	4694      	mov	ip, r2
 8002616:	4463      	add	r3, ip
 8002618:	449b      	add	fp, r3
 800261a:	2d0a      	cmp	r5, #10
 800261c:	dc42      	bgt.n	80026a4 <__aeabi_dmul+0xf8>
 800261e:	00e4      	lsls	r4, r4, #3
 8002620:	0f73      	lsrs	r3, r6, #29
 8002622:	4323      	orrs	r3, r4
 8002624:	2480      	movs	r4, #128	@ 0x80
 8002626:	4649      	mov	r1, r9
 8002628:	0424      	lsls	r4, r4, #16
 800262a:	431c      	orrs	r4, r3
 800262c:	00f3      	lsls	r3, r6, #3
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	9b00      	ldr	r3, [sp, #0]
 8002632:	2000      	movs	r0, #0
 8002634:	4059      	eors	r1, r3
 8002636:	b2cb      	uxtb	r3, r1
 8002638:	9303      	str	r3, [sp, #12]
 800263a:	2d02      	cmp	r5, #2
 800263c:	dc00      	bgt.n	8002640 <__aeabi_dmul+0x94>
 800263e:	e094      	b.n	800276a <__aeabi_dmul+0x1be>
 8002640:	2301      	movs	r3, #1
 8002642:	40ab      	lsls	r3, r5
 8002644:	001d      	movs	r5, r3
 8002646:	23a6      	movs	r3, #166	@ 0xa6
 8002648:	002a      	movs	r2, r5
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	401a      	ands	r2, r3
 800264e:	421d      	tst	r5, r3
 8002650:	d000      	beq.n	8002654 <__aeabi_dmul+0xa8>
 8002652:	e229      	b.n	8002aa8 <__aeabi_dmul+0x4fc>
 8002654:	2390      	movs	r3, #144	@ 0x90
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	421d      	tst	r5, r3
 800265a:	d100      	bne.n	800265e <__aeabi_dmul+0xb2>
 800265c:	e24d      	b.n	8002afa <__aeabi_dmul+0x54e>
 800265e:	2300      	movs	r3, #0
 8002660:	2480      	movs	r4, #128	@ 0x80
 8002662:	4699      	mov	r9, r3
 8002664:	0324      	lsls	r4, r4, #12
 8002666:	4ba8      	ldr	r3, [pc, #672]	@ (8002908 <__aeabi_dmul+0x35c>)
 8002668:	0010      	movs	r0, r2
 800266a:	464a      	mov	r2, r9
 800266c:	051b      	lsls	r3, r3, #20
 800266e:	4323      	orrs	r3, r4
 8002670:	07d2      	lsls	r2, r2, #31
 8002672:	4313      	orrs	r3, r2
 8002674:	0019      	movs	r1, r3
 8002676:	b005      	add	sp, #20
 8002678:	bcf0      	pop	{r4, r5, r6, r7}
 800267a:	46bb      	mov	fp, r7
 800267c:	46b2      	mov	sl, r6
 800267e:	46a9      	mov	r9, r5
 8002680:	46a0      	mov	r8, r4
 8002682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002684:	4652      	mov	r2, sl
 8002686:	4302      	orrs	r2, r0
 8002688:	4690      	mov	r8, r2
 800268a:	d000      	beq.n	800268e <__aeabi_dmul+0xe2>
 800268c:	e1ac      	b.n	80029e8 <__aeabi_dmul+0x43c>
 800268e:	469b      	mov	fp, r3
 8002690:	2302      	movs	r3, #2
 8002692:	4692      	mov	sl, r2
 8002694:	2508      	movs	r5, #8
 8002696:	9302      	str	r3, [sp, #8]
 8002698:	e7ae      	b.n	80025f8 <__aeabi_dmul+0x4c>
 800269a:	9b00      	ldr	r3, [sp, #0]
 800269c:	46a2      	mov	sl, r4
 800269e:	4699      	mov	r9, r3
 80026a0:	9b01      	ldr	r3, [sp, #4]
 80026a2:	4698      	mov	r8, r3
 80026a4:	9b02      	ldr	r3, [sp, #8]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d100      	bne.n	80026ac <__aeabi_dmul+0x100>
 80026aa:	e1ca      	b.n	8002a42 <__aeabi_dmul+0x496>
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d100      	bne.n	80026b2 <__aeabi_dmul+0x106>
 80026b0:	e192      	b.n	80029d8 <__aeabi_dmul+0x42c>
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d110      	bne.n	80026d8 <__aeabi_dmul+0x12c>
 80026b6:	2300      	movs	r3, #0
 80026b8:	2400      	movs	r4, #0
 80026ba:	2200      	movs	r2, #0
 80026bc:	e7d4      	b.n	8002668 <__aeabi_dmul+0xbc>
 80026be:	2201      	movs	r2, #1
 80026c0:	087b      	lsrs	r3, r7, #1
 80026c2:	403a      	ands	r2, r7
 80026c4:	4313      	orrs	r3, r2
 80026c6:	4652      	mov	r2, sl
 80026c8:	07d2      	lsls	r2, r2, #31
 80026ca:	4313      	orrs	r3, r2
 80026cc:	4698      	mov	r8, r3
 80026ce:	4653      	mov	r3, sl
 80026d0:	085b      	lsrs	r3, r3, #1
 80026d2:	469a      	mov	sl, r3
 80026d4:	9b03      	ldr	r3, [sp, #12]
 80026d6:	4699      	mov	r9, r3
 80026d8:	465b      	mov	r3, fp
 80026da:	1c58      	adds	r0, r3, #1
 80026dc:	2380      	movs	r3, #128	@ 0x80
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	445b      	add	r3, fp
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	dc00      	bgt.n	80026e8 <__aeabi_dmul+0x13c>
 80026e6:	e1b1      	b.n	8002a4c <__aeabi_dmul+0x4a0>
 80026e8:	4642      	mov	r2, r8
 80026ea:	0752      	lsls	r2, r2, #29
 80026ec:	d00b      	beq.n	8002706 <__aeabi_dmul+0x15a>
 80026ee:	220f      	movs	r2, #15
 80026f0:	4641      	mov	r1, r8
 80026f2:	400a      	ands	r2, r1
 80026f4:	2a04      	cmp	r2, #4
 80026f6:	d006      	beq.n	8002706 <__aeabi_dmul+0x15a>
 80026f8:	4642      	mov	r2, r8
 80026fa:	1d11      	adds	r1, r2, #4
 80026fc:	4541      	cmp	r1, r8
 80026fe:	4192      	sbcs	r2, r2
 8002700:	4688      	mov	r8, r1
 8002702:	4252      	negs	r2, r2
 8002704:	4492      	add	sl, r2
 8002706:	4652      	mov	r2, sl
 8002708:	01d2      	lsls	r2, r2, #7
 800270a:	d506      	bpl.n	800271a <__aeabi_dmul+0x16e>
 800270c:	4652      	mov	r2, sl
 800270e:	4b80      	ldr	r3, [pc, #512]	@ (8002910 <__aeabi_dmul+0x364>)
 8002710:	401a      	ands	r2, r3
 8002712:	2380      	movs	r3, #128	@ 0x80
 8002714:	4692      	mov	sl, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	18c3      	adds	r3, r0, r3
 800271a:	4a7e      	ldr	r2, [pc, #504]	@ (8002914 <__aeabi_dmul+0x368>)
 800271c:	4293      	cmp	r3, r2
 800271e:	dd00      	ble.n	8002722 <__aeabi_dmul+0x176>
 8002720:	e18f      	b.n	8002a42 <__aeabi_dmul+0x496>
 8002722:	4642      	mov	r2, r8
 8002724:	08d1      	lsrs	r1, r2, #3
 8002726:	4652      	mov	r2, sl
 8002728:	0752      	lsls	r2, r2, #29
 800272a:	430a      	orrs	r2, r1
 800272c:	4651      	mov	r1, sl
 800272e:	055b      	lsls	r3, r3, #21
 8002730:	024c      	lsls	r4, r1, #9
 8002732:	0b24      	lsrs	r4, r4, #12
 8002734:	0d5b      	lsrs	r3, r3, #21
 8002736:	e797      	b.n	8002668 <__aeabi_dmul+0xbc>
 8002738:	4b73      	ldr	r3, [pc, #460]	@ (8002908 <__aeabi_dmul+0x35c>)
 800273a:	4326      	orrs	r6, r4
 800273c:	469c      	mov	ip, r3
 800273e:	44e3      	add	fp, ip
 8002740:	2e00      	cmp	r6, #0
 8002742:	d100      	bne.n	8002746 <__aeabi_dmul+0x19a>
 8002744:	e16f      	b.n	8002a26 <__aeabi_dmul+0x47a>
 8002746:	2303      	movs	r3, #3
 8002748:	4649      	mov	r1, r9
 800274a:	431d      	orrs	r5, r3
 800274c:	9b00      	ldr	r3, [sp, #0]
 800274e:	4059      	eors	r1, r3
 8002750:	b2cb      	uxtb	r3, r1
 8002752:	9303      	str	r3, [sp, #12]
 8002754:	2d0a      	cmp	r5, #10
 8002756:	dd00      	ble.n	800275a <__aeabi_dmul+0x1ae>
 8002758:	e133      	b.n	80029c2 <__aeabi_dmul+0x416>
 800275a:	2301      	movs	r3, #1
 800275c:	40ab      	lsls	r3, r5
 800275e:	001d      	movs	r5, r3
 8002760:	2303      	movs	r3, #3
 8002762:	9302      	str	r3, [sp, #8]
 8002764:	2288      	movs	r2, #136	@ 0x88
 8002766:	422a      	tst	r2, r5
 8002768:	d197      	bne.n	800269a <__aeabi_dmul+0xee>
 800276a:	4642      	mov	r2, r8
 800276c:	4643      	mov	r3, r8
 800276e:	0412      	lsls	r2, r2, #16
 8002770:	0c12      	lsrs	r2, r2, #16
 8002772:	0016      	movs	r6, r2
 8002774:	9801      	ldr	r0, [sp, #4]
 8002776:	0c1d      	lsrs	r5, r3, #16
 8002778:	0c03      	lsrs	r3, r0, #16
 800277a:	0400      	lsls	r0, r0, #16
 800277c:	0c00      	lsrs	r0, r0, #16
 800277e:	4346      	muls	r6, r0
 8002780:	46b4      	mov	ip, r6
 8002782:	001e      	movs	r6, r3
 8002784:	436e      	muls	r6, r5
 8002786:	9600      	str	r6, [sp, #0]
 8002788:	0016      	movs	r6, r2
 800278a:	0007      	movs	r7, r0
 800278c:	435e      	muls	r6, r3
 800278e:	4661      	mov	r1, ip
 8002790:	46b0      	mov	r8, r6
 8002792:	436f      	muls	r7, r5
 8002794:	0c0e      	lsrs	r6, r1, #16
 8002796:	44b8      	add	r8, r7
 8002798:	4446      	add	r6, r8
 800279a:	42b7      	cmp	r7, r6
 800279c:	d905      	bls.n	80027aa <__aeabi_dmul+0x1fe>
 800279e:	2180      	movs	r1, #128	@ 0x80
 80027a0:	0249      	lsls	r1, r1, #9
 80027a2:	4688      	mov	r8, r1
 80027a4:	9f00      	ldr	r7, [sp, #0]
 80027a6:	4447      	add	r7, r8
 80027a8:	9700      	str	r7, [sp, #0]
 80027aa:	4661      	mov	r1, ip
 80027ac:	0409      	lsls	r1, r1, #16
 80027ae:	0c09      	lsrs	r1, r1, #16
 80027b0:	0c37      	lsrs	r7, r6, #16
 80027b2:	0436      	lsls	r6, r6, #16
 80027b4:	468c      	mov	ip, r1
 80027b6:	0031      	movs	r1, r6
 80027b8:	4461      	add	r1, ip
 80027ba:	9101      	str	r1, [sp, #4]
 80027bc:	0011      	movs	r1, r2
 80027be:	0c26      	lsrs	r6, r4, #16
 80027c0:	0424      	lsls	r4, r4, #16
 80027c2:	0c24      	lsrs	r4, r4, #16
 80027c4:	4361      	muls	r1, r4
 80027c6:	468c      	mov	ip, r1
 80027c8:	0021      	movs	r1, r4
 80027ca:	4369      	muls	r1, r5
 80027cc:	4689      	mov	r9, r1
 80027ce:	4661      	mov	r1, ip
 80027d0:	0c09      	lsrs	r1, r1, #16
 80027d2:	4688      	mov	r8, r1
 80027d4:	4372      	muls	r2, r6
 80027d6:	444a      	add	r2, r9
 80027d8:	4442      	add	r2, r8
 80027da:	4375      	muls	r5, r6
 80027dc:	4591      	cmp	r9, r2
 80027de:	d903      	bls.n	80027e8 <__aeabi_dmul+0x23c>
 80027e0:	2180      	movs	r1, #128	@ 0x80
 80027e2:	0249      	lsls	r1, r1, #9
 80027e4:	4688      	mov	r8, r1
 80027e6:	4445      	add	r5, r8
 80027e8:	0c11      	lsrs	r1, r2, #16
 80027ea:	4688      	mov	r8, r1
 80027ec:	4661      	mov	r1, ip
 80027ee:	0409      	lsls	r1, r1, #16
 80027f0:	0c09      	lsrs	r1, r1, #16
 80027f2:	468c      	mov	ip, r1
 80027f4:	0412      	lsls	r2, r2, #16
 80027f6:	4462      	add	r2, ip
 80027f8:	18b9      	adds	r1, r7, r2
 80027fa:	9102      	str	r1, [sp, #8]
 80027fc:	4651      	mov	r1, sl
 80027fe:	0c09      	lsrs	r1, r1, #16
 8002800:	468c      	mov	ip, r1
 8002802:	4651      	mov	r1, sl
 8002804:	040f      	lsls	r7, r1, #16
 8002806:	0c3f      	lsrs	r7, r7, #16
 8002808:	0039      	movs	r1, r7
 800280a:	4341      	muls	r1, r0
 800280c:	4445      	add	r5, r8
 800280e:	4688      	mov	r8, r1
 8002810:	4661      	mov	r1, ip
 8002812:	4341      	muls	r1, r0
 8002814:	468a      	mov	sl, r1
 8002816:	4641      	mov	r1, r8
 8002818:	4660      	mov	r0, ip
 800281a:	0c09      	lsrs	r1, r1, #16
 800281c:	4689      	mov	r9, r1
 800281e:	4358      	muls	r0, r3
 8002820:	437b      	muls	r3, r7
 8002822:	4453      	add	r3, sl
 8002824:	444b      	add	r3, r9
 8002826:	459a      	cmp	sl, r3
 8002828:	d903      	bls.n	8002832 <__aeabi_dmul+0x286>
 800282a:	2180      	movs	r1, #128	@ 0x80
 800282c:	0249      	lsls	r1, r1, #9
 800282e:	4689      	mov	r9, r1
 8002830:	4448      	add	r0, r9
 8002832:	0c19      	lsrs	r1, r3, #16
 8002834:	4689      	mov	r9, r1
 8002836:	4641      	mov	r1, r8
 8002838:	0409      	lsls	r1, r1, #16
 800283a:	0c09      	lsrs	r1, r1, #16
 800283c:	4688      	mov	r8, r1
 800283e:	0039      	movs	r1, r7
 8002840:	4361      	muls	r1, r4
 8002842:	041b      	lsls	r3, r3, #16
 8002844:	4443      	add	r3, r8
 8002846:	4688      	mov	r8, r1
 8002848:	4661      	mov	r1, ip
 800284a:	434c      	muls	r4, r1
 800284c:	4371      	muls	r1, r6
 800284e:	468c      	mov	ip, r1
 8002850:	4641      	mov	r1, r8
 8002852:	4377      	muls	r7, r6
 8002854:	0c0e      	lsrs	r6, r1, #16
 8002856:	193f      	adds	r7, r7, r4
 8002858:	19f6      	adds	r6, r6, r7
 800285a:	4448      	add	r0, r9
 800285c:	42b4      	cmp	r4, r6
 800285e:	d903      	bls.n	8002868 <__aeabi_dmul+0x2bc>
 8002860:	2180      	movs	r1, #128	@ 0x80
 8002862:	0249      	lsls	r1, r1, #9
 8002864:	4689      	mov	r9, r1
 8002866:	44cc      	add	ip, r9
 8002868:	9902      	ldr	r1, [sp, #8]
 800286a:	9f00      	ldr	r7, [sp, #0]
 800286c:	4689      	mov	r9, r1
 800286e:	0431      	lsls	r1, r6, #16
 8002870:	444f      	add	r7, r9
 8002872:	4689      	mov	r9, r1
 8002874:	4641      	mov	r1, r8
 8002876:	4297      	cmp	r7, r2
 8002878:	4192      	sbcs	r2, r2
 800287a:	040c      	lsls	r4, r1, #16
 800287c:	0c24      	lsrs	r4, r4, #16
 800287e:	444c      	add	r4, r9
 8002880:	18ff      	adds	r7, r7, r3
 8002882:	4252      	negs	r2, r2
 8002884:	1964      	adds	r4, r4, r5
 8002886:	18a1      	adds	r1, r4, r2
 8002888:	429f      	cmp	r7, r3
 800288a:	419b      	sbcs	r3, r3
 800288c:	4688      	mov	r8, r1
 800288e:	4682      	mov	sl, r0
 8002890:	425b      	negs	r3, r3
 8002892:	4699      	mov	r9, r3
 8002894:	4590      	cmp	r8, r2
 8002896:	4192      	sbcs	r2, r2
 8002898:	42ac      	cmp	r4, r5
 800289a:	41a4      	sbcs	r4, r4
 800289c:	44c2      	add	sl, r8
 800289e:	44d1      	add	r9, sl
 80028a0:	4252      	negs	r2, r2
 80028a2:	4264      	negs	r4, r4
 80028a4:	4314      	orrs	r4, r2
 80028a6:	4599      	cmp	r9, r3
 80028a8:	419b      	sbcs	r3, r3
 80028aa:	4582      	cmp	sl, r0
 80028ac:	4192      	sbcs	r2, r2
 80028ae:	425b      	negs	r3, r3
 80028b0:	4252      	negs	r2, r2
 80028b2:	4313      	orrs	r3, r2
 80028b4:	464a      	mov	r2, r9
 80028b6:	0c36      	lsrs	r6, r6, #16
 80028b8:	19a4      	adds	r4, r4, r6
 80028ba:	18e3      	adds	r3, r4, r3
 80028bc:	4463      	add	r3, ip
 80028be:	025b      	lsls	r3, r3, #9
 80028c0:	0dd2      	lsrs	r2, r2, #23
 80028c2:	431a      	orrs	r2, r3
 80028c4:	9901      	ldr	r1, [sp, #4]
 80028c6:	4692      	mov	sl, r2
 80028c8:	027a      	lsls	r2, r7, #9
 80028ca:	430a      	orrs	r2, r1
 80028cc:	1e50      	subs	r0, r2, #1
 80028ce:	4182      	sbcs	r2, r0
 80028d0:	0dff      	lsrs	r7, r7, #23
 80028d2:	4317      	orrs	r7, r2
 80028d4:	464a      	mov	r2, r9
 80028d6:	0252      	lsls	r2, r2, #9
 80028d8:	4317      	orrs	r7, r2
 80028da:	46b8      	mov	r8, r7
 80028dc:	01db      	lsls	r3, r3, #7
 80028de:	d500      	bpl.n	80028e2 <__aeabi_dmul+0x336>
 80028e0:	e6ed      	b.n	80026be <__aeabi_dmul+0x112>
 80028e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002918 <__aeabi_dmul+0x36c>)
 80028e4:	9a03      	ldr	r2, [sp, #12]
 80028e6:	445b      	add	r3, fp
 80028e8:	4691      	mov	r9, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	dc00      	bgt.n	80028f0 <__aeabi_dmul+0x344>
 80028ee:	e0ac      	b.n	8002a4a <__aeabi_dmul+0x49e>
 80028f0:	003a      	movs	r2, r7
 80028f2:	0752      	lsls	r2, r2, #29
 80028f4:	d100      	bne.n	80028f8 <__aeabi_dmul+0x34c>
 80028f6:	e710      	b.n	800271a <__aeabi_dmul+0x16e>
 80028f8:	220f      	movs	r2, #15
 80028fa:	4658      	mov	r0, fp
 80028fc:	403a      	ands	r2, r7
 80028fe:	2a04      	cmp	r2, #4
 8002900:	d000      	beq.n	8002904 <__aeabi_dmul+0x358>
 8002902:	e6f9      	b.n	80026f8 <__aeabi_dmul+0x14c>
 8002904:	e709      	b.n	800271a <__aeabi_dmul+0x16e>
 8002906:	46c0      	nop			@ (mov r8, r8)
 8002908:	000007ff 	.word	0x000007ff
 800290c:	fffffc01 	.word	0xfffffc01
 8002910:	feffffff 	.word	0xfeffffff
 8002914:	000007fe 	.word	0x000007fe
 8002918:	000003ff 	.word	0x000003ff
 800291c:	0022      	movs	r2, r4
 800291e:	4332      	orrs	r2, r6
 8002920:	d06f      	beq.n	8002a02 <__aeabi_dmul+0x456>
 8002922:	2c00      	cmp	r4, #0
 8002924:	d100      	bne.n	8002928 <__aeabi_dmul+0x37c>
 8002926:	e0c2      	b.n	8002aae <__aeabi_dmul+0x502>
 8002928:	0020      	movs	r0, r4
 800292a:	f000 fea9 	bl	8003680 <__clzsi2>
 800292e:	0002      	movs	r2, r0
 8002930:	0003      	movs	r3, r0
 8002932:	3a0b      	subs	r2, #11
 8002934:	201d      	movs	r0, #29
 8002936:	1a82      	subs	r2, r0, r2
 8002938:	0030      	movs	r0, r6
 800293a:	0019      	movs	r1, r3
 800293c:	40d0      	lsrs	r0, r2
 800293e:	3908      	subs	r1, #8
 8002940:	408c      	lsls	r4, r1
 8002942:	0002      	movs	r2, r0
 8002944:	4322      	orrs	r2, r4
 8002946:	0034      	movs	r4, r6
 8002948:	408c      	lsls	r4, r1
 800294a:	4659      	mov	r1, fp
 800294c:	1acb      	subs	r3, r1, r3
 800294e:	4986      	ldr	r1, [pc, #536]	@ (8002b68 <__aeabi_dmul+0x5bc>)
 8002950:	468b      	mov	fp, r1
 8002952:	449b      	add	fp, r3
 8002954:	2d0a      	cmp	r5, #10
 8002956:	dd00      	ble.n	800295a <__aeabi_dmul+0x3ae>
 8002958:	e6a4      	b.n	80026a4 <__aeabi_dmul+0xf8>
 800295a:	4649      	mov	r1, r9
 800295c:	9b00      	ldr	r3, [sp, #0]
 800295e:	9401      	str	r4, [sp, #4]
 8002960:	4059      	eors	r1, r3
 8002962:	b2cb      	uxtb	r3, r1
 8002964:	0014      	movs	r4, r2
 8002966:	2000      	movs	r0, #0
 8002968:	9303      	str	r3, [sp, #12]
 800296a:	2d02      	cmp	r5, #2
 800296c:	dd00      	ble.n	8002970 <__aeabi_dmul+0x3c4>
 800296e:	e667      	b.n	8002640 <__aeabi_dmul+0x94>
 8002970:	e6fb      	b.n	800276a <__aeabi_dmul+0x1be>
 8002972:	4653      	mov	r3, sl
 8002974:	4303      	orrs	r3, r0
 8002976:	4698      	mov	r8, r3
 8002978:	d03c      	beq.n	80029f4 <__aeabi_dmul+0x448>
 800297a:	4653      	mov	r3, sl
 800297c:	2b00      	cmp	r3, #0
 800297e:	d100      	bne.n	8002982 <__aeabi_dmul+0x3d6>
 8002980:	e0a3      	b.n	8002aca <__aeabi_dmul+0x51e>
 8002982:	4650      	mov	r0, sl
 8002984:	f000 fe7c 	bl	8003680 <__clzsi2>
 8002988:	230b      	movs	r3, #11
 800298a:	425b      	negs	r3, r3
 800298c:	469c      	mov	ip, r3
 800298e:	0002      	movs	r2, r0
 8002990:	4484      	add	ip, r0
 8002992:	0011      	movs	r1, r2
 8002994:	4650      	mov	r0, sl
 8002996:	3908      	subs	r1, #8
 8002998:	4088      	lsls	r0, r1
 800299a:	231d      	movs	r3, #29
 800299c:	4680      	mov	r8, r0
 800299e:	4660      	mov	r0, ip
 80029a0:	1a1b      	subs	r3, r3, r0
 80029a2:	0020      	movs	r0, r4
 80029a4:	40d8      	lsrs	r0, r3
 80029a6:	0003      	movs	r3, r0
 80029a8:	4640      	mov	r0, r8
 80029aa:	4303      	orrs	r3, r0
 80029ac:	469a      	mov	sl, r3
 80029ae:	0023      	movs	r3, r4
 80029b0:	408b      	lsls	r3, r1
 80029b2:	4698      	mov	r8, r3
 80029b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002b68 <__aeabi_dmul+0x5bc>)
 80029b6:	2500      	movs	r5, #0
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	469b      	mov	fp, r3
 80029bc:	2300      	movs	r3, #0
 80029be:	9302      	str	r3, [sp, #8]
 80029c0:	e61a      	b.n	80025f8 <__aeabi_dmul+0x4c>
 80029c2:	2d0f      	cmp	r5, #15
 80029c4:	d000      	beq.n	80029c8 <__aeabi_dmul+0x41c>
 80029c6:	e0c9      	b.n	8002b5c <__aeabi_dmul+0x5b0>
 80029c8:	2380      	movs	r3, #128	@ 0x80
 80029ca:	4652      	mov	r2, sl
 80029cc:	031b      	lsls	r3, r3, #12
 80029ce:	421a      	tst	r2, r3
 80029d0:	d002      	beq.n	80029d8 <__aeabi_dmul+0x42c>
 80029d2:	421c      	tst	r4, r3
 80029d4:	d100      	bne.n	80029d8 <__aeabi_dmul+0x42c>
 80029d6:	e092      	b.n	8002afe <__aeabi_dmul+0x552>
 80029d8:	2480      	movs	r4, #128	@ 0x80
 80029da:	4653      	mov	r3, sl
 80029dc:	0324      	lsls	r4, r4, #12
 80029de:	431c      	orrs	r4, r3
 80029e0:	0324      	lsls	r4, r4, #12
 80029e2:	4642      	mov	r2, r8
 80029e4:	0b24      	lsrs	r4, r4, #12
 80029e6:	e63e      	b.n	8002666 <__aeabi_dmul+0xba>
 80029e8:	469b      	mov	fp, r3
 80029ea:	2303      	movs	r3, #3
 80029ec:	4680      	mov	r8, r0
 80029ee:	250c      	movs	r5, #12
 80029f0:	9302      	str	r3, [sp, #8]
 80029f2:	e601      	b.n	80025f8 <__aeabi_dmul+0x4c>
 80029f4:	2300      	movs	r3, #0
 80029f6:	469a      	mov	sl, r3
 80029f8:	469b      	mov	fp, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	2504      	movs	r5, #4
 80029fe:	9302      	str	r3, [sp, #8]
 8002a00:	e5fa      	b.n	80025f8 <__aeabi_dmul+0x4c>
 8002a02:	2101      	movs	r1, #1
 8002a04:	430d      	orrs	r5, r1
 8002a06:	2d0a      	cmp	r5, #10
 8002a08:	dd00      	ble.n	8002a0c <__aeabi_dmul+0x460>
 8002a0a:	e64b      	b.n	80026a4 <__aeabi_dmul+0xf8>
 8002a0c:	4649      	mov	r1, r9
 8002a0e:	9800      	ldr	r0, [sp, #0]
 8002a10:	4041      	eors	r1, r0
 8002a12:	b2c9      	uxtb	r1, r1
 8002a14:	9103      	str	r1, [sp, #12]
 8002a16:	2d02      	cmp	r5, #2
 8002a18:	dc00      	bgt.n	8002a1c <__aeabi_dmul+0x470>
 8002a1a:	e096      	b.n	8002b4a <__aeabi_dmul+0x59e>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	2400      	movs	r4, #0
 8002a20:	2001      	movs	r0, #1
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	e60c      	b.n	8002640 <__aeabi_dmul+0x94>
 8002a26:	4649      	mov	r1, r9
 8002a28:	2302      	movs	r3, #2
 8002a2a:	9a00      	ldr	r2, [sp, #0]
 8002a2c:	432b      	orrs	r3, r5
 8002a2e:	4051      	eors	r1, r2
 8002a30:	b2ca      	uxtb	r2, r1
 8002a32:	9203      	str	r2, [sp, #12]
 8002a34:	2b0a      	cmp	r3, #10
 8002a36:	dd00      	ble.n	8002a3a <__aeabi_dmul+0x48e>
 8002a38:	e634      	b.n	80026a4 <__aeabi_dmul+0xf8>
 8002a3a:	2d00      	cmp	r5, #0
 8002a3c:	d157      	bne.n	8002aee <__aeabi_dmul+0x542>
 8002a3e:	9b03      	ldr	r3, [sp, #12]
 8002a40:	4699      	mov	r9, r3
 8002a42:	2400      	movs	r4, #0
 8002a44:	2200      	movs	r2, #0
 8002a46:	4b49      	ldr	r3, [pc, #292]	@ (8002b6c <__aeabi_dmul+0x5c0>)
 8002a48:	e60e      	b.n	8002668 <__aeabi_dmul+0xbc>
 8002a4a:	4658      	mov	r0, fp
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	1ac9      	subs	r1, r1, r3
 8002a50:	2938      	cmp	r1, #56	@ 0x38
 8002a52:	dd00      	ble.n	8002a56 <__aeabi_dmul+0x4aa>
 8002a54:	e62f      	b.n	80026b6 <__aeabi_dmul+0x10a>
 8002a56:	291f      	cmp	r1, #31
 8002a58:	dd56      	ble.n	8002b08 <__aeabi_dmul+0x55c>
 8002a5a:	221f      	movs	r2, #31
 8002a5c:	4654      	mov	r4, sl
 8002a5e:	4252      	negs	r2, r2
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	40dc      	lsrs	r4, r3
 8002a64:	2920      	cmp	r1, #32
 8002a66:	d007      	beq.n	8002a78 <__aeabi_dmul+0x4cc>
 8002a68:	4b41      	ldr	r3, [pc, #260]	@ (8002b70 <__aeabi_dmul+0x5c4>)
 8002a6a:	4642      	mov	r2, r8
 8002a6c:	469c      	mov	ip, r3
 8002a6e:	4653      	mov	r3, sl
 8002a70:	4460      	add	r0, ip
 8002a72:	4083      	lsls	r3, r0
 8002a74:	431a      	orrs	r2, r3
 8002a76:	4690      	mov	r8, r2
 8002a78:	4642      	mov	r2, r8
 8002a7a:	2107      	movs	r1, #7
 8002a7c:	1e53      	subs	r3, r2, #1
 8002a7e:	419a      	sbcs	r2, r3
 8002a80:	000b      	movs	r3, r1
 8002a82:	4322      	orrs	r2, r4
 8002a84:	4013      	ands	r3, r2
 8002a86:	2400      	movs	r4, #0
 8002a88:	4211      	tst	r1, r2
 8002a8a:	d009      	beq.n	8002aa0 <__aeabi_dmul+0x4f4>
 8002a8c:	230f      	movs	r3, #15
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d05d      	beq.n	8002b50 <__aeabi_dmul+0x5a4>
 8002a94:	1d11      	adds	r1, r2, #4
 8002a96:	4291      	cmp	r1, r2
 8002a98:	419b      	sbcs	r3, r3
 8002a9a:	000a      	movs	r2, r1
 8002a9c:	425b      	negs	r3, r3
 8002a9e:	075b      	lsls	r3, r3, #29
 8002aa0:	08d2      	lsrs	r2, r2, #3
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e5df      	b.n	8002668 <__aeabi_dmul+0xbc>
 8002aa8:	9b03      	ldr	r3, [sp, #12]
 8002aaa:	4699      	mov	r9, r3
 8002aac:	e5fa      	b.n	80026a4 <__aeabi_dmul+0xf8>
 8002aae:	9801      	ldr	r0, [sp, #4]
 8002ab0:	f000 fde6 	bl	8003680 <__clzsi2>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	3215      	adds	r2, #21
 8002aba:	3320      	adds	r3, #32
 8002abc:	2a1c      	cmp	r2, #28
 8002abe:	dc00      	bgt.n	8002ac2 <__aeabi_dmul+0x516>
 8002ac0:	e738      	b.n	8002934 <__aeabi_dmul+0x388>
 8002ac2:	9a01      	ldr	r2, [sp, #4]
 8002ac4:	3808      	subs	r0, #8
 8002ac6:	4082      	lsls	r2, r0
 8002ac8:	e73f      	b.n	800294a <__aeabi_dmul+0x39e>
 8002aca:	f000 fdd9 	bl	8003680 <__clzsi2>
 8002ace:	2315      	movs	r3, #21
 8002ad0:	469c      	mov	ip, r3
 8002ad2:	4484      	add	ip, r0
 8002ad4:	0002      	movs	r2, r0
 8002ad6:	4663      	mov	r3, ip
 8002ad8:	3220      	adds	r2, #32
 8002ada:	2b1c      	cmp	r3, #28
 8002adc:	dc00      	bgt.n	8002ae0 <__aeabi_dmul+0x534>
 8002ade:	e758      	b.n	8002992 <__aeabi_dmul+0x3e6>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	4698      	mov	r8, r3
 8002ae4:	0023      	movs	r3, r4
 8002ae6:	3808      	subs	r0, #8
 8002ae8:	4083      	lsls	r3, r0
 8002aea:	469a      	mov	sl, r3
 8002aec:	e762      	b.n	80029b4 <__aeabi_dmul+0x408>
 8002aee:	001d      	movs	r5, r3
 8002af0:	2300      	movs	r3, #0
 8002af2:	2400      	movs	r4, #0
 8002af4:	2002      	movs	r0, #2
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	e5a2      	b.n	8002640 <__aeabi_dmul+0x94>
 8002afa:	9002      	str	r0, [sp, #8]
 8002afc:	e632      	b.n	8002764 <__aeabi_dmul+0x1b8>
 8002afe:	431c      	orrs	r4, r3
 8002b00:	9b00      	ldr	r3, [sp, #0]
 8002b02:	9a01      	ldr	r2, [sp, #4]
 8002b04:	4699      	mov	r9, r3
 8002b06:	e5ae      	b.n	8002666 <__aeabi_dmul+0xba>
 8002b08:	4b1a      	ldr	r3, [pc, #104]	@ (8002b74 <__aeabi_dmul+0x5c8>)
 8002b0a:	4652      	mov	r2, sl
 8002b0c:	18c3      	adds	r3, r0, r3
 8002b0e:	4640      	mov	r0, r8
 8002b10:	409a      	lsls	r2, r3
 8002b12:	40c8      	lsrs	r0, r1
 8002b14:	4302      	orrs	r2, r0
 8002b16:	4640      	mov	r0, r8
 8002b18:	4098      	lsls	r0, r3
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	1e58      	subs	r0, r3, #1
 8002b1e:	4183      	sbcs	r3, r0
 8002b20:	4654      	mov	r4, sl
 8002b22:	431a      	orrs	r2, r3
 8002b24:	40cc      	lsrs	r4, r1
 8002b26:	0753      	lsls	r3, r2, #29
 8002b28:	d009      	beq.n	8002b3e <__aeabi_dmul+0x592>
 8002b2a:	230f      	movs	r3, #15
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d005      	beq.n	8002b3e <__aeabi_dmul+0x592>
 8002b32:	1d13      	adds	r3, r2, #4
 8002b34:	4293      	cmp	r3, r2
 8002b36:	4192      	sbcs	r2, r2
 8002b38:	4252      	negs	r2, r2
 8002b3a:	18a4      	adds	r4, r4, r2
 8002b3c:	001a      	movs	r2, r3
 8002b3e:	0223      	lsls	r3, r4, #8
 8002b40:	d508      	bpl.n	8002b54 <__aeabi_dmul+0x5a8>
 8002b42:	2301      	movs	r3, #1
 8002b44:	2400      	movs	r4, #0
 8002b46:	2200      	movs	r2, #0
 8002b48:	e58e      	b.n	8002668 <__aeabi_dmul+0xbc>
 8002b4a:	4689      	mov	r9, r1
 8002b4c:	2400      	movs	r4, #0
 8002b4e:	e58b      	b.n	8002668 <__aeabi_dmul+0xbc>
 8002b50:	2300      	movs	r3, #0
 8002b52:	e7a5      	b.n	8002aa0 <__aeabi_dmul+0x4f4>
 8002b54:	0763      	lsls	r3, r4, #29
 8002b56:	0264      	lsls	r4, r4, #9
 8002b58:	0b24      	lsrs	r4, r4, #12
 8002b5a:	e7a1      	b.n	8002aa0 <__aeabi_dmul+0x4f4>
 8002b5c:	9b00      	ldr	r3, [sp, #0]
 8002b5e:	46a2      	mov	sl, r4
 8002b60:	4699      	mov	r9, r3
 8002b62:	9b01      	ldr	r3, [sp, #4]
 8002b64:	4698      	mov	r8, r3
 8002b66:	e737      	b.n	80029d8 <__aeabi_dmul+0x42c>
 8002b68:	fffffc0d 	.word	0xfffffc0d
 8002b6c:	000007ff 	.word	0x000007ff
 8002b70:	0000043e 	.word	0x0000043e
 8002b74:	0000041e 	.word	0x0000041e

08002b78 <__aeabi_dsub>:
 8002b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7a:	4657      	mov	r7, sl
 8002b7c:	464e      	mov	r6, r9
 8002b7e:	4645      	mov	r5, r8
 8002b80:	46de      	mov	lr, fp
 8002b82:	b5e0      	push	{r5, r6, r7, lr}
 8002b84:	b083      	sub	sp, #12
 8002b86:	9000      	str	r0, [sp, #0]
 8002b88:	9101      	str	r1, [sp, #4]
 8002b8a:	030c      	lsls	r4, r1, #12
 8002b8c:	004d      	lsls	r5, r1, #1
 8002b8e:	0fce      	lsrs	r6, r1, #31
 8002b90:	0a61      	lsrs	r1, r4, #9
 8002b92:	9c00      	ldr	r4, [sp, #0]
 8002b94:	005f      	lsls	r7, r3, #1
 8002b96:	0f64      	lsrs	r4, r4, #29
 8002b98:	430c      	orrs	r4, r1
 8002b9a:	9900      	ldr	r1, [sp, #0]
 8002b9c:	9200      	str	r2, [sp, #0]
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	00c8      	lsls	r0, r1, #3
 8002ba2:	0319      	lsls	r1, r3, #12
 8002ba4:	0d7b      	lsrs	r3, r7, #21
 8002ba6:	4699      	mov	r9, r3
 8002ba8:	9b01      	ldr	r3, [sp, #4]
 8002baa:	4fcc      	ldr	r7, [pc, #816]	@ (8002edc <__aeabi_dsub+0x364>)
 8002bac:	0fdb      	lsrs	r3, r3, #31
 8002bae:	469c      	mov	ip, r3
 8002bb0:	0a4b      	lsrs	r3, r1, #9
 8002bb2:	9900      	ldr	r1, [sp, #0]
 8002bb4:	4680      	mov	r8, r0
 8002bb6:	0f49      	lsrs	r1, r1, #29
 8002bb8:	4319      	orrs	r1, r3
 8002bba:	9b00      	ldr	r3, [sp, #0]
 8002bbc:	468b      	mov	fp, r1
 8002bbe:	00da      	lsls	r2, r3, #3
 8002bc0:	4692      	mov	sl, r2
 8002bc2:	0d6d      	lsrs	r5, r5, #21
 8002bc4:	45b9      	cmp	r9, r7
 8002bc6:	d100      	bne.n	8002bca <__aeabi_dsub+0x52>
 8002bc8:	e0bf      	b.n	8002d4a <__aeabi_dsub+0x1d2>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	4661      	mov	r1, ip
 8002bce:	4059      	eors	r1, r3
 8002bd0:	464b      	mov	r3, r9
 8002bd2:	468c      	mov	ip, r1
 8002bd4:	1aeb      	subs	r3, r5, r3
 8002bd6:	428e      	cmp	r6, r1
 8002bd8:	d075      	beq.n	8002cc6 <__aeabi_dsub+0x14e>
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	dc00      	bgt.n	8002be0 <__aeabi_dsub+0x68>
 8002bde:	e2a3      	b.n	8003128 <__aeabi_dsub+0x5b0>
 8002be0:	4649      	mov	r1, r9
 8002be2:	2900      	cmp	r1, #0
 8002be4:	d100      	bne.n	8002be8 <__aeabi_dsub+0x70>
 8002be6:	e0ce      	b.n	8002d86 <__aeabi_dsub+0x20e>
 8002be8:	42bd      	cmp	r5, r7
 8002bea:	d100      	bne.n	8002bee <__aeabi_dsub+0x76>
 8002bec:	e200      	b.n	8002ff0 <__aeabi_dsub+0x478>
 8002bee:	2701      	movs	r7, #1
 8002bf0:	2b38      	cmp	r3, #56	@ 0x38
 8002bf2:	dc19      	bgt.n	8002c28 <__aeabi_dsub+0xb0>
 8002bf4:	2780      	movs	r7, #128	@ 0x80
 8002bf6:	4659      	mov	r1, fp
 8002bf8:	043f      	lsls	r7, r7, #16
 8002bfa:	4339      	orrs	r1, r7
 8002bfc:	468b      	mov	fp, r1
 8002bfe:	2b1f      	cmp	r3, #31
 8002c00:	dd00      	ble.n	8002c04 <__aeabi_dsub+0x8c>
 8002c02:	e1fa      	b.n	8002ffa <__aeabi_dsub+0x482>
 8002c04:	2720      	movs	r7, #32
 8002c06:	1af9      	subs	r1, r7, r3
 8002c08:	468c      	mov	ip, r1
 8002c0a:	4659      	mov	r1, fp
 8002c0c:	4667      	mov	r7, ip
 8002c0e:	40b9      	lsls	r1, r7
 8002c10:	000f      	movs	r7, r1
 8002c12:	0011      	movs	r1, r2
 8002c14:	40d9      	lsrs	r1, r3
 8002c16:	430f      	orrs	r7, r1
 8002c18:	4661      	mov	r1, ip
 8002c1a:	408a      	lsls	r2, r1
 8002c1c:	1e51      	subs	r1, r2, #1
 8002c1e:	418a      	sbcs	r2, r1
 8002c20:	4659      	mov	r1, fp
 8002c22:	40d9      	lsrs	r1, r3
 8002c24:	4317      	orrs	r7, r2
 8002c26:	1a64      	subs	r4, r4, r1
 8002c28:	1bc7      	subs	r7, r0, r7
 8002c2a:	42b8      	cmp	r0, r7
 8002c2c:	4180      	sbcs	r0, r0
 8002c2e:	4240      	negs	r0, r0
 8002c30:	1a24      	subs	r4, r4, r0
 8002c32:	0223      	lsls	r3, r4, #8
 8002c34:	d400      	bmi.n	8002c38 <__aeabi_dsub+0xc0>
 8002c36:	e140      	b.n	8002eba <__aeabi_dsub+0x342>
 8002c38:	0264      	lsls	r4, r4, #9
 8002c3a:	0a64      	lsrs	r4, r4, #9
 8002c3c:	2c00      	cmp	r4, #0
 8002c3e:	d100      	bne.n	8002c42 <__aeabi_dsub+0xca>
 8002c40:	e154      	b.n	8002eec <__aeabi_dsub+0x374>
 8002c42:	0020      	movs	r0, r4
 8002c44:	f000 fd1c 	bl	8003680 <__clzsi2>
 8002c48:	0003      	movs	r3, r0
 8002c4a:	3b08      	subs	r3, #8
 8002c4c:	2120      	movs	r1, #32
 8002c4e:	0038      	movs	r0, r7
 8002c50:	1aca      	subs	r2, r1, r3
 8002c52:	40d0      	lsrs	r0, r2
 8002c54:	409c      	lsls	r4, r3
 8002c56:	0002      	movs	r2, r0
 8002c58:	409f      	lsls	r7, r3
 8002c5a:	4322      	orrs	r2, r4
 8002c5c:	429d      	cmp	r5, r3
 8002c5e:	dd00      	ble.n	8002c62 <__aeabi_dsub+0xea>
 8002c60:	e1a6      	b.n	8002fb0 <__aeabi_dsub+0x438>
 8002c62:	1b58      	subs	r0, r3, r5
 8002c64:	3001      	adds	r0, #1
 8002c66:	1a09      	subs	r1, r1, r0
 8002c68:	003c      	movs	r4, r7
 8002c6a:	408f      	lsls	r7, r1
 8002c6c:	40c4      	lsrs	r4, r0
 8002c6e:	1e7b      	subs	r3, r7, #1
 8002c70:	419f      	sbcs	r7, r3
 8002c72:	0013      	movs	r3, r2
 8002c74:	408b      	lsls	r3, r1
 8002c76:	4327      	orrs	r7, r4
 8002c78:	431f      	orrs	r7, r3
 8002c7a:	40c2      	lsrs	r2, r0
 8002c7c:	003b      	movs	r3, r7
 8002c7e:	0014      	movs	r4, r2
 8002c80:	2500      	movs	r5, #0
 8002c82:	4313      	orrs	r3, r2
 8002c84:	d100      	bne.n	8002c88 <__aeabi_dsub+0x110>
 8002c86:	e1f7      	b.n	8003078 <__aeabi_dsub+0x500>
 8002c88:	077b      	lsls	r3, r7, #29
 8002c8a:	d100      	bne.n	8002c8e <__aeabi_dsub+0x116>
 8002c8c:	e377      	b.n	800337e <__aeabi_dsub+0x806>
 8002c8e:	230f      	movs	r3, #15
 8002c90:	0038      	movs	r0, r7
 8002c92:	403b      	ands	r3, r7
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d004      	beq.n	8002ca2 <__aeabi_dsub+0x12a>
 8002c98:	1d38      	adds	r0, r7, #4
 8002c9a:	42b8      	cmp	r0, r7
 8002c9c:	41bf      	sbcs	r7, r7
 8002c9e:	427f      	negs	r7, r7
 8002ca0:	19e4      	adds	r4, r4, r7
 8002ca2:	0223      	lsls	r3, r4, #8
 8002ca4:	d400      	bmi.n	8002ca8 <__aeabi_dsub+0x130>
 8002ca6:	e368      	b.n	800337a <__aeabi_dsub+0x802>
 8002ca8:	4b8c      	ldr	r3, [pc, #560]	@ (8002edc <__aeabi_dsub+0x364>)
 8002caa:	3501      	adds	r5, #1
 8002cac:	429d      	cmp	r5, r3
 8002cae:	d100      	bne.n	8002cb2 <__aeabi_dsub+0x13a>
 8002cb0:	e0f4      	b.n	8002e9c <__aeabi_dsub+0x324>
 8002cb2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ee0 <__aeabi_dsub+0x368>)
 8002cb4:	056d      	lsls	r5, r5, #21
 8002cb6:	401c      	ands	r4, r3
 8002cb8:	0d6d      	lsrs	r5, r5, #21
 8002cba:	0767      	lsls	r7, r4, #29
 8002cbc:	08c0      	lsrs	r0, r0, #3
 8002cbe:	0264      	lsls	r4, r4, #9
 8002cc0:	4307      	orrs	r7, r0
 8002cc2:	0b24      	lsrs	r4, r4, #12
 8002cc4:	e0ec      	b.n	8002ea0 <__aeabi_dsub+0x328>
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	dc00      	bgt.n	8002ccc <__aeabi_dsub+0x154>
 8002cca:	e329      	b.n	8003320 <__aeabi_dsub+0x7a8>
 8002ccc:	4649      	mov	r1, r9
 8002cce:	2900      	cmp	r1, #0
 8002cd0:	d000      	beq.n	8002cd4 <__aeabi_dsub+0x15c>
 8002cd2:	e0d6      	b.n	8002e82 <__aeabi_dsub+0x30a>
 8002cd4:	4659      	mov	r1, fp
 8002cd6:	4311      	orrs	r1, r2
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x164>
 8002cda:	e12e      	b.n	8002f3a <__aeabi_dsub+0x3c2>
 8002cdc:	1e59      	subs	r1, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d100      	bne.n	8002ce4 <__aeabi_dsub+0x16c>
 8002ce2:	e1e6      	b.n	80030b2 <__aeabi_dsub+0x53a>
 8002ce4:	42bb      	cmp	r3, r7
 8002ce6:	d100      	bne.n	8002cea <__aeabi_dsub+0x172>
 8002ce8:	e182      	b.n	8002ff0 <__aeabi_dsub+0x478>
 8002cea:	2701      	movs	r7, #1
 8002cec:	000b      	movs	r3, r1
 8002cee:	2938      	cmp	r1, #56	@ 0x38
 8002cf0:	dc14      	bgt.n	8002d1c <__aeabi_dsub+0x1a4>
 8002cf2:	2b1f      	cmp	r3, #31
 8002cf4:	dd00      	ble.n	8002cf8 <__aeabi_dsub+0x180>
 8002cf6:	e23c      	b.n	8003172 <__aeabi_dsub+0x5fa>
 8002cf8:	2720      	movs	r7, #32
 8002cfa:	1af9      	subs	r1, r7, r3
 8002cfc:	468c      	mov	ip, r1
 8002cfe:	4659      	mov	r1, fp
 8002d00:	4667      	mov	r7, ip
 8002d02:	40b9      	lsls	r1, r7
 8002d04:	000f      	movs	r7, r1
 8002d06:	0011      	movs	r1, r2
 8002d08:	40d9      	lsrs	r1, r3
 8002d0a:	430f      	orrs	r7, r1
 8002d0c:	4661      	mov	r1, ip
 8002d0e:	408a      	lsls	r2, r1
 8002d10:	1e51      	subs	r1, r2, #1
 8002d12:	418a      	sbcs	r2, r1
 8002d14:	4659      	mov	r1, fp
 8002d16:	40d9      	lsrs	r1, r3
 8002d18:	4317      	orrs	r7, r2
 8002d1a:	1864      	adds	r4, r4, r1
 8002d1c:	183f      	adds	r7, r7, r0
 8002d1e:	4287      	cmp	r7, r0
 8002d20:	4180      	sbcs	r0, r0
 8002d22:	4240      	negs	r0, r0
 8002d24:	1824      	adds	r4, r4, r0
 8002d26:	0223      	lsls	r3, r4, #8
 8002d28:	d400      	bmi.n	8002d2c <__aeabi_dsub+0x1b4>
 8002d2a:	e0c6      	b.n	8002eba <__aeabi_dsub+0x342>
 8002d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8002edc <__aeabi_dsub+0x364>)
 8002d2e:	3501      	adds	r5, #1
 8002d30:	429d      	cmp	r5, r3
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x1be>
 8002d34:	e0b2      	b.n	8002e9c <__aeabi_dsub+0x324>
 8002d36:	2101      	movs	r1, #1
 8002d38:	4b69      	ldr	r3, [pc, #420]	@ (8002ee0 <__aeabi_dsub+0x368>)
 8002d3a:	087a      	lsrs	r2, r7, #1
 8002d3c:	401c      	ands	r4, r3
 8002d3e:	4039      	ands	r1, r7
 8002d40:	430a      	orrs	r2, r1
 8002d42:	07e7      	lsls	r7, r4, #31
 8002d44:	4317      	orrs	r7, r2
 8002d46:	0864      	lsrs	r4, r4, #1
 8002d48:	e79e      	b.n	8002c88 <__aeabi_dsub+0x110>
 8002d4a:	4b66      	ldr	r3, [pc, #408]	@ (8002ee4 <__aeabi_dsub+0x36c>)
 8002d4c:	4311      	orrs	r1, r2
 8002d4e:	468a      	mov	sl, r1
 8002d50:	18eb      	adds	r3, r5, r3
 8002d52:	2900      	cmp	r1, #0
 8002d54:	d028      	beq.n	8002da8 <__aeabi_dsub+0x230>
 8002d56:	4566      	cmp	r6, ip
 8002d58:	d02c      	beq.n	8002db4 <__aeabi_dsub+0x23c>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d05b      	beq.n	8002e16 <__aeabi_dsub+0x29e>
 8002d5e:	2d00      	cmp	r5, #0
 8002d60:	d100      	bne.n	8002d64 <__aeabi_dsub+0x1ec>
 8002d62:	e12c      	b.n	8002fbe <__aeabi_dsub+0x446>
 8002d64:	465b      	mov	r3, fp
 8002d66:	4666      	mov	r6, ip
 8002d68:	075f      	lsls	r7, r3, #29
 8002d6a:	08d2      	lsrs	r2, r2, #3
 8002d6c:	4317      	orrs	r7, r2
 8002d6e:	08dd      	lsrs	r5, r3, #3
 8002d70:	003b      	movs	r3, r7
 8002d72:	432b      	orrs	r3, r5
 8002d74:	d100      	bne.n	8002d78 <__aeabi_dsub+0x200>
 8002d76:	e0e2      	b.n	8002f3e <__aeabi_dsub+0x3c6>
 8002d78:	2480      	movs	r4, #128	@ 0x80
 8002d7a:	0324      	lsls	r4, r4, #12
 8002d7c:	432c      	orrs	r4, r5
 8002d7e:	0324      	lsls	r4, r4, #12
 8002d80:	4d56      	ldr	r5, [pc, #344]	@ (8002edc <__aeabi_dsub+0x364>)
 8002d82:	0b24      	lsrs	r4, r4, #12
 8002d84:	e08c      	b.n	8002ea0 <__aeabi_dsub+0x328>
 8002d86:	4659      	mov	r1, fp
 8002d88:	4311      	orrs	r1, r2
 8002d8a:	d100      	bne.n	8002d8e <__aeabi_dsub+0x216>
 8002d8c:	e0d5      	b.n	8002f3a <__aeabi_dsub+0x3c2>
 8002d8e:	1e59      	subs	r1, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d100      	bne.n	8002d96 <__aeabi_dsub+0x21e>
 8002d94:	e1b9      	b.n	800310a <__aeabi_dsub+0x592>
 8002d96:	42bb      	cmp	r3, r7
 8002d98:	d100      	bne.n	8002d9c <__aeabi_dsub+0x224>
 8002d9a:	e1b1      	b.n	8003100 <__aeabi_dsub+0x588>
 8002d9c:	2701      	movs	r7, #1
 8002d9e:	000b      	movs	r3, r1
 8002da0:	2938      	cmp	r1, #56	@ 0x38
 8002da2:	dd00      	ble.n	8002da6 <__aeabi_dsub+0x22e>
 8002da4:	e740      	b.n	8002c28 <__aeabi_dsub+0xb0>
 8002da6:	e72a      	b.n	8002bfe <__aeabi_dsub+0x86>
 8002da8:	4661      	mov	r1, ip
 8002daa:	2701      	movs	r7, #1
 8002dac:	4079      	eors	r1, r7
 8002dae:	468c      	mov	ip, r1
 8002db0:	4566      	cmp	r6, ip
 8002db2:	d1d2      	bne.n	8002d5a <__aeabi_dsub+0x1e2>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d100      	bne.n	8002dba <__aeabi_dsub+0x242>
 8002db8:	e0c5      	b.n	8002f46 <__aeabi_dsub+0x3ce>
 8002dba:	2d00      	cmp	r5, #0
 8002dbc:	d000      	beq.n	8002dc0 <__aeabi_dsub+0x248>
 8002dbe:	e155      	b.n	800306c <__aeabi_dsub+0x4f4>
 8002dc0:	464b      	mov	r3, r9
 8002dc2:	0025      	movs	r5, r4
 8002dc4:	4305      	orrs	r5, r0
 8002dc6:	d100      	bne.n	8002dca <__aeabi_dsub+0x252>
 8002dc8:	e212      	b.n	80031f0 <__aeabi_dsub+0x678>
 8002dca:	1e59      	subs	r1, r3, #1
 8002dcc:	468c      	mov	ip, r1
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d100      	bne.n	8002dd4 <__aeabi_dsub+0x25c>
 8002dd2:	e249      	b.n	8003268 <__aeabi_dsub+0x6f0>
 8002dd4:	4d41      	ldr	r5, [pc, #260]	@ (8002edc <__aeabi_dsub+0x364>)
 8002dd6:	42ab      	cmp	r3, r5
 8002dd8:	d100      	bne.n	8002ddc <__aeabi_dsub+0x264>
 8002dda:	e28f      	b.n	80032fc <__aeabi_dsub+0x784>
 8002ddc:	2701      	movs	r7, #1
 8002dde:	2938      	cmp	r1, #56	@ 0x38
 8002de0:	dc11      	bgt.n	8002e06 <__aeabi_dsub+0x28e>
 8002de2:	4663      	mov	r3, ip
 8002de4:	2b1f      	cmp	r3, #31
 8002de6:	dd00      	ble.n	8002dea <__aeabi_dsub+0x272>
 8002de8:	e25b      	b.n	80032a2 <__aeabi_dsub+0x72a>
 8002dea:	4661      	mov	r1, ip
 8002dec:	2320      	movs	r3, #32
 8002dee:	0027      	movs	r7, r4
 8002df0:	1a5b      	subs	r3, r3, r1
 8002df2:	0005      	movs	r5, r0
 8002df4:	4098      	lsls	r0, r3
 8002df6:	409f      	lsls	r7, r3
 8002df8:	40cd      	lsrs	r5, r1
 8002dfa:	1e43      	subs	r3, r0, #1
 8002dfc:	4198      	sbcs	r0, r3
 8002dfe:	40cc      	lsrs	r4, r1
 8002e00:	432f      	orrs	r7, r5
 8002e02:	4307      	orrs	r7, r0
 8002e04:	44a3      	add	fp, r4
 8002e06:	18bf      	adds	r7, r7, r2
 8002e08:	4297      	cmp	r7, r2
 8002e0a:	4192      	sbcs	r2, r2
 8002e0c:	4252      	negs	r2, r2
 8002e0e:	445a      	add	r2, fp
 8002e10:	0014      	movs	r4, r2
 8002e12:	464d      	mov	r5, r9
 8002e14:	e787      	b.n	8002d26 <__aeabi_dsub+0x1ae>
 8002e16:	4f34      	ldr	r7, [pc, #208]	@ (8002ee8 <__aeabi_dsub+0x370>)
 8002e18:	1c6b      	adds	r3, r5, #1
 8002e1a:	423b      	tst	r3, r7
 8002e1c:	d000      	beq.n	8002e20 <__aeabi_dsub+0x2a8>
 8002e1e:	e0b6      	b.n	8002f8e <__aeabi_dsub+0x416>
 8002e20:	4659      	mov	r1, fp
 8002e22:	0023      	movs	r3, r4
 8002e24:	4311      	orrs	r1, r2
 8002e26:	000f      	movs	r7, r1
 8002e28:	4303      	orrs	r3, r0
 8002e2a:	2d00      	cmp	r5, #0
 8002e2c:	d000      	beq.n	8002e30 <__aeabi_dsub+0x2b8>
 8002e2e:	e126      	b.n	800307e <__aeabi_dsub+0x506>
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d100      	bne.n	8002e36 <__aeabi_dsub+0x2be>
 8002e34:	e1c0      	b.n	80031b8 <__aeabi_dsub+0x640>
 8002e36:	2900      	cmp	r1, #0
 8002e38:	d100      	bne.n	8002e3c <__aeabi_dsub+0x2c4>
 8002e3a:	e0a1      	b.n	8002f80 <__aeabi_dsub+0x408>
 8002e3c:	1a83      	subs	r3, r0, r2
 8002e3e:	4698      	mov	r8, r3
 8002e40:	465b      	mov	r3, fp
 8002e42:	4540      	cmp	r0, r8
 8002e44:	41ad      	sbcs	r5, r5
 8002e46:	1ae3      	subs	r3, r4, r3
 8002e48:	426d      	negs	r5, r5
 8002e4a:	1b5b      	subs	r3, r3, r5
 8002e4c:	2580      	movs	r5, #128	@ 0x80
 8002e4e:	042d      	lsls	r5, r5, #16
 8002e50:	422b      	tst	r3, r5
 8002e52:	d100      	bne.n	8002e56 <__aeabi_dsub+0x2de>
 8002e54:	e14b      	b.n	80030ee <__aeabi_dsub+0x576>
 8002e56:	465b      	mov	r3, fp
 8002e58:	1a10      	subs	r0, r2, r0
 8002e5a:	4282      	cmp	r2, r0
 8002e5c:	4192      	sbcs	r2, r2
 8002e5e:	1b1c      	subs	r4, r3, r4
 8002e60:	0007      	movs	r7, r0
 8002e62:	2601      	movs	r6, #1
 8002e64:	4663      	mov	r3, ip
 8002e66:	4252      	negs	r2, r2
 8002e68:	1aa4      	subs	r4, r4, r2
 8002e6a:	4327      	orrs	r7, r4
 8002e6c:	401e      	ands	r6, r3
 8002e6e:	2f00      	cmp	r7, #0
 8002e70:	d100      	bne.n	8002e74 <__aeabi_dsub+0x2fc>
 8002e72:	e142      	b.n	80030fa <__aeabi_dsub+0x582>
 8002e74:	422c      	tst	r4, r5
 8002e76:	d100      	bne.n	8002e7a <__aeabi_dsub+0x302>
 8002e78:	e26d      	b.n	8003356 <__aeabi_dsub+0x7de>
 8002e7a:	4b19      	ldr	r3, [pc, #100]	@ (8002ee0 <__aeabi_dsub+0x368>)
 8002e7c:	2501      	movs	r5, #1
 8002e7e:	401c      	ands	r4, r3
 8002e80:	e71b      	b.n	8002cba <__aeabi_dsub+0x142>
 8002e82:	42bd      	cmp	r5, r7
 8002e84:	d100      	bne.n	8002e88 <__aeabi_dsub+0x310>
 8002e86:	e13b      	b.n	8003100 <__aeabi_dsub+0x588>
 8002e88:	2701      	movs	r7, #1
 8002e8a:	2b38      	cmp	r3, #56	@ 0x38
 8002e8c:	dd00      	ble.n	8002e90 <__aeabi_dsub+0x318>
 8002e8e:	e745      	b.n	8002d1c <__aeabi_dsub+0x1a4>
 8002e90:	2780      	movs	r7, #128	@ 0x80
 8002e92:	4659      	mov	r1, fp
 8002e94:	043f      	lsls	r7, r7, #16
 8002e96:	4339      	orrs	r1, r7
 8002e98:	468b      	mov	fp, r1
 8002e9a:	e72a      	b.n	8002cf2 <__aeabi_dsub+0x17a>
 8002e9c:	2400      	movs	r4, #0
 8002e9e:	2700      	movs	r7, #0
 8002ea0:	052d      	lsls	r5, r5, #20
 8002ea2:	4325      	orrs	r5, r4
 8002ea4:	07f6      	lsls	r6, r6, #31
 8002ea6:	4335      	orrs	r5, r6
 8002ea8:	0038      	movs	r0, r7
 8002eaa:	0029      	movs	r1, r5
 8002eac:	b003      	add	sp, #12
 8002eae:	bcf0      	pop	{r4, r5, r6, r7}
 8002eb0:	46bb      	mov	fp, r7
 8002eb2:	46b2      	mov	sl, r6
 8002eb4:	46a9      	mov	r9, r5
 8002eb6:	46a0      	mov	r8, r4
 8002eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eba:	077b      	lsls	r3, r7, #29
 8002ebc:	d004      	beq.n	8002ec8 <__aeabi_dsub+0x350>
 8002ebe:	230f      	movs	r3, #15
 8002ec0:	403b      	ands	r3, r7
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x350>
 8002ec6:	e6e7      	b.n	8002c98 <__aeabi_dsub+0x120>
 8002ec8:	002b      	movs	r3, r5
 8002eca:	08f8      	lsrs	r0, r7, #3
 8002ecc:	4a03      	ldr	r2, [pc, #12]	@ (8002edc <__aeabi_dsub+0x364>)
 8002ece:	0767      	lsls	r7, r4, #29
 8002ed0:	4307      	orrs	r7, r0
 8002ed2:	08e5      	lsrs	r5, r4, #3
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d100      	bne.n	8002eda <__aeabi_dsub+0x362>
 8002ed8:	e74a      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 8002eda:	e0a5      	b.n	8003028 <__aeabi_dsub+0x4b0>
 8002edc:	000007ff 	.word	0x000007ff
 8002ee0:	ff7fffff 	.word	0xff7fffff
 8002ee4:	fffff801 	.word	0xfffff801
 8002ee8:	000007fe 	.word	0x000007fe
 8002eec:	0038      	movs	r0, r7
 8002eee:	f000 fbc7 	bl	8003680 <__clzsi2>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	3318      	adds	r3, #24
 8002ef6:	2b1f      	cmp	r3, #31
 8002ef8:	dc00      	bgt.n	8002efc <__aeabi_dsub+0x384>
 8002efa:	e6a7      	b.n	8002c4c <__aeabi_dsub+0xd4>
 8002efc:	003a      	movs	r2, r7
 8002efe:	3808      	subs	r0, #8
 8002f00:	4082      	lsls	r2, r0
 8002f02:	429d      	cmp	r5, r3
 8002f04:	dd00      	ble.n	8002f08 <__aeabi_dsub+0x390>
 8002f06:	e08a      	b.n	800301e <__aeabi_dsub+0x4a6>
 8002f08:	1b5b      	subs	r3, r3, r5
 8002f0a:	1c58      	adds	r0, r3, #1
 8002f0c:	281f      	cmp	r0, #31
 8002f0e:	dc00      	bgt.n	8002f12 <__aeabi_dsub+0x39a>
 8002f10:	e1d8      	b.n	80032c4 <__aeabi_dsub+0x74c>
 8002f12:	0017      	movs	r7, r2
 8002f14:	3b1f      	subs	r3, #31
 8002f16:	40df      	lsrs	r7, r3
 8002f18:	2820      	cmp	r0, #32
 8002f1a:	d005      	beq.n	8002f28 <__aeabi_dsub+0x3b0>
 8002f1c:	2340      	movs	r3, #64	@ 0x40
 8002f1e:	1a1b      	subs	r3, r3, r0
 8002f20:	409a      	lsls	r2, r3
 8002f22:	1e53      	subs	r3, r2, #1
 8002f24:	419a      	sbcs	r2, r3
 8002f26:	4317      	orrs	r7, r2
 8002f28:	2500      	movs	r5, #0
 8002f2a:	2f00      	cmp	r7, #0
 8002f2c:	d100      	bne.n	8002f30 <__aeabi_dsub+0x3b8>
 8002f2e:	e0e5      	b.n	80030fc <__aeabi_dsub+0x584>
 8002f30:	077b      	lsls	r3, r7, #29
 8002f32:	d000      	beq.n	8002f36 <__aeabi_dsub+0x3be>
 8002f34:	e6ab      	b.n	8002c8e <__aeabi_dsub+0x116>
 8002f36:	002c      	movs	r4, r5
 8002f38:	e7c6      	b.n	8002ec8 <__aeabi_dsub+0x350>
 8002f3a:	08c0      	lsrs	r0, r0, #3
 8002f3c:	e7c6      	b.n	8002ecc <__aeabi_dsub+0x354>
 8002f3e:	2700      	movs	r7, #0
 8002f40:	2400      	movs	r4, #0
 8002f42:	4dd1      	ldr	r5, [pc, #836]	@ (8003288 <__aeabi_dsub+0x710>)
 8002f44:	e7ac      	b.n	8002ea0 <__aeabi_dsub+0x328>
 8002f46:	4fd1      	ldr	r7, [pc, #836]	@ (800328c <__aeabi_dsub+0x714>)
 8002f48:	1c6b      	adds	r3, r5, #1
 8002f4a:	423b      	tst	r3, r7
 8002f4c:	d171      	bne.n	8003032 <__aeabi_dsub+0x4ba>
 8002f4e:	0023      	movs	r3, r4
 8002f50:	4303      	orrs	r3, r0
 8002f52:	2d00      	cmp	r5, #0
 8002f54:	d000      	beq.n	8002f58 <__aeabi_dsub+0x3e0>
 8002f56:	e14e      	b.n	80031f6 <__aeabi_dsub+0x67e>
 8002f58:	4657      	mov	r7, sl
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x3e8>
 8002f5e:	e1b5      	b.n	80032cc <__aeabi_dsub+0x754>
 8002f60:	2f00      	cmp	r7, #0
 8002f62:	d00d      	beq.n	8002f80 <__aeabi_dsub+0x408>
 8002f64:	1883      	adds	r3, r0, r2
 8002f66:	4283      	cmp	r3, r0
 8002f68:	4180      	sbcs	r0, r0
 8002f6a:	445c      	add	r4, fp
 8002f6c:	4240      	negs	r0, r0
 8002f6e:	1824      	adds	r4, r4, r0
 8002f70:	0222      	lsls	r2, r4, #8
 8002f72:	d500      	bpl.n	8002f76 <__aeabi_dsub+0x3fe>
 8002f74:	e1c8      	b.n	8003308 <__aeabi_dsub+0x790>
 8002f76:	001f      	movs	r7, r3
 8002f78:	4698      	mov	r8, r3
 8002f7a:	4327      	orrs	r7, r4
 8002f7c:	d100      	bne.n	8002f80 <__aeabi_dsub+0x408>
 8002f7e:	e0bc      	b.n	80030fa <__aeabi_dsub+0x582>
 8002f80:	4643      	mov	r3, r8
 8002f82:	0767      	lsls	r7, r4, #29
 8002f84:	08db      	lsrs	r3, r3, #3
 8002f86:	431f      	orrs	r7, r3
 8002f88:	08e5      	lsrs	r5, r4, #3
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e04c      	b.n	8003028 <__aeabi_dsub+0x4b0>
 8002f8e:	1a83      	subs	r3, r0, r2
 8002f90:	4698      	mov	r8, r3
 8002f92:	465b      	mov	r3, fp
 8002f94:	4540      	cmp	r0, r8
 8002f96:	41bf      	sbcs	r7, r7
 8002f98:	1ae3      	subs	r3, r4, r3
 8002f9a:	427f      	negs	r7, r7
 8002f9c:	1bdb      	subs	r3, r3, r7
 8002f9e:	021f      	lsls	r7, r3, #8
 8002fa0:	d47c      	bmi.n	800309c <__aeabi_dsub+0x524>
 8002fa2:	4647      	mov	r7, r8
 8002fa4:	431f      	orrs	r7, r3
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x432>
 8002fa8:	e0a6      	b.n	80030f8 <__aeabi_dsub+0x580>
 8002faa:	001c      	movs	r4, r3
 8002fac:	4647      	mov	r7, r8
 8002fae:	e645      	b.n	8002c3c <__aeabi_dsub+0xc4>
 8002fb0:	4cb7      	ldr	r4, [pc, #732]	@ (8003290 <__aeabi_dsub+0x718>)
 8002fb2:	1aed      	subs	r5, r5, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	077b      	lsls	r3, r7, #29
 8002fb8:	d000      	beq.n	8002fbc <__aeabi_dsub+0x444>
 8002fba:	e780      	b.n	8002ebe <__aeabi_dsub+0x346>
 8002fbc:	e784      	b.n	8002ec8 <__aeabi_dsub+0x350>
 8002fbe:	464b      	mov	r3, r9
 8002fc0:	0025      	movs	r5, r4
 8002fc2:	4305      	orrs	r5, r0
 8002fc4:	d066      	beq.n	8003094 <__aeabi_dsub+0x51c>
 8002fc6:	1e5f      	subs	r7, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d100      	bne.n	8002fce <__aeabi_dsub+0x456>
 8002fcc:	e0fc      	b.n	80031c8 <__aeabi_dsub+0x650>
 8002fce:	4dae      	ldr	r5, [pc, #696]	@ (8003288 <__aeabi_dsub+0x710>)
 8002fd0:	42ab      	cmp	r3, r5
 8002fd2:	d100      	bne.n	8002fd6 <__aeabi_dsub+0x45e>
 8002fd4:	e15e      	b.n	8003294 <__aeabi_dsub+0x71c>
 8002fd6:	4666      	mov	r6, ip
 8002fd8:	2f38      	cmp	r7, #56	@ 0x38
 8002fda:	dc00      	bgt.n	8002fde <__aeabi_dsub+0x466>
 8002fdc:	e0b4      	b.n	8003148 <__aeabi_dsub+0x5d0>
 8002fde:	2001      	movs	r0, #1
 8002fe0:	1a17      	subs	r7, r2, r0
 8002fe2:	42ba      	cmp	r2, r7
 8002fe4:	4192      	sbcs	r2, r2
 8002fe6:	465b      	mov	r3, fp
 8002fe8:	4252      	negs	r2, r2
 8002fea:	464d      	mov	r5, r9
 8002fec:	1a9c      	subs	r4, r3, r2
 8002fee:	e620      	b.n	8002c32 <__aeabi_dsub+0xba>
 8002ff0:	0767      	lsls	r7, r4, #29
 8002ff2:	08c0      	lsrs	r0, r0, #3
 8002ff4:	4307      	orrs	r7, r0
 8002ff6:	08e5      	lsrs	r5, r4, #3
 8002ff8:	e6ba      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 8002ffa:	001f      	movs	r7, r3
 8002ffc:	4659      	mov	r1, fp
 8002ffe:	3f20      	subs	r7, #32
 8003000:	40f9      	lsrs	r1, r7
 8003002:	000f      	movs	r7, r1
 8003004:	2b20      	cmp	r3, #32
 8003006:	d005      	beq.n	8003014 <__aeabi_dsub+0x49c>
 8003008:	2140      	movs	r1, #64	@ 0x40
 800300a:	1acb      	subs	r3, r1, r3
 800300c:	4659      	mov	r1, fp
 800300e:	4099      	lsls	r1, r3
 8003010:	430a      	orrs	r2, r1
 8003012:	4692      	mov	sl, r2
 8003014:	4653      	mov	r3, sl
 8003016:	1e5a      	subs	r2, r3, #1
 8003018:	4193      	sbcs	r3, r2
 800301a:	431f      	orrs	r7, r3
 800301c:	e604      	b.n	8002c28 <__aeabi_dsub+0xb0>
 800301e:	1aeb      	subs	r3, r5, r3
 8003020:	4d9b      	ldr	r5, [pc, #620]	@ (8003290 <__aeabi_dsub+0x718>)
 8003022:	4015      	ands	r5, r2
 8003024:	076f      	lsls	r7, r5, #29
 8003026:	08ed      	lsrs	r5, r5, #3
 8003028:	032c      	lsls	r4, r5, #12
 800302a:	055d      	lsls	r5, r3, #21
 800302c:	0b24      	lsrs	r4, r4, #12
 800302e:	0d6d      	lsrs	r5, r5, #21
 8003030:	e736      	b.n	8002ea0 <__aeabi_dsub+0x328>
 8003032:	4d95      	ldr	r5, [pc, #596]	@ (8003288 <__aeabi_dsub+0x710>)
 8003034:	42ab      	cmp	r3, r5
 8003036:	d100      	bne.n	800303a <__aeabi_dsub+0x4c2>
 8003038:	e0d6      	b.n	80031e8 <__aeabi_dsub+0x670>
 800303a:	1882      	adds	r2, r0, r2
 800303c:	0021      	movs	r1, r4
 800303e:	4282      	cmp	r2, r0
 8003040:	4180      	sbcs	r0, r0
 8003042:	4459      	add	r1, fp
 8003044:	4240      	negs	r0, r0
 8003046:	1808      	adds	r0, r1, r0
 8003048:	07c7      	lsls	r7, r0, #31
 800304a:	0852      	lsrs	r2, r2, #1
 800304c:	4317      	orrs	r7, r2
 800304e:	0844      	lsrs	r4, r0, #1
 8003050:	0752      	lsls	r2, r2, #29
 8003052:	d400      	bmi.n	8003056 <__aeabi_dsub+0x4de>
 8003054:	e185      	b.n	8003362 <__aeabi_dsub+0x7ea>
 8003056:	220f      	movs	r2, #15
 8003058:	001d      	movs	r5, r3
 800305a:	403a      	ands	r2, r7
 800305c:	2a04      	cmp	r2, #4
 800305e:	d000      	beq.n	8003062 <__aeabi_dsub+0x4ea>
 8003060:	e61a      	b.n	8002c98 <__aeabi_dsub+0x120>
 8003062:	08ff      	lsrs	r7, r7, #3
 8003064:	0764      	lsls	r4, r4, #29
 8003066:	4327      	orrs	r7, r4
 8003068:	0905      	lsrs	r5, r0, #4
 800306a:	e7dd      	b.n	8003028 <__aeabi_dsub+0x4b0>
 800306c:	465b      	mov	r3, fp
 800306e:	08d2      	lsrs	r2, r2, #3
 8003070:	075f      	lsls	r7, r3, #29
 8003072:	4317      	orrs	r7, r2
 8003074:	08dd      	lsrs	r5, r3, #3
 8003076:	e67b      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 8003078:	2700      	movs	r7, #0
 800307a:	2400      	movs	r4, #0
 800307c:	e710      	b.n	8002ea0 <__aeabi_dsub+0x328>
 800307e:	2b00      	cmp	r3, #0
 8003080:	d000      	beq.n	8003084 <__aeabi_dsub+0x50c>
 8003082:	e0d6      	b.n	8003232 <__aeabi_dsub+0x6ba>
 8003084:	2900      	cmp	r1, #0
 8003086:	d000      	beq.n	800308a <__aeabi_dsub+0x512>
 8003088:	e12f      	b.n	80032ea <__aeabi_dsub+0x772>
 800308a:	2480      	movs	r4, #128	@ 0x80
 800308c:	2600      	movs	r6, #0
 800308e:	4d7e      	ldr	r5, [pc, #504]	@ (8003288 <__aeabi_dsub+0x710>)
 8003090:	0324      	lsls	r4, r4, #12
 8003092:	e705      	b.n	8002ea0 <__aeabi_dsub+0x328>
 8003094:	4666      	mov	r6, ip
 8003096:	465c      	mov	r4, fp
 8003098:	08d0      	lsrs	r0, r2, #3
 800309a:	e717      	b.n	8002ecc <__aeabi_dsub+0x354>
 800309c:	465b      	mov	r3, fp
 800309e:	1a17      	subs	r7, r2, r0
 80030a0:	42ba      	cmp	r2, r7
 80030a2:	4192      	sbcs	r2, r2
 80030a4:	1b1c      	subs	r4, r3, r4
 80030a6:	2601      	movs	r6, #1
 80030a8:	4663      	mov	r3, ip
 80030aa:	4252      	negs	r2, r2
 80030ac:	1aa4      	subs	r4, r4, r2
 80030ae:	401e      	ands	r6, r3
 80030b0:	e5c4      	b.n	8002c3c <__aeabi_dsub+0xc4>
 80030b2:	1883      	adds	r3, r0, r2
 80030b4:	4283      	cmp	r3, r0
 80030b6:	4180      	sbcs	r0, r0
 80030b8:	445c      	add	r4, fp
 80030ba:	4240      	negs	r0, r0
 80030bc:	1825      	adds	r5, r4, r0
 80030be:	022a      	lsls	r2, r5, #8
 80030c0:	d400      	bmi.n	80030c4 <__aeabi_dsub+0x54c>
 80030c2:	e0da      	b.n	800327a <__aeabi_dsub+0x702>
 80030c4:	4a72      	ldr	r2, [pc, #456]	@ (8003290 <__aeabi_dsub+0x718>)
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	4015      	ands	r5, r2
 80030ca:	07ea      	lsls	r2, r5, #31
 80030cc:	431a      	orrs	r2, r3
 80030ce:	0869      	lsrs	r1, r5, #1
 80030d0:	075b      	lsls	r3, r3, #29
 80030d2:	d400      	bmi.n	80030d6 <__aeabi_dsub+0x55e>
 80030d4:	e14a      	b.n	800336c <__aeabi_dsub+0x7f4>
 80030d6:	230f      	movs	r3, #15
 80030d8:	4013      	ands	r3, r2
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d100      	bne.n	80030e0 <__aeabi_dsub+0x568>
 80030de:	e0fc      	b.n	80032da <__aeabi_dsub+0x762>
 80030e0:	1d17      	adds	r7, r2, #4
 80030e2:	4297      	cmp	r7, r2
 80030e4:	41a4      	sbcs	r4, r4
 80030e6:	4264      	negs	r4, r4
 80030e8:	2502      	movs	r5, #2
 80030ea:	1864      	adds	r4, r4, r1
 80030ec:	e6ec      	b.n	8002ec8 <__aeabi_dsub+0x350>
 80030ee:	4647      	mov	r7, r8
 80030f0:	001c      	movs	r4, r3
 80030f2:	431f      	orrs	r7, r3
 80030f4:	d000      	beq.n	80030f8 <__aeabi_dsub+0x580>
 80030f6:	e743      	b.n	8002f80 <__aeabi_dsub+0x408>
 80030f8:	2600      	movs	r6, #0
 80030fa:	2500      	movs	r5, #0
 80030fc:	2400      	movs	r4, #0
 80030fe:	e6cf      	b.n	8002ea0 <__aeabi_dsub+0x328>
 8003100:	08c0      	lsrs	r0, r0, #3
 8003102:	0767      	lsls	r7, r4, #29
 8003104:	4307      	orrs	r7, r0
 8003106:	08e5      	lsrs	r5, r4, #3
 8003108:	e632      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 800310a:	1a87      	subs	r7, r0, r2
 800310c:	465b      	mov	r3, fp
 800310e:	42b8      	cmp	r0, r7
 8003110:	4180      	sbcs	r0, r0
 8003112:	1ae4      	subs	r4, r4, r3
 8003114:	4240      	negs	r0, r0
 8003116:	1a24      	subs	r4, r4, r0
 8003118:	0223      	lsls	r3, r4, #8
 800311a:	d428      	bmi.n	800316e <__aeabi_dsub+0x5f6>
 800311c:	0763      	lsls	r3, r4, #29
 800311e:	08ff      	lsrs	r7, r7, #3
 8003120:	431f      	orrs	r7, r3
 8003122:	08e5      	lsrs	r5, r4, #3
 8003124:	2301      	movs	r3, #1
 8003126:	e77f      	b.n	8003028 <__aeabi_dsub+0x4b0>
 8003128:	2b00      	cmp	r3, #0
 800312a:	d100      	bne.n	800312e <__aeabi_dsub+0x5b6>
 800312c:	e673      	b.n	8002e16 <__aeabi_dsub+0x29e>
 800312e:	464b      	mov	r3, r9
 8003130:	1b5f      	subs	r7, r3, r5
 8003132:	003b      	movs	r3, r7
 8003134:	2d00      	cmp	r5, #0
 8003136:	d100      	bne.n	800313a <__aeabi_dsub+0x5c2>
 8003138:	e742      	b.n	8002fc0 <__aeabi_dsub+0x448>
 800313a:	2f38      	cmp	r7, #56	@ 0x38
 800313c:	dd00      	ble.n	8003140 <__aeabi_dsub+0x5c8>
 800313e:	e0ec      	b.n	800331a <__aeabi_dsub+0x7a2>
 8003140:	2380      	movs	r3, #128	@ 0x80
 8003142:	000e      	movs	r6, r1
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	431c      	orrs	r4, r3
 8003148:	2f1f      	cmp	r7, #31
 800314a:	dc25      	bgt.n	8003198 <__aeabi_dsub+0x620>
 800314c:	2520      	movs	r5, #32
 800314e:	0023      	movs	r3, r4
 8003150:	1bed      	subs	r5, r5, r7
 8003152:	0001      	movs	r1, r0
 8003154:	40a8      	lsls	r0, r5
 8003156:	40ab      	lsls	r3, r5
 8003158:	40f9      	lsrs	r1, r7
 800315a:	1e45      	subs	r5, r0, #1
 800315c:	41a8      	sbcs	r0, r5
 800315e:	430b      	orrs	r3, r1
 8003160:	40fc      	lsrs	r4, r7
 8003162:	4318      	orrs	r0, r3
 8003164:	465b      	mov	r3, fp
 8003166:	1b1b      	subs	r3, r3, r4
 8003168:	469b      	mov	fp, r3
 800316a:	e739      	b.n	8002fe0 <__aeabi_dsub+0x468>
 800316c:	4666      	mov	r6, ip
 800316e:	2501      	movs	r5, #1
 8003170:	e562      	b.n	8002c38 <__aeabi_dsub+0xc0>
 8003172:	001f      	movs	r7, r3
 8003174:	4659      	mov	r1, fp
 8003176:	3f20      	subs	r7, #32
 8003178:	40f9      	lsrs	r1, r7
 800317a:	468c      	mov	ip, r1
 800317c:	2b20      	cmp	r3, #32
 800317e:	d005      	beq.n	800318c <__aeabi_dsub+0x614>
 8003180:	2740      	movs	r7, #64	@ 0x40
 8003182:	4659      	mov	r1, fp
 8003184:	1afb      	subs	r3, r7, r3
 8003186:	4099      	lsls	r1, r3
 8003188:	430a      	orrs	r2, r1
 800318a:	4692      	mov	sl, r2
 800318c:	4657      	mov	r7, sl
 800318e:	1e7b      	subs	r3, r7, #1
 8003190:	419f      	sbcs	r7, r3
 8003192:	4663      	mov	r3, ip
 8003194:	431f      	orrs	r7, r3
 8003196:	e5c1      	b.n	8002d1c <__aeabi_dsub+0x1a4>
 8003198:	003b      	movs	r3, r7
 800319a:	0025      	movs	r5, r4
 800319c:	3b20      	subs	r3, #32
 800319e:	40dd      	lsrs	r5, r3
 80031a0:	2f20      	cmp	r7, #32
 80031a2:	d004      	beq.n	80031ae <__aeabi_dsub+0x636>
 80031a4:	2340      	movs	r3, #64	@ 0x40
 80031a6:	1bdb      	subs	r3, r3, r7
 80031a8:	409c      	lsls	r4, r3
 80031aa:	4320      	orrs	r0, r4
 80031ac:	4680      	mov	r8, r0
 80031ae:	4640      	mov	r0, r8
 80031b0:	1e43      	subs	r3, r0, #1
 80031b2:	4198      	sbcs	r0, r3
 80031b4:	4328      	orrs	r0, r5
 80031b6:	e713      	b.n	8002fe0 <__aeabi_dsub+0x468>
 80031b8:	2900      	cmp	r1, #0
 80031ba:	d09d      	beq.n	80030f8 <__aeabi_dsub+0x580>
 80031bc:	2601      	movs	r6, #1
 80031be:	4663      	mov	r3, ip
 80031c0:	465c      	mov	r4, fp
 80031c2:	4690      	mov	r8, r2
 80031c4:	401e      	ands	r6, r3
 80031c6:	e6db      	b.n	8002f80 <__aeabi_dsub+0x408>
 80031c8:	1a17      	subs	r7, r2, r0
 80031ca:	465b      	mov	r3, fp
 80031cc:	42ba      	cmp	r2, r7
 80031ce:	4192      	sbcs	r2, r2
 80031d0:	1b1c      	subs	r4, r3, r4
 80031d2:	4252      	negs	r2, r2
 80031d4:	1aa4      	subs	r4, r4, r2
 80031d6:	0223      	lsls	r3, r4, #8
 80031d8:	d4c8      	bmi.n	800316c <__aeabi_dsub+0x5f4>
 80031da:	0763      	lsls	r3, r4, #29
 80031dc:	08ff      	lsrs	r7, r7, #3
 80031de:	431f      	orrs	r7, r3
 80031e0:	4666      	mov	r6, ip
 80031e2:	2301      	movs	r3, #1
 80031e4:	08e5      	lsrs	r5, r4, #3
 80031e6:	e71f      	b.n	8003028 <__aeabi_dsub+0x4b0>
 80031e8:	001d      	movs	r5, r3
 80031ea:	2400      	movs	r4, #0
 80031ec:	2700      	movs	r7, #0
 80031ee:	e657      	b.n	8002ea0 <__aeabi_dsub+0x328>
 80031f0:	465c      	mov	r4, fp
 80031f2:	08d0      	lsrs	r0, r2, #3
 80031f4:	e66a      	b.n	8002ecc <__aeabi_dsub+0x354>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d100      	bne.n	80031fc <__aeabi_dsub+0x684>
 80031fa:	e737      	b.n	800306c <__aeabi_dsub+0x4f4>
 80031fc:	4653      	mov	r3, sl
 80031fe:	08c0      	lsrs	r0, r0, #3
 8003200:	0767      	lsls	r7, r4, #29
 8003202:	4307      	orrs	r7, r0
 8003204:	08e5      	lsrs	r5, r4, #3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d100      	bne.n	800320c <__aeabi_dsub+0x694>
 800320a:	e5b1      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 800320c:	2380      	movs	r3, #128	@ 0x80
 800320e:	031b      	lsls	r3, r3, #12
 8003210:	421d      	tst	r5, r3
 8003212:	d008      	beq.n	8003226 <__aeabi_dsub+0x6ae>
 8003214:	4659      	mov	r1, fp
 8003216:	08c8      	lsrs	r0, r1, #3
 8003218:	4218      	tst	r0, r3
 800321a:	d104      	bne.n	8003226 <__aeabi_dsub+0x6ae>
 800321c:	08d2      	lsrs	r2, r2, #3
 800321e:	0749      	lsls	r1, r1, #29
 8003220:	430a      	orrs	r2, r1
 8003222:	0017      	movs	r7, r2
 8003224:	0005      	movs	r5, r0
 8003226:	0f7b      	lsrs	r3, r7, #29
 8003228:	00ff      	lsls	r7, r7, #3
 800322a:	08ff      	lsrs	r7, r7, #3
 800322c:	075b      	lsls	r3, r3, #29
 800322e:	431f      	orrs	r7, r3
 8003230:	e59e      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 8003232:	08c0      	lsrs	r0, r0, #3
 8003234:	0763      	lsls	r3, r4, #29
 8003236:	4318      	orrs	r0, r3
 8003238:	08e5      	lsrs	r5, r4, #3
 800323a:	2900      	cmp	r1, #0
 800323c:	d053      	beq.n	80032e6 <__aeabi_dsub+0x76e>
 800323e:	2380      	movs	r3, #128	@ 0x80
 8003240:	031b      	lsls	r3, r3, #12
 8003242:	421d      	tst	r5, r3
 8003244:	d00a      	beq.n	800325c <__aeabi_dsub+0x6e4>
 8003246:	4659      	mov	r1, fp
 8003248:	08cc      	lsrs	r4, r1, #3
 800324a:	421c      	tst	r4, r3
 800324c:	d106      	bne.n	800325c <__aeabi_dsub+0x6e4>
 800324e:	2601      	movs	r6, #1
 8003250:	4663      	mov	r3, ip
 8003252:	0025      	movs	r5, r4
 8003254:	08d0      	lsrs	r0, r2, #3
 8003256:	0749      	lsls	r1, r1, #29
 8003258:	4308      	orrs	r0, r1
 800325a:	401e      	ands	r6, r3
 800325c:	0f47      	lsrs	r7, r0, #29
 800325e:	00c0      	lsls	r0, r0, #3
 8003260:	08c0      	lsrs	r0, r0, #3
 8003262:	077f      	lsls	r7, r7, #29
 8003264:	4307      	orrs	r7, r0
 8003266:	e583      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 8003268:	1883      	adds	r3, r0, r2
 800326a:	4293      	cmp	r3, r2
 800326c:	4192      	sbcs	r2, r2
 800326e:	445c      	add	r4, fp
 8003270:	4252      	negs	r2, r2
 8003272:	18a5      	adds	r5, r4, r2
 8003274:	022a      	lsls	r2, r5, #8
 8003276:	d500      	bpl.n	800327a <__aeabi_dsub+0x702>
 8003278:	e724      	b.n	80030c4 <__aeabi_dsub+0x54c>
 800327a:	076f      	lsls	r7, r5, #29
 800327c:	08db      	lsrs	r3, r3, #3
 800327e:	431f      	orrs	r7, r3
 8003280:	08ed      	lsrs	r5, r5, #3
 8003282:	2301      	movs	r3, #1
 8003284:	e6d0      	b.n	8003028 <__aeabi_dsub+0x4b0>
 8003286:	46c0      	nop			@ (mov r8, r8)
 8003288:	000007ff 	.word	0x000007ff
 800328c:	000007fe 	.word	0x000007fe
 8003290:	ff7fffff 	.word	0xff7fffff
 8003294:	465b      	mov	r3, fp
 8003296:	08d2      	lsrs	r2, r2, #3
 8003298:	075f      	lsls	r7, r3, #29
 800329a:	4666      	mov	r6, ip
 800329c:	4317      	orrs	r7, r2
 800329e:	08dd      	lsrs	r5, r3, #3
 80032a0:	e566      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 80032a2:	0025      	movs	r5, r4
 80032a4:	3b20      	subs	r3, #32
 80032a6:	40dd      	lsrs	r5, r3
 80032a8:	4663      	mov	r3, ip
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	d005      	beq.n	80032ba <__aeabi_dsub+0x742>
 80032ae:	2340      	movs	r3, #64	@ 0x40
 80032b0:	4661      	mov	r1, ip
 80032b2:	1a5b      	subs	r3, r3, r1
 80032b4:	409c      	lsls	r4, r3
 80032b6:	4320      	orrs	r0, r4
 80032b8:	4680      	mov	r8, r0
 80032ba:	4647      	mov	r7, r8
 80032bc:	1e7b      	subs	r3, r7, #1
 80032be:	419f      	sbcs	r7, r3
 80032c0:	432f      	orrs	r7, r5
 80032c2:	e5a0      	b.n	8002e06 <__aeabi_dsub+0x28e>
 80032c4:	2120      	movs	r1, #32
 80032c6:	2700      	movs	r7, #0
 80032c8:	1a09      	subs	r1, r1, r0
 80032ca:	e4d2      	b.n	8002c72 <__aeabi_dsub+0xfa>
 80032cc:	2f00      	cmp	r7, #0
 80032ce:	d100      	bne.n	80032d2 <__aeabi_dsub+0x75a>
 80032d0:	e713      	b.n	80030fa <__aeabi_dsub+0x582>
 80032d2:	465c      	mov	r4, fp
 80032d4:	0017      	movs	r7, r2
 80032d6:	2500      	movs	r5, #0
 80032d8:	e5f6      	b.n	8002ec8 <__aeabi_dsub+0x350>
 80032da:	08d7      	lsrs	r7, r2, #3
 80032dc:	0749      	lsls	r1, r1, #29
 80032de:	2302      	movs	r3, #2
 80032e0:	430f      	orrs	r7, r1
 80032e2:	092d      	lsrs	r5, r5, #4
 80032e4:	e6a0      	b.n	8003028 <__aeabi_dsub+0x4b0>
 80032e6:	0007      	movs	r7, r0
 80032e8:	e542      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 80032ea:	465b      	mov	r3, fp
 80032ec:	2601      	movs	r6, #1
 80032ee:	075f      	lsls	r7, r3, #29
 80032f0:	08dd      	lsrs	r5, r3, #3
 80032f2:	4663      	mov	r3, ip
 80032f4:	08d2      	lsrs	r2, r2, #3
 80032f6:	4317      	orrs	r7, r2
 80032f8:	401e      	ands	r6, r3
 80032fa:	e539      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 80032fc:	465b      	mov	r3, fp
 80032fe:	08d2      	lsrs	r2, r2, #3
 8003300:	075f      	lsls	r7, r3, #29
 8003302:	4317      	orrs	r7, r2
 8003304:	08dd      	lsrs	r5, r3, #3
 8003306:	e533      	b.n	8002d70 <__aeabi_dsub+0x1f8>
 8003308:	4a1e      	ldr	r2, [pc, #120]	@ (8003384 <__aeabi_dsub+0x80c>)
 800330a:	08db      	lsrs	r3, r3, #3
 800330c:	4022      	ands	r2, r4
 800330e:	0757      	lsls	r7, r2, #29
 8003310:	0252      	lsls	r2, r2, #9
 8003312:	2501      	movs	r5, #1
 8003314:	431f      	orrs	r7, r3
 8003316:	0b14      	lsrs	r4, r2, #12
 8003318:	e5c2      	b.n	8002ea0 <__aeabi_dsub+0x328>
 800331a:	000e      	movs	r6, r1
 800331c:	2001      	movs	r0, #1
 800331e:	e65f      	b.n	8002fe0 <__aeabi_dsub+0x468>
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00d      	beq.n	8003340 <__aeabi_dsub+0x7c8>
 8003324:	464b      	mov	r3, r9
 8003326:	1b5b      	subs	r3, r3, r5
 8003328:	469c      	mov	ip, r3
 800332a:	2d00      	cmp	r5, #0
 800332c:	d100      	bne.n	8003330 <__aeabi_dsub+0x7b8>
 800332e:	e548      	b.n	8002dc2 <__aeabi_dsub+0x24a>
 8003330:	2701      	movs	r7, #1
 8003332:	2b38      	cmp	r3, #56	@ 0x38
 8003334:	dd00      	ble.n	8003338 <__aeabi_dsub+0x7c0>
 8003336:	e566      	b.n	8002e06 <__aeabi_dsub+0x28e>
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	431c      	orrs	r4, r3
 800333e:	e550      	b.n	8002de2 <__aeabi_dsub+0x26a>
 8003340:	1c6b      	adds	r3, r5, #1
 8003342:	4d11      	ldr	r5, [pc, #68]	@ (8003388 <__aeabi_dsub+0x810>)
 8003344:	422b      	tst	r3, r5
 8003346:	d000      	beq.n	800334a <__aeabi_dsub+0x7d2>
 8003348:	e673      	b.n	8003032 <__aeabi_dsub+0x4ba>
 800334a:	4659      	mov	r1, fp
 800334c:	0023      	movs	r3, r4
 800334e:	4311      	orrs	r1, r2
 8003350:	468a      	mov	sl, r1
 8003352:	4303      	orrs	r3, r0
 8003354:	e600      	b.n	8002f58 <__aeabi_dsub+0x3e0>
 8003356:	0767      	lsls	r7, r4, #29
 8003358:	08c0      	lsrs	r0, r0, #3
 800335a:	2300      	movs	r3, #0
 800335c:	4307      	orrs	r7, r0
 800335e:	08e5      	lsrs	r5, r4, #3
 8003360:	e662      	b.n	8003028 <__aeabi_dsub+0x4b0>
 8003362:	0764      	lsls	r4, r4, #29
 8003364:	08ff      	lsrs	r7, r7, #3
 8003366:	4327      	orrs	r7, r4
 8003368:	0905      	lsrs	r5, r0, #4
 800336a:	e65d      	b.n	8003028 <__aeabi_dsub+0x4b0>
 800336c:	08d2      	lsrs	r2, r2, #3
 800336e:	0749      	lsls	r1, r1, #29
 8003370:	4311      	orrs	r1, r2
 8003372:	000f      	movs	r7, r1
 8003374:	2302      	movs	r3, #2
 8003376:	092d      	lsrs	r5, r5, #4
 8003378:	e656      	b.n	8003028 <__aeabi_dsub+0x4b0>
 800337a:	0007      	movs	r7, r0
 800337c:	e5a4      	b.n	8002ec8 <__aeabi_dsub+0x350>
 800337e:	0038      	movs	r0, r7
 8003380:	e48f      	b.n	8002ca2 <__aeabi_dsub+0x12a>
 8003382:	46c0      	nop			@ (mov r8, r8)
 8003384:	ff7fffff 	.word	0xff7fffff
 8003388:	000007fe 	.word	0x000007fe

0800338c <__aeabi_dcmpun>:
 800338c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800338e:	46c6      	mov	lr, r8
 8003390:	031e      	lsls	r6, r3, #12
 8003392:	0b36      	lsrs	r6, r6, #12
 8003394:	46b0      	mov	r8, r6
 8003396:	4e0d      	ldr	r6, [pc, #52]	@ (80033cc <__aeabi_dcmpun+0x40>)
 8003398:	030c      	lsls	r4, r1, #12
 800339a:	004d      	lsls	r5, r1, #1
 800339c:	005f      	lsls	r7, r3, #1
 800339e:	b500      	push	{lr}
 80033a0:	0b24      	lsrs	r4, r4, #12
 80033a2:	0d6d      	lsrs	r5, r5, #21
 80033a4:	0d7f      	lsrs	r7, r7, #21
 80033a6:	42b5      	cmp	r5, r6
 80033a8:	d00b      	beq.n	80033c2 <__aeabi_dcmpun+0x36>
 80033aa:	4908      	ldr	r1, [pc, #32]	@ (80033cc <__aeabi_dcmpun+0x40>)
 80033ac:	2000      	movs	r0, #0
 80033ae:	428f      	cmp	r7, r1
 80033b0:	d104      	bne.n	80033bc <__aeabi_dcmpun+0x30>
 80033b2:	4646      	mov	r6, r8
 80033b4:	4316      	orrs	r6, r2
 80033b6:	0030      	movs	r0, r6
 80033b8:	1e43      	subs	r3, r0, #1
 80033ba:	4198      	sbcs	r0, r3
 80033bc:	bc80      	pop	{r7}
 80033be:	46b8      	mov	r8, r7
 80033c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c2:	4304      	orrs	r4, r0
 80033c4:	2001      	movs	r0, #1
 80033c6:	2c00      	cmp	r4, #0
 80033c8:	d1f8      	bne.n	80033bc <__aeabi_dcmpun+0x30>
 80033ca:	e7ee      	b.n	80033aa <__aeabi_dcmpun+0x1e>
 80033cc:	000007ff 	.word	0x000007ff

080033d0 <__aeabi_d2iz>:
 80033d0:	000b      	movs	r3, r1
 80033d2:	0002      	movs	r2, r0
 80033d4:	b570      	push	{r4, r5, r6, lr}
 80033d6:	4d16      	ldr	r5, [pc, #88]	@ (8003430 <__aeabi_d2iz+0x60>)
 80033d8:	030c      	lsls	r4, r1, #12
 80033da:	b082      	sub	sp, #8
 80033dc:	0049      	lsls	r1, r1, #1
 80033de:	2000      	movs	r0, #0
 80033e0:	9200      	str	r2, [sp, #0]
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	0b24      	lsrs	r4, r4, #12
 80033e6:	0d49      	lsrs	r1, r1, #21
 80033e8:	0fde      	lsrs	r6, r3, #31
 80033ea:	42a9      	cmp	r1, r5
 80033ec:	dd04      	ble.n	80033f8 <__aeabi_d2iz+0x28>
 80033ee:	4811      	ldr	r0, [pc, #68]	@ (8003434 <__aeabi_d2iz+0x64>)
 80033f0:	4281      	cmp	r1, r0
 80033f2:	dd03      	ble.n	80033fc <__aeabi_d2iz+0x2c>
 80033f4:	4b10      	ldr	r3, [pc, #64]	@ (8003438 <__aeabi_d2iz+0x68>)
 80033f6:	18f0      	adds	r0, r6, r3
 80033f8:	b002      	add	sp, #8
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
 80033fc:	2080      	movs	r0, #128	@ 0x80
 80033fe:	0340      	lsls	r0, r0, #13
 8003400:	4320      	orrs	r0, r4
 8003402:	4c0e      	ldr	r4, [pc, #56]	@ (800343c <__aeabi_d2iz+0x6c>)
 8003404:	1a64      	subs	r4, r4, r1
 8003406:	2c1f      	cmp	r4, #31
 8003408:	dd08      	ble.n	800341c <__aeabi_d2iz+0x4c>
 800340a:	4b0d      	ldr	r3, [pc, #52]	@ (8003440 <__aeabi_d2iz+0x70>)
 800340c:	1a5b      	subs	r3, r3, r1
 800340e:	40d8      	lsrs	r0, r3
 8003410:	0003      	movs	r3, r0
 8003412:	4258      	negs	r0, r3
 8003414:	2e00      	cmp	r6, #0
 8003416:	d1ef      	bne.n	80033f8 <__aeabi_d2iz+0x28>
 8003418:	0018      	movs	r0, r3
 800341a:	e7ed      	b.n	80033f8 <__aeabi_d2iz+0x28>
 800341c:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <__aeabi_d2iz+0x74>)
 800341e:	9a00      	ldr	r2, [sp, #0]
 8003420:	469c      	mov	ip, r3
 8003422:	0003      	movs	r3, r0
 8003424:	4461      	add	r1, ip
 8003426:	408b      	lsls	r3, r1
 8003428:	40e2      	lsrs	r2, r4
 800342a:	4313      	orrs	r3, r2
 800342c:	e7f1      	b.n	8003412 <__aeabi_d2iz+0x42>
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	000003fe 	.word	0x000003fe
 8003434:	0000041d 	.word	0x0000041d
 8003438:	7fffffff 	.word	0x7fffffff
 800343c:	00000433 	.word	0x00000433
 8003440:	00000413 	.word	0x00000413
 8003444:	fffffbed 	.word	0xfffffbed

08003448 <__aeabi_i2d>:
 8003448:	b570      	push	{r4, r5, r6, lr}
 800344a:	2800      	cmp	r0, #0
 800344c:	d016      	beq.n	800347c <__aeabi_i2d+0x34>
 800344e:	17c3      	asrs	r3, r0, #31
 8003450:	18c5      	adds	r5, r0, r3
 8003452:	405d      	eors	r5, r3
 8003454:	0fc4      	lsrs	r4, r0, #31
 8003456:	0028      	movs	r0, r5
 8003458:	f000 f912 	bl	8003680 <__clzsi2>
 800345c:	4b10      	ldr	r3, [pc, #64]	@ (80034a0 <__aeabi_i2d+0x58>)
 800345e:	1a1b      	subs	r3, r3, r0
 8003460:	055b      	lsls	r3, r3, #21
 8003462:	0d5b      	lsrs	r3, r3, #21
 8003464:	280a      	cmp	r0, #10
 8003466:	dc14      	bgt.n	8003492 <__aeabi_i2d+0x4a>
 8003468:	0002      	movs	r2, r0
 800346a:	002e      	movs	r6, r5
 800346c:	3215      	adds	r2, #21
 800346e:	4096      	lsls	r6, r2
 8003470:	220b      	movs	r2, #11
 8003472:	1a12      	subs	r2, r2, r0
 8003474:	40d5      	lsrs	r5, r2
 8003476:	032d      	lsls	r5, r5, #12
 8003478:	0b2d      	lsrs	r5, r5, #12
 800347a:	e003      	b.n	8003484 <__aeabi_i2d+0x3c>
 800347c:	2400      	movs	r4, #0
 800347e:	2300      	movs	r3, #0
 8003480:	2500      	movs	r5, #0
 8003482:	2600      	movs	r6, #0
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	432b      	orrs	r3, r5
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0030      	movs	r0, r6
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	380b      	subs	r0, #11
 8003494:	4085      	lsls	r5, r0
 8003496:	032d      	lsls	r5, r5, #12
 8003498:	2600      	movs	r6, #0
 800349a:	0b2d      	lsrs	r5, r5, #12
 800349c:	e7f2      	b.n	8003484 <__aeabi_i2d+0x3c>
 800349e:	46c0      	nop			@ (mov r8, r8)
 80034a0:	0000041e 	.word	0x0000041e

080034a4 <__aeabi_ui2d>:
 80034a4:	b510      	push	{r4, lr}
 80034a6:	1e04      	subs	r4, r0, #0
 80034a8:	d010      	beq.n	80034cc <__aeabi_ui2d+0x28>
 80034aa:	f000 f8e9 	bl	8003680 <__clzsi2>
 80034ae:	4b0e      	ldr	r3, [pc, #56]	@ (80034e8 <__aeabi_ui2d+0x44>)
 80034b0:	1a1b      	subs	r3, r3, r0
 80034b2:	055b      	lsls	r3, r3, #21
 80034b4:	0d5b      	lsrs	r3, r3, #21
 80034b6:	280a      	cmp	r0, #10
 80034b8:	dc0f      	bgt.n	80034da <__aeabi_ui2d+0x36>
 80034ba:	220b      	movs	r2, #11
 80034bc:	0021      	movs	r1, r4
 80034be:	1a12      	subs	r2, r2, r0
 80034c0:	40d1      	lsrs	r1, r2
 80034c2:	3015      	adds	r0, #21
 80034c4:	030a      	lsls	r2, r1, #12
 80034c6:	4084      	lsls	r4, r0
 80034c8:	0b12      	lsrs	r2, r2, #12
 80034ca:	e001      	b.n	80034d0 <__aeabi_ui2d+0x2c>
 80034cc:	2300      	movs	r3, #0
 80034ce:	2200      	movs	r2, #0
 80034d0:	051b      	lsls	r3, r3, #20
 80034d2:	4313      	orrs	r3, r2
 80034d4:	0020      	movs	r0, r4
 80034d6:	0019      	movs	r1, r3
 80034d8:	bd10      	pop	{r4, pc}
 80034da:	0022      	movs	r2, r4
 80034dc:	380b      	subs	r0, #11
 80034de:	4082      	lsls	r2, r0
 80034e0:	0312      	lsls	r2, r2, #12
 80034e2:	2400      	movs	r4, #0
 80034e4:	0b12      	lsrs	r2, r2, #12
 80034e6:	e7f3      	b.n	80034d0 <__aeabi_ui2d+0x2c>
 80034e8:	0000041e 	.word	0x0000041e

080034ec <__aeabi_f2d>:
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	0242      	lsls	r2, r0, #9
 80034f0:	0043      	lsls	r3, r0, #1
 80034f2:	0fc4      	lsrs	r4, r0, #31
 80034f4:	20fe      	movs	r0, #254	@ 0xfe
 80034f6:	0e1b      	lsrs	r3, r3, #24
 80034f8:	1c59      	adds	r1, r3, #1
 80034fa:	0a55      	lsrs	r5, r2, #9
 80034fc:	4208      	tst	r0, r1
 80034fe:	d00c      	beq.n	800351a <__aeabi_f2d+0x2e>
 8003500:	21e0      	movs	r1, #224	@ 0xe0
 8003502:	0089      	lsls	r1, r1, #2
 8003504:	468c      	mov	ip, r1
 8003506:	076d      	lsls	r5, r5, #29
 8003508:	0b12      	lsrs	r2, r2, #12
 800350a:	4463      	add	r3, ip
 800350c:	051b      	lsls	r3, r3, #20
 800350e:	4313      	orrs	r3, r2
 8003510:	07e4      	lsls	r4, r4, #31
 8003512:	4323      	orrs	r3, r4
 8003514:	0028      	movs	r0, r5
 8003516:	0019      	movs	r1, r3
 8003518:	bd70      	pop	{r4, r5, r6, pc}
 800351a:	2b00      	cmp	r3, #0
 800351c:	d114      	bne.n	8003548 <__aeabi_f2d+0x5c>
 800351e:	2d00      	cmp	r5, #0
 8003520:	d01b      	beq.n	800355a <__aeabi_f2d+0x6e>
 8003522:	0028      	movs	r0, r5
 8003524:	f000 f8ac 	bl	8003680 <__clzsi2>
 8003528:	280a      	cmp	r0, #10
 800352a:	dc1c      	bgt.n	8003566 <__aeabi_f2d+0x7a>
 800352c:	230b      	movs	r3, #11
 800352e:	002a      	movs	r2, r5
 8003530:	1a1b      	subs	r3, r3, r0
 8003532:	40da      	lsrs	r2, r3
 8003534:	0003      	movs	r3, r0
 8003536:	3315      	adds	r3, #21
 8003538:	409d      	lsls	r5, r3
 800353a:	4b0e      	ldr	r3, [pc, #56]	@ (8003574 <__aeabi_f2d+0x88>)
 800353c:	0312      	lsls	r2, r2, #12
 800353e:	1a1b      	subs	r3, r3, r0
 8003540:	055b      	lsls	r3, r3, #21
 8003542:	0b12      	lsrs	r2, r2, #12
 8003544:	0d5b      	lsrs	r3, r3, #21
 8003546:	e7e1      	b.n	800350c <__aeabi_f2d+0x20>
 8003548:	2d00      	cmp	r5, #0
 800354a:	d009      	beq.n	8003560 <__aeabi_f2d+0x74>
 800354c:	0b13      	lsrs	r3, r2, #12
 800354e:	2280      	movs	r2, #128	@ 0x80
 8003550:	0312      	lsls	r2, r2, #12
 8003552:	431a      	orrs	r2, r3
 8003554:	076d      	lsls	r5, r5, #29
 8003556:	4b08      	ldr	r3, [pc, #32]	@ (8003578 <__aeabi_f2d+0x8c>)
 8003558:	e7d8      	b.n	800350c <__aeabi_f2d+0x20>
 800355a:	2300      	movs	r3, #0
 800355c:	2200      	movs	r2, #0
 800355e:	e7d5      	b.n	800350c <__aeabi_f2d+0x20>
 8003560:	2200      	movs	r2, #0
 8003562:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <__aeabi_f2d+0x8c>)
 8003564:	e7d2      	b.n	800350c <__aeabi_f2d+0x20>
 8003566:	0003      	movs	r3, r0
 8003568:	002a      	movs	r2, r5
 800356a:	3b0b      	subs	r3, #11
 800356c:	409a      	lsls	r2, r3
 800356e:	2500      	movs	r5, #0
 8003570:	e7e3      	b.n	800353a <__aeabi_f2d+0x4e>
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	00000389 	.word	0x00000389
 8003578:	000007ff 	.word	0x000007ff

0800357c <__aeabi_d2f>:
 800357c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800357e:	004b      	lsls	r3, r1, #1
 8003580:	030f      	lsls	r7, r1, #12
 8003582:	0d5b      	lsrs	r3, r3, #21
 8003584:	4c3a      	ldr	r4, [pc, #232]	@ (8003670 <__aeabi_d2f+0xf4>)
 8003586:	0f45      	lsrs	r5, r0, #29
 8003588:	b083      	sub	sp, #12
 800358a:	0a7f      	lsrs	r7, r7, #9
 800358c:	1c5e      	adds	r6, r3, #1
 800358e:	432f      	orrs	r7, r5
 8003590:	9000      	str	r0, [sp, #0]
 8003592:	9101      	str	r1, [sp, #4]
 8003594:	0fca      	lsrs	r2, r1, #31
 8003596:	00c5      	lsls	r5, r0, #3
 8003598:	4226      	tst	r6, r4
 800359a:	d00b      	beq.n	80035b4 <__aeabi_d2f+0x38>
 800359c:	4935      	ldr	r1, [pc, #212]	@ (8003674 <__aeabi_d2f+0xf8>)
 800359e:	185c      	adds	r4, r3, r1
 80035a0:	2cfe      	cmp	r4, #254	@ 0xfe
 80035a2:	dd13      	ble.n	80035cc <__aeabi_d2f+0x50>
 80035a4:	20ff      	movs	r0, #255	@ 0xff
 80035a6:	2300      	movs	r3, #0
 80035a8:	05c0      	lsls	r0, r0, #23
 80035aa:	4318      	orrs	r0, r3
 80035ac:	07d2      	lsls	r2, r2, #31
 80035ae:	4310      	orrs	r0, r2
 80035b0:	b003      	add	sp, #12
 80035b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b4:	433d      	orrs	r5, r7
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <__aeabi_d2f+0x42>
 80035ba:	2000      	movs	r0, #0
 80035bc:	e7f4      	b.n	80035a8 <__aeabi_d2f+0x2c>
 80035be:	2d00      	cmp	r5, #0
 80035c0:	d0f0      	beq.n	80035a4 <__aeabi_d2f+0x28>
 80035c2:	2380      	movs	r3, #128	@ 0x80
 80035c4:	03db      	lsls	r3, r3, #15
 80035c6:	20ff      	movs	r0, #255	@ 0xff
 80035c8:	433b      	orrs	r3, r7
 80035ca:	e7ed      	b.n	80035a8 <__aeabi_d2f+0x2c>
 80035cc:	2c00      	cmp	r4, #0
 80035ce:	dd0c      	ble.n	80035ea <__aeabi_d2f+0x6e>
 80035d0:	9b00      	ldr	r3, [sp, #0]
 80035d2:	00ff      	lsls	r7, r7, #3
 80035d4:	019b      	lsls	r3, r3, #6
 80035d6:	1e58      	subs	r0, r3, #1
 80035d8:	4183      	sbcs	r3, r0
 80035da:	0f69      	lsrs	r1, r5, #29
 80035dc:	433b      	orrs	r3, r7
 80035de:	430b      	orrs	r3, r1
 80035e0:	0759      	lsls	r1, r3, #29
 80035e2:	d127      	bne.n	8003634 <__aeabi_d2f+0xb8>
 80035e4:	08db      	lsrs	r3, r3, #3
 80035e6:	b2e0      	uxtb	r0, r4
 80035e8:	e7de      	b.n	80035a8 <__aeabi_d2f+0x2c>
 80035ea:	0021      	movs	r1, r4
 80035ec:	3117      	adds	r1, #23
 80035ee:	db31      	blt.n	8003654 <__aeabi_d2f+0xd8>
 80035f0:	2180      	movs	r1, #128	@ 0x80
 80035f2:	201e      	movs	r0, #30
 80035f4:	0409      	lsls	r1, r1, #16
 80035f6:	4339      	orrs	r1, r7
 80035f8:	1b00      	subs	r0, r0, r4
 80035fa:	281f      	cmp	r0, #31
 80035fc:	dd2d      	ble.n	800365a <__aeabi_d2f+0xde>
 80035fe:	2602      	movs	r6, #2
 8003600:	4276      	negs	r6, r6
 8003602:	1b34      	subs	r4, r6, r4
 8003604:	000e      	movs	r6, r1
 8003606:	40e6      	lsrs	r6, r4
 8003608:	0034      	movs	r4, r6
 800360a:	2820      	cmp	r0, #32
 800360c:	d004      	beq.n	8003618 <__aeabi_d2f+0x9c>
 800360e:	481a      	ldr	r0, [pc, #104]	@ (8003678 <__aeabi_d2f+0xfc>)
 8003610:	4684      	mov	ip, r0
 8003612:	4463      	add	r3, ip
 8003614:	4099      	lsls	r1, r3
 8003616:	430d      	orrs	r5, r1
 8003618:	002b      	movs	r3, r5
 800361a:	1e59      	subs	r1, r3, #1
 800361c:	418b      	sbcs	r3, r1
 800361e:	4323      	orrs	r3, r4
 8003620:	0759      	lsls	r1, r3, #29
 8003622:	d003      	beq.n	800362c <__aeabi_d2f+0xb0>
 8003624:	210f      	movs	r1, #15
 8003626:	4019      	ands	r1, r3
 8003628:	2904      	cmp	r1, #4
 800362a:	d10b      	bne.n	8003644 <__aeabi_d2f+0xc8>
 800362c:	019b      	lsls	r3, r3, #6
 800362e:	2000      	movs	r0, #0
 8003630:	0a5b      	lsrs	r3, r3, #9
 8003632:	e7b9      	b.n	80035a8 <__aeabi_d2f+0x2c>
 8003634:	210f      	movs	r1, #15
 8003636:	4019      	ands	r1, r3
 8003638:	2904      	cmp	r1, #4
 800363a:	d104      	bne.n	8003646 <__aeabi_d2f+0xca>
 800363c:	019b      	lsls	r3, r3, #6
 800363e:	0a5b      	lsrs	r3, r3, #9
 8003640:	b2e0      	uxtb	r0, r4
 8003642:	e7b1      	b.n	80035a8 <__aeabi_d2f+0x2c>
 8003644:	2400      	movs	r4, #0
 8003646:	3304      	adds	r3, #4
 8003648:	0159      	lsls	r1, r3, #5
 800364a:	d5f7      	bpl.n	800363c <__aeabi_d2f+0xc0>
 800364c:	3401      	adds	r4, #1
 800364e:	2300      	movs	r3, #0
 8003650:	b2e0      	uxtb	r0, r4
 8003652:	e7a9      	b.n	80035a8 <__aeabi_d2f+0x2c>
 8003654:	2000      	movs	r0, #0
 8003656:	2300      	movs	r3, #0
 8003658:	e7a6      	b.n	80035a8 <__aeabi_d2f+0x2c>
 800365a:	4c08      	ldr	r4, [pc, #32]	@ (800367c <__aeabi_d2f+0x100>)
 800365c:	191c      	adds	r4, r3, r4
 800365e:	002b      	movs	r3, r5
 8003660:	40a5      	lsls	r5, r4
 8003662:	40c3      	lsrs	r3, r0
 8003664:	40a1      	lsls	r1, r4
 8003666:	1e68      	subs	r0, r5, #1
 8003668:	4185      	sbcs	r5, r0
 800366a:	4329      	orrs	r1, r5
 800366c:	430b      	orrs	r3, r1
 800366e:	e7d7      	b.n	8003620 <__aeabi_d2f+0xa4>
 8003670:	000007fe 	.word	0x000007fe
 8003674:	fffffc80 	.word	0xfffffc80
 8003678:	fffffca2 	.word	0xfffffca2
 800367c:	fffffc82 	.word	0xfffffc82

08003680 <__clzsi2>:
 8003680:	211c      	movs	r1, #28
 8003682:	2301      	movs	r3, #1
 8003684:	041b      	lsls	r3, r3, #16
 8003686:	4298      	cmp	r0, r3
 8003688:	d301      	bcc.n	800368e <__clzsi2+0xe>
 800368a:	0c00      	lsrs	r0, r0, #16
 800368c:	3910      	subs	r1, #16
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	4298      	cmp	r0, r3
 8003692:	d301      	bcc.n	8003698 <__clzsi2+0x18>
 8003694:	0a00      	lsrs	r0, r0, #8
 8003696:	3908      	subs	r1, #8
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	4298      	cmp	r0, r3
 800369c:	d301      	bcc.n	80036a2 <__clzsi2+0x22>
 800369e:	0900      	lsrs	r0, r0, #4
 80036a0:	3904      	subs	r1, #4
 80036a2:	a202      	add	r2, pc, #8	@ (adr r2, 80036ac <__clzsi2+0x2c>)
 80036a4:	5c10      	ldrb	r0, [r2, r0]
 80036a6:	1840      	adds	r0, r0, r1
 80036a8:	4770      	bx	lr
 80036aa:	46c0      	nop			@ (mov r8, r8)
 80036ac:	02020304 	.word	0x02020304
 80036b0:	01010101 	.word	0x01010101
	...

080036bc <_ds3231_setreg>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param addr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void _ds3231_setreg(uint8_t addr, uint8_t val) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	0002      	movs	r2, r0
 80036c4:	1dfb      	adds	r3, r7, #7
 80036c6:	701a      	strb	r2, [r3, #0]
 80036c8:	1dbb      	adds	r3, r7, #6
 80036ca:	1c0a      	adds	r2, r1, #0
 80036cc:	701a      	strb	r2, [r3, #0]
	uint8_t bytes[2] = { addr, val };
 80036ce:	210c      	movs	r1, #12
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	1dfa      	adds	r2, r7, #7
 80036d4:	7812      	ldrb	r2, [r2, #0]
 80036d6:	701a      	strb	r2, [r3, #0]
 80036d8:	187b      	adds	r3, r7, r1
 80036da:	1dba      	adds	r2, r7, #6
 80036dc:	7812      	ldrb	r2, [r2, #0]
 80036de:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, bytes, 2, DS3231_TIMEOUT);
 80036e0:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <_ds3231_setreg+0x40>)
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	187a      	adds	r2, r7, r1
 80036e6:	23fa      	movs	r3, #250	@ 0xfa
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2302      	movs	r3, #2
 80036ee:	21d0      	movs	r1, #208	@ 0xd0
 80036f0:	f003 ffee 	bl	80076d0 <HAL_I2C_Master_Transmit>
}
 80036f4:	46c0      	nop			@ (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b004      	add	sp, #16
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20000000 	.word	0x20000000

08003700 <_ds3231_getreg>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param addr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t _ds3231_getreg(uint8_t addr) {
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b087      	sub	sp, #28
 8003704:	af02      	add	r7, sp, #8
 8003706:	0002      	movs	r2, r0
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	701a      	strb	r2, [r3, #0]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, &addr, 1, DS3231_TIMEOUT);
 800370c:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <_ds3231_getreg+0x44>)
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	1dfa      	adds	r2, r7, #7
 8003712:	23fa      	movs	r3, #250	@ 0xfa
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2301      	movs	r3, #1
 800371a:	21d0      	movs	r1, #208	@ 0xd0
 800371c:	f003 ffd8 	bl	80076d0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_hi2c, DS3231_ADDRESS << 1, &val, 1, DS3231_TIMEOUT);
 8003720:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <_ds3231_getreg+0x44>)
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	240f      	movs	r4, #15
 8003726:	193a      	adds	r2, r7, r4
 8003728:	23fa      	movs	r3, #250	@ 0xfa
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	2301      	movs	r3, #1
 8003730:	21d0      	movs	r1, #208	@ 0xd0
 8003732:	f004 f8f7 	bl	8007924 <HAL_I2C_Master_Receive>
	return val;
 8003736:	193b      	adds	r3, r7, r4
 8003738:	781b      	ldrb	r3, [r3, #0]
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	b005      	add	sp, #20
 8003740:	bd90      	pop	{r4, r7, pc}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	20000000 	.word	0x20000000

08003748 <ds3231_setalarm1>:

uint8_t ds3231_setalarm1(AlarmMode mode, uint8_t date, uint8_t hour, uint8_t min, uint8_t sec) {
 8003748:	b5b0      	push	{r4, r5, r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af02      	add	r7, sp, #8
 800374e:	0005      	movs	r5, r0
 8003750:	000c      	movs	r4, r1
 8003752:	0010      	movs	r0, r2
 8003754:	0019      	movs	r1, r3
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	1c2a      	adds	r2, r5, #0
 800375a:	701a      	strb	r2, [r3, #0]
 800375c:	1dbb      	adds	r3, r7, #6
 800375e:	1c22      	adds	r2, r4, #0
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	1d7b      	adds	r3, r7, #5
 8003764:	1c02      	adds	r2, r0, #0
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	1d3b      	adds	r3, r7, #4
 800376a:	1c0a      	adds	r2, r1, #0
 800376c:	701a      	strb	r2, [r3, #0]
  uint8_t alarmSecond = _dec_to_bcd(sec);
 800376e:	2328      	movs	r3, #40	@ 0x28
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2217      	movs	r2, #23
 8003776:	18bc      	adds	r4, r7, r2
 8003778:	0018      	movs	r0, r3
 800377a:	f000 f8ed 	bl	8003958 <_dec_to_bcd>
 800377e:	0003      	movs	r3, r0
 8003780:	7023      	strb	r3, [r4, #0]
  uint8_t alarmMinute = _dec_to_bcd(min);
 8003782:	1d3b      	adds	r3, r7, #4
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2216      	movs	r2, #22
 8003788:	18bc      	adds	r4, r7, r2
 800378a:	0018      	movs	r0, r3
 800378c:	f000 f8e4 	bl	8003958 <_dec_to_bcd>
 8003790:	0003      	movs	r3, r0
 8003792:	7023      	strb	r3, [r4, #0]
  uint8_t alarmHour = _dec_to_bcd(hour);
 8003794:	1d7b      	adds	r3, r7, #5
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2215      	movs	r2, #21
 800379a:	18bc      	adds	r4, r7, r2
 800379c:	0018      	movs	r0, r3
 800379e:	f000 f8db 	bl	8003958 <_dec_to_bcd>
 80037a2:	0003      	movs	r3, r0
 80037a4:	7023      	strb	r3, [r4, #0]
  uint8_t alarmDate = _dec_to_bcd(date);
 80037a6:	1dbb      	adds	r3, r7, #6
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2214      	movs	r2, #20
 80037ac:	18bc      	adds	r4, r7, r2
 80037ae:	0018      	movs	r0, r3
 80037b0:	f000 f8d2 	bl	8003958 <_dec_to_bcd>
 80037b4:	0003      	movs	r3, r0
 80037b6:	7023      	strb	r3, [r4, #0]

  switch(mode) {
 80037b8:	1dfb      	adds	r3, r7, #7
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d858      	bhi.n	8003872 <ds3231_setalarm1+0x12a>
 80037c0:	009a      	lsls	r2, r3, #2
 80037c2:	4b54      	ldr	r3, [pc, #336]	@ (8003914 <ds3231_setalarm1+0x1cc>)
 80037c4:	18d3      	adds	r3, r2, r3
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	469f      	mov	pc, r3
  case ALARM_MODE_ALL_MATCHED:
	  break;
  case ALARM_MODE_HOUR_MIN_SEC_MATCHED:
	  alarmDate |= 0x80;
 80037ca:	2214      	movs	r2, #20
 80037cc:	18bb      	adds	r3, r7, r2
 80037ce:	18ba      	adds	r2, r7, r2
 80037d0:	7812      	ldrb	r2, [r2, #0]
 80037d2:	2180      	movs	r1, #128	@ 0x80
 80037d4:	4249      	negs	r1, r1
 80037d6:	430a      	orrs	r2, r1
 80037d8:	701a      	strb	r2, [r3, #0]
	  break;
 80037da:	e04d      	b.n	8003878 <ds3231_setalarm1+0x130>
  case ALARM_MODE_MIN_SEC_MATCHED:
	  alarmDate |= 0x80;
 80037dc:	2214      	movs	r2, #20
 80037de:	18bb      	adds	r3, r7, r2
 80037e0:	18ba      	adds	r2, r7, r2
 80037e2:	7812      	ldrb	r2, [r2, #0]
 80037e4:	2180      	movs	r1, #128	@ 0x80
 80037e6:	4249      	negs	r1, r1
 80037e8:	430a      	orrs	r2, r1
 80037ea:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 80037ec:	2215      	movs	r2, #21
 80037ee:	18bb      	adds	r3, r7, r2
 80037f0:	18ba      	adds	r2, r7, r2
 80037f2:	7812      	ldrb	r2, [r2, #0]
 80037f4:	2180      	movs	r1, #128	@ 0x80
 80037f6:	4249      	negs	r1, r1
 80037f8:	430a      	orrs	r2, r1
 80037fa:	701a      	strb	r2, [r3, #0]
	  break;
 80037fc:	e03c      	b.n	8003878 <ds3231_setalarm1+0x130>
  case ALARM_MODE_SEC_MATCHED:
	  alarmDate |= 0x80;
 80037fe:	2214      	movs	r2, #20
 8003800:	18bb      	adds	r3, r7, r2
 8003802:	18ba      	adds	r2, r7, r2
 8003804:	7812      	ldrb	r2, [r2, #0]
 8003806:	2180      	movs	r1, #128	@ 0x80
 8003808:	4249      	negs	r1, r1
 800380a:	430a      	orrs	r2, r1
 800380c:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 800380e:	2215      	movs	r2, #21
 8003810:	18bb      	adds	r3, r7, r2
 8003812:	18ba      	adds	r2, r7, r2
 8003814:	7812      	ldrb	r2, [r2, #0]
 8003816:	2180      	movs	r1, #128	@ 0x80
 8003818:	4249      	negs	r1, r1
 800381a:	430a      	orrs	r2, r1
 800381c:	701a      	strb	r2, [r3, #0]
	  alarmMinute |= 0x80;
 800381e:	2216      	movs	r2, #22
 8003820:	18bb      	adds	r3, r7, r2
 8003822:	18ba      	adds	r2, r7, r2
 8003824:	7812      	ldrb	r2, [r2, #0]
 8003826:	2180      	movs	r1, #128	@ 0x80
 8003828:	4249      	negs	r1, r1
 800382a:	430a      	orrs	r2, r1
 800382c:	701a      	strb	r2, [r3, #0]
	  break;
 800382e:	e023      	b.n	8003878 <ds3231_setalarm1+0x130>
  case ALARM_MODE_ONCE_PER_SECOND:
	  alarmDate |= 0x80;
 8003830:	2214      	movs	r2, #20
 8003832:	18bb      	adds	r3, r7, r2
 8003834:	18ba      	adds	r2, r7, r2
 8003836:	7812      	ldrb	r2, [r2, #0]
 8003838:	2180      	movs	r1, #128	@ 0x80
 800383a:	4249      	negs	r1, r1
 800383c:	430a      	orrs	r2, r1
 800383e:	701a      	strb	r2, [r3, #0]
	  alarmHour |= 0x80;
 8003840:	2215      	movs	r2, #21
 8003842:	18bb      	adds	r3, r7, r2
 8003844:	18ba      	adds	r2, r7, r2
 8003846:	7812      	ldrb	r2, [r2, #0]
 8003848:	2180      	movs	r1, #128	@ 0x80
 800384a:	4249      	negs	r1, r1
 800384c:	430a      	orrs	r2, r1
 800384e:	701a      	strb	r2, [r3, #0]
	  alarmMinute |= 0x80;
 8003850:	2216      	movs	r2, #22
 8003852:	18bb      	adds	r3, r7, r2
 8003854:	18ba      	adds	r2, r7, r2
 8003856:	7812      	ldrb	r2, [r2, #0]
 8003858:	2180      	movs	r1, #128	@ 0x80
 800385a:	4249      	negs	r1, r1
 800385c:	430a      	orrs	r2, r1
 800385e:	701a      	strb	r2, [r3, #0]
	  alarmSecond |= 0x80;
 8003860:	2217      	movs	r2, #23
 8003862:	18bb      	adds	r3, r7, r2
 8003864:	18ba      	adds	r2, r7, r2
 8003866:	7812      	ldrb	r2, [r2, #0]
 8003868:	2180      	movs	r1, #128	@ 0x80
 800386a:	4249      	negs	r1, r1
 800386c:	430a      	orrs	r2, r1
 800386e:	701a      	strb	r2, [r3, #0]
	  break;
 8003870:	e002      	b.n	8003878 <ds3231_setalarm1+0x130>
  default:
	  break;
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	e000      	b.n	8003878 <ds3231_setalarm1+0x130>
	  break;
 8003876:	46c0      	nop			@ (mov r8, r8)
  }

  /* Write Alarm Registers */
  uint8_t startAddr = DS3231_REG_ALARM1;
 8003878:	2013      	movs	r0, #19
 800387a:	183b      	adds	r3, r7, r0
 800387c:	2207      	movs	r2, #7
 800387e:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[5] = {startAddr, alarmSecond, alarmMinute, alarmHour, alarmDate};
 8003880:	210c      	movs	r1, #12
 8003882:	187b      	adds	r3, r7, r1
 8003884:	183a      	adds	r2, r7, r0
 8003886:	7812      	ldrb	r2, [r2, #0]
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	187b      	adds	r3, r7, r1
 800388c:	2217      	movs	r2, #23
 800388e:	18ba      	adds	r2, r7, r2
 8003890:	7812      	ldrb	r2, [r2, #0]
 8003892:	705a      	strb	r2, [r3, #1]
 8003894:	187b      	adds	r3, r7, r1
 8003896:	2216      	movs	r2, #22
 8003898:	18ba      	adds	r2, r7, r2
 800389a:	7812      	ldrb	r2, [r2, #0]
 800389c:	709a      	strb	r2, [r3, #2]
 800389e:	187b      	adds	r3, r7, r1
 80038a0:	2215      	movs	r2, #21
 80038a2:	18ba      	adds	r2, r7, r2
 80038a4:	7812      	ldrb	r2, [r2, #0]
 80038a6:	70da      	strb	r2, [r3, #3]
 80038a8:	187b      	adds	r3, r7, r1
 80038aa:	2214      	movs	r2, #20
 80038ac:	18ba      	adds	r2, r7, r2
 80038ae:	7812      	ldrb	r2, [r2, #0]
 80038b0:	711a      	strb	r2, [r3, #4]
  if(HAL_I2C_Master_Transmit(_ds3231_hi2c, DS3231_ADDRESS << 1, buffer, sizeof(buffer), DS3231_TIMEOUT) != HAL_OK) return 0;
 80038b2:	4b19      	ldr	r3, [pc, #100]	@ (8003918 <ds3231_setalarm1+0x1d0>)
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	187a      	adds	r2, r7, r1
 80038b8:	23fa      	movs	r3, #250	@ 0xfa
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2305      	movs	r3, #5
 80038c0:	21d0      	movs	r1, #208	@ 0xd0
 80038c2:	f003 ff05 	bl	80076d0 <HAL_I2C_Master_Transmit>
 80038c6:	1e03      	subs	r3, r0, #0
 80038c8:	d001      	beq.n	80038ce <ds3231_setalarm1+0x186>
 80038ca:	2300      	movs	r3, #0
 80038cc:	e01d      	b.n	800390a <ds3231_setalarm1+0x1c2>

  /* Enable Alarm1 at Control Register */
  uint8_t ctrlReg = 0x00;
 80038ce:	2512      	movs	r5, #18
 80038d0:	197b      	adds	r3, r7, r5
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
  ctrlReg = _ds3231_getreg(DS3231_REG_CONTROL);
 80038d6:	197c      	adds	r4, r7, r5
 80038d8:	200e      	movs	r0, #14
 80038da:	f7ff ff11 	bl	8003700 <_ds3231_getreg>
 80038de:	0003      	movs	r3, r0
 80038e0:	7023      	strb	r3, [r4, #0]
  ctrlReg |= DS3231_CON_A1IE;
 80038e2:	0028      	movs	r0, r5
 80038e4:	183b      	adds	r3, r7, r0
 80038e6:	183a      	adds	r2, r7, r0
 80038e8:	7812      	ldrb	r2, [r2, #0]
 80038ea:	2101      	movs	r1, #1
 80038ec:	430a      	orrs	r2, r1
 80038ee:	701a      	strb	r2, [r3, #0]
  ctrlReg |= DS3231_CON_INTCN;
 80038f0:	183b      	adds	r3, r7, r0
 80038f2:	183a      	adds	r2, r7, r0
 80038f4:	7812      	ldrb	r2, [r2, #0]
 80038f6:	2104      	movs	r1, #4
 80038f8:	430a      	orrs	r2, r1
 80038fa:	701a      	strb	r2, [r3, #0]
  _ds3231_setreg(DS3231_REG_CONTROL, ctrlReg);
 80038fc:	183b      	adds	r3, r7, r0
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	0019      	movs	r1, r3
 8003902:	200e      	movs	r0, #14
 8003904:	f7ff feda 	bl	80036bc <_ds3231_setreg>

  return 1;
 8003908:	2301      	movs	r3, #1
}
 800390a:	0018      	movs	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	b006      	add	sp, #24
 8003910:	bdb0      	pop	{r4, r5, r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	0800ebbc 	.word	0x0800ebbc
 8003918:	20000000 	.word	0x20000000

0800391c <ds3231_clearflagalarm1>:
  _ds3231_setreg(DS3231_REG_STATUS, statusReg);

  return 1;
}

void ds3231_clearflagalarm1() {
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
  /* Clear Status Register */
  uint8_t statusReg = _ds3231_getreg(DS3231_REG_STATUS);
 8003922:	1dfc      	adds	r4, r7, #7
 8003924:	200f      	movs	r0, #15
 8003926:	f7ff feeb 	bl	8003700 <_ds3231_getreg>
 800392a:	0003      	movs	r3, r0
 800392c:	7023      	strb	r3, [r4, #0]
  if(statusReg & DS3231_STA_A1F) {
 800392e:	1dfb      	adds	r3, r7, #7
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2201      	movs	r2, #1
 8003934:	4013      	ands	r3, r2
 8003936:	d00b      	beq.n	8003950 <ds3231_clearflagalarm1+0x34>
	  statusReg &= ~DS3231_STA_A1F;
 8003938:	1dfb      	adds	r3, r7, #7
 800393a:	1dfa      	adds	r2, r7, #7
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	2101      	movs	r1, #1
 8003940:	438a      	bics	r2, r1
 8003942:	701a      	strb	r2, [r3, #0]
	  _ds3231_setreg(DS3231_REG_STATUS, statusReg);
 8003944:	1dfb      	adds	r3, r7, #7
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	0019      	movs	r1, r3
 800394a:	200f      	movs	r0, #15
 800394c:	f7ff feb6 	bl	80036bc <_ds3231_setreg>
  }
}
 8003950:	46c0      	nop			@ (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	b003      	add	sp, #12
 8003956:	bd90      	pop	{r4, r7, pc}

08003958 <_dec_to_bcd>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t _dec_to_bcd(int val) {
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16) + (val%10) );
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	210a      	movs	r1, #10
 8003964:	0018      	movs	r0, r3
 8003966:	f7fc fc71 	bl	800024c <__divsi3>
 800396a:	0003      	movs	r3, r0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	b2dc      	uxtb	r4, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	210a      	movs	r1, #10
 8003976:	0018      	movs	r0, r3
 8003978:	f7fc fd4e 	bl	8000418 <__aeabi_idivmod>
 800397c:	000b      	movs	r3, r1
 800397e:	b2db      	uxtb	r3, r3
 8003980:	18e3      	adds	r3, r4, r3
 8003982:	b2db      	uxtb	r3, r3
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b003      	add	sp, #12
 800398a:	bd90      	pop	{r4, r7, pc}

0800398c <led_blink>:
uint8_t btn1_stat;
uint8_t btn2_stat;
uint8_t btn3_stat;
uint8_t led_blink_flag;

void led_blink() {
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
	LED_ON();
 8003990:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <led_blink+0x1c>)
 8003992:	2201      	movs	r2, #1
 8003994:	2102      	movs	r1, #2
 8003996:	0018      	movs	r0, r3
 8003998:	f003 fda3 	bl	80074e2 <HAL_GPIO_WritePin>
	led_blink_flag = 1;
 800399c:	4b03      	ldr	r3, [pc, #12]	@ (80039ac <led_blink+0x20>)
 800399e:	2201      	movs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]
}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	50001400 	.word	0x50001400
 80039ac:	2000052c 	.word	0x2000052c

080039b0 <HAL_ADC_ConvCpltCallback>:
	CUR,
	TEMP,
} adc_param;

uint8_t period = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80039b0:	b5b0      	push	{r4, r5, r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	static uint32_t adc_avg[ADC_CHANNEL_COUNT] = {};
	static uint16_t sample_count = 0;
	if(sample_count >= ADC_SAMPLE_COUNT) {
 80039b8:	4b40      	ldr	r3, [pc, #256]	@ (8003abc <HAL_ADC_ConvCpltCallback+0x10c>)
 80039ba:	881a      	ldrh	r2, [r3, #0]
 80039bc:	23fa      	movs	r3, #250	@ 0xfa
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d34f      	bcc.n	8003a64 <HAL_ADC_ConvCpltCallback+0xb4>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 80039c4:	230f      	movs	r3, #15
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
 80039cc:	e041      	b.n	8003a52 <HAL_ADC_ConvCpltCallback+0xa2>
			adc_avg[i] = adc_avg[i] / ADC_SAMPLE_COUNT;
 80039ce:	250f      	movs	r5, #15
 80039d0:	197b      	adds	r3, r7, r5
 80039d2:	781a      	ldrb	r2, [r3, #0]
 80039d4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac0 <HAL_ADC_ConvCpltCallback+0x110>)
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	58d2      	ldr	r2, [r2, r3]
 80039da:	197b      	adds	r3, r7, r5
 80039dc:	781c      	ldrb	r4, [r3, #0]
 80039de:	23fa      	movs	r3, #250	@ 0xfa
 80039e0:	0059      	lsls	r1, r3, #1
 80039e2:	0010      	movs	r0, r2
 80039e4:	f7fc fba8 	bl	8000138 <__udivsi3>
 80039e8:	0003      	movs	r3, r0
 80039ea:	0019      	movs	r1, r3
 80039ec:	4b34      	ldr	r3, [pc, #208]	@ (8003ac0 <HAL_ADC_ConvCpltCallback+0x110>)
 80039ee:	00a2      	lsls	r2, r4, #2
 80039f0:	50d1      	str	r1, [r2, r3]
			if(adc_avg[i] < 200) adc_avg[i] = 0;
 80039f2:	197b      	adds	r3, r7, r5
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	4b32      	ldr	r3, [pc, #200]	@ (8003ac0 <HAL_ADC_ConvCpltCallback+0x110>)
 80039f8:	0092      	lsls	r2, r2, #2
 80039fa:	58d3      	ldr	r3, [r2, r3]
 80039fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80039fe:	d805      	bhi.n	8003a0c <HAL_ADC_ConvCpltCallback+0x5c>
 8003a00:	197b      	adds	r3, r7, r5
 8003a02:	781a      	ldrb	r2, [r3, #0]
 8003a04:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac0 <HAL_ADC_ConvCpltCallback+0x110>)
 8003a06:	0092      	lsls	r2, r2, #2
 8003a08:	2100      	movs	r1, #0
 8003a0a:	50d1      	str	r1, [r2, r3]
			adc_arr[i] = (float)adc_avg[i] * adc_conv_fact[i];
 8003a0c:	250f      	movs	r5, #15
 8003a0e:	197b      	adds	r3, r7, r5
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac0 <HAL_ADC_ConvCpltCallback+0x110>)
 8003a14:	0092      	lsls	r2, r2, #2
 8003a16:	58d3      	ldr	r3, [r2, r3]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f7fd fd81 	bl	8001520 <__aeabi_ui2f>
 8003a1e:	197b      	adds	r3, r7, r5
 8003a20:	781a      	ldrb	r2, [r3, #0]
 8003a22:	4b28      	ldr	r3, [pc, #160]	@ (8003ac4 <HAL_ADC_ConvCpltCallback+0x114>)
 8003a24:	0092      	lsls	r2, r2, #2
 8003a26:	58d2      	ldr	r2, [r2, r3]
 8003a28:	197b      	adds	r3, r7, r5
 8003a2a:	781c      	ldrb	r4, [r3, #0]
 8003a2c:	1c11      	adds	r1, r2, #0
 8003a2e:	f7fd f949 	bl	8000cc4 <__aeabi_fmul>
 8003a32:	1c03      	adds	r3, r0, #0
 8003a34:	1c19      	adds	r1, r3, #0
 8003a36:	4b24      	ldr	r3, [pc, #144]	@ (8003ac8 <HAL_ADC_ConvCpltCallback+0x118>)
 8003a38:	00a2      	lsls	r2, r4, #2
 8003a3a:	50d1      	str	r1, [r2, r3]
			adc_avg[i] = 0;
 8003a3c:	197b      	adds	r3, r7, r5
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	4b1f      	ldr	r3, [pc, #124]	@ (8003ac0 <HAL_ADC_ConvCpltCallback+0x110>)
 8003a42:	0092      	lsls	r2, r2, #2
 8003a44:	2100      	movs	r1, #0
 8003a46:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8003a48:	197b      	adds	r3, r7, r5
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	197b      	adds	r3, r7, r5
 8003a4e:	3201      	adds	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	230f      	movs	r3, #15
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d9b8      	bls.n	80039ce <HAL_ADC_ConvCpltCallback+0x1e>
		}
		sample_count = 0;
 8003a5c:	4b17      	ldr	r3, [pc, #92]	@ (8003abc <HAL_ADC_ConvCpltCallback+0x10c>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
			adc_avg[i] += adc_raw[i];
		}
		sample_count++;
	}
}
 8003a62:	e026      	b.n	8003ab2 <HAL_ADC_ConvCpltCallback+0x102>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8003a64:	230e      	movs	r3, #14
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	e016      	b.n	8003a9c <HAL_ADC_ConvCpltCallback+0xec>
			adc_avg[i] += adc_raw[i];
 8003a6e:	200e      	movs	r0, #14
 8003a70:	183b      	adds	r3, r7, r0
 8003a72:	781a      	ldrb	r2, [r3, #0]
 8003a74:	4b12      	ldr	r3, [pc, #72]	@ (8003ac0 <HAL_ADC_ConvCpltCallback+0x110>)
 8003a76:	0092      	lsls	r2, r2, #2
 8003a78:	58d3      	ldr	r3, [r2, r3]
 8003a7a:	183a      	adds	r2, r7, r0
 8003a7c:	7811      	ldrb	r1, [r2, #0]
 8003a7e:	4a13      	ldr	r2, [pc, #76]	@ (8003acc <HAL_ADC_ConvCpltCallback+0x11c>)
 8003a80:	0049      	lsls	r1, r1, #1
 8003a82:	5a8a      	ldrh	r2, [r1, r2]
 8003a84:	0011      	movs	r1, r2
 8003a86:	183a      	adds	r2, r7, r0
 8003a88:	7812      	ldrb	r2, [r2, #0]
 8003a8a:	1859      	adds	r1, r3, r1
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac0 <HAL_ADC_ConvCpltCallback+0x110>)
 8003a8e:	0092      	lsls	r2, r2, #2
 8003a90:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8003a92:	183b      	adds	r3, r7, r0
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	183b      	adds	r3, r7, r0
 8003a98:	3201      	adds	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	230e      	movs	r3, #14
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d9e3      	bls.n	8003a6e <HAL_ADC_ConvCpltCallback+0xbe>
		sample_count++;
 8003aa6:	4b05      	ldr	r3, [pc, #20]	@ (8003abc <HAL_ADC_ConvCpltCallback+0x10c>)
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	4b03      	ldr	r3, [pc, #12]	@ (8003abc <HAL_ADC_ConvCpltCallback+0x10c>)
 8003ab0:	801a      	strh	r2, [r3, #0]
}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b004      	add	sp, #16
 8003ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	200005fa 	.word	0x200005fa
 8003ac0:	200005fc 	.word	0x200005fc
 8003ac4:	20000004 	.word	0x20000004
 8003ac8:	20000540 	.word	0x20000540
 8003acc:	2000054c 	.word	0x2000054c

08003ad0 <HAL_GPIO_EXTI_Falling_Callback>:
uint8_t vi_update_flag;
/*###*/
#define EEPROM_KWH_MEM_ADDR	(0x0)


void HAL_GPIO_EXTI_Falling_Callback(uint16_t pin) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	0002      	movs	r2, r0
 8003ad8:	1dbb      	adds	r3, r7, #6
 8003ada:	801a      	strh	r2, [r3, #0]
	// TODO pin check
	if(pin == GPIO_PIN_4) {
 8003adc:	1dbb      	adds	r3, r7, #6
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d112      	bne.n	8003b0a <HAL_GPIO_EXTI_Falling_Callback+0x3a>
		/* zero crossing detection */
//		lastime = TIM16->CNT;
		triac_timer = 0;
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b20 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
		triac_timer_flag = 1; /* allow the timer to run */
 8003aea:	4b0e      	ldr	r3, [pc, #56]	@ (8003b24 <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
		/* keep the TRIACs low before triggering */
		TRIAC1_SET(0); /* trigger delay */
 8003af0:	4b0d      	ldr	r3, [pc, #52]	@ (8003b28 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	2101      	movs	r1, #1
 8003af6:	0018      	movs	r0, r3
 8003af8:	f003 fcf3 	bl	80074e2 <HAL_GPIO_WritePin>
		TRIAC2_SET(0);
 8003afc:	2380      	movs	r3, #128	@ 0x80
 8003afe:	019b      	lsls	r3, r3, #6
 8003b00:	480a      	ldr	r0, [pc, #40]	@ (8003b2c <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	0019      	movs	r1, r3
 8003b06:	f003 fcec 	bl	80074e2 <HAL_GPIO_WritePin>
	}
	if(pin == GPIO_PIN_6) {
 8003b0a:	1dbb      	adds	r3, r7, #6
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	2b40      	cmp	r3, #64	@ 0x40
 8003b10:	d102      	bne.n	8003b18 <HAL_GPIO_EXTI_Falling_Callback+0x48>
		/* RTC interrupt */
		/*###*/
		kwh_update_flag = 1;
 8003b12:	4b07      	ldr	r3, [pc, #28]	@ (8003b30 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	701a      	strb	r2, [r3, #0]
		/*###*/
	}
}
 8003b18:	46c0      	nop			@ (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	2000055c 	.word	0x2000055c
 8003b24:	20000559 	.word	0x20000559
 8003b28:	50001400 	.word	0x50001400
 8003b2c:	50000800 	.word	0x50000800
 8003b30:	20000566 	.word	0x20000566

08003b34 <gsm_cmd>:
/* Util funcs */
// Check if target string exists in buffer
uint8_t find_string_in_buffer(const char* buffer, const char* target) {
}

uint8_t gsm_cmd(char *cmd, char *op_check, uint16_t wtime) {
 8003b34:	b5b0      	push	{r4, r5, r7, lr}
 8003b36:	4c20      	ldr	r4, [pc, #128]	@ (8003bb8 <gsm_cmd+0x84>)
 8003b38:	44a5      	add	sp, r4
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	4b1e      	ldr	r3, [pc, #120]	@ (8003bbc <gsm_cmd+0x88>)
 8003b42:	2582      	movs	r5, #130	@ 0x82
 8003b44:	00ad      	lsls	r5, r5, #2
 8003b46:	195b      	adds	r3, r3, r5
 8003b48:	19db      	adds	r3, r3, r7
 8003b4a:	801a      	strh	r2, [r3, #0]
	char cmd_string[500];
	memset(cmd_string, 0, 20);
 8003b4c:	2414      	movs	r4, #20
 8003b4e:	193b      	adds	r3, r7, r4
 8003b50:	2214      	movs	r2, #20
 8003b52:	2100      	movs	r1, #0
 8003b54:	0018      	movs	r0, r3
 8003b56:	f008 fd81 	bl	800c65c <memset>
	sprintf(cmd_string, "%s%s", cmd, "\r\n" );
 8003b5a:	4b19      	ldr	r3, [pc, #100]	@ (8003bc0 <gsm_cmd+0x8c>)
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4919      	ldr	r1, [pc, #100]	@ (8003bc4 <gsm_cmd+0x90>)
 8003b60:	1938      	adds	r0, r7, r4
 8003b62:	f008 fd0d 	bl	800c580 <siprintf>
	gsm_tx_busy = 1;
 8003b66:	4b18      	ldr	r3, [pc, #96]	@ (8003bc8 <gsm_cmd+0x94>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	701a      	strb	r2, [r3, #0]
	gsm_rx_timeout = wtime * 10;
 8003b6c:	4b13      	ldr	r3, [pc, #76]	@ (8003bbc <gsm_cmd+0x88>)
 8003b6e:	195b      	adds	r3, r3, r5
 8003b70:	19db      	adds	r3, r3, r7
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	1c1a      	adds	r2, r3, #0
 8003b76:	0092      	lsls	r2, r2, #2
 8003b78:	18d3      	adds	r3, r2, r3
 8003b7a:	18db      	adds	r3, r3, r3
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	4b13      	ldr	r3, [pc, #76]	@ (8003bcc <gsm_cmd+0x98>)
 8003b80:	801a      	strh	r2, [r3, #0]
	strcpy(gsm_match_resp, op_check);
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	4b12      	ldr	r3, [pc, #72]	@ (8003bd0 <gsm_cmd+0x9c>)
 8003b86:	0011      	movs	r1, r2
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f008 fe04 	bl	800c796 <strcpy>
	gsm_status = GSM_WAIT;
 8003b8e:	4b11      	ldr	r3, [pc, #68]	@ (8003bd4 <gsm_cmd+0xa0>)
 8003b90:	2202      	movs	r2, #2
 8003b92:	701a      	strb	r2, [r3, #0]
	return HAL_UART_Transmit_DMA(&huart3, (uint8_t *)cmd_string, strlen(cmd_string));
 8003b94:	193b      	adds	r3, r7, r4
 8003b96:	0018      	movs	r0, r3
 8003b98:	f7fc fab2 	bl	8000100 <strlen>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	1939      	adds	r1, r7, r4
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd8 <gsm_cmd+0xa4>)
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f006 fd1b 	bl	800a5e0 <HAL_UART_Transmit_DMA>
 8003baa:	0003      	movs	r3, r0
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	2382      	movs	r3, #130	@ 0x82
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	449d      	add	sp, r3
 8003bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8003bb8:	fffffdf8 	.word	0xfffffdf8
 8003bbc:	fffffdfe 	.word	0xfffffdfe
 8003bc0:	0800e970 	.word	0x0800e970
 8003bc4:	0800e974 	.word	0x0800e974
 8003bc8:	20000574 	.word	0x20000574
 8003bcc:	2000057a 	.word	0x2000057a
 8003bd0:	200005e4 	.word	0x200005e4
 8003bd4:	20000576 	.word	0x20000576
 8003bd8:	200003d4 	.word	0x200003d4

08003bdc <gsm_is_valid_resp>:

uint8_t gsm_is_valid_resp() {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
    return strstr(gsm_rx_buffer, gsm_match_resp) != NULL;
 8003be0:	4a06      	ldr	r2, [pc, #24]	@ (8003bfc <gsm_is_valid_resp+0x20>)
 8003be2:	4b07      	ldr	r3, [pc, #28]	@ (8003c00 <gsm_is_valid_resp+0x24>)
 8003be4:	0011      	movs	r1, r2
 8003be6:	0018      	movs	r0, r3
 8003be8:	f008 fd40 	bl	800c66c <strstr>
 8003bec:	0003      	movs	r3, r0
 8003bee:	1e5a      	subs	r2, r3, #1
 8003bf0:	4193      	sbcs	r3, r2
 8003bf2:	b2db      	uxtb	r3, r3
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	200005e4 	.word	0x200005e4
 8003c00:	20000580 	.word	0x20000580

08003c04 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3) {
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a0d      	ldr	r2, [pc, #52]	@ (8003c48 <HAL_UART_TxCpltCallback+0x44>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d114      	bne.n	8003c40 <HAL_UART_TxCpltCallback+0x3c>
		gsm_tx_busy = 0;
 8003c16:	4b0d      	ldr	r3, [pc, #52]	@ (8003c4c <HAL_UART_TxCpltCallback+0x48>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
		gsm_rx_busy = 1;
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c50 <HAL_UART_TxCpltCallback+0x4c>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
		memset(gsm_rx_buffer, 0, GSM_RX_BUFFER_SIZE);
 8003c22:	4b0c      	ldr	r3, [pc, #48]	@ (8003c54 <HAL_UART_TxCpltCallback+0x50>)
 8003c24:	2264      	movs	r2, #100	@ 0x64
 8003c26:	2100      	movs	r1, #0
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f008 fd17 	bl	800c65c <memset>
		HAL_UART_Receive_DMA(huart, gsm_rx_buffer, GSM_RX_BUFFER_SIZE);
 8003c2e:	4909      	ldr	r1, [pc, #36]	@ (8003c54 <HAL_UART_TxCpltCallback+0x50>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2264      	movs	r2, #100	@ 0x64
 8003c34:	0018      	movs	r0, r3
 8003c36:	f006 fd65 	bl	800a704 <HAL_UART_Receive_DMA>
		gsm_rx_flag = 1;
 8003c3a:	4b07      	ldr	r3, [pc, #28]	@ (8003c58 <HAL_UART_TxCpltCallback+0x54>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	701a      	strb	r2, [r3, #0]
	}
}
 8003c40:	46c0      	nop			@ (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b002      	add	sp, #8
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40004800 	.word	0x40004800
 8003c4c:	20000574 	.word	0x20000574
 8003c50:	20000575 	.word	0x20000575
 8003c54:	20000580 	.word	0x20000580
 8003c58:	2000057d 	.word	0x2000057d

08003c5c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16) {
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a8a      	ldr	r2, [pc, #552]	@ (8003e94 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d000      	beq.n	8003c70 <HAL_TIM_PeriodElapsedCallback+0x14>
 8003c6e:	e10c      	b.n	8003e8a <HAL_TIM_PeriodElapsedCallback+0x22e>
		if(ms > 10000) {
 8003c70:	4b89      	ldr	r3, [pc, #548]	@ (8003e98 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a89      	ldr	r2, [pc, #548]	@ (8003e9c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d927      	bls.n	8003cca <HAL_TIM_PeriodElapsedCallback+0x6e>
			if(sec > 60) {
 8003c7a:	4b89      	ldr	r3, [pc, #548]	@ (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b3c      	cmp	r3, #60	@ 0x3c
 8003c80:	d916      	bls.n	8003cb0 <HAL_TIM_PeriodElapsedCallback+0x54>
				if(min > 60) {
 8003c82:	4b88      	ldr	r3, [pc, #544]	@ (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b3c      	cmp	r3, #60	@ 0x3c
 8003c88:	d909      	bls.n	8003c9e <HAL_TIM_PeriodElapsedCallback+0x42>
					min = 0;
 8003c8a:	4b86      	ldr	r3, [pc, #536]	@ (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
					hr++;
 8003c90:	4b85      	ldr	r3, [pc, #532]	@ (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	3301      	adds	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	4b83      	ldr	r3, [pc, #524]	@ (8003ea8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003c9a:	801a      	strh	r2, [r3, #0]
 8003c9c:	e004      	b.n	8003ca8 <HAL_TIM_PeriodElapsedCallback+0x4c>
				}
				else min++;
 8003c9e:	4b81      	ldr	r3, [pc, #516]	@ (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	4b7f      	ldr	r3, [pc, #508]	@ (8003ea4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003ca6:	601a      	str	r2, [r3, #0]
				sec = 0;
 8003ca8:	4b7d      	ldr	r3, [pc, #500]	@ (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	e005      	b.n	8003cbc <HAL_TIM_PeriodElapsedCallback+0x60>
			} else sec++;
 8003cb0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	4b79      	ldr	r3, [pc, #484]	@ (8003ea0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003cba:	701a      	strb	r2, [r3, #0]
			ms = 0;
 8003cbc:	4b76      	ldr	r3, [pc, #472]	@ (8003e98 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]
			vi_update_flag = 1;
 8003cc2:	4b7a      	ldr	r3, [pc, #488]	@ (8003eac <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	e004      	b.n	8003cd4 <HAL_TIM_PeriodElapsedCallback+0x78>
			/*###*/
		} else ms++;
 8003cca:	4b73      	ldr	r3, [pc, #460]	@ (8003e98 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	4b71      	ldr	r3, [pc, #452]	@ (8003e98 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003cd2:	601a      	str	r2, [r3, #0]

		if(ms % 5000 == 0)
 8003cd4:	4b70      	ldr	r3, [pc, #448]	@ (8003e98 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4975      	ldr	r1, [pc, #468]	@ (8003eb0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f7fc fab2 	bl	8000244 <__aeabi_uidivmod>
 8003ce0:	1e0b      	subs	r3, r1, #0
 8003ce2:	d102      	bne.n	8003cea <HAL_TIM_PeriodElapsedCallback+0x8e>
			sensor_refresh_flag = 1;
 8003ce4:	4b73      	ldr	r3, [pc, #460]	@ (8003eb4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]
		btn1_timer = btn1_flag ? btn1_timer + 1: 0;
 8003cea:	4b73      	ldr	r3, [pc, #460]	@ (8003eb8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d004      	beq.n	8003cfc <HAL_TIM_PeriodElapsedCallback+0xa0>
 8003cf2:	4b72      	ldr	r3, [pc, #456]	@ (8003ebc <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	e000      	b.n	8003cfe <HAL_TIM_PeriodElapsedCallback+0xa2>
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	4b6f      	ldr	r3, [pc, #444]	@ (8003ebc <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003d00:	801a      	strh	r2, [r3, #0]
		btn2_timer = btn2_flag ? btn2_timer + 1: 0;
 8003d02:	4b6f      	ldr	r3, [pc, #444]	@ (8003ec0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d004      	beq.n	8003d14 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8003d0a:	4b6e      	ldr	r3, [pc, #440]	@ (8003ec4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	e000      	b.n	8003d16 <HAL_TIM_PeriodElapsedCallback+0xba>
 8003d14:	2200      	movs	r2, #0
 8003d16:	4b6b      	ldr	r3, [pc, #428]	@ (8003ec4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003d18:	801a      	strh	r2, [r3, #0]
		btn3_timer = btn3_flag ? btn3_timer + 1: 0;
 8003d1a:	4b6b      	ldr	r3, [pc, #428]	@ (8003ec8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d004      	beq.n	8003d2c <HAL_TIM_PeriodElapsedCallback+0xd0>
 8003d22:	4b6a      	ldr	r3, [pc, #424]	@ (8003ecc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	3301      	adds	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	e000      	b.n	8003d2e <HAL_TIM_PeriodElapsedCallback+0xd2>
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	4b67      	ldr	r3, [pc, #412]	@ (8003ecc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003d30:	801a      	strh	r2, [r3, #0]
		led_blink_timer = led_blink_flag ? led_blink_timer + 1: 0;
 8003d32:	4b67      	ldr	r3, [pc, #412]	@ (8003ed0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d004      	beq.n	8003d44 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8003d3a:	4b66      	ldr	r3, [pc, #408]	@ (8003ed4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	e000      	b.n	8003d46 <HAL_TIM_PeriodElapsedCallback+0xea>
 8003d44:	2200      	movs	r2, #0
 8003d46:	4b63      	ldr	r3, [pc, #396]	@ (8003ed4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003d48:	801a      	strh	r2, [r3, #0]
		if(led_blink_timer > LED_BLINK_TIME) {
 8003d4a:	4b62      	ldr	r3, [pc, #392]	@ (8003ed4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003d4c:	881a      	ldrh	r2, [r3, #0]
 8003d4e:	23fa      	movs	r3, #250	@ 0xfa
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d908      	bls.n	8003d68 <HAL_TIM_PeriodElapsedCallback+0x10c>
			led_blink_flag =  0;
 8003d56:	4b5e      	ldr	r3, [pc, #376]	@ (8003ed0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
			LED_OFF();
 8003d5c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ed8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2102      	movs	r1, #2
 8003d62:	0018      	movs	r0, r3
 8003d64:	f003 fbbd 	bl	80074e2 <HAL_GPIO_WritePin>
		}

		/*B*/
		/* If time up, trigger TRIAC */
		if(triac_mode == MODE_CTRL) {
 8003d68:	4b5c      	ldr	r3, [pc, #368]	@ (8003edc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d14f      	bne.n	8003e10 <HAL_TIM_PeriodElapsedCallback+0x1b4>
			triac_timer = triac_timer_flag ? triac_timer + 0.1 : 0;
 8003d70:	4b5b      	ldr	r3, [pc, #364]	@ (8003ee0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d010      	beq.n	8003d9a <HAL_TIM_PeriodElapsedCallback+0x13e>
 8003d78:	4b5a      	ldr	r3, [pc, #360]	@ (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	1c18      	adds	r0, r3, #0
 8003d7e:	f7ff fbb5 	bl	80034ec <__aeabi_f2d>
 8003d82:	4a59      	ldr	r2, [pc, #356]	@ (8003ee8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003d84:	4b59      	ldr	r3, [pc, #356]	@ (8003eec <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003d86:	f7fd fc11 	bl	80015ac <__aeabi_dadd>
 8003d8a:	0002      	movs	r2, r0
 8003d8c:	000b      	movs	r3, r1
 8003d8e:	0010      	movs	r0, r2
 8003d90:	0019      	movs	r1, r3
 8003d92:	f7ff fbf3 	bl	800357c <__aeabi_d2f>
 8003d96:	1c02      	adds	r2, r0, #0
 8003d98:	e000      	b.n	8003d9c <HAL_TIM_PeriodElapsedCallback+0x140>
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	4b51      	ldr	r3, [pc, #324]	@ (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003d9e:	601a      	str	r2, [r3, #0]

			if(triac_timer >= triac_time) {
 8003da0:	4b50      	ldr	r3, [pc, #320]	@ (8003ee4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b52      	ldr	r3, [pc, #328]	@ (8003ef0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	1c19      	adds	r1, r3, #0
 8003daa:	1c10      	adds	r0, r2, #0
 8003dac:	f7fc fba8 	bl	8000500 <__aeabi_fcmpge>
 8003db0:	1e03      	subs	r3, r0, #0
 8003db2:	d03d      	beq.n	8003e30 <HAL_TIM_PeriodElapsedCallback+0x1d4>
				/* trigger TRIAC */
				triac_timer_flag = 0;
 8003db4:	4b4a      	ldr	r3, [pc, #296]	@ (8003ee0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
				TRIAC1_SET(1); /* trigger pulse */
 8003dba:	4b47      	ldr	r3, [pc, #284]	@ (8003ed8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f003 fb8e 	bl	80074e2 <HAL_GPIO_WritePin>
				TRIAC2_SET(1);
 8003dc6:	2380      	movs	r3, #128	@ 0x80
 8003dc8:	019b      	lsls	r3, r3, #6
 8003dca:	484a      	ldr	r0, [pc, #296]	@ (8003ef4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	0019      	movs	r1, r3
 8003dd0:	f003 fb87 	bl	80074e2 <HAL_GPIO_WritePin>
				for(uint8_t i = 0; i < 100; i++);
 8003dd4:	230f      	movs	r3, #15
 8003dd6:	18fb      	adds	r3, r7, r3
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_PeriodElapsedCallback+0x18e>
 8003dde:	210f      	movs	r1, #15
 8003de0:	187b      	adds	r3, r7, r1
 8003de2:	781a      	ldrb	r2, [r3, #0]
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	3201      	adds	r2, #1
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	230f      	movs	r3, #15
 8003dec:	18fb      	adds	r3, r7, r3
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b63      	cmp	r3, #99	@ 0x63
 8003df2:	d9f4      	bls.n	8003dde <HAL_TIM_PeriodElapsedCallback+0x182>
				TRIAC1_SET(0); /* turn it off */
 8003df4:	4b38      	ldr	r3, [pc, #224]	@ (8003ed8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	2101      	movs	r1, #1
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f003 fb71 	bl	80074e2 <HAL_GPIO_WritePin>
				TRIAC2_SET(0);
 8003e00:	2380      	movs	r3, #128	@ 0x80
 8003e02:	019b      	lsls	r3, r3, #6
 8003e04:	483b      	ldr	r0, [pc, #236]	@ (8003ef4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	0019      	movs	r1, r3
 8003e0a:	f003 fb6a 	bl	80074e2 <HAL_GPIO_WritePin>
 8003e0e:	e00f      	b.n	8003e30 <HAL_TIM_PeriodElapsedCallback+0x1d4>
			}
		} else {
			TRIAC1_SET(0); /* trigger TRIAC */
 8003e10:	4b31      	ldr	r3, [pc, #196]	@ (8003ed8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	2101      	movs	r1, #1
 8003e16:	0018      	movs	r0, r3
 8003e18:	f003 fb63 	bl	80074e2 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8003e1c:	2380      	movs	r3, #128	@ 0x80
 8003e1e:	019b      	lsls	r3, r3, #6
 8003e20:	4834      	ldr	r0, [pc, #208]	@ (8003ef4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	0019      	movs	r1, r3
 8003e26:	f003 fb5c 	bl	80074e2 <HAL_GPIO_WritePin>
			triac_time = 0;
 8003e2a:	4b31      	ldr	r3, [pc, #196]	@ (8003ef0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
		}
		/*B*/
		gsm_rx_timer = gsm_rx_flag ? gsm_rx_timer + 1: 0;
 8003e30:	4b31      	ldr	r3, [pc, #196]	@ (8003ef8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_TIM_PeriodElapsedCallback+0x1ea>
 8003e3a:	4b30      	ldr	r3, [pc, #192]	@ (8003efc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3301      	adds	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	e000      	b.n	8003e48 <HAL_TIM_PeriodElapsedCallback+0x1ec>
 8003e46:	2200      	movs	r2, #0
 8003e48:	4b2c      	ldr	r3, [pc, #176]	@ (8003efc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003e4a:	801a      	strh	r2, [r3, #0]
		if(gsm_rx_timer > gsm_rx_timeout) {
 8003e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003efc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	4b2b      	ldr	r3, [pc, #172]	@ (8003f00 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d916      	bls.n	8003e8a <HAL_TIM_PeriodElapsedCallback+0x22e>
			gsm_rx_timer = 0;
 8003e5c:	4b27      	ldr	r3, [pc, #156]	@ (8003efc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	801a      	strh	r2, [r3, #0]
			/* TODO process gsm_rx_buffer */
			if(gsm_is_valid_resp())
 8003e62:	f7ff febb 	bl	8003bdc <gsm_is_valid_resp>
 8003e66:	1e03      	subs	r3, r0, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_TIM_PeriodElapsedCallback+0x216>
				gsm_status = GSM_OK;
 8003e6a:	4b26      	ldr	r3, [pc, #152]	@ (8003f04 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	e002      	b.n	8003e78 <HAL_TIM_PeriodElapsedCallback+0x21c>
			else
				gsm_status = GSM_NOK;
 8003e72:	4b24      	ldr	r3, [pc, #144]	@ (8003f04 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003e74:	2263      	movs	r2, #99	@ 0x63
 8003e76:	701a      	strb	r2, [r3, #0]

//			memset(gsm_rx_buffer, 0, GSM_RX_BUFFER_SIZE);
			gsm_rx_flag = 0; /* clear everything... */
 8003e78:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	701a      	strb	r2, [r3, #0]
			gsm_tx_busy = 0; /* ...to read data again */
 8003e7e:	4b22      	ldr	r3, [pc, #136]	@ (8003f08 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
			gsm_rx_busy = 0;
 8003e84:	4b21      	ldr	r3, [pc, #132]	@ (8003f0c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b004      	add	sp, #16
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			@ (mov r8, r8)
 8003e94:	40014400 	.word	0x40014400
 8003e98:	20000530 	.word	0x20000530
 8003e9c:	00002710 	.word	0x00002710
 8003ea0:	20000534 	.word	0x20000534
 8003ea4:	20000538 	.word	0x20000538
 8003ea8:	2000053c 	.word	0x2000053c
 8003eac:	20000567 	.word	0x20000567
 8003eb0:	00001388 	.word	0x00001388
 8003eb4:	2000052e 	.word	0x2000052e
 8003eb8:	20000520 	.word	0x20000520
 8003ebc:	20000524 	.word	0x20000524
 8003ec0:	20000521 	.word	0x20000521
 8003ec4:	20000526 	.word	0x20000526
 8003ec8:	20000522 	.word	0x20000522
 8003ecc:	20000528 	.word	0x20000528
 8003ed0:	2000052c 	.word	0x2000052c
 8003ed4:	2000052a 	.word	0x2000052a
 8003ed8:	50001400 	.word	0x50001400
 8003edc:	20000564 	.word	0x20000564
 8003ee0:	20000559 	.word	0x20000559
 8003ee4:	2000055c 	.word	0x2000055c
 8003ee8:	9999999a 	.word	0x9999999a
 8003eec:	3fb99999 	.word	0x3fb99999
 8003ef0:	20000560 	.word	0x20000560
 8003ef4:	50000800 	.word	0x50000800
 8003ef8:	2000057d 	.word	0x2000057d
 8003efc:	20000578 	.word	0x20000578
 8003f00:	2000057a 	.word	0x2000057a
 8003f04:	20000576 	.word	0x20000576
 8003f08:	20000574 	.word	0x20000574
 8003f0c:	20000575 	.word	0x20000575

08003f10 <EEPROM_Write>:
// Define the Page Size and number of pages
#define PAGE_SIZE 16     // in Bytes
#define PAGE_NUM  32    // number of pages

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 8003f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f12:	b08f      	sub	sp, #60	@ 0x3c
 8003f14:	af04      	add	r7, sp, #16
 8003f16:	0004      	movs	r4, r0
 8003f18:	0008      	movs	r0, r1
 8003f1a:	60ba      	str	r2, [r7, #8]
 8003f1c:	0019      	movs	r1, r3
 8003f1e:	250e      	movs	r5, #14
 8003f20:	197b      	adds	r3, r7, r5
 8003f22:	1c22      	adds	r2, r4, #0
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	240c      	movs	r4, #12
 8003f28:	193b      	adds	r3, r7, r4
 8003f2a:	1c02      	adds	r2, r0, #0
 8003f2c:	801a      	strh	r2, [r3, #0]
 8003f2e:	1dbb      	adds	r3, r7, #6
 8003f30:	1c0a      	adds	r2, r1, #0
 8003f32:	801a      	strh	r2, [r3, #0]

	// Find out the number of bit, where the page addressing starts
	int paddrposition = log(PAGE_SIZE)/log(2);
 8003f34:	2304      	movs	r3, #4
 8003f36:	61fb      	str	r3, [r7, #28]

	// calculate the start page and the end page
	uint16_t startPage = page;
 8003f38:	2326      	movs	r3, #38	@ 0x26
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	197a      	adds	r2, r7, r5
 8003f3e:	8812      	ldrh	r2, [r2, #0]
 8003f40:	801a      	strh	r2, [r3, #0]
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 8003f42:	1dbb      	adds	r3, r7, #6
 8003f44:	881a      	ldrh	r2, [r3, #0]
 8003f46:	193b      	adds	r3, r7, r4
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	18d3      	adds	r3, r2, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	da00      	bge.n	8003f52 <EEPROM_Write+0x42>
 8003f50:	330f      	adds	r3, #15
 8003f52:	111b      	asrs	r3, r3, #4
 8003f54:	b299      	uxth	r1, r3
 8003f56:	201a      	movs	r0, #26
 8003f58:	183b      	adds	r3, r7, r0
 8003f5a:	220e      	movs	r2, #14
 8003f5c:	18ba      	adds	r2, r7, r2
 8003f5e:	8812      	ldrh	r2, [r2, #0]
 8003f60:	188a      	adds	r2, r1, r2
 8003f62:	801a      	strh	r2, [r3, #0]

	// number of pages to be written
	uint16_t numofpages = (endPage-startPage) + 1;
 8003f64:	183a      	adds	r2, r7, r0
 8003f66:	2326      	movs	r3, #38	@ 0x26
 8003f68:	18fb      	adds	r3, r7, r3
 8003f6a:	8812      	ldrh	r2, [r2, #0]
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	2318      	movs	r3, #24
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	3201      	adds	r2, #1
 8003f78:	801a      	strh	r2, [r3, #0]
	uint16_t pos=0;
 8003f7a:	2324      	movs	r3, #36	@ 0x24
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	2200      	movs	r2, #0
 8003f80:	801a      	strh	r2, [r3, #0]

	// write the data
	for (int i=0; i<numofpages; i++)
 8003f82:	2300      	movs	r3, #0
 8003f84:	623b      	str	r3, [r7, #32]
 8003f86:	e044      	b.n	8004012 <EEPROM_Write+0x102>
	{
		/* calculate the address of the memory location
		 * Here we add the page address with the byte address
		 */
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8003f88:	2526      	movs	r5, #38	@ 0x26
 8003f8a:	197b      	adds	r3, r7, r5
 8003f8c:	881a      	ldrh	r2, [r3, #0]
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	409a      	lsls	r2, r3
 8003f92:	0013      	movs	r3, r2
 8003f94:	b21a      	sxth	r2, r3
 8003f96:	230c      	movs	r3, #12
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	5e5b      	ldrsh	r3, [r3, r1]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	b21a      	sxth	r2, r3
 8003fa2:	2116      	movs	r1, #22
 8003fa4:	187b      	adds	r3, r7, r1
 8003fa6:	801a      	strh	r2, [r3, #0]
		uint16_t bytesremaining = 2;
 8003fa8:	2414      	movs	r4, #20
 8003faa:	193b      	adds	r3, r7, r4
 8003fac:	2202      	movs	r2, #2
 8003fae:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);  // write the data to the EEPROM
 8003fb0:	2624      	movs	r6, #36	@ 0x24
 8003fb2:	19bb      	adds	r3, r7, r6
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	18d3      	adds	r3, r2, r3
 8003fba:	187a      	adds	r2, r7, r1
 8003fbc:	8811      	ldrh	r1, [r2, #0]
 8003fbe:	481a      	ldr	r0, [pc, #104]	@ (8004028 <EEPROM_Write+0x118>)
 8003fc0:	22fa      	movs	r2, #250	@ 0xfa
 8003fc2:	0092      	lsls	r2, r2, #2
 8003fc4:	9202      	str	r2, [sp, #8]
 8003fc6:	193a      	adds	r2, r7, r4
 8003fc8:	8812      	ldrh	r2, [r2, #0]
 8003fca:	9201      	str	r2, [sp, #4]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2302      	movs	r3, #2
 8003fd0:	000a      	movs	r2, r1
 8003fd2:	21ae      	movs	r1, #174	@ 0xae
 8003fd4:	f003 fdae 	bl	8007b34 <HAL_I2C_Mem_Write>

		startPage += 1;  // increment the page, so that a new page address can be selected for further write
 8003fd8:	197b      	adds	r3, r7, r5
 8003fda:	197a      	adds	r2, r7, r5
 8003fdc:	8812      	ldrh	r2, [r2, #0]
 8003fde:	3201      	adds	r2, #1
 8003fe0:	801a      	strh	r2, [r3, #0]
		offset=0;   // since we will be writing to a new page, so offset will be 0
 8003fe2:	230c      	movs	r3, #12
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;  // reduce the size of the bytes
 8003fea:	1dbb      	adds	r3, r7, #6
 8003fec:	1db9      	adds	r1, r7, #6
 8003fee:	193a      	adds	r2, r7, r4
 8003ff0:	8809      	ldrh	r1, [r1, #0]
 8003ff2:	8812      	ldrh	r2, [r2, #0]
 8003ff4:	1a8a      	subs	r2, r1, r2
 8003ff6:	801a      	strh	r2, [r3, #0]
		pos += bytesremaining;  // update the position for the data buffer
 8003ff8:	19bb      	adds	r3, r7, r6
 8003ffa:	19b9      	adds	r1, r7, r6
 8003ffc:	193a      	adds	r2, r7, r4
 8003ffe:	8809      	ldrh	r1, [r1, #0]
 8004000:	8812      	ldrh	r2, [r2, #0]
 8004002:	188a      	adds	r2, r1, r2
 8004004:	801a      	strh	r2, [r3, #0]

		HAL_Delay (5);  // Write cycle delay (5ms)/*TODO implement using timer: eeprom_busy_flag */
 8004006:	2005      	movs	r0, #5
 8004008:	f001 fee6 	bl	8005dd8 <HAL_Delay>
	for (int i=0; i<numofpages; i++)
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	3301      	adds	r3, #1
 8004010:	623b      	str	r3, [r7, #32]
 8004012:	2318      	movs	r3, #24
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	6a3a      	ldr	r2, [r7, #32]
 800401a:	429a      	cmp	r2, r3
 800401c:	dbb4      	blt.n	8003f88 <EEPROM_Write+0x78>
	}
}
 800401e:	46c0      	nop			@ (mov r8, r8)
 8004020:	46c0      	nop			@ (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	b00b      	add	sp, #44	@ 0x2c
 8004026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004028:	200002d0 	.word	0x200002d0

0800402c <EEPROM_Read>:
//
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800402c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800402e:	b08f      	sub	sp, #60	@ 0x3c
 8004030:	af04      	add	r7, sp, #16
 8004032:	0004      	movs	r4, r0
 8004034:	0008      	movs	r0, r1
 8004036:	60ba      	str	r2, [r7, #8]
 8004038:	0019      	movs	r1, r3
 800403a:	250e      	movs	r5, #14
 800403c:	197b      	adds	r3, r7, r5
 800403e:	1c22      	adds	r2, r4, #0
 8004040:	801a      	strh	r2, [r3, #0]
 8004042:	240c      	movs	r4, #12
 8004044:	193b      	adds	r3, r7, r4
 8004046:	1c02      	adds	r2, r0, #0
 8004048:	801a      	strh	r2, [r3, #0]
 800404a:	1dbb      	adds	r3, r7, #6
 800404c:	1c0a      	adds	r2, r1, #0
 800404e:	801a      	strh	r2, [r3, #0]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8004050:	2304      	movs	r3, #4
 8004052:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8004054:	2326      	movs	r3, #38	@ 0x26
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	197a      	adds	r2, r7, r5
 800405a:	8812      	ldrh	r2, [r2, #0]
 800405c:	801a      	strh	r2, [r3, #0]
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800405e:	1dbb      	adds	r3, r7, #6
 8004060:	881a      	ldrh	r2, [r3, #0]
 8004062:	193b      	adds	r3, r7, r4
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	18d3      	adds	r3, r2, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	da00      	bge.n	800406e <EEPROM_Read+0x42>
 800406c:	330f      	adds	r3, #15
 800406e:	111b      	asrs	r3, r3, #4
 8004070:	b299      	uxth	r1, r3
 8004072:	201a      	movs	r0, #26
 8004074:	183b      	adds	r3, r7, r0
 8004076:	220e      	movs	r2, #14
 8004078:	18ba      	adds	r2, r7, r2
 800407a:	8812      	ldrh	r2, [r2, #0]
 800407c:	188a      	adds	r2, r1, r2
 800407e:	801a      	strh	r2, [r3, #0]

	uint16_t numofpages = (endPage-startPage) + 1;
 8004080:	183a      	adds	r2, r7, r0
 8004082:	2326      	movs	r3, #38	@ 0x26
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	8812      	ldrh	r2, [r2, #0]
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	b29a      	uxth	r2, r3
 800408e:	2318      	movs	r3, #24
 8004090:	18fb      	adds	r3, r7, r3
 8004092:	3201      	adds	r2, #1
 8004094:	801a      	strh	r2, [r3, #0]
	uint16_t pos=0;
 8004096:	2324      	movs	r3, #36	@ 0x24
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	2200      	movs	r2, #0
 800409c:	801a      	strh	r2, [r3, #0]

	for (int i=0; i<numofpages; i++)
 800409e:	2300      	movs	r3, #0
 80040a0:	623b      	str	r3, [r7, #32]
 80040a2:	e03b      	b.n	800411c <EEPROM_Read+0xf0>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 80040a4:	2426      	movs	r4, #38	@ 0x26
 80040a6:	193b      	adds	r3, r7, r4
 80040a8:	881a      	ldrh	r2, [r3, #0]
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	409a      	lsls	r2, r3
 80040ae:	0013      	movs	r3, r2
 80040b0:	b21a      	sxth	r2, r3
 80040b2:	260c      	movs	r6, #12
 80040b4:	19bb      	adds	r3, r7, r6
 80040b6:	2100      	movs	r1, #0
 80040b8:	5e5b      	ldrsh	r3, [r3, r1]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	b21a      	sxth	r2, r3
 80040be:	2116      	movs	r1, #22
 80040c0:	187b      	adds	r3, r7, r1
 80040c2:	801a      	strh	r2, [r3, #0]
		uint16_t bytesremaining = 2;
 80040c4:	2514      	movs	r5, #20
 80040c6:	197b      	adds	r3, r7, r5
 80040c8:	2202      	movs	r2, #2
 80040ca:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, data, 2, 1000);
 80040cc:	187b      	adds	r3, r7, r1
 80040ce:	881a      	ldrh	r2, [r3, #0]
 80040d0:	4818      	ldr	r0, [pc, #96]	@ (8004134 <EEPROM_Read+0x108>)
 80040d2:	23fa      	movs	r3, #250	@ 0xfa
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	9302      	str	r3, [sp, #8]
 80040d8:	2302      	movs	r3, #2
 80040da:	9301      	str	r3, [sp, #4]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	2302      	movs	r3, #2
 80040e2:	21ae      	movs	r1, #174	@ 0xae
 80040e4:	f003 fe54 	bl	8007d90 <HAL_I2C_Mem_Read>
		startPage += 1;
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	193a      	adds	r2, r7, r4
 80040ec:	8812      	ldrh	r2, [r2, #0]
 80040ee:	3201      	adds	r2, #1
 80040f0:	801a      	strh	r2, [r3, #0]
		offset=0;
 80040f2:	19bb      	adds	r3, r7, r6
 80040f4:	2200      	movs	r2, #0
 80040f6:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 80040f8:	1dbb      	adds	r3, r7, #6
 80040fa:	1db9      	adds	r1, r7, #6
 80040fc:	197a      	adds	r2, r7, r5
 80040fe:	8809      	ldrh	r1, [r1, #0]
 8004100:	8812      	ldrh	r2, [r2, #0]
 8004102:	1a8a      	subs	r2, r1, r2
 8004104:	801a      	strh	r2, [r3, #0]
		pos += bytesremaining;
 8004106:	2224      	movs	r2, #36	@ 0x24
 8004108:	18bb      	adds	r3, r7, r2
 800410a:	18b9      	adds	r1, r7, r2
 800410c:	197a      	adds	r2, r7, r5
 800410e:	8809      	ldrh	r1, [r1, #0]
 8004110:	8812      	ldrh	r2, [r2, #0]
 8004112:	188a      	adds	r2, r1, r2
 8004114:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<numofpages; i++)
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	3301      	adds	r3, #1
 800411a:	623b      	str	r3, [r7, #32]
 800411c:	2318      	movs	r3, #24
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	6a3a      	ldr	r2, [r7, #32]
 8004124:	429a      	cmp	r2, r3
 8004126:	dbbd      	blt.n	80040a4 <EEPROM_Read+0x78>
	}
}
 8004128:	46c0      	nop			@ (mov r8, r8)
 800412a:	46c0      	nop			@ (mov r8, r8)
 800412c:	46bd      	mov	sp, r7
 800412e:	b00b      	add	sp, #44	@ 0x2c
 8004130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004132:	46c0      	nop			@ (mov r8, r8)
 8004134:	200002d0 	.word	0x200002d0

08004138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800413a:	46de      	mov	lr, fp
 800413c:	4657      	mov	r7, sl
 800413e:	464e      	mov	r6, r9
 8004140:	4645      	mov	r5, r8
 8004142:	b5e0      	push	{r5, r6, r7, lr}
 8004144:	b0cd      	sub	sp, #308	@ 0x134
 8004146:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004148:	f001 fdc0 	bl	8005ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800414c:	f000 fe68 	bl	8004e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004150:	f001 f852 	bl	80051f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004154:	f001 f82a 	bl	80051ac <MX_DMA_Init>
  MX_TIM16_Init();
 8004158:	f000 ffce 	bl	80050f8 <MX_TIM16_Init>
  MX_I2C1_Init();
 800415c:	f000 ff4c 	bl	8004ff8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8004160:	f000 fff0 	bl	8005144 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8004164:	f000 feb6 	bl	8004ed4 <MX_ADC1_Init>
  MX_SPI2_Init();
 8004168:	f000 ff86 	bl	8005078 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	TRIAC1_SET(0);
 800416c:	4be2      	ldr	r3, [pc, #904]	@ (80044f8 <main+0x3c0>)
 800416e:	2200      	movs	r2, #0
 8004170:	2101      	movs	r1, #1
 8004172:	0018      	movs	r0, r3
 8004174:	f003 f9b5 	bl	80074e2 <HAL_GPIO_WritePin>
	TRIAC2_SET(0);
 8004178:	2380      	movs	r3, #128	@ 0x80
 800417a:	019b      	lsls	r3, r3, #6
 800417c:	48df      	ldr	r0, [pc, #892]	@ (80044fc <main+0x3c4>)
 800417e:	2200      	movs	r2, #0
 8004180:	0019      	movs	r1, r3
 8004182:	f003 f9ae 	bl	80074e2 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t sdo[2] = { 0, 0 };
 8004186:	23f8      	movs	r3, #248	@ 0xf8
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	2200      	movs	r2, #0
 800418c:	801a      	strh	r2, [r3, #0]
	uint16_t temp_word;
	uint8_t temp_state = 0;
 800418e:	2308      	movs	r3, #8
 8004190:	33ff      	adds	r3, #255	@ 0xff
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	2200      	movs	r2, #0
 8004196:	701a      	strb	r2, [r3, #0]
	uint16_t temp12b = 0;
 8004198:	1d7b      	adds	r3, r7, #5
 800419a:	33ff      	adds	r3, #255	@ 0xff
 800419c:	2200      	movs	r2, #0
 800419e:	801a      	strh	r2, [r3, #0]

	TEMP1_CS(1);
 80041a0:	4bd7      	ldr	r3, [pc, #860]	@ (8004500 <main+0x3c8>)
 80041a2:	2280      	movs	r2, #128	@ 0x80
 80041a4:	0112      	lsls	r2, r2, #4
 80041a6:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 80041a8:	4bd5      	ldr	r3, [pc, #852]	@ (8004500 <main+0x3c8>)
 80041aa:	2280      	movs	r2, #128	@ 0x80
 80041ac:	0112      	lsls	r2, r2, #4
 80041ae:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(0);
 80041b0:	4bd3      	ldr	r3, [pc, #844]	@ (8004500 <main+0x3c8>)
 80041b2:	2280      	movs	r2, #128	@ 0x80
 80041b4:	0212      	lsls	r2, r2, #8
 80041b6:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(1);
 80041b8:	4bd1      	ldr	r3, [pc, #836]	@ (8004500 <main+0x3c8>)
 80041ba:	2280      	movs	r2, #128	@ 0x80
 80041bc:	0212      	lsls	r2, r2, #8
 80041be:	619a      	str	r2, [r3, #24]
	TEMP1_CS(1);
 80041c0:	4bcf      	ldr	r3, [pc, #828]	@ (8004500 <main+0x3c8>)
 80041c2:	2280      	movs	r2, #128	@ 0x80
 80041c4:	0112      	lsls	r2, r2, #4
 80041c6:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 80041c8:	4bcd      	ldr	r3, [pc, #820]	@ (8004500 <main+0x3c8>)
 80041ca:	2280      	movs	r2, #128	@ 0x80
 80041cc:	0112      	lsls	r2, r2, #4
 80041ce:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(0);
 80041d0:	4bcb      	ldr	r3, [pc, #812]	@ (8004500 <main+0x3c8>)
 80041d2:	2280      	movs	r2, #128	@ 0x80
 80041d4:	0212      	lsls	r2, r2, #8
 80041d6:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(1);
 80041d8:	4bc9      	ldr	r3, [pc, #804]	@ (8004500 <main+0x3c8>)
 80041da:	2280      	movs	r2, #128	@ 0x80
 80041dc:	0212      	lsls	r2, r2, #8
 80041de:	619a      	str	r2, [r3, #24]
	TEMP1_CS(1);
 80041e0:	4bc7      	ldr	r3, [pc, #796]	@ (8004500 <main+0x3c8>)
 80041e2:	2280      	movs	r2, #128	@ 0x80
 80041e4:	0112      	lsls	r2, r2, #4
 80041e6:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 80041e8:	4bc5      	ldr	r3, [pc, #788]	@ (8004500 <main+0x3c8>)
 80041ea:	2280      	movs	r2, #128	@ 0x80
 80041ec:	0112      	lsls	r2, r2, #4
 80041ee:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(0);
 80041f0:	4bc3      	ldr	r3, [pc, #780]	@ (8004500 <main+0x3c8>)
 80041f2:	2280      	movs	r2, #128	@ 0x80
 80041f4:	0212      	lsls	r2, r2, #8
 80041f6:	629a      	str	r2, [r3, #40]	@ 0x28
	TEMP5_CS(1);
 80041f8:	4bc1      	ldr	r3, [pc, #772]	@ (8004500 <main+0x3c8>)
 80041fa:	2280      	movs	r2, #128	@ 0x80
 80041fc:	0212      	lsls	r2, r2, #8
 80041fe:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8004200:	4bbf      	ldr	r3, [pc, #764]	@ (8004500 <main+0x3c8>)
 8004202:	2280      	movs	r2, #128	@ 0x80
 8004204:	0152      	lsls	r2, r2, #5
 8004206:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8004208:	4bbd      	ldr	r3, [pc, #756]	@ (8004500 <main+0x3c8>)
 800420a:	2280      	movs	r2, #128	@ 0x80
 800420c:	01d2      	lsls	r2, r2, #7
 800420e:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8004210:	4bbb      	ldr	r3, [pc, #748]	@ (8004500 <main+0x3c8>)
 8004212:	2280      	movs	r2, #128	@ 0x80
 8004214:	0212      	lsls	r2, r2, #8
 8004216:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8004218:	23a0      	movs	r3, #160	@ 0xa0
 800421a:	05db      	lsls	r3, r3, #23
 800421c:	2280      	movs	r2, #128	@ 0x80
 800421e:	0052      	lsls	r2, r2, #1
 8004220:	619a      	str	r2, [r3, #24]
	TEMP1_CS(0);
 8004222:	4bb7      	ldr	r3, [pc, #732]	@ (8004500 <main+0x3c8>)
 8004224:	2280      	movs	r2, #128	@ 0x80
 8004226:	0112      	lsls	r2, r2, #4
 8004228:	629a      	str	r2, [r3, #40]	@ 0x28

	adc_raw[0] = 0;
 800422a:	4bb6      	ldr	r3, [pc, #728]	@ (8004504 <main+0x3cc>)
 800422c:	2200      	movs	r2, #0
 800422e:	801a      	strh	r2, [r3, #0]
	adc_raw[1] = 0;
 8004230:	4bb4      	ldr	r3, [pc, #720]	@ (8004504 <main+0x3cc>)
 8004232:	2200      	movs	r2, #0
 8004234:	805a      	strh	r2, [r3, #2]
	adc_raw[2] = 0;
 8004236:	4bb3      	ldr	r3, [pc, #716]	@ (8004504 <main+0x3cc>)
 8004238:	2200      	movs	r2, #0
 800423a:	809a      	strh	r2, [r3, #4]
//	HAL_ADC_Start_DMA(&hadc1, adc_raw, 3); /*A*/
	/* GSM stuff */
	char content_string[200] = "";
 800423c:	2330      	movs	r3, #48	@ 0x30
 800423e:	18fb      	adds	r3, r7, r3
 8004240:	0018      	movs	r0, r3
 8004242:	23c8      	movs	r3, #200	@ 0xc8
 8004244:	001a      	movs	r2, r3
 8004246:	2100      	movs	r1, #0
 8004248:	f008 fa08 	bl	800c65c <memset>
	char api_key[20] = "F1LOAYMJF47UO4LD"; /* key for testing */
 800424c:	231c      	movs	r3, #28
 800424e:	18f9      	adds	r1, r7, r3
 8004250:	4aad      	ldr	r2, [pc, #692]	@ (8004508 <main+0x3d0>)
 8004252:	000b      	movs	r3, r1
 8004254:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004256:	c331      	stmia	r3!, {r0, r4, r5}
 8004258:	6810      	ldr	r0, [r2, #0]
 800425a:	6018      	str	r0, [r3, #0]
 800425c:	7912      	ldrb	r2, [r2, #4]
 800425e:	711a      	strb	r2, [r3, #4]
 8004260:	2311      	movs	r3, #17
 8004262:	18cb      	adds	r3, r1, r3
 8004264:	2203      	movs	r2, #3
 8004266:	2100      	movs	r1, #0
 8004268:	0018      	movs	r0, r3
 800426a:	f008 f9f7 	bl	800c65c <memset>
	// "01VH0OM4JU4KG9KN"; // API key
	/* GSM powerkey dance */
	/* TODO implement this using timer interrupts */
	HAL_GPIO_WritePin(MCU_RESET_GPIO_Port,MCU_RESET_Pin,GPIO_PIN_RESET);
 800426e:	23a0      	movs	r3, #160	@ 0xa0
 8004270:	05db      	lsls	r3, r3, #23
 8004272:	2200      	movs	r2, #0
 8004274:	2140      	movs	r1, #64	@ 0x40
 8004276:	0018      	movs	r0, r3
 8004278:	f003 f933 	bl	80074e2 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800427c:	23fa      	movs	r3, #250	@ 0xfa
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	0018      	movs	r0, r3
 8004282:	f001 fda9 	bl	8005dd8 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_RESET_GPIO_Port,MCU_RESET_Pin,GPIO_PIN_SET);
 8004286:	23a0      	movs	r3, #160	@ 0xa0
 8004288:	05db      	lsls	r3, r3, #23
 800428a:	2201      	movs	r2, #1
 800428c:	2140      	movs	r1, #64	@ 0x40
 800428e:	0018      	movs	r0, r3
 8004290:	f003 f927 	bl	80074e2 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8004294:	20c8      	movs	r0, #200	@ 0xc8
 8004296:	f001 fd9f 	bl	8005dd8 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_SET);
 800429a:	23a0      	movs	r3, #160	@ 0xa0
 800429c:	05db      	lsls	r3, r3, #23
 800429e:	2201      	movs	r2, #1
 80042a0:	2180      	movs	r1, #128	@ 0x80
 80042a2:	0018      	movs	r0, r3
 80042a4:	f003 f91d 	bl	80074e2 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80042a8:	20c8      	movs	r0, #200	@ 0xc8
 80042aa:	f001 fd95 	bl	8005dd8 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_RESET);
 80042ae:	23a0      	movs	r3, #160	@ 0xa0
 80042b0:	05db      	lsls	r3, r3, #23
 80042b2:	2200      	movs	r2, #0
 80042b4:	2180      	movs	r1, #128	@ 0x80
 80042b6:	0018      	movs	r0, r3
 80042b8:	f003 f913 	bl	80074e2 <HAL_GPIO_WritePin>
	HAL_Delay(700);
 80042bc:	23af      	movs	r3, #175	@ 0xaf
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	0018      	movs	r0, r3
 80042c2:	f001 fd89 	bl	8005dd8 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_SET);
 80042c6:	23a0      	movs	r3, #160	@ 0xa0
 80042c8:	05db      	lsls	r3, r3, #23
 80042ca:	2201      	movs	r2, #1
 80042cc:	2180      	movs	r1, #128	@ 0x80
 80042ce:	0018      	movs	r0, r3
 80042d0:	f003 f907 	bl	80074e2 <HAL_GPIO_WritePin>
	HAL_Delay(15000);
 80042d4:	4b8d      	ldr	r3, [pc, #564]	@ (800450c <main+0x3d4>)
 80042d6:	0018      	movs	r0, r3
 80042d8:	f001 fd7e 	bl	8005dd8 <HAL_Delay>
	uint8_t prev_idx = 1;
 80042dc:	1d3b      	adds	r3, r7, #4
 80042de:	33ff      	adds	r3, #255	@ 0xff
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]

	/* key variables */
	uint8_t active_sensor_idx = 0;
 80042e4:	1cfb      	adds	r3, r7, #3
 80042e6:	33ff      	adds	r3, #255	@ 0xff
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
	uint16_t set_point = 400; /* Cut the TRIAC off above 400 */
 80042ec:	1c7b      	adds	r3, r7, #1
 80042ee:	33ff      	adds	r3, #255	@ 0xff
 80042f0:	22c8      	movs	r2, #200	@ 0xc8
 80042f2:	0052      	lsls	r2, r2, #1
 80042f4:	801a      	strh	r2, [r3, #0]

	/* Initialization */
	HAL_TIM_Base_Start_IT(&htim16);
 80042f6:	4b86      	ldr	r3, [pc, #536]	@ (8004510 <main+0x3d8>)
 80042f8:	0018      	movs	r0, r3
 80042fa:	f005 ff01 	bl	800a100 <HAL_TIM_Base_Start_IT>
	triac_timer_flag = 0;
 80042fe:	4b85      	ldr	r3, [pc, #532]	@ (8004514 <main+0x3dc>)
 8004300:	2200      	movs	r2, #0
 8004302:	701a      	strb	r2, [r3, #0]
	gsm_cmd_step = -1;
 8004304:	4b84      	ldr	r3, [pc, #528]	@ (8004518 <main+0x3e0>)
 8004306:	22ff      	movs	r2, #255	@ 0xff
 8004308:	701a      	strb	r2, [r3, #0]

	/* ds3231 init */
	DateTime ti;
	DateTime time = {0};
 800430a:	4b84      	ldr	r3, [pc, #528]	@ (800451c <main+0x3e4>)
 800430c:	2488      	movs	r4, #136	@ 0x88
 800430e:	0064      	lsls	r4, r4, #1
 8004310:	191b      	adds	r3, r3, r4
 8004312:	19db      	adds	r3, r3, r7
 8004314:	0018      	movs	r0, r3
 8004316:	2307      	movs	r3, #7
 8004318:	001a      	movs	r2, r3
 800431a:	2100      	movs	r1, #0
 800431c:	f008 f99e 	bl	800c65c <memset>
	ti.day = 14;
 8004320:	2114      	movs	r1, #20
 8004322:	187b      	adds	r3, r7, r1
 8004324:	220e      	movs	r2, #14
 8004326:	701a      	strb	r2, [r3, #0]
	ti.month = 11;
 8004328:	187b      	adds	r3, r7, r1
 800432a:	220b      	movs	r2, #11
 800432c:	705a      	strb	r2, [r3, #1]
	ti.year = 24;
 800432e:	187b      	adds	r3, r7, r1
 8004330:	2218      	movs	r2, #24
 8004332:	70da      	strb	r2, [r3, #3]
	ti.dow = 2;
 8004334:	187b      	adds	r3, r7, r1
 8004336:	2202      	movs	r2, #2
 8004338:	709a      	strb	r2, [r3, #2]
	ti.hr = 21;
 800433a:	187b      	adds	r3, r7, r1
 800433c:	2215      	movs	r2, #21
 800433e:	711a      	strb	r2, [r3, #4]
	ti.min = 14;
 8004340:	187b      	adds	r3, r7, r1
 8004342:	220e      	movs	r2, #14
 8004344:	715a      	strb	r2, [r3, #5]
	ti.sec = 0;
 8004346:	187b      	adds	r3, r7, r1
 8004348:	2200      	movs	r2, #0
 800434a:	719a      	strb	r2, [r3, #6]
	uint8_t data[] = { 2, 3 };
 800434c:	4b74      	ldr	r3, [pc, #464]	@ (8004520 <main+0x3e8>)
 800434e:	191b      	adds	r3, r3, r4
 8004350:	19db      	adds	r3, r3, r7
 8004352:	4a74      	ldr	r2, [pc, #464]	@ (8004524 <main+0x3ec>)
 8004354:	801a      	strh	r2, [r3, #0]
	uint8_t rdata[2] = {};
 8004356:	4b74      	ldr	r3, [pc, #464]	@ (8004528 <main+0x3f0>)
 8004358:	191b      	adds	r3, r3, r4
 800435a:	19db      	adds	r3, r3, r7
 800435c:	2200      	movs	r2, #0
 800435e:	801a      	strh	r2, [r3, #0]
//	ds3231_settime(&ti);
//	ds3231_gettime(&time);
//
//	ds3231_clearalarm1();
//	//DS3231_SetAlarm1(ALARM_MODE_ONCE_PER_SECOND, 0, 0, 0, 0);
	ds3231_clearflagalarm1(); /* clear alarm flag */
 8004360:	f7ff fadc 	bl	800391c <ds3231_clearflagalarm1>
	ds3231_setalarm1(ALARM_MODE_SEC_MATCHED, 0, 0, 0, 10);
 8004364:	230a      	movs	r3, #10
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	2300      	movs	r3, #0
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	2003      	movs	r0, #3
 8004370:	f7ff f9ea 	bl	8003748 <ds3231_setalarm1>
//	alarmcheck();
	/*A*/
	float prms = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	2286      	movs	r2, #134	@ 0x86
 8004378:	0052      	lsls	r2, r2, #1
 800437a:	18ba      	adds	r2, r7, r2
 800437c:	6013      	str	r3, [r2, #0]
	uint32_t sample = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	2284      	movs	r2, #132	@ 0x84
 8004382:	0052      	lsls	r2, r2, #1
 8004384:	18ba      	adds	r2, r7, r2
 8004386:	6013      	str	r3, [r2, #0]
//				TRIAC2_SET(0);
//				triac_time = 0;
//			}
//		}

		if(kwh_update_flag == 1) {
 8004388:	4b68      	ldr	r3, [pc, #416]	@ (800452c <main+0x3f4>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d155      	bne.n	800443c <main+0x304>
////			pavg_final /= LSBpermW; // Convert from codes to mW
//			//Correct for the voltage divider: (RISO1 + RISO2 + RSENSE) / RSENSE
//			//Or:  (RISO1 + RISO2 + RISO3 + RISO4 + RSENSE) / RSENSE
//			pavg_final /= ACS37800_R_RATIO;
//			pavg_final /= 1000; // Convert from mW to W
			pavg_final = prms/(float)sample;
 8004390:	2484      	movs	r4, #132	@ 0x84
 8004392:	0064      	lsls	r4, r4, #1
 8004394:	193b      	adds	r3, r7, r4
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	f7fd f8c2 	bl	8001520 <__aeabi_ui2f>
 800439c:	1c03      	adds	r3, r0, #0
 800439e:	1c19      	adds	r1, r3, #0
 80043a0:	2586      	movs	r5, #134	@ 0x86
 80043a2:	006d      	lsls	r5, r5, #1
 80043a4:	197b      	adds	r3, r7, r5
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	f7fc fabe 	bl	8000928 <__aeabi_fdiv>
 80043ac:	1c03      	adds	r3, r0, #0
 80043ae:	1c1a      	adds	r2, r3, #0
 80043b0:	4b5f      	ldr	r3, [pc, #380]	@ (8004530 <main+0x3f8>)
 80043b2:	601a      	str	r2, [r3, #0]

			uint32_t kwh_save = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	603b      	str	r3, [r7, #0]
			EEPROM_Read(0, 0, &kwh_save, 4);
 80043b8:	003a      	movs	r2, r7
 80043ba:	2304      	movs	r3, #4
 80043bc:	2100      	movs	r1, #0
 80043be:	2000      	movs	r0, #0
 80043c0:	f7ff fe34 	bl	800402c <EEPROM_Read>
			kwh = kwh_save / (float)1000;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	0018      	movs	r0, r3
 80043c8:	f7fd f8aa 	bl	8001520 <__aeabi_ui2f>
 80043cc:	1c03      	adds	r3, r0, #0
 80043ce:	4959      	ldr	r1, [pc, #356]	@ (8004534 <main+0x3fc>)
 80043d0:	1c18      	adds	r0, r3, #0
 80043d2:	f7fc faa9 	bl	8000928 <__aeabi_fdiv>
 80043d6:	1c03      	adds	r3, r0, #0
 80043d8:	1c1a      	adds	r2, r3, #0
 80043da:	4b57      	ldr	r3, [pc, #348]	@ (8004538 <main+0x400>)
 80043dc:	601a      	str	r2, [r3, #0]
			kwh = kwh + (pavg_final/(float)(1000*60));
 80043de:	4b54      	ldr	r3, [pc, #336]	@ (8004530 <main+0x3f8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4956      	ldr	r1, [pc, #344]	@ (800453c <main+0x404>)
 80043e4:	1c18      	adds	r0, r3, #0
 80043e6:	f7fc fa9f 	bl	8000928 <__aeabi_fdiv>
 80043ea:	1c03      	adds	r3, r0, #0
 80043ec:	1c1a      	adds	r2, r3, #0
 80043ee:	4b52      	ldr	r3, [pc, #328]	@ (8004538 <main+0x400>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	1c19      	adds	r1, r3, #0
 80043f4:	1c10      	adds	r0, r2, #0
 80043f6:	f7fc f8a5 	bl	8000544 <__aeabi_fadd>
 80043fa:	1c03      	adds	r3, r0, #0
 80043fc:	1c1a      	adds	r2, r3, #0
 80043fe:	4b4e      	ldr	r3, [pc, #312]	@ (8004538 <main+0x400>)
 8004400:	601a      	str	r2, [r3, #0]
			kwh_save = kwh * 1000;
 8004402:	4b4d      	ldr	r3, [pc, #308]	@ (8004538 <main+0x400>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	494b      	ldr	r1, [pc, #300]	@ (8004534 <main+0x3fc>)
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fc fc5b 	bl	8000cc4 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	1c18      	adds	r0, r3, #0
 8004412:	f7fc f87f 	bl	8000514 <__aeabi_f2uiz>
 8004416:	0003      	movs	r3, r0
 8004418:	603b      	str	r3, [r7, #0]
			EEPROM_Write(0, 0, &kwh_save, 4);
 800441a:	003a      	movs	r2, r7
 800441c:	2304      	movs	r3, #4
 800441e:	2100      	movs	r1, #0
 8004420:	2000      	movs	r0, #0
 8004422:	f7ff fd75 	bl	8003f10 <EEPROM_Write>
			sample = 0;
 8004426:	2300      	movs	r3, #0
 8004428:	193a      	adds	r2, r7, r4
 800442a:	6013      	str	r3, [r2, #0]
			prms = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	197a      	adds	r2, r7, r5
 8004430:	6013      	str	r3, [r2, #0]
			ds3231_clearflagalarm1(); /* clear alarm flag */
 8004432:	f7ff fa73 	bl	800391c <ds3231_clearflagalarm1>
			kwh_update_flag = 0;
 8004436:	4b3d      	ldr	r3, [pc, #244]	@ (800452c <main+0x3f4>)
 8004438:	2200      	movs	r2, #0
 800443a:	701a      	strb	r2, [r3, #0]
		}
		if(vi_update_flag == 1) {
 800443c:	4b40      	ldr	r3, [pc, #256]	@ (8004540 <main+0x408>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d000      	beq.n	8004446 <main+0x30e>
 8004444:	e24d      	b.n	80048e2 <main+0x7aa>
			HAL_I2C_Mem_Read(&hi2c1, (ACS37800_I2C_ADDR << 1), ACS37800_REG_VIRMS, I2C_MEMADD_SIZE_8BIT, acs37800_vi_buffer, 4, 100);
 8004446:	483f      	ldr	r0, [pc, #252]	@ (8004544 <main+0x40c>)
 8004448:	2364      	movs	r3, #100	@ 0x64
 800444a:	9302      	str	r3, [sp, #8]
 800444c:	2304      	movs	r3, #4
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	4b3d      	ldr	r3, [pc, #244]	@ (8004548 <main+0x410>)
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	2301      	movs	r3, #1
 8004456:	2220      	movs	r2, #32
 8004458:	21fe      	movs	r1, #254	@ 0xfe
 800445a:	f003 fc99 	bl	8007d90 <HAL_I2C_Mem_Read>
			uint16_t vrms_raw = (acs37800_vi_buffer[1] << 8) | acs37800_vi_buffer[0];
 800445e:	4b3a      	ldr	r3, [pc, #232]	@ (8004548 <main+0x410>)
 8004460:	785b      	ldrb	r3, [r3, #1]
 8004462:	b21b      	sxth	r3, r3
 8004464:	021b      	lsls	r3, r3, #8
 8004466:	b21a      	sxth	r2, r3
 8004468:	4b37      	ldr	r3, [pc, #220]	@ (8004548 <main+0x410>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b21b      	sxth	r3, r3
 800446e:	4313      	orrs	r3, r2
 8004470:	b21a      	sxth	r2, r3
 8004472:	21fe      	movs	r1, #254	@ 0xfe
 8004474:	187b      	adds	r3, r7, r1
 8004476:	801a      	strh	r2, [r3, #0]
			vrms_final = vrms_raw / (float)55000;
 8004478:	187b      	adds	r3, r7, r1
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	0018      	movs	r0, r3
 800447e:	f7fc ffff 	bl	8001480 <__aeabi_i2f>
 8004482:	1c03      	adds	r3, r0, #0
 8004484:	4931      	ldr	r1, [pc, #196]	@ (800454c <main+0x414>)
 8004486:	1c18      	adds	r0, r3, #0
 8004488:	f7fc fa4e 	bl	8000928 <__aeabi_fdiv>
 800448c:	1c03      	adds	r3, r0, #0
 800448e:	1c1a      	adds	r2, r3, #0
 8004490:	4b2f      	ldr	r3, [pc, #188]	@ (8004550 <main+0x418>)
 8004492:	601a      	str	r2, [r3, #0]
			vrms_final = vrms_final * 280;
 8004494:	4b2e      	ldr	r3, [pc, #184]	@ (8004550 <main+0x418>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	492e      	ldr	r1, [pc, #184]	@ (8004554 <main+0x41c>)
 800449a:	1c18      	adds	r0, r3, #0
 800449c:	f7fc fc12 	bl	8000cc4 <__aeabi_fmul>
 80044a0:	1c03      	adds	r3, r0, #0
 80044a2:	1c1a      	adds	r2, r3, #0
 80044a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004550 <main+0x418>)
 80044a6:	601a      	str	r2, [r3, #0]
			if(vrms_final > 250) {
 80044a8:	4b29      	ldr	r3, [pc, #164]	@ (8004550 <main+0x418>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	492a      	ldr	r1, [pc, #168]	@ (8004558 <main+0x420>)
 80044ae:	1c18      	adds	r0, r3, #0
 80044b0:	f7fc f81c 	bl	80004ec <__aeabi_fcmpgt>
 80044b4:	1e03      	subs	r3, r0, #0
 80044b6:	d059      	beq.n	800456c <main+0x434>
				vrms_final = 240 + ((vrms_final - 246)/0.4);
 80044b8:	4b25      	ldr	r3, [pc, #148]	@ (8004550 <main+0x418>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4927      	ldr	r1, [pc, #156]	@ (800455c <main+0x424>)
 80044be:	1c18      	adds	r0, r3, #0
 80044c0:	f7fc fd5a 	bl	8000f78 <__aeabi_fsub>
 80044c4:	1c03      	adds	r3, r0, #0
 80044c6:	1c18      	adds	r0, r3, #0
 80044c8:	f7ff f810 	bl	80034ec <__aeabi_f2d>
 80044cc:	4a24      	ldr	r2, [pc, #144]	@ (8004560 <main+0x428>)
 80044ce:	4b25      	ldr	r3, [pc, #148]	@ (8004564 <main+0x42c>)
 80044d0:	f7fd fc32 	bl	8001d38 <__aeabi_ddiv>
 80044d4:	0002      	movs	r2, r0
 80044d6:	000b      	movs	r3, r1
 80044d8:	0010      	movs	r0, r2
 80044da:	0019      	movs	r1, r3
 80044dc:	2200      	movs	r2, #0
 80044de:	4b22      	ldr	r3, [pc, #136]	@ (8004568 <main+0x430>)
 80044e0:	f7fd f864 	bl	80015ac <__aeabi_dadd>
 80044e4:	0002      	movs	r2, r0
 80044e6:	000b      	movs	r3, r1
 80044e8:	0010      	movs	r0, r2
 80044ea:	0019      	movs	r1, r3
 80044ec:	f7ff f846 	bl	800357c <__aeabi_d2f>
 80044f0:	1c02      	adds	r2, r0, #0
 80044f2:	4b17      	ldr	r3, [pc, #92]	@ (8004550 <main+0x418>)
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e1a4      	b.n	8004842 <main+0x70a>
 80044f8:	50001400 	.word	0x50001400
 80044fc:	50000800 	.word	0x50000800
 8004500:	50000400 	.word	0x50000400
 8004504:	2000054c 	.word	0x2000054c
 8004508:	0800eaec 	.word	0x0800eaec
 800450c:	00003a98 	.word	0x00003a98
 8004510:	20000388 	.word	0x20000388
 8004514:	20000559 	.word	0x20000559
 8004518:	2000057c 	.word	0x2000057c
 800451c:	fffffefc 	.word	0xfffffefc
 8004520:	fffffef8 	.word	0xfffffef8
 8004524:	00000302 	.word	0x00000302
 8004528:	fffffef4 	.word	0xfffffef4
 800452c:	20000566 	.word	0x20000566
 8004530:	2000020c 	.word	0x2000020c
 8004534:	447a0000 	.word	0x447a0000
 8004538:	20000554 	.word	0x20000554
 800453c:	476a6000 	.word	0x476a6000
 8004540:	20000567 	.word	0x20000567
 8004544:	200002d0 	.word	0x200002d0
 8004548:	20000200 	.word	0x20000200
 800454c:	4756d800 	.word	0x4756d800
 8004550:	20000204 	.word	0x20000204
 8004554:	438c0000 	.word	0x438c0000
 8004558:	437a0000 	.word	0x437a0000
 800455c:	43760000 	.word	0x43760000
 8004560:	9999999a 	.word	0x9999999a
 8004564:	3fd99999 	.word	0x3fd99999
 8004568:	406e0000 	.word	0x406e0000
//				[0.3, 0.7, 0.8, 0.7, 0.6, 0.5, 0.4]
			} else if(vrms_final <= 250 && vrms_final > 246) {
 800456c:	4b8f      	ldr	r3, [pc, #572]	@ (80047ac <main+0x674>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	498f      	ldr	r1, [pc, #572]	@ (80047b0 <main+0x678>)
 8004572:	1c18      	adds	r0, r3, #0
 8004574:	f7fb ffb0 	bl	80004d8 <__aeabi_fcmple>
 8004578:	1e03      	subs	r3, r0, #0
 800457a:	d027      	beq.n	80045cc <main+0x494>
 800457c:	4b8b      	ldr	r3, [pc, #556]	@ (80047ac <main+0x674>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	498c      	ldr	r1, [pc, #560]	@ (80047b4 <main+0x67c>)
 8004582:	1c18      	adds	r0, r3, #0
 8004584:	f7fb ffb2 	bl	80004ec <__aeabi_fcmpgt>
 8004588:	1e03      	subs	r3, r0, #0
 800458a:	d01f      	beq.n	80045cc <main+0x494>
				vrms_final = 240 + ((vrms_final - 246)/0.4);
 800458c:	4b87      	ldr	r3, [pc, #540]	@ (80047ac <main+0x674>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4988      	ldr	r1, [pc, #544]	@ (80047b4 <main+0x67c>)
 8004592:	1c18      	adds	r0, r3, #0
 8004594:	f7fc fcf0 	bl	8000f78 <__aeabi_fsub>
 8004598:	1c03      	adds	r3, r0, #0
 800459a:	1c18      	adds	r0, r3, #0
 800459c:	f7fe ffa6 	bl	80034ec <__aeabi_f2d>
 80045a0:	4a85      	ldr	r2, [pc, #532]	@ (80047b8 <main+0x680>)
 80045a2:	4b86      	ldr	r3, [pc, #536]	@ (80047bc <main+0x684>)
 80045a4:	f7fd fbc8 	bl	8001d38 <__aeabi_ddiv>
 80045a8:	0002      	movs	r2, r0
 80045aa:	000b      	movs	r3, r1
 80045ac:	0010      	movs	r0, r2
 80045ae:	0019      	movs	r1, r3
 80045b0:	2200      	movs	r2, #0
 80045b2:	4b83      	ldr	r3, [pc, #524]	@ (80047c0 <main+0x688>)
 80045b4:	f7fc fffa 	bl	80015ac <__aeabi_dadd>
 80045b8:	0002      	movs	r2, r0
 80045ba:	000b      	movs	r3, r1
 80045bc:	0010      	movs	r0, r2
 80045be:	0019      	movs	r1, r3
 80045c0:	f7fe ffdc 	bl	800357c <__aeabi_d2f>
 80045c4:	1c02      	adds	r2, r0, #0
 80045c6:	4b79      	ldr	r3, [pc, #484]	@ (80047ac <main+0x674>)
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	e13a      	b.n	8004842 <main+0x70a>
			} else if(vrms_final <= 246 && vrms_final > 241) {
 80045cc:	4b77      	ldr	r3, [pc, #476]	@ (80047ac <main+0x674>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4978      	ldr	r1, [pc, #480]	@ (80047b4 <main+0x67c>)
 80045d2:	1c18      	adds	r0, r3, #0
 80045d4:	f7fb ff80 	bl	80004d8 <__aeabi_fcmple>
 80045d8:	1e03      	subs	r3, r0, #0
 80045da:	d027      	beq.n	800462c <main+0x4f4>
 80045dc:	4b73      	ldr	r3, [pc, #460]	@ (80047ac <main+0x674>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4978      	ldr	r1, [pc, #480]	@ (80047c4 <main+0x68c>)
 80045e2:	1c18      	adds	r0, r3, #0
 80045e4:	f7fb ff82 	bl	80004ec <__aeabi_fcmpgt>
 80045e8:	1e03      	subs	r3, r0, #0
 80045ea:	d01f      	beq.n	800462c <main+0x4f4>
				vrms_final = 230 + ((vrms_final - 241)/0.5);
 80045ec:	4b6f      	ldr	r3, [pc, #444]	@ (80047ac <main+0x674>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4974      	ldr	r1, [pc, #464]	@ (80047c4 <main+0x68c>)
 80045f2:	1c18      	adds	r0, r3, #0
 80045f4:	f7fc fcc0 	bl	8000f78 <__aeabi_fsub>
 80045f8:	1c03      	adds	r3, r0, #0
 80045fa:	1c18      	adds	r0, r3, #0
 80045fc:	f7fe ff76 	bl	80034ec <__aeabi_f2d>
 8004600:	2200      	movs	r2, #0
 8004602:	4b71      	ldr	r3, [pc, #452]	@ (80047c8 <main+0x690>)
 8004604:	f7fd fb98 	bl	8001d38 <__aeabi_ddiv>
 8004608:	0002      	movs	r2, r0
 800460a:	000b      	movs	r3, r1
 800460c:	0010      	movs	r0, r2
 800460e:	0019      	movs	r1, r3
 8004610:	2200      	movs	r2, #0
 8004612:	4b6e      	ldr	r3, [pc, #440]	@ (80047cc <main+0x694>)
 8004614:	f7fc ffca 	bl	80015ac <__aeabi_dadd>
 8004618:	0002      	movs	r2, r0
 800461a:	000b      	movs	r3, r1
 800461c:	0010      	movs	r0, r2
 800461e:	0019      	movs	r1, r3
 8004620:	f7fe ffac 	bl	800357c <__aeabi_d2f>
 8004624:	1c02      	adds	r2, r0, #0
 8004626:	4b61      	ldr	r3, [pc, #388]	@ (80047ac <main+0x674>)
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	e10a      	b.n	8004842 <main+0x70a>
			} else if(vrms_final <= 235 && vrms_final > 241) {
 800462c:	4b5f      	ldr	r3, [pc, #380]	@ (80047ac <main+0x674>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4967      	ldr	r1, [pc, #412]	@ (80047d0 <main+0x698>)
 8004632:	1c18      	adds	r0, r3, #0
 8004634:	f7fb ff50 	bl	80004d8 <__aeabi_fcmple>
 8004638:	1e03      	subs	r3, r0, #0
 800463a:	d027      	beq.n	800468c <main+0x554>
 800463c:	4b5b      	ldr	r3, [pc, #364]	@ (80047ac <main+0x674>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4960      	ldr	r1, [pc, #384]	@ (80047c4 <main+0x68c>)
 8004642:	1c18      	adds	r0, r3, #0
 8004644:	f7fb ff52 	bl	80004ec <__aeabi_fcmpgt>
 8004648:	1e03      	subs	r3, r0, #0
 800464a:	d01f      	beq.n	800468c <main+0x554>
				vrms_final = 220 + ((vrms_final - 235)/0.6);
 800464c:	4b57      	ldr	r3, [pc, #348]	@ (80047ac <main+0x674>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	495f      	ldr	r1, [pc, #380]	@ (80047d0 <main+0x698>)
 8004652:	1c18      	adds	r0, r3, #0
 8004654:	f7fc fc90 	bl	8000f78 <__aeabi_fsub>
 8004658:	1c03      	adds	r3, r0, #0
 800465a:	1c18      	adds	r0, r3, #0
 800465c:	f7fe ff46 	bl	80034ec <__aeabi_f2d>
 8004660:	4a5c      	ldr	r2, [pc, #368]	@ (80047d4 <main+0x69c>)
 8004662:	4b5d      	ldr	r3, [pc, #372]	@ (80047d8 <main+0x6a0>)
 8004664:	f7fd fb68 	bl	8001d38 <__aeabi_ddiv>
 8004668:	0002      	movs	r2, r0
 800466a:	000b      	movs	r3, r1
 800466c:	0010      	movs	r0, r2
 800466e:	0019      	movs	r1, r3
 8004670:	2200      	movs	r2, #0
 8004672:	4b5a      	ldr	r3, [pc, #360]	@ (80047dc <main+0x6a4>)
 8004674:	f7fc ff9a 	bl	80015ac <__aeabi_dadd>
 8004678:	0002      	movs	r2, r0
 800467a:	000b      	movs	r3, r1
 800467c:	0010      	movs	r0, r2
 800467e:	0019      	movs	r1, r3
 8004680:	f7fe ff7c 	bl	800357c <__aeabi_d2f>
 8004684:	1c02      	adds	r2, r0, #0
 8004686:	4b49      	ldr	r3, [pc, #292]	@ (80047ac <main+0x674>)
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e0da      	b.n	8004842 <main+0x70a>
			} else if(vrms_final <= 228 && vrms_final > 235) {
 800468c:	4b47      	ldr	r3, [pc, #284]	@ (80047ac <main+0x674>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4953      	ldr	r1, [pc, #332]	@ (80047e0 <main+0x6a8>)
 8004692:	1c18      	adds	r0, r3, #0
 8004694:	f7fb ff20 	bl	80004d8 <__aeabi_fcmple>
 8004698:	1e03      	subs	r3, r0, #0
 800469a:	d027      	beq.n	80046ec <main+0x5b4>
 800469c:	4b43      	ldr	r3, [pc, #268]	@ (80047ac <main+0x674>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	494b      	ldr	r1, [pc, #300]	@ (80047d0 <main+0x698>)
 80046a2:	1c18      	adds	r0, r3, #0
 80046a4:	f7fb ff22 	bl	80004ec <__aeabi_fcmpgt>
 80046a8:	1e03      	subs	r3, r0, #0
 80046aa:	d01f      	beq.n	80046ec <main+0x5b4>
				vrms_final = 210 + ((vrms_final - 228)/0.7);
 80046ac:	4b3f      	ldr	r3, [pc, #252]	@ (80047ac <main+0x674>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	494b      	ldr	r1, [pc, #300]	@ (80047e0 <main+0x6a8>)
 80046b2:	1c18      	adds	r0, r3, #0
 80046b4:	f7fc fc60 	bl	8000f78 <__aeabi_fsub>
 80046b8:	1c03      	adds	r3, r0, #0
 80046ba:	1c18      	adds	r0, r3, #0
 80046bc:	f7fe ff16 	bl	80034ec <__aeabi_f2d>
 80046c0:	4a48      	ldr	r2, [pc, #288]	@ (80047e4 <main+0x6ac>)
 80046c2:	4b49      	ldr	r3, [pc, #292]	@ (80047e8 <main+0x6b0>)
 80046c4:	f7fd fb38 	bl	8001d38 <__aeabi_ddiv>
 80046c8:	0002      	movs	r2, r0
 80046ca:	000b      	movs	r3, r1
 80046cc:	0010      	movs	r0, r2
 80046ce:	0019      	movs	r1, r3
 80046d0:	2200      	movs	r2, #0
 80046d2:	4b46      	ldr	r3, [pc, #280]	@ (80047ec <main+0x6b4>)
 80046d4:	f7fc ff6a 	bl	80015ac <__aeabi_dadd>
 80046d8:	0002      	movs	r2, r0
 80046da:	000b      	movs	r3, r1
 80046dc:	0010      	movs	r0, r2
 80046de:	0019      	movs	r1, r3
 80046e0:	f7fe ff4c 	bl	800357c <__aeabi_d2f>
 80046e4:	1c02      	adds	r2, r0, #0
 80046e6:	4b31      	ldr	r3, [pc, #196]	@ (80047ac <main+0x674>)
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	e0aa      	b.n	8004842 <main+0x70a>
			} else if(vrms_final <= 220 && vrms_final > 228) {
 80046ec:	4b2f      	ldr	r3, [pc, #188]	@ (80047ac <main+0x674>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	493f      	ldr	r1, [pc, #252]	@ (80047f0 <main+0x6b8>)
 80046f2:	1c18      	adds	r0, r3, #0
 80046f4:	f7fb fef0 	bl	80004d8 <__aeabi_fcmple>
 80046f8:	1e03      	subs	r3, r0, #0
 80046fa:	d027      	beq.n	800474c <main+0x614>
 80046fc:	4b2b      	ldr	r3, [pc, #172]	@ (80047ac <main+0x674>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4937      	ldr	r1, [pc, #220]	@ (80047e0 <main+0x6a8>)
 8004702:	1c18      	adds	r0, r3, #0
 8004704:	f7fb fef2 	bl	80004ec <__aeabi_fcmpgt>
 8004708:	1e03      	subs	r3, r0, #0
 800470a:	d01f      	beq.n	800474c <main+0x614>
				vrms_final = 200 + ((vrms_final - 220)/0.8);
 800470c:	4b27      	ldr	r3, [pc, #156]	@ (80047ac <main+0x674>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4937      	ldr	r1, [pc, #220]	@ (80047f0 <main+0x6b8>)
 8004712:	1c18      	adds	r0, r3, #0
 8004714:	f7fc fc30 	bl	8000f78 <__aeabi_fsub>
 8004718:	1c03      	adds	r3, r0, #0
 800471a:	1c18      	adds	r0, r3, #0
 800471c:	f7fe fee6 	bl	80034ec <__aeabi_f2d>
 8004720:	4a25      	ldr	r2, [pc, #148]	@ (80047b8 <main+0x680>)
 8004722:	4b34      	ldr	r3, [pc, #208]	@ (80047f4 <main+0x6bc>)
 8004724:	f7fd fb08 	bl	8001d38 <__aeabi_ddiv>
 8004728:	0002      	movs	r2, r0
 800472a:	000b      	movs	r3, r1
 800472c:	0010      	movs	r0, r2
 800472e:	0019      	movs	r1, r3
 8004730:	2200      	movs	r2, #0
 8004732:	4b31      	ldr	r3, [pc, #196]	@ (80047f8 <main+0x6c0>)
 8004734:	f7fc ff3a 	bl	80015ac <__aeabi_dadd>
 8004738:	0002      	movs	r2, r0
 800473a:	000b      	movs	r3, r1
 800473c:	0010      	movs	r0, r2
 800473e:	0019      	movs	r1, r3
 8004740:	f7fe ff1c 	bl	800357c <__aeabi_d2f>
 8004744:	1c02      	adds	r2, r0, #0
 8004746:	4b19      	ldr	r3, [pc, #100]	@ (80047ac <main+0x674>)
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e07a      	b.n	8004842 <main+0x70a>
			} else if(vrms_final <= 213 && vrms_final > 220) {
 800474c:	4b17      	ldr	r3, [pc, #92]	@ (80047ac <main+0x674>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	492a      	ldr	r1, [pc, #168]	@ (80047fc <main+0x6c4>)
 8004752:	1c18      	adds	r0, r3, #0
 8004754:	f7fb fec0 	bl	80004d8 <__aeabi_fcmple>
 8004758:	1e03      	subs	r3, r0, #0
 800475a:	d053      	beq.n	8004804 <main+0x6cc>
 800475c:	4b13      	ldr	r3, [pc, #76]	@ (80047ac <main+0x674>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4923      	ldr	r1, [pc, #140]	@ (80047f0 <main+0x6b8>)
 8004762:	1c18      	adds	r0, r3, #0
 8004764:	f7fb fec2 	bl	80004ec <__aeabi_fcmpgt>
 8004768:	1e03      	subs	r3, r0, #0
 800476a:	d04b      	beq.n	8004804 <main+0x6cc>
				vrms_final = 190 + ((vrms_final - 220)/0.7);
 800476c:	4b0f      	ldr	r3, [pc, #60]	@ (80047ac <main+0x674>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	491f      	ldr	r1, [pc, #124]	@ (80047f0 <main+0x6b8>)
 8004772:	1c18      	adds	r0, r3, #0
 8004774:	f7fc fc00 	bl	8000f78 <__aeabi_fsub>
 8004778:	1c03      	adds	r3, r0, #0
 800477a:	1c18      	adds	r0, r3, #0
 800477c:	f7fe feb6 	bl	80034ec <__aeabi_f2d>
 8004780:	4a18      	ldr	r2, [pc, #96]	@ (80047e4 <main+0x6ac>)
 8004782:	4b19      	ldr	r3, [pc, #100]	@ (80047e8 <main+0x6b0>)
 8004784:	f7fd fad8 	bl	8001d38 <__aeabi_ddiv>
 8004788:	0002      	movs	r2, r0
 800478a:	000b      	movs	r3, r1
 800478c:	0010      	movs	r0, r2
 800478e:	0019      	movs	r1, r3
 8004790:	2200      	movs	r2, #0
 8004792:	4b1b      	ldr	r3, [pc, #108]	@ (8004800 <main+0x6c8>)
 8004794:	f7fc ff0a 	bl	80015ac <__aeabi_dadd>
 8004798:	0002      	movs	r2, r0
 800479a:	000b      	movs	r3, r1
 800479c:	0010      	movs	r0, r2
 800479e:	0019      	movs	r1, r3
 80047a0:	f7fe feec 	bl	800357c <__aeabi_d2f>
 80047a4:	1c02      	adds	r2, r0, #0
 80047a6:	4b01      	ldr	r3, [pc, #4]	@ (80047ac <main+0x674>)
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	e04a      	b.n	8004842 <main+0x70a>
 80047ac:	20000204 	.word	0x20000204
 80047b0:	437a0000 	.word	0x437a0000
 80047b4:	43760000 	.word	0x43760000
 80047b8:	9999999a 	.word	0x9999999a
 80047bc:	3fd99999 	.word	0x3fd99999
 80047c0:	406e0000 	.word	0x406e0000
 80047c4:	43710000 	.word	0x43710000
 80047c8:	3fe00000 	.word	0x3fe00000
 80047cc:	406cc000 	.word	0x406cc000
 80047d0:	436b0000 	.word	0x436b0000
 80047d4:	33333333 	.word	0x33333333
 80047d8:	3fe33333 	.word	0x3fe33333
 80047dc:	406b8000 	.word	0x406b8000
 80047e0:	43640000 	.word	0x43640000
 80047e4:	66666666 	.word	0x66666666
 80047e8:	3fe66666 	.word	0x3fe66666
 80047ec:	406a4000 	.word	0x406a4000
 80047f0:	435c0000 	.word	0x435c0000
 80047f4:	3fe99999 	.word	0x3fe99999
 80047f8:	40690000 	.word	0x40690000
 80047fc:	43550000 	.word	0x43550000
 8004800:	4067c000 	.word	0x4067c000
			} else {
				vrms_final = 180 + ((vrms_final - 210)/0.4);
 8004804:	4bdc      	ldr	r3, [pc, #880]	@ (8004b78 <main+0xa40>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	49dc      	ldr	r1, [pc, #880]	@ (8004b7c <main+0xa44>)
 800480a:	1c18      	adds	r0, r3, #0
 800480c:	f7fc fbb4 	bl	8000f78 <__aeabi_fsub>
 8004810:	1c03      	adds	r3, r0, #0
 8004812:	1c18      	adds	r0, r3, #0
 8004814:	f7fe fe6a 	bl	80034ec <__aeabi_f2d>
 8004818:	4ad9      	ldr	r2, [pc, #868]	@ (8004b80 <main+0xa48>)
 800481a:	4bda      	ldr	r3, [pc, #872]	@ (8004b84 <main+0xa4c>)
 800481c:	f7fd fa8c 	bl	8001d38 <__aeabi_ddiv>
 8004820:	0002      	movs	r2, r0
 8004822:	000b      	movs	r3, r1
 8004824:	0010      	movs	r0, r2
 8004826:	0019      	movs	r1, r3
 8004828:	2200      	movs	r2, #0
 800482a:	4bd7      	ldr	r3, [pc, #860]	@ (8004b88 <main+0xa50>)
 800482c:	f7fc febe 	bl	80015ac <__aeabi_dadd>
 8004830:	0002      	movs	r2, r0
 8004832:	000b      	movs	r3, r1
 8004834:	0010      	movs	r0, r2
 8004836:	0019      	movs	r1, r3
 8004838:	f7fe fea0 	bl	800357c <__aeabi_d2f>
 800483c:	1c02      	adds	r2, r0, #0
 800483e:	4bce      	ldr	r3, [pc, #824]	@ (8004b78 <main+0xa40>)
 8004840:	601a      	str	r2, [r3, #0]
			}
			uint16_t irms_raw = (acs37800_vi_buffer[3] << 8) | acs37800_vi_buffer[2];
 8004842:	4bd2      	ldr	r3, [pc, #840]	@ (8004b8c <main+0xa54>)
 8004844:	78db      	ldrb	r3, [r3, #3]
 8004846:	b21b      	sxth	r3, r3
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	b21a      	sxth	r2, r3
 800484c:	4bcf      	ldr	r3, [pc, #828]	@ (8004b8c <main+0xa54>)
 800484e:	789b      	ldrb	r3, [r3, #2]
 8004850:	b21b      	sxth	r3, r3
 8004852:	4313      	orrs	r3, r2
 8004854:	b21a      	sxth	r2, r3
 8004856:	21fc      	movs	r1, #252	@ 0xfc
 8004858:	187b      	adds	r3, r7, r1
 800485a:	801a      	strh	r2, [r3, #0]
			irms_final = irms_raw / (float)55000;
 800485c:	187b      	adds	r3, r7, r1
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	0018      	movs	r0, r3
 8004862:	f7fc fe0d 	bl	8001480 <__aeabi_i2f>
 8004866:	1c03      	adds	r3, r0, #0
 8004868:	49c9      	ldr	r1, [pc, #804]	@ (8004b90 <main+0xa58>)
 800486a:	1c18      	adds	r0, r3, #0
 800486c:	f7fc f85c 	bl	8000928 <__aeabi_fdiv>
 8004870:	1c03      	adds	r3, r0, #0
 8004872:	1c1a      	adds	r2, r3, #0
 8004874:	4bc7      	ldr	r3, [pc, #796]	@ (8004b94 <main+0xa5c>)
 8004876:	601a      	str	r2, [r3, #0]
			irms_final = irms_final * ACS37800_CURR_SENS_RANGE;
 8004878:	4bc6      	ldr	r3, [pc, #792]	@ (8004b94 <main+0xa5c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	49c6      	ldr	r1, [pc, #792]	@ (8004b98 <main+0xa60>)
 800487e:	1c18      	adds	r0, r3, #0
 8004880:	f7fc fa20 	bl	8000cc4 <__aeabi_fmul>
 8004884:	1c03      	adds	r3, r0, #0
 8004886:	1c1a      	adds	r2, r3, #0
 8004888:	4bc2      	ldr	r3, [pc, #776]	@ (8004b94 <main+0xa5c>)
 800488a:	601a      	str	r2, [r3, #0]
			prms += (vrms_final * irms_final);
 800488c:	4bba      	ldr	r3, [pc, #744]	@ (8004b78 <main+0xa40>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4bc0      	ldr	r3, [pc, #768]	@ (8004b94 <main+0xa5c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	1c19      	adds	r1, r3, #0
 8004896:	1c10      	adds	r0, r2, #0
 8004898:	f7fc fa14 	bl	8000cc4 <__aeabi_fmul>
 800489c:	1c03      	adds	r3, r0, #0
 800489e:	1c19      	adds	r1, r3, #0
 80048a0:	2486      	movs	r4, #134	@ 0x86
 80048a2:	0064      	lsls	r4, r4, #1
 80048a4:	193b      	adds	r3, r7, r4
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	f7fb fe4c 	bl	8000544 <__aeabi_fadd>
 80048ac:	1c03      	adds	r3, r0, #0
 80048ae:	193a      	adds	r2, r7, r4
 80048b0:	6013      	str	r3, [r2, #0]
			sample++;
 80048b2:	2284      	movs	r2, #132	@ 0x84
 80048b4:	0052      	lsls	r2, r2, #1
 80048b6:	18bb      	adds	r3, r7, r2
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3301      	adds	r3, #1
 80048bc:	18ba      	adds	r2, r7, r2
 80048be:	6013      	str	r3, [r2, #0]
			if(irms_final < 0.050)
 80048c0:	4bb4      	ldr	r3, [pc, #720]	@ (8004b94 <main+0xa5c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	1c18      	adds	r0, r3, #0
 80048c6:	f7fe fe11 	bl	80034ec <__aeabi_f2d>
 80048ca:	4aad      	ldr	r2, [pc, #692]	@ (8004b80 <main+0xa48>)
 80048cc:	4bb3      	ldr	r3, [pc, #716]	@ (8004b9c <main+0xa64>)
 80048ce:	f7fb fdbf 	bl	8000450 <__aeabi_dcmplt>
 80048d2:	1e03      	subs	r3, r0, #0
 80048d4:	d002      	beq.n	80048dc <main+0x7a4>
				irms_final = 0;
 80048d6:	4baf      	ldr	r3, [pc, #700]	@ (8004b94 <main+0xa5c>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
			vi_update_flag = 0; /* wait till next sec */
 80048dc:	4bb0      	ldr	r3, [pc, #704]	@ (8004ba0 <main+0xa68>)
 80048de:	2200      	movs	r2, #0
 80048e0:	701a      	strb	r2, [r3, #0]
		/*###*/
		/* routines */

		/*### Sensor read ###*/
		/*A*/
		if(sensor_refresh_flag == 1) {
 80048e2:	4bb0      	ldr	r3, [pc, #704]	@ (8004ba4 <main+0xa6c>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d165      	bne.n	80049b6 <main+0x87e>
			sensor_rx_select(sensor_idx);
 80048ea:	4baf      	ldr	r3, [pc, #700]	@ (8004ba8 <main+0xa70>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	0018      	movs	r0, r3
 80048f0:	f001 f972 	bl	8005bd8 <sensor_rx_select>
			HAL_SPI_Receive(&hspi2, (uint8_t *)sdo, 2, 10);
 80048f4:	24f8      	movs	r4, #248	@ 0xf8
 80048f6:	1939      	adds	r1, r7, r4
 80048f8:	48ac      	ldr	r0, [pc, #688]	@ (8004bac <main+0xa74>)
 80048fa:	230a      	movs	r3, #10
 80048fc:	2202      	movs	r2, #2
 80048fe:	f004 fe9f 	bl	8009640 <HAL_SPI_Receive>
			sensor_rx_disable(); // Disables all IC comms
 8004902:	f001 f949 	bl	8005b98 <sensor_rx_disable>
			temp_state = (((sdo[0] | (sdo[1] << 8)) >> 2) & 0x0001);
 8004906:	0020      	movs	r0, r4
 8004908:	183b      	adds	r3, r7, r0
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	001a      	movs	r2, r3
 800490e:	183b      	adds	r3, r7, r0
 8004910:	785b      	ldrb	r3, [r3, #1]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	4313      	orrs	r3, r2
 8004916:	109b      	asrs	r3, r3, #2
 8004918:	b2da      	uxtb	r2, r3
 800491a:	2408      	movs	r4, #8
 800491c:	34ff      	adds	r4, #255	@ 0xff
 800491e:	193b      	adds	r3, r7, r4
 8004920:	2101      	movs	r1, #1
 8004922:	400a      	ands	r2, r1
 8004924:	701a      	strb	r2, [r3, #0]
			temp_word = (sdo[0] | sdo[1] << 8);
 8004926:	183b      	adds	r3, r7, r0
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	b21a      	sxth	r2, r3
 800492c:	183b      	adds	r3, r7, r0
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	b21b      	sxth	r3, r3
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	b21b      	sxth	r3, r3
 8004936:	4313      	orrs	r3, r2
 8004938:	b21a      	sxth	r2, r3
 800493a:	21fa      	movs	r1, #250	@ 0xfa
 800493c:	187b      	adds	r3, r7, r1
 800493e:	801a      	strh	r2, [r3, #0]
			temp12b = (temp_word & 0b111111111111000) >> 3;
 8004940:	187b      	adds	r3, r7, r1
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	10db      	asrs	r3, r3, #3
 8004946:	b29a      	uxth	r2, r3
 8004948:	1d7b      	adds	r3, r7, #5
 800494a:	33ff      	adds	r3, #255	@ 0xff
 800494c:	0512      	lsls	r2, r2, #20
 800494e:	0d12      	lsrs	r2, r2, #20
 8004950:	801a      	strh	r2, [r3, #0]
			/* store the temp */
			if(temp_state == 1) {
 8004952:	193b      	adds	r3, r7, r4
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d107      	bne.n	800496a <main+0x832>
				temperatures[sensor_idx - 1] = -99;
 800495a:	4b93      	ldr	r3, [pc, #588]	@ (8004ba8 <main+0xa70>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	1e5a      	subs	r2, r3, #1
 8004960:	4b93      	ldr	r3, [pc, #588]	@ (8004bb0 <main+0xa78>)
 8004962:	0092      	lsls	r2, r2, #2
 8004964:	4993      	ldr	r1, [pc, #588]	@ (8004bb4 <main+0xa7c>)
 8004966:	50d1      	str	r1, [r2, r3]
 8004968:	e016      	b.n	8004998 <main+0x860>
			}
			else {
				temperatures[sensor_idx - 1] = (float)(temp12b*0.25);
 800496a:	1d7b      	adds	r3, r7, #5
 800496c:	33ff      	adds	r3, #255	@ 0xff
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	0018      	movs	r0, r3
 8004972:	f7fe fd69 	bl	8003448 <__aeabi_i2d>
 8004976:	2200      	movs	r2, #0
 8004978:	4b8f      	ldr	r3, [pc, #572]	@ (8004bb8 <main+0xa80>)
 800497a:	f7fd fe17 	bl	80025ac <__aeabi_dmul>
 800497e:	0002      	movs	r2, r0
 8004980:	000b      	movs	r3, r1
 8004982:	4989      	ldr	r1, [pc, #548]	@ (8004ba8 <main+0xa70>)
 8004984:	7809      	ldrb	r1, [r1, #0]
 8004986:	1e4c      	subs	r4, r1, #1
 8004988:	0010      	movs	r0, r2
 800498a:	0019      	movs	r1, r3
 800498c:	f7fe fdf6 	bl	800357c <__aeabi_d2f>
 8004990:	1c01      	adds	r1, r0, #0
 8004992:	4b87      	ldr	r3, [pc, #540]	@ (8004bb0 <main+0xa78>)
 8004994:	00a2      	lsls	r2, r4, #2
 8004996:	50d1      	str	r1, [r2, r3]
			}
			sensor_idx = sensor_idx >= SENSOR_COUNT ? 1 : sensor_idx + 1;
 8004998:	4b83      	ldr	r3, [pc, #524]	@ (8004ba8 <main+0xa70>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d804      	bhi.n	80049aa <main+0x872>
 80049a0:	4b81      	ldr	r3, [pc, #516]	@ (8004ba8 <main+0xa70>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	3301      	adds	r3, #1
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	e000      	b.n	80049ac <main+0x874>
 80049aa:	2201      	movs	r2, #1
 80049ac:	4b7e      	ldr	r3, [pc, #504]	@ (8004ba8 <main+0xa70>)
 80049ae:	701a      	strb	r2, [r3, #0]
			sensor_refresh_flag = 0;
 80049b0:	4b7c      	ldr	r3, [pc, #496]	@ (8004ba4 <main+0xa6c>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
		//	}
		//	else {
		//		temperatures[2] = -99;
		//		active_sensor_idx = 2;
		//	}
		sdo[0] = 0;
 80049b6:	21f8      	movs	r1, #248	@ 0xf8
 80049b8:	187b      	adds	r3, r7, r1
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
		sdo[1] = 0;
 80049be:	187b      	adds	r3, r7, r1
 80049c0:	2200      	movs	r2, #0
 80049c2:	705a      	strb	r2, [r3, #1]
		temp_word = 0;
 80049c4:	23fa      	movs	r3, #250	@ 0xfa
 80049c6:	18fb      	adds	r3, r7, r3
 80049c8:	2200      	movs	r2, #0
 80049ca:	801a      	strh	r2, [r3, #0]
		temp12b = 0;
 80049cc:	1d7b      	adds	r3, r7, #5
 80049ce:	33ff      	adds	r3, #255	@ 0xff
 80049d0:	2200      	movs	r2, #0
 80049d2:	801a      	strh	r2, [r3, #0]
		//
		/*### ON-OFF Control ###*/
		if(temperatures[0] >= set_point || temperatures[1] >= set_point) {
 80049d4:	4b76      	ldr	r3, [pc, #472]	@ (8004bb0 <main+0xa78>)
 80049d6:	681c      	ldr	r4, [r3, #0]
 80049d8:	1c7b      	adds	r3, r7, #1
 80049da:	33ff      	adds	r3, #255	@ 0xff
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	0018      	movs	r0, r3
 80049e0:	f7fc fd4e 	bl	8001480 <__aeabi_i2f>
 80049e4:	1c03      	adds	r3, r0, #0
 80049e6:	1c19      	adds	r1, r3, #0
 80049e8:	1c20      	adds	r0, r4, #0
 80049ea:	f7fb fd89 	bl	8000500 <__aeabi_fcmpge>
 80049ee:	1e03      	subs	r3, r0, #0
 80049f0:	d10e      	bne.n	8004a10 <main+0x8d8>
 80049f2:	4b6f      	ldr	r3, [pc, #444]	@ (8004bb0 <main+0xa78>)
 80049f4:	685c      	ldr	r4, [r3, #4]
 80049f6:	1c7b      	adds	r3, r7, #1
 80049f8:	33ff      	adds	r3, #255	@ 0xff
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f7fc fd3f 	bl	8001480 <__aeabi_i2f>
 8004a02:	1c03      	adds	r3, r0, #0
 8004a04:	1c19      	adds	r1, r3, #0
 8004a06:	1c20      	adds	r0, r4, #0
 8004a08:	f7fb fd7a 	bl	8000500 <__aeabi_fcmpge>
 8004a0c:	1e03      	subs	r3, r0, #0
 8004a0e:	d010      	beq.n	8004a32 <main+0x8fa>
			/* Turn TRIAC off */
			TRIAC1_SET(0);
 8004a10:	4b6a      	ldr	r3, [pc, #424]	@ (8004bbc <main+0xa84>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	2101      	movs	r1, #1
 8004a16:	0018      	movs	r0, r3
 8004a18:	f002 fd63 	bl	80074e2 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8004a1c:	2380      	movs	r3, #128	@ 0x80
 8004a1e:	019b      	lsls	r3, r3, #6
 8004a20:	4867      	ldr	r0, [pc, #412]	@ (8004bc0 <main+0xa88>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	0019      	movs	r1, r3
 8004a26:	f002 fd5c 	bl	80074e2 <HAL_GPIO_WritePin>
			triac_temp_ctrl = 0;
 8004a2a:	4b66      	ldr	r3, [pc, #408]	@ (8004bc4 <main+0xa8c>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
 8004a30:	e002      	b.n	8004a38 <main+0x900>
		}
		else {
			triac_temp_ctrl = 1;
 8004a32:	4b64      	ldr	r3, [pc, #400]	@ (8004bc4 <main+0xa8c>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	701a      	strb	r2, [r3, #0]
			/* Use TRIAC control logic to control output */
		}

		/*### Selector switch read ###*/
		if(triac_temp_ctrl == 1) {
 8004a38:	4b62      	ldr	r3, [pc, #392]	@ (8004bc4 <main+0xa8c>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d163      	bne.n	8004b08 <main+0x9d0>
			if(BTN1_READ() == 0) {
 8004a40:	2380      	movs	r3, #128	@ 0x80
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4a60      	ldr	r2, [pc, #384]	@ (8004bc8 <main+0xa90>)
 8004a46:	0019      	movs	r1, r3
 8004a48:	0010      	movs	r0, r2
 8004a4a:	f002 fd2d 	bl	80074a8 <HAL_GPIO_ReadPin>
 8004a4e:	1e03      	subs	r3, r0, #0
 8004a50:	d112      	bne.n	8004a78 <main+0x940>
				if(BTN1_READ() == 0) {
 8004a52:	2380      	movs	r3, #128	@ 0x80
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4a5c      	ldr	r2, [pc, #368]	@ (8004bc8 <main+0xa90>)
 8004a58:	0019      	movs	r1, r3
 8004a5a:	0010      	movs	r0, r2
 8004a5c:	f002 fd24 	bl	80074a8 <HAL_GPIO_ReadPin>
 8004a60:	1e03      	subs	r3, r0, #0
 8004a62:	d164      	bne.n	8004b2e <main+0x9f6>
					mode = 1;
 8004a64:	4b59      	ldr	r3, [pc, #356]	@ (8004bcc <main+0xa94>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	701a      	strb	r2, [r3, #0]
					triac_time = 4.5; /* 130V */
 8004a6a:	4b59      	ldr	r3, [pc, #356]	@ (8004bd0 <main+0xa98>)
 8004a6c:	4a59      	ldr	r2, [pc, #356]	@ (8004bd4 <main+0xa9c>)
 8004a6e:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 8004a70:	4b59      	ldr	r3, [pc, #356]	@ (8004bd8 <main+0xaa0>)
 8004a72:	2202      	movs	r2, #2
 8004a74:	701a      	strb	r2, [r3, #0]
 8004a76:	e05a      	b.n	8004b2e <main+0x9f6>
				}
			}
			else if(BTN2_READ() == 0) {
 8004a78:	2380      	movs	r3, #128	@ 0x80
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	4a52      	ldr	r2, [pc, #328]	@ (8004bc8 <main+0xa90>)
 8004a7e:	0019      	movs	r1, r3
 8004a80:	0010      	movs	r0, r2
 8004a82:	f002 fd11 	bl	80074a8 <HAL_GPIO_ReadPin>
 8004a86:	1e03      	subs	r3, r0, #0
 8004a88:	d112      	bne.n	8004ab0 <main+0x978>
				if(BTN2_READ() == 0) {
 8004a8a:	2380      	movs	r3, #128	@ 0x80
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	4a4e      	ldr	r2, [pc, #312]	@ (8004bc8 <main+0xa90>)
 8004a90:	0019      	movs	r1, r3
 8004a92:	0010      	movs	r0, r2
 8004a94:	f002 fd08 	bl	80074a8 <HAL_GPIO_ReadPin>
 8004a98:	1e03      	subs	r3, r0, #0
 8004a9a:	d148      	bne.n	8004b2e <main+0x9f6>
					mode = 2;
 8004a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8004bcc <main+0xa94>)
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	701a      	strb	r2, [r3, #0]
					triac_time = 3.37; /* 170V */
 8004aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8004bd0 <main+0xa98>)
 8004aa4:	4a4d      	ldr	r2, [pc, #308]	@ (8004bdc <main+0xaa4>)
 8004aa6:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 8004aa8:	4b4b      	ldr	r3, [pc, #300]	@ (8004bd8 <main+0xaa0>)
 8004aaa:	2202      	movs	r2, #2
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	e03e      	b.n	8004b2e <main+0x9f6>
				}
			}
			else if(BTN3_READ() == 0) {
 8004ab0:	4b45      	ldr	r3, [pc, #276]	@ (8004bc8 <main+0xa90>)
 8004ab2:	2180      	movs	r1, #128	@ 0x80
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f002 fcf7 	bl	80074a8 <HAL_GPIO_ReadPin>
 8004aba:	1e03      	subs	r3, r0, #0
 8004abc:	d110      	bne.n	8004ae0 <main+0x9a8>
				if(BTN3_READ() == 0) {
 8004abe:	4b42      	ldr	r3, [pc, #264]	@ (8004bc8 <main+0xa90>)
 8004ac0:	2180      	movs	r1, #128	@ 0x80
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f002 fcf0 	bl	80074a8 <HAL_GPIO_ReadPin>
 8004ac8:	1e03      	subs	r3, r0, #0
 8004aca:	d130      	bne.n	8004b2e <main+0x9f6>
					mode = 3;
 8004acc:	4b3f      	ldr	r3, [pc, #252]	@ (8004bcc <main+0xa94>)
 8004ace:	2203      	movs	r2, #3
 8004ad0:	701a      	strb	r2, [r3, #0]
					triac_time = 2.4; /* 205V */
 8004ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8004bd0 <main+0xa98>)
 8004ad4:	4a42      	ldr	r2, [pc, #264]	@ (8004be0 <main+0xaa8>)
 8004ad6:	601a      	str	r2, [r3, #0]
					triac_mode = MODE_CTRL; /* Never trigger TRIACs */
 8004ad8:	4b3f      	ldr	r3, [pc, #252]	@ (8004bd8 <main+0xaa0>)
 8004ada:	2202      	movs	r2, #2
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	e026      	b.n	8004b2e <main+0x9f6>
				}
			}
			else {
				mode = 0;
 8004ae0:	4b3a      	ldr	r3, [pc, #232]	@ (8004bcc <main+0xa94>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
				triac_mode = MODE_OFF; /* Never trigger TRIACs */
 8004ae6:	4b3c      	ldr	r3, [pc, #240]	@ (8004bd8 <main+0xaa0>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]
				/* keep triacs off */
				TRIAC1_SET(0);
 8004aec:	4b33      	ldr	r3, [pc, #204]	@ (8004bbc <main+0xa84>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	2101      	movs	r1, #1
 8004af2:	0018      	movs	r0, r3
 8004af4:	f002 fcf5 	bl	80074e2 <HAL_GPIO_WritePin>
				TRIAC2_SET(0);
 8004af8:	2380      	movs	r3, #128	@ 0x80
 8004afa:	019b      	lsls	r3, r3, #6
 8004afc:	4830      	ldr	r0, [pc, #192]	@ (8004bc0 <main+0xa88>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	0019      	movs	r1, r3
 8004b02:	f002 fcee 	bl	80074e2 <HAL_GPIO_WritePin>
 8004b06:	e012      	b.n	8004b2e <main+0x9f6>
			}
		}
		else {
			mode = 0;
 8004b08:	4b30      	ldr	r3, [pc, #192]	@ (8004bcc <main+0xa94>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	701a      	strb	r2, [r3, #0]
			triac_mode = MODE_OFF; /* Never trigger TRIACs */
 8004b0e:	4b32      	ldr	r3, [pc, #200]	@ (8004bd8 <main+0xaa0>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]
			/* keep triacs off */
			TRIAC1_SET(0);
 8004b14:	4b29      	ldr	r3, [pc, #164]	@ (8004bbc <main+0xa84>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	2101      	movs	r1, #1
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f002 fce1 	bl	80074e2 <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 8004b20:	2380      	movs	r3, #128	@ 0x80
 8004b22:	019b      	lsls	r3, r3, #6
 8004b24:	4826      	ldr	r0, [pc, #152]	@ (8004bc0 <main+0xa88>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	0019      	movs	r1, r3
 8004b2a:	f002 fcda 	bl	80074e2 <HAL_GPIO_WritePin>
		}

		/*A*/
		/* GSM stuff */
		/*########################################################################*/
		if(gsm_status != GSM_WAIT) {
 8004b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004be4 <main+0xaac>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d100      	bne.n	8004b3a <main+0xa02>
 8004b38:	e115      	b.n	8004d66 <main+0xc2e>
			if(upload_running) {
 8004b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004be8 <main+0xab0>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d100      	bne.n	8004b44 <main+0xa0c>
 8004b42:	e10b      	b.n	8004d5c <main+0xc24>
				if(gsm_status == GSM_OK || gsm_status == GSM_NOK) {
 8004b44:	4b27      	ldr	r3, [pc, #156]	@ (8004be4 <main+0xaac>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d004      	beq.n	8004b58 <main+0xa20>
 8004b4e:	4b25      	ldr	r3, [pc, #148]	@ (8004be4 <main+0xaac>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b63      	cmp	r3, #99	@ 0x63
 8004b56:	d153      	bne.n	8004c00 <main+0xac8>
					if(gsm_cmd_step >= GSM_CMD_LAST_IDX) {
 8004b58:	4b24      	ldr	r3, [pc, #144]	@ (8004bec <main+0xab4>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b0c      	cmp	r3, #12
 8004b5e:	d949      	bls.n	8004bf4 <main+0xabc>
						upload_flag = 1; /* successful upload */
 8004b60:	4b23      	ldr	r3, [pc, #140]	@ (8004bf0 <main+0xab8>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	701a      	strb	r2, [r3, #0]
						led_blink();
 8004b66:	f7fe ff11 	bl	800398c <led_blink>
						gsm_cmd_step = 0; /* prep for next upload */
 8004b6a:	4b20      	ldr	r3, [pc, #128]	@ (8004bec <main+0xab4>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	701a      	strb	r2, [r3, #0]
						upload_running = 0; /* wait for next time slot */
 8004b70:	4b1d      	ldr	r3, [pc, #116]	@ (8004be8 <main+0xab0>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	e043      	b.n	8004c00 <main+0xac8>
 8004b78:	20000204 	.word	0x20000204
 8004b7c:	43520000 	.word	0x43520000
 8004b80:	9999999a 	.word	0x9999999a
 8004b84:	3fd99999 	.word	0x3fd99999
 8004b88:	40668000 	.word	0x40668000
 8004b8c:	20000200 	.word	0x20000200
 8004b90:	4756d800 	.word	0x4756d800
 8004b94:	20000208 	.word	0x20000208
 8004b98:	41f00000 	.word	0x41f00000
 8004b9c:	3fa99999 	.word	0x3fa99999
 8004ba0:	20000567 	.word	0x20000567
 8004ba4:	2000052e 	.word	0x2000052e
 8004ba8:	2000052d 	.word	0x2000052d
 8004bac:	20000324 	.word	0x20000324
 8004bb0:	20000568 	.word	0x20000568
 8004bb4:	c2c60000 	.word	0xc2c60000
 8004bb8:	3fd00000 	.word	0x3fd00000
 8004bbc:	50001400 	.word	0x50001400
 8004bc0:	50000800 	.word	0x50000800
 8004bc4:	20000558 	.word	0x20000558
 8004bc8:	50000400 	.word	0x50000400
 8004bcc:	20000565 	.word	0x20000565
 8004bd0:	20000560 	.word	0x20000560
 8004bd4:	40900000 	.word	0x40900000
 8004bd8:	20000564 	.word	0x20000564
 8004bdc:	4057ae14 	.word	0x4057ae14
 8004be0:	4019999a 	.word	0x4019999a
 8004be4:	20000576 	.word	0x20000576
 8004be8:	200005f8 	.word	0x200005f8
 8004bec:	2000057c 	.word	0x2000057c
 8004bf0:	200005f9 	.word	0x200005f9
					}
					else
						gsm_cmd_step += 1;
 8004bf4:	4b6e      	ldr	r3, [pc, #440]	@ (8004db0 <main+0xc78>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	4b6c      	ldr	r3, [pc, #432]	@ (8004db0 <main+0xc78>)
 8004bfe:	701a      	strb	r2, [r3, #0]
				}
//				else if(gsm_status == GSM_NOK) {
//					gsm_cmd_step = 0;
//					upload_running = 0; /* cancel upload seq */
//				}
				switch(gsm_cmd_step) {
 8004c00:	4b6b      	ldr	r3, [pc, #428]	@ (8004db0 <main+0xc78>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b0e      	cmp	r3, #14
 8004c06:	d900      	bls.n	8004c0a <main+0xad2>
 8004c08:	e0ad      	b.n	8004d66 <main+0xc2e>
 8004c0a:	009a      	lsls	r2, r3, #2
 8004c0c:	4b69      	ldr	r3, [pc, #420]	@ (8004db4 <main+0xc7c>)
 8004c0e:	18d3      	adds	r3, r2, r3
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	469f      	mov	pc, r3
				case 0:
					break;
				case 1:
					gsm_cmd("AT+NETCLOSE","OK", GSM_WAIT_TIME_LOW);
 8004c14:	23fa      	movs	r3, #250	@ 0xfa
 8004c16:	005a      	lsls	r2, r3, #1
 8004c18:	4967      	ldr	r1, [pc, #412]	@ (8004db8 <main+0xc80>)
 8004c1a:	4b68      	ldr	r3, [pc, #416]	@ (8004dbc <main+0xc84>)
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f7fe ff89 	bl	8003b34 <gsm_cmd>
					break;
 8004c22:	e0a0      	b.n	8004d66 <main+0xc2e>
				case 2:
					gsm_cmd("AT+CCHMODE=1","OK", GSM_WAIT_TIME_LOW);
 8004c24:	23fa      	movs	r3, #250	@ 0xfa
 8004c26:	005a      	lsls	r2, r3, #1
 8004c28:	4963      	ldr	r1, [pc, #396]	@ (8004db8 <main+0xc80>)
 8004c2a:	4b65      	ldr	r3, [pc, #404]	@ (8004dc0 <main+0xc88>)
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7fe ff81 	bl	8003b34 <gsm_cmd>
					break;
 8004c32:	e098      	b.n	8004d66 <main+0xc2e>
				case 3:
					gsm_cmd("AT+CCHSET=1","OK", GSM_WAIT_TIME_LOW);
 8004c34:	23fa      	movs	r3, #250	@ 0xfa
 8004c36:	005a      	lsls	r2, r3, #1
 8004c38:	495f      	ldr	r1, [pc, #380]	@ (8004db8 <main+0xc80>)
 8004c3a:	4b62      	ldr	r3, [pc, #392]	@ (8004dc4 <main+0xc8c>)
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f7fe ff79 	bl	8003b34 <gsm_cmd>
					break;
 8004c42:	e090      	b.n	8004d66 <main+0xc2e>
				case 4:
					gsm_cmd("AT+CCHSTART","OK", GSM_WAIT_TIME_LOW);
 8004c44:	23fa      	movs	r3, #250	@ 0xfa
 8004c46:	005a      	lsls	r2, r3, #1
 8004c48:	495b      	ldr	r1, [pc, #364]	@ (8004db8 <main+0xc80>)
 8004c4a:	4b5f      	ldr	r3, [pc, #380]	@ (8004dc8 <main+0xc90>)
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f7fe ff71 	bl	8003b34 <gsm_cmd>
					break;
 8004c52:	e088      	b.n	8004d66 <main+0xc2e>
				case 5:
					gsm_cmd("AT+CCHSSLCFG=0,0","OK",GSM_WAIT_TIME_LOW);
 8004c54:	23fa      	movs	r3, #250	@ 0xfa
 8004c56:	005a      	lsls	r2, r3, #1
 8004c58:	4957      	ldr	r1, [pc, #348]	@ (8004db8 <main+0xc80>)
 8004c5a:	4b5c      	ldr	r3, [pc, #368]	@ (8004dcc <main+0xc94>)
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f7fe ff69 	bl	8003b34 <gsm_cmd>
					break;
 8004c62:	e080      	b.n	8004d66 <main+0xc2e>
				case 6:
					gsm_cmd("AT+CSOCKSETPN=1","OK", GSM_WAIT_TIME_LOW);
 8004c64:	23fa      	movs	r3, #250	@ 0xfa
 8004c66:	005a      	lsls	r2, r3, #1
 8004c68:	4953      	ldr	r1, [pc, #332]	@ (8004db8 <main+0xc80>)
 8004c6a:	4b59      	ldr	r3, [pc, #356]	@ (8004dd0 <main+0xc98>)
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f7fe ff61 	bl	8003b34 <gsm_cmd>
					break;
 8004c72:	e078      	b.n	8004d66 <main+0xc2e>
				case 7:
					gsm_cmd("AT+CIPMODE=0","OK", GSM_WAIT_TIME_LOW);
 8004c74:	23fa      	movs	r3, #250	@ 0xfa
 8004c76:	005a      	lsls	r2, r3, #1
 8004c78:	494f      	ldr	r1, [pc, #316]	@ (8004db8 <main+0xc80>)
 8004c7a:	4b56      	ldr	r3, [pc, #344]	@ (8004dd4 <main+0xc9c>)
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f7fe ff59 	bl	8003b34 <gsm_cmd>
					break;
 8004c82:	e070      	b.n	8004d66 <main+0xc2e>
				case 8:
					gsm_cmd("AT+NETOPEN","OK", GSM_WAIT_TIME_LOW);
 8004c84:	23fa      	movs	r3, #250	@ 0xfa
 8004c86:	005a      	lsls	r2, r3, #1
 8004c88:	494b      	ldr	r1, [pc, #300]	@ (8004db8 <main+0xc80>)
 8004c8a:	4b53      	ldr	r3, [pc, #332]	@ (8004dd8 <main+0xca0>)
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7fe ff51 	bl	8003b34 <gsm_cmd>
					break;
 8004c92:	e068      	b.n	8004d66 <main+0xc2e>
				case 9:
					gsm_cmd("AT+CGATT=1","OK", GSM_WAIT_TIME_LOW);
 8004c94:	23fa      	movs	r3, #250	@ 0xfa
 8004c96:	005a      	lsls	r2, r3, #1
 8004c98:	4947      	ldr	r1, [pc, #284]	@ (8004db8 <main+0xc80>)
 8004c9a:	4b50      	ldr	r3, [pc, #320]	@ (8004ddc <main+0xca4>)
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f7fe ff49 	bl	8003b34 <gsm_cmd>
					break;
 8004ca2:	e060      	b.n	8004d66 <main+0xc2e>
				case 10:
					gsm_cmd("AT+CGACT=1,1","OK", GSM_WAIT_TIME_LOW);
 8004ca4:	23fa      	movs	r3, #250	@ 0xfa
 8004ca6:	005a      	lsls	r2, r3, #1
 8004ca8:	4943      	ldr	r1, [pc, #268]	@ (8004db8 <main+0xc80>)
 8004caa:	4b4d      	ldr	r3, [pc, #308]	@ (8004de0 <main+0xca8>)
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7fe ff41 	bl	8003b34 <gsm_cmd>
					break;
 8004cb2:	e058      	b.n	8004d66 <main+0xc2e>
				case 11:
					gsm_cmd("AT+IPADDR","OK", GSM_WAIT_TIME_MED);
 8004cb4:	4a4b      	ldr	r2, [pc, #300]	@ (8004de4 <main+0xcac>)
 8004cb6:	4940      	ldr	r1, [pc, #256]	@ (8004db8 <main+0xc80>)
 8004cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8004de8 <main+0xcb0>)
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f7fe ff3a 	bl	8003b34 <gsm_cmd>
					break;
 8004cc0:	e051      	b.n	8004d66 <main+0xc2e>
				case 12:
					gsm_cmd("AT+CCHOPEN=0,\"api.thingspeak.com\",443,2","CONNECT 115200", GSM_WAIT_TIME_MED);
 8004cc2:	4a48      	ldr	r2, [pc, #288]	@ (8004de4 <main+0xcac>)
 8004cc4:	4949      	ldr	r1, [pc, #292]	@ (8004dec <main+0xcb4>)
 8004cc6:	4b4a      	ldr	r3, [pc, #296]	@ (8004df0 <main+0xcb8>)
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f7fe ff33 	bl	8003b34 <gsm_cmd>
					break;
 8004cce:	e04a      	b.n	8004d66 <main+0xc2e>
				case 13:
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%.1f\r\n" \
							"HTTP/1.1\r\nHost: api.thingspeak.com\r\n", \
							api_key, (int)temperatures[0], (int)temperatures[1], (int)mode, \
 8004cd0:	4b48      	ldr	r3, [pc, #288]	@ (8004df4 <main+0xcbc>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%.1f\r\n" \
 8004cd4:	1c18      	adds	r0, r3, #0
 8004cd6:	f7fc fbb3 	bl	8001440 <__aeabi_f2iz>
 8004cda:	4682      	mov	sl, r0
							api_key, (int)temperatures[0], (int)temperatures[1], (int)mode, \
 8004cdc:	4b45      	ldr	r3, [pc, #276]	@ (8004df4 <main+0xcbc>)
 8004cde:	685b      	ldr	r3, [r3, #4]
					sprintf(content_string, "GET /update?api_key=%s&field1=%d&field2=%d&field3=%d&field4=%.1f&field5=%d&field6=%.1f\r\n" \
 8004ce0:	1c18      	adds	r0, r3, #0
 8004ce2:	f7fc fbad 	bl	8001440 <__aeabi_f2iz>
 8004ce6:	4680      	mov	r8, r0
 8004ce8:	4b43      	ldr	r3, [pc, #268]	@ (8004df8 <main+0xcc0>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	469b      	mov	fp, r3
 8004cee:	4b43      	ldr	r3, [pc, #268]	@ (8004dfc <main+0xcc4>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	1c18      	adds	r0, r3, #0
 8004cf4:	f7fe fbfa 	bl	80034ec <__aeabi_f2d>
 8004cf8:	0004      	movs	r4, r0
 8004cfa:	000d      	movs	r5, r1
 8004cfc:	4b40      	ldr	r3, [pc, #256]	@ (8004e00 <main+0xcc8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	1c18      	adds	r0, r3, #0
 8004d02:	f7fc fb9d 	bl	8001440 <__aeabi_f2iz>
 8004d06:	4681      	mov	r9, r0
 8004d08:	4b3e      	ldr	r3, [pc, #248]	@ (8004e04 <main+0xccc>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	1c18      	adds	r0, r3, #0
 8004d0e:	f7fe fbed 	bl	80034ec <__aeabi_f2d>
 8004d12:	0002      	movs	r2, r0
 8004d14:	000b      	movs	r3, r1
 8004d16:	211c      	movs	r1, #28
 8004d18:	187e      	adds	r6, r7, r1
 8004d1a:	493b      	ldr	r1, [pc, #236]	@ (8004e08 <main+0xcd0>)
 8004d1c:	2030      	movs	r0, #48	@ 0x30
 8004d1e:	1838      	adds	r0, r7, r0
 8004d20:	9206      	str	r2, [sp, #24]
 8004d22:	9307      	str	r3, [sp, #28]
 8004d24:	464b      	mov	r3, r9
 8004d26:	9304      	str	r3, [sp, #16]
 8004d28:	9402      	str	r4, [sp, #8]
 8004d2a:	9503      	str	r5, [sp, #12]
 8004d2c:	465b      	mov	r3, fp
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	4643      	mov	r3, r8
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	4653      	mov	r3, sl
 8004d36:	0032      	movs	r2, r6
 8004d38:	f007 fc22 	bl	800c580 <siprintf>
					 * kwh
					 * temp 1
					 * temp 2
					 *
					 */
					gsm_cmd(content_string, "200 OK", GSM_WAIT_TIME_MED);
 8004d3c:	4a29      	ldr	r2, [pc, #164]	@ (8004de4 <main+0xcac>)
 8004d3e:	4933      	ldr	r1, [pc, #204]	@ (8004e0c <main+0xcd4>)
 8004d40:	2030      	movs	r0, #48	@ 0x30
 8004d42:	183b      	adds	r3, r7, r0
 8004d44:	0018      	movs	r0, r3
 8004d46:	f7fe fef5 	bl	8003b34 <gsm_cmd>
					break;
 8004d4a:	e00c      	b.n	8004d66 <main+0xc2e>
				case 14:
					gsm_cmd("AT+CIPCLOSE=0", "OK", GSM_WAIT_TIME_LOW);
 8004d4c:	23fa      	movs	r3, #250	@ 0xfa
 8004d4e:	005a      	lsls	r2, r3, #1
 8004d50:	4919      	ldr	r1, [pc, #100]	@ (8004db8 <main+0xc80>)
 8004d52:	4b2f      	ldr	r3, [pc, #188]	@ (8004e10 <main+0xcd8>)
 8004d54:	0018      	movs	r0, r3
 8004d56:	f7fe feed 	bl	8003b34 <gsm_cmd>
					break;
 8004d5a:	e004      	b.n	8004d66 <main+0xc2e>
				default:
				}
			}
			else gsm_cmd_step = 0;
 8004d5c:	4b14      	ldr	r3, [pc, #80]	@ (8004db0 <main+0xc78>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e000      	b.n	8004d66 <main+0xc2e>
					break;
 8004d64:	46c0      	nop			@ (mov r8, r8)
		}
		if(sec % 30 == 0 && sec != 0) {
 8004d66:	4b2b      	ldr	r3, [pc, #172]	@ (8004e14 <main+0xcdc>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	211e      	movs	r1, #30
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7fb fa69 	bl	8000244 <__aeabi_uidivmod>
 8004d72:	000b      	movs	r3, r1
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d112      	bne.n	8004da0 <main+0xc68>
 8004d7a:	4b26      	ldr	r3, [pc, #152]	@ (8004e14 <main+0xcdc>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00e      	beq.n	8004da0 <main+0xc68>
			if(upload_running == 0 && upload_flag == 0) { /* upload flag indicates if an */
 8004d82:	4b25      	ldr	r3, [pc, #148]	@ (8004e18 <main+0xce0>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10f      	bne.n	8004daa <main+0xc72>
 8004d8a:	4b24      	ldr	r3, [pc, #144]	@ (8004e1c <main+0xce4>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10b      	bne.n	8004daa <main+0xc72>
				upload_running = 1; /* start uploading */
 8004d92:	4b21      	ldr	r3, [pc, #132]	@ (8004e18 <main+0xce0>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	701a      	strb	r2, [r3, #0]
				gsm_cmd_step = 0; /* with the first command */
 8004d98:	4b05      	ldr	r3, [pc, #20]	@ (8004db0 <main+0xc78>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	701a      	strb	r2, [r3, #0]
			if(upload_running == 0 && upload_flag == 0) { /* upload flag indicates if an */
 8004d9e:	e004      	b.n	8004daa <main+0xc72>
			}
		} else upload_flag = 0;
 8004da0:	4b1e      	ldr	r3, [pc, #120]	@ (8004e1c <main+0xce4>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	f7ff faef 	bl	8004388 <main+0x250>
			if(upload_running == 0 && upload_flag == 0) { /* upload flag indicates if an */
 8004daa:	46c0      	nop			@ (mov r8, r8)
		if(kwh_update_flag == 1) {
 8004dac:	f7ff faec 	bl	8004388 <main+0x250>
 8004db0:	2000057c 	.word	0x2000057c
 8004db4:	0800ebd0 	.word	0x0800ebd0
 8004db8:	0800e97c 	.word	0x0800e97c
 8004dbc:	0800e980 	.word	0x0800e980
 8004dc0:	0800e98c 	.word	0x0800e98c
 8004dc4:	0800e99c 	.word	0x0800e99c
 8004dc8:	0800e9a8 	.word	0x0800e9a8
 8004dcc:	0800e9b4 	.word	0x0800e9b4
 8004dd0:	0800e9c8 	.word	0x0800e9c8
 8004dd4:	0800e9d8 	.word	0x0800e9d8
 8004dd8:	0800e9e8 	.word	0x0800e9e8
 8004ddc:	0800e9f4 	.word	0x0800e9f4
 8004de0:	0800ea00 	.word	0x0800ea00
 8004de4:	00002710 	.word	0x00002710
 8004de8:	0800ea10 	.word	0x0800ea10
 8004dec:	0800ea1c 	.word	0x0800ea1c
 8004df0:	0800ea2c 	.word	0x0800ea2c
 8004df4:	20000568 	.word	0x20000568
 8004df8:	20000565 	.word	0x20000565
 8004dfc:	20000208 	.word	0x20000208
 8004e00:	20000204 	.word	0x20000204
 8004e04:	20000554 	.word	0x20000554
 8004e08:	0800ea54 	.word	0x0800ea54
 8004e0c:	0800ead4 	.word	0x0800ead4
 8004e10:	0800eadc 	.word	0x0800eadc
 8004e14:	20000534 	.word	0x20000534
 8004e18:	200005f8 	.word	0x200005f8
 8004e1c:	200005f9 	.word	0x200005f9

08004e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e20:	b590      	push	{r4, r7, lr}
 8004e22:	b093      	sub	sp, #76	@ 0x4c
 8004e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e26:	2414      	movs	r4, #20
 8004e28:	193b      	adds	r3, r7, r4
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	2334      	movs	r3, #52	@ 0x34
 8004e2e:	001a      	movs	r2, r3
 8004e30:	2100      	movs	r1, #0
 8004e32:	f007 fc13 	bl	800c65c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e36:	1d3b      	adds	r3, r7, #4
 8004e38:	0018      	movs	r0, r3
 8004e3a:	2310      	movs	r3, #16
 8004e3c:	001a      	movs	r2, r3
 8004e3e:	2100      	movs	r1, #0
 8004e40:	f007 fc0c 	bl	800c65c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e44:	2380      	movs	r3, #128	@ 0x80
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f003 fd07 	bl	800885c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004e4e:	193b      	adds	r3, r7, r4
 8004e50:	2202      	movs	r2, #2
 8004e52:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004e54:	193b      	adds	r3, r7, r4
 8004e56:	2280      	movs	r2, #128	@ 0x80
 8004e58:	0052      	lsls	r2, r2, #1
 8004e5a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004e5c:	0021      	movs	r1, r4
 8004e5e:	187b      	adds	r3, r7, r1
 8004e60:	2200      	movs	r2, #0
 8004e62:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004e64:	187b      	adds	r3, r7, r1
 8004e66:	2240      	movs	r2, #64	@ 0x40
 8004e68:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e6a:	187b      	adds	r3, r7, r1
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004e70:	187b      	adds	r3, r7, r1
 8004e72:	2202      	movs	r2, #2
 8004e74:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004e76:	187b      	adds	r3, r7, r1
 8004e78:	2200      	movs	r2, #0
 8004e7a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 12;
 8004e7c:	187b      	adds	r3, r7, r1
 8004e7e:	220c      	movs	r2, #12
 8004e80:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 8004e82:	187b      	adds	r3, r7, r1
 8004e84:	22b0      	movs	r2, #176	@ 0xb0
 8004e86:	0352      	lsls	r2, r2, #13
 8004e88:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8004e8a:	187b      	adds	r3, r7, r1
 8004e8c:	22a0      	movs	r2, #160	@ 0xa0
 8004e8e:	0612      	lsls	r2, r2, #24
 8004e90:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e92:	187b      	adds	r3, r7, r1
 8004e94:	0018      	movs	r0, r3
 8004e96:	f003 fd2d 	bl	80088f4 <HAL_RCC_OscConfig>
 8004e9a:	1e03      	subs	r3, r0, #0
 8004e9c:	d001      	beq.n	8004ea2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004e9e:	f000 fad5 	bl	800544c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ea2:	1d3b      	adds	r3, r7, #4
 8004ea4:	2207      	movs	r2, #7
 8004ea6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ea8:	1d3b      	adds	r3, r7, #4
 8004eaa:	2202      	movs	r2, #2
 8004eac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004eae:	1d3b      	adds	r3, r7, #4
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004eb4:	1d3b      	adds	r3, r7, #4
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004eba:	1d3b      	adds	r3, r7, #4
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f004 f828 	bl	8008f14 <HAL_RCC_ClockConfig>
 8004ec4:	1e03      	subs	r3, r0, #0
 8004ec6:	d001      	beq.n	8004ecc <SystemClock_Config+0xac>
  {
    Error_Handler();
 8004ec8:	f000 fac0 	bl	800544c <Error_Handler>
  }
}
 8004ecc:	46c0      	nop			@ (mov r8, r8)
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	b013      	add	sp, #76	@ 0x4c
 8004ed2:	bd90      	pop	{r4, r7, pc}

08004ed4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004eda:	1d3b      	adds	r3, r7, #4
 8004edc:	0018      	movs	r0, r3
 8004ede:	230c      	movs	r3, #12
 8004ee0:	001a      	movs	r2, r3
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	f007 fbba 	bl	800c65c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004ee8:	4b3e      	ldr	r3, [pc, #248]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004eea:	4a3f      	ldr	r2, [pc, #252]	@ (8004fe8 <MX_ADC1_Init+0x114>)
 8004eec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8004eee:	4b3d      	ldr	r3, [pc, #244]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004ef0:	2280      	movs	r2, #128	@ 0x80
 8004ef2:	0352      	lsls	r2, r2, #13
 8004ef4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004efc:	4b39      	ldr	r3, [pc, #228]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004f02:	4b38      	ldr	r3, [pc, #224]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f04:	2280      	movs	r2, #128	@ 0x80
 8004f06:	0392      	lsls	r2, r2, #14
 8004f08:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004f0a:	4b36      	ldr	r3, [pc, #216]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004f10:	4b34      	ldr	r3, [pc, #208]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8004f16:	4b33      	ldr	r3, [pc, #204]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004f1c:	4b31      	ldr	r3, [pc, #196]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8004f22:	4b30      	ldr	r3, [pc, #192]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f24:	2203      	movs	r2, #3
 8004f26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004f28:	4b2e      	ldr	r3, [pc, #184]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f30:	4b2c      	ldr	r3, [pc, #176]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f36:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004f3c:	4b29      	ldr	r3, [pc, #164]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f3e:	222c      	movs	r2, #44	@ 0x2c
 8004f40:	2101      	movs	r1, #1
 8004f42:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004f44:	4b27      	ldr	r3, [pc, #156]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8004f4a:	4b26      	ldr	r3, [pc, #152]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8004f50:	4b24      	ldr	r3, [pc, #144]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8004f56:	4b23      	ldr	r3, [pc, #140]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f58:	223c      	movs	r2, #60	@ 0x3c
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004f5e:	4b21      	ldr	r3, [pc, #132]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004f64:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f66:	0018      	movs	r0, r3
 8004f68:	f001 f876 	bl	8006058 <HAL_ADC_Init>
 8004f6c:	1e03      	subs	r3, r0, #0
 8004f6e:	d001      	beq.n	8004f74 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8004f70:	f000 fa6c 	bl	800544c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004f74:	1d3b      	adds	r3, r7, #4
 8004f76:	4a1d      	ldr	r2, [pc, #116]	@ (8004fec <MX_ADC1_Init+0x118>)
 8004f78:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004f7a:	1d3b      	adds	r3, r7, #4
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8004f80:	1d3b      	adds	r3, r7, #4
 8004f82:	2200      	movs	r2, #0
 8004f84:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f86:	1d3a      	adds	r2, r7, #4
 8004f88:	4b16      	ldr	r3, [pc, #88]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004f8a:	0011      	movs	r1, r2
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f001 fb33 	bl	80065f8 <HAL_ADC_ConfigChannel>
 8004f92:	1e03      	subs	r3, r0, #0
 8004f94:	d001      	beq.n	8004f9a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8004f96:	f000 fa59 	bl	800544c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004f9a:	1d3b      	adds	r3, r7, #4
 8004f9c:	4a14      	ldr	r2, [pc, #80]	@ (8004ff0 <MX_ADC1_Init+0x11c>)
 8004f9e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004fa0:	1d3b      	adds	r3, r7, #4
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004fa6:	1d3a      	adds	r2, r7, #4
 8004fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004faa:	0011      	movs	r1, r2
 8004fac:	0018      	movs	r0, r3
 8004fae:	f001 fb23 	bl	80065f8 <HAL_ADC_ConfigChannel>
 8004fb2:	1e03      	subs	r3, r0, #0
 8004fb4:	d001      	beq.n	8004fba <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8004fb6:	f000 fa49 	bl	800544c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004fba:	1d3b      	adds	r3, r7, #4
 8004fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8004ff4 <MX_ADC1_Init+0x120>)
 8004fbe:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004fc0:	1d3b      	adds	r3, r7, #4
 8004fc2:	2208      	movs	r2, #8
 8004fc4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004fc6:	1d3a      	adds	r2, r7, #4
 8004fc8:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <MX_ADC1_Init+0x110>)
 8004fca:	0011      	movs	r1, r2
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f001 fb13 	bl	80065f8 <HAL_ADC_ConfigChannel>
 8004fd2:	1e03      	subs	r3, r0, #0
 8004fd4:	d001      	beq.n	8004fda <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8004fd6:	f000 fa39 	bl	800544c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004fda:	46c0      	nop			@ (mov r8, r8)
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	b004      	add	sp, #16
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	46c0      	nop			@ (mov r8, r8)
 8004fe4:	20000210 	.word	0x20000210
 8004fe8:	40012400 	.word	0x40012400
 8004fec:	08000004 	.word	0x08000004
 8004ff0:	0c000008 	.word	0x0c000008
 8004ff4:	b4002000 	.word	0xb4002000

08004ff8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800506c <MX_I2C1_Init+0x74>)
 8004ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8005070 <MX_I2C1_Init+0x78>)
 8005000:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 8005002:	4b1a      	ldr	r3, [pc, #104]	@ (800506c <MX_I2C1_Init+0x74>)
 8005004:	4a1b      	ldr	r2, [pc, #108]	@ (8005074 <MX_I2C1_Init+0x7c>)
 8005006:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005008:	4b18      	ldr	r3, [pc, #96]	@ (800506c <MX_I2C1_Init+0x74>)
 800500a:	2200      	movs	r2, #0
 800500c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800500e:	4b17      	ldr	r3, [pc, #92]	@ (800506c <MX_I2C1_Init+0x74>)
 8005010:	2201      	movs	r2, #1
 8005012:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005014:	4b15      	ldr	r3, [pc, #84]	@ (800506c <MX_I2C1_Init+0x74>)
 8005016:	2200      	movs	r2, #0
 8005018:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800501a:	4b14      	ldr	r3, [pc, #80]	@ (800506c <MX_I2C1_Init+0x74>)
 800501c:	2200      	movs	r2, #0
 800501e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005020:	4b12      	ldr	r3, [pc, #72]	@ (800506c <MX_I2C1_Init+0x74>)
 8005022:	2200      	movs	r2, #0
 8005024:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005026:	4b11      	ldr	r3, [pc, #68]	@ (800506c <MX_I2C1_Init+0x74>)
 8005028:	2200      	movs	r2, #0
 800502a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800502c:	4b0f      	ldr	r3, [pc, #60]	@ (800506c <MX_I2C1_Init+0x74>)
 800502e:	2200      	movs	r2, #0
 8005030:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005032:	4b0e      	ldr	r3, [pc, #56]	@ (800506c <MX_I2C1_Init+0x74>)
 8005034:	0018      	movs	r0, r3
 8005036:	f002 faa5 	bl	8007584 <HAL_I2C_Init>
 800503a:	1e03      	subs	r3, r0, #0
 800503c:	d001      	beq.n	8005042 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800503e:	f000 fa05 	bl	800544c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005042:	4b0a      	ldr	r3, [pc, #40]	@ (800506c <MX_I2C1_Init+0x74>)
 8005044:	2100      	movs	r1, #0
 8005046:	0018      	movs	r0, r3
 8005048:	f003 fb70 	bl	800872c <HAL_I2CEx_ConfigAnalogFilter>
 800504c:	1e03      	subs	r3, r0, #0
 800504e:	d001      	beq.n	8005054 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005050:	f000 f9fc 	bl	800544c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005054:	4b05      	ldr	r3, [pc, #20]	@ (800506c <MX_I2C1_Init+0x74>)
 8005056:	2100      	movs	r1, #0
 8005058:	0018      	movs	r0, r3
 800505a:	f003 fbb3 	bl	80087c4 <HAL_I2CEx_ConfigDigitalFilter>
 800505e:	1e03      	subs	r3, r0, #0
 8005060:	d001      	beq.n	8005066 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005062:	f000 f9f3 	bl	800544c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005066:	46c0      	nop			@ (mov r8, r8)
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	200002d0 	.word	0x200002d0
 8005070:	40005400 	.word	0x40005400
 8005074:	0060112f 	.word	0x0060112f

08005078 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800507c:	4b1c      	ldr	r3, [pc, #112]	@ (80050f0 <MX_SPI2_Init+0x78>)
 800507e:	4a1d      	ldr	r2, [pc, #116]	@ (80050f4 <MX_SPI2_Init+0x7c>)
 8005080:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005082:	4b1b      	ldr	r3, [pc, #108]	@ (80050f0 <MX_SPI2_Init+0x78>)
 8005084:	2282      	movs	r2, #130	@ 0x82
 8005086:	0052      	lsls	r2, r2, #1
 8005088:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800508a:	4b19      	ldr	r3, [pc, #100]	@ (80050f0 <MX_SPI2_Init+0x78>)
 800508c:	2280      	movs	r2, #128	@ 0x80
 800508e:	00d2      	lsls	r2, r2, #3
 8005090:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8005092:	4b17      	ldr	r3, [pc, #92]	@ (80050f0 <MX_SPI2_Init+0x78>)
 8005094:	22f0      	movs	r2, #240	@ 0xf0
 8005096:	0112      	lsls	r2, r2, #4
 8005098:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800509a:	4b15      	ldr	r3, [pc, #84]	@ (80050f0 <MX_SPI2_Init+0x78>)
 800509c:	2200      	movs	r2, #0
 800509e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80050a0:	4b13      	ldr	r3, [pc, #76]	@ (80050f0 <MX_SPI2_Init+0x78>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80050a6:	4b12      	ldr	r3, [pc, #72]	@ (80050f0 <MX_SPI2_Init+0x78>)
 80050a8:	2280      	movs	r2, #128	@ 0x80
 80050aa:	0092      	lsls	r2, r2, #2
 80050ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80050ae:	4b10      	ldr	r3, [pc, #64]	@ (80050f0 <MX_SPI2_Init+0x78>)
 80050b0:	2210      	movs	r2, #16
 80050b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80050b4:	4b0e      	ldr	r3, [pc, #56]	@ (80050f0 <MX_SPI2_Init+0x78>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80050ba:	4b0d      	ldr	r3, [pc, #52]	@ (80050f0 <MX_SPI2_Init+0x78>)
 80050bc:	2200      	movs	r2, #0
 80050be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050c0:	4b0b      	ldr	r3, [pc, #44]	@ (80050f0 <MX_SPI2_Init+0x78>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80050c6:	4b0a      	ldr	r3, [pc, #40]	@ (80050f0 <MX_SPI2_Init+0x78>)
 80050c8:	2207      	movs	r2, #7
 80050ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80050cc:	4b08      	ldr	r3, [pc, #32]	@ (80050f0 <MX_SPI2_Init+0x78>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80050d2:	4b07      	ldr	r3, [pc, #28]	@ (80050f0 <MX_SPI2_Init+0x78>)
 80050d4:	2208      	movs	r2, #8
 80050d6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80050d8:	4b05      	ldr	r3, [pc, #20]	@ (80050f0 <MX_SPI2_Init+0x78>)
 80050da:	0018      	movs	r0, r3
 80050dc:	f004 f9f8 	bl	80094d0 <HAL_SPI_Init>
 80050e0:	1e03      	subs	r3, r0, #0
 80050e2:	d001      	beq.n	80050e8 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80050e4:	f000 f9b2 	bl	800544c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80050e8:	46c0      	nop			@ (mov r8, r8)
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	46c0      	nop			@ (mov r8, r8)
 80050f0:	20000324 	.word	0x20000324
 80050f4:	40003800 	.word	0x40003800

080050f8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80050fc:	4b0f      	ldr	r3, [pc, #60]	@ (800513c <MX_TIM16_Init+0x44>)
 80050fe:	4a10      	ldr	r2, [pc, #64]	@ (8005140 <MX_TIM16_Init+0x48>)
 8005100:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32;
 8005102:	4b0e      	ldr	r3, [pc, #56]	@ (800513c <MX_TIM16_Init+0x44>)
 8005104:	2220      	movs	r2, #32
 8005106:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005108:	4b0c      	ldr	r3, [pc, #48]	@ (800513c <MX_TIM16_Init+0x44>)
 800510a:	2200      	movs	r2, #0
 800510c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 800510e:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <MX_TIM16_Init+0x44>)
 8005110:	2264      	movs	r2, #100	@ 0x64
 8005112:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005114:	4b09      	ldr	r3, [pc, #36]	@ (800513c <MX_TIM16_Init+0x44>)
 8005116:	2200      	movs	r2, #0
 8005118:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800511a:	4b08      	ldr	r3, [pc, #32]	@ (800513c <MX_TIM16_Init+0x44>)
 800511c:	2200      	movs	r2, #0
 800511e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005120:	4b06      	ldr	r3, [pc, #24]	@ (800513c <MX_TIM16_Init+0x44>)
 8005122:	2200      	movs	r2, #0
 8005124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005126:	4b05      	ldr	r3, [pc, #20]	@ (800513c <MX_TIM16_Init+0x44>)
 8005128:	0018      	movs	r0, r3
 800512a:	f004 ff91 	bl	800a050 <HAL_TIM_Base_Init>
 800512e:	1e03      	subs	r3, r0, #0
 8005130:	d001      	beq.n	8005136 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8005132:	f000 f98b 	bl	800544c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005136:	46c0      	nop			@ (mov r8, r8)
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20000388 	.word	0x20000388
 8005140:	40014400 	.word	0x40014400

08005144 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005148:	4b16      	ldr	r3, [pc, #88]	@ (80051a4 <MX_USART3_UART_Init+0x60>)
 800514a:	4a17      	ldr	r2, [pc, #92]	@ (80051a8 <MX_USART3_UART_Init+0x64>)
 800514c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800514e:	4b15      	ldr	r3, [pc, #84]	@ (80051a4 <MX_USART3_UART_Init+0x60>)
 8005150:	22e1      	movs	r2, #225	@ 0xe1
 8005152:	0252      	lsls	r2, r2, #9
 8005154:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005156:	4b13      	ldr	r3, [pc, #76]	@ (80051a4 <MX_USART3_UART_Init+0x60>)
 8005158:	2200      	movs	r2, #0
 800515a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800515c:	4b11      	ldr	r3, [pc, #68]	@ (80051a4 <MX_USART3_UART_Init+0x60>)
 800515e:	2200      	movs	r2, #0
 8005160:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005162:	4b10      	ldr	r3, [pc, #64]	@ (80051a4 <MX_USART3_UART_Init+0x60>)
 8005164:	2200      	movs	r2, #0
 8005166:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005168:	4b0e      	ldr	r3, [pc, #56]	@ (80051a4 <MX_USART3_UART_Init+0x60>)
 800516a:	220c      	movs	r2, #12
 800516c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800516e:	4b0d      	ldr	r3, [pc, #52]	@ (80051a4 <MX_USART3_UART_Init+0x60>)
 8005170:	2200      	movs	r2, #0
 8005172:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005174:	4b0b      	ldr	r3, [pc, #44]	@ (80051a4 <MX_USART3_UART_Init+0x60>)
 8005176:	2200      	movs	r2, #0
 8005178:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800517a:	4b0a      	ldr	r3, [pc, #40]	@ (80051a4 <MX_USART3_UART_Init+0x60>)
 800517c:	2200      	movs	r2, #0
 800517e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005180:	4b08      	ldr	r3, [pc, #32]	@ (80051a4 <MX_USART3_UART_Init+0x60>)
 8005182:	2200      	movs	r2, #0
 8005184:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005186:	4b07      	ldr	r3, [pc, #28]	@ (80051a4 <MX_USART3_UART_Init+0x60>)
 8005188:	2200      	movs	r2, #0
 800518a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800518c:	4b05      	ldr	r3, [pc, #20]	@ (80051a4 <MX_USART3_UART_Init+0x60>)
 800518e:	0018      	movs	r0, r3
 8005190:	f005 f9d0 	bl	800a534 <HAL_UART_Init>
 8005194:	1e03      	subs	r3, r0, #0
 8005196:	d001      	beq.n	800519c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8005198:	f000 f958 	bl	800544c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800519c:	46c0      	nop			@ (mov r8, r8)
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	46c0      	nop			@ (mov r8, r8)
 80051a4:	200003d4 	.word	0x200003d4
 80051a8:	40004800 	.word	0x40004800

080051ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80051b2:	4b10      	ldr	r3, [pc, #64]	@ (80051f4 <MX_DMA_Init+0x48>)
 80051b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051b6:	4b0f      	ldr	r3, [pc, #60]	@ (80051f4 <MX_DMA_Init+0x48>)
 80051b8:	2101      	movs	r1, #1
 80051ba:	430a      	orrs	r2, r1
 80051bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80051be:	4b0d      	ldr	r3, [pc, #52]	@ (80051f4 <MX_DMA_Init+0x48>)
 80051c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c2:	2201      	movs	r2, #1
 80051c4:	4013      	ands	r3, r2
 80051c6:	607b      	str	r3, [r7, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80051ca:	2200      	movs	r2, #0
 80051cc:	2100      	movs	r1, #0
 80051ce:	2009      	movs	r0, #9
 80051d0:	f001 fcb6 	bl	8006b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80051d4:	2009      	movs	r0, #9
 80051d6:	f001 fcc8 	bl	8006b6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80051da:	2200      	movs	r2, #0
 80051dc:	2100      	movs	r1, #0
 80051de:	200a      	movs	r0, #10
 80051e0:	f001 fcae 	bl	8006b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80051e4:	200a      	movs	r0, #10
 80051e6:	f001 fcc0 	bl	8006b6a <HAL_NVIC_EnableIRQ>

}
 80051ea:	46c0      	nop			@ (mov r8, r8)
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b002      	add	sp, #8
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	46c0      	nop			@ (mov r8, r8)
 80051f4:	40021000 	.word	0x40021000

080051f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b08b      	sub	sp, #44	@ 0x2c
 80051fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051fe:	2414      	movs	r4, #20
 8005200:	193b      	adds	r3, r7, r4
 8005202:	0018      	movs	r0, r3
 8005204:	2314      	movs	r3, #20
 8005206:	001a      	movs	r2, r3
 8005208:	2100      	movs	r1, #0
 800520a:	f007 fa27 	bl	800c65c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800520e:	4b8a      	ldr	r3, [pc, #552]	@ (8005438 <MX_GPIO_Init+0x240>)
 8005210:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005212:	4b89      	ldr	r3, [pc, #548]	@ (8005438 <MX_GPIO_Init+0x240>)
 8005214:	2104      	movs	r1, #4
 8005216:	430a      	orrs	r2, r1
 8005218:	635a      	str	r2, [r3, #52]	@ 0x34
 800521a:	4b87      	ldr	r3, [pc, #540]	@ (8005438 <MX_GPIO_Init+0x240>)
 800521c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800521e:	2204      	movs	r2, #4
 8005220:	4013      	ands	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
 8005224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005226:	4b84      	ldr	r3, [pc, #528]	@ (8005438 <MX_GPIO_Init+0x240>)
 8005228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800522a:	4b83      	ldr	r3, [pc, #524]	@ (8005438 <MX_GPIO_Init+0x240>)
 800522c:	2120      	movs	r1, #32
 800522e:	430a      	orrs	r2, r1
 8005230:	635a      	str	r2, [r3, #52]	@ 0x34
 8005232:	4b81      	ldr	r3, [pc, #516]	@ (8005438 <MX_GPIO_Init+0x240>)
 8005234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005236:	2220      	movs	r2, #32
 8005238:	4013      	ands	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800523e:	4b7e      	ldr	r3, [pc, #504]	@ (8005438 <MX_GPIO_Init+0x240>)
 8005240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005242:	4b7d      	ldr	r3, [pc, #500]	@ (8005438 <MX_GPIO_Init+0x240>)
 8005244:	2101      	movs	r1, #1
 8005246:	430a      	orrs	r2, r1
 8005248:	635a      	str	r2, [r3, #52]	@ 0x34
 800524a:	4b7b      	ldr	r3, [pc, #492]	@ (8005438 <MX_GPIO_Init+0x240>)
 800524c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800524e:	2201      	movs	r2, #1
 8005250:	4013      	ands	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]
 8005254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005256:	4b78      	ldr	r3, [pc, #480]	@ (8005438 <MX_GPIO_Init+0x240>)
 8005258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800525a:	4b77      	ldr	r3, [pc, #476]	@ (8005438 <MX_GPIO_Init+0x240>)
 800525c:	2102      	movs	r1, #2
 800525e:	430a      	orrs	r2, r1
 8005260:	635a      	str	r2, [r3, #52]	@ 0x34
 8005262:	4b75      	ldr	r3, [pc, #468]	@ (8005438 <MX_GPIO_Init+0x240>)
 8005264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005266:	2202      	movs	r2, #2
 8005268:	4013      	ands	r3, r2
 800526a:	607b      	str	r3, [r7, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800526e:	4b72      	ldr	r3, [pc, #456]	@ (8005438 <MX_GPIO_Init+0x240>)
 8005270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005272:	4b71      	ldr	r3, [pc, #452]	@ (8005438 <MX_GPIO_Init+0x240>)
 8005274:	2108      	movs	r1, #8
 8005276:	430a      	orrs	r2, r1
 8005278:	635a      	str	r2, [r3, #52]	@ 0x34
 800527a:	4b6f      	ldr	r3, [pc, #444]	@ (8005438 <MX_GPIO_Init+0x240>)
 800527c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800527e:	2208      	movs	r2, #8
 8005280:	4013      	ands	r3, r2
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8005286:	23e0      	movs	r3, #224	@ 0xe0
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	486c      	ldr	r0, [pc, #432]	@ (800543c <MX_GPIO_Init+0x244>)
 800528c:	2200      	movs	r2, #0
 800528e:	0019      	movs	r1, r3
 8005290:	f002 f927 	bl	80074e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIAC1_Pin|UP_LED_Pin, GPIO_PIN_RESET);
 8005294:	4b6a      	ldr	r3, [pc, #424]	@ (8005440 <MX_GPIO_Init+0x248>)
 8005296:	2200      	movs	r2, #0
 8005298:	2103      	movs	r1, #3
 800529a:	0018      	movs	r0, r3
 800529c:	f002 f921 	bl	80074e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin, GPIO_PIN_RESET);
 80052a0:	23e0      	movs	r3, #224	@ 0xe0
 80052a2:	0059      	lsls	r1, r3, #1
 80052a4:	23a0      	movs	r3, #160	@ 0xa0
 80052a6:	05db      	lsls	r3, r3, #23
 80052a8:	2200      	movs	r2, #0
 80052aa:	0018      	movs	r0, r3
 80052ac:	f002 f919 	bl	80074e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_TC1_Pin|CS_TC2_Pin|CS_TC5_Pin, GPIO_PIN_RESET);
 80052b0:	2398      	movs	r3, #152	@ 0x98
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	4863      	ldr	r0, [pc, #396]	@ (8005444 <MX_GPIO_Init+0x24c>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	0019      	movs	r1, r3
 80052ba:	f002 f912 	bl	80074e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80052be:	4b62      	ldr	r3, [pc, #392]	@ (8005448 <MX_GPIO_Init+0x250>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	2108      	movs	r1, #8
 80052c4:	0018      	movs	r0, r3
 80052c6:	f002 f90c 	bl	80074e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TRIAC2_Pin PC14 PC15 */
  GPIO_InitStruct.Pin = TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15;
 80052ca:	193b      	adds	r3, r7, r4
 80052cc:	22e0      	movs	r2, #224	@ 0xe0
 80052ce:	0212      	lsls	r2, r2, #8
 80052d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052d2:	193b      	adds	r3, r7, r4
 80052d4:	2201      	movs	r2, #1
 80052d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d8:	193b      	adds	r3, r7, r4
 80052da:	2200      	movs	r2, #0
 80052dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052de:	193b      	adds	r3, r7, r4
 80052e0:	2200      	movs	r2, #0
 80052e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052e4:	193b      	adds	r3, r7, r4
 80052e6:	4a55      	ldr	r2, [pc, #340]	@ (800543c <MX_GPIO_Init+0x244>)
 80052e8:	0019      	movs	r1, r3
 80052ea:	0010      	movs	r0, r2
 80052ec:	f001 ff78 	bl	80071e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIAC1_Pin UP_LED_Pin */
  GPIO_InitStruct.Pin = TRIAC1_Pin|UP_LED_Pin;
 80052f0:	193b      	adds	r3, r7, r4
 80052f2:	2203      	movs	r2, #3
 80052f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052f6:	193b      	adds	r3, r7, r4
 80052f8:	2201      	movs	r2, #1
 80052fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fc:	193b      	adds	r3, r7, r4
 80052fe:	2200      	movs	r2, #0
 8005300:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005302:	193b      	adds	r3, r7, r4
 8005304:	2200      	movs	r2, #0
 8005306:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005308:	193b      	adds	r3, r7, r4
 800530a:	4a4d      	ldr	r2, [pc, #308]	@ (8005440 <MX_GPIO_Init+0x248>)
 800530c:	0019      	movs	r1, r3
 800530e:	0010      	movs	r0, r2
 8005310:	f001 ff66 	bl	80071e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_Pin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 8005314:	193b      	adds	r3, r7, r4
 8005316:	2210      	movs	r2, #16
 8005318:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800531a:	193b      	adds	r3, r7, r4
 800531c:	2284      	movs	r2, #132	@ 0x84
 800531e:	0392      	lsls	r2, r2, #14
 8005320:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005322:	193b      	adds	r3, r7, r4
 8005324:	2201      	movs	r2, #1
 8005326:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 8005328:	193a      	adds	r2, r7, r4
 800532a:	23a0      	movs	r3, #160	@ 0xa0
 800532c:	05db      	lsls	r3, r3, #23
 800532e:	0011      	movs	r1, r2
 8005330:	0018      	movs	r0, r3
 8005332:	f001 ff55 	bl	80071e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_RESET_Pin MCU_PWRKEY_Pin CS_TC6_Pin */
  GPIO_InitStruct.Pin = MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin;
 8005336:	0021      	movs	r1, r4
 8005338:	187b      	adds	r3, r7, r1
 800533a:	22e0      	movs	r2, #224	@ 0xe0
 800533c:	0052      	lsls	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005340:	000c      	movs	r4, r1
 8005342:	193b      	adds	r3, r7, r4
 8005344:	2201      	movs	r2, #1
 8005346:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005348:	193b      	adds	r3, r7, r4
 800534a:	2200      	movs	r2, #0
 800534c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800534e:	193b      	adds	r3, r7, r4
 8005350:	2200      	movs	r2, #0
 8005352:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005354:	193a      	adds	r2, r7, r4
 8005356:	23a0      	movs	r3, #160	@ 0xa0
 8005358:	05db      	lsls	r3, r3, #23
 800535a:	0011      	movs	r1, r2
 800535c:	0018      	movs	r0, r3
 800535e:	f001 ff3f 	bl	80071e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_TC1_Pin CS_TC2_Pin CS_TC5_Pin */
  GPIO_InitStruct.Pin = CS_TC1_Pin|CS_TC2_Pin|CS_TC5_Pin;
 8005362:	0021      	movs	r1, r4
 8005364:	187b      	adds	r3, r7, r1
 8005366:	2298      	movs	r2, #152	@ 0x98
 8005368:	0212      	lsls	r2, r2, #8
 800536a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800536c:	000c      	movs	r4, r1
 800536e:	193b      	adds	r3, r7, r4
 8005370:	2201      	movs	r2, #1
 8005372:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005374:	193b      	adds	r3, r7, r4
 8005376:	2200      	movs	r2, #0
 8005378:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800537a:	193b      	adds	r3, r7, r4
 800537c:	2200      	movs	r2, #0
 800537e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005380:	193b      	adds	r3, r7, r4
 8005382:	4a30      	ldr	r2, [pc, #192]	@ (8005444 <MX_GPIO_Init+0x24c>)
 8005384:	0019      	movs	r1, r3
 8005386:	0010      	movs	r0, r2
 8005388:	f001 ff2a 	bl	80071e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_INT_Pin */
  GPIO_InitStruct.Pin = RTC_INT_Pin;
 800538c:	0021      	movs	r1, r4
 800538e:	187b      	adds	r3, r7, r1
 8005390:	2240      	movs	r2, #64	@ 0x40
 8005392:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005394:	187b      	adds	r3, r7, r1
 8005396:	2284      	movs	r2, #132	@ 0x84
 8005398:	0392      	lsls	r2, r2, #14
 800539a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539c:	000c      	movs	r4, r1
 800539e:	193b      	adds	r3, r7, r4
 80053a0:	2200      	movs	r2, #0
 80053a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 80053a4:	193b      	adds	r3, r7, r4
 80053a6:	4a25      	ldr	r2, [pc, #148]	@ (800543c <MX_GPIO_Init+0x244>)
 80053a8:	0019      	movs	r1, r3
 80053aa:	0010      	movs	r0, r2
 80053ac:	f001 ff18 	bl	80071e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80053b0:	193b      	adds	r3, r7, r4
 80053b2:	2208      	movs	r2, #8
 80053b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053b6:	193b      	adds	r3, r7, r4
 80053b8:	2201      	movs	r2, #1
 80053ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053bc:	193b      	adds	r3, r7, r4
 80053be:	2200      	movs	r2, #0
 80053c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053c2:	193b      	adds	r3, r7, r4
 80053c4:	2200      	movs	r2, #0
 80053c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80053c8:	193b      	adds	r3, r7, r4
 80053ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005448 <MX_GPIO_Init+0x250>)
 80053cc:	0019      	movs	r1, r3
 80053ce:	0010      	movs	r0, r2
 80053d0:	f001 ff06 	bl	80071e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80053d4:	193b      	adds	r3, r7, r4
 80053d6:	2208      	movs	r2, #8
 80053d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053da:	193b      	adds	r3, r7, r4
 80053dc:	2202      	movs	r2, #2
 80053de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e0:	193b      	adds	r3, r7, r4
 80053e2:	2200      	movs	r2, #0
 80053e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e6:	193b      	adds	r3, r7, r4
 80053e8:	2200      	movs	r2, #0
 80053ea:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80053ec:	193b      	adds	r3, r7, r4
 80053ee:	2200      	movs	r2, #0
 80053f0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053f2:	193b      	adds	r3, r7, r4
 80053f4:	4a13      	ldr	r2, [pc, #76]	@ (8005444 <MX_GPIO_Init+0x24c>)
 80053f6:	0019      	movs	r1, r3
 80053f8:	0010      	movs	r0, r2
 80053fa:	f001 fef1 	bl	80071e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_IN_Pin BTN2_IN_Pin BTN1_IN_Pin */
  GPIO_InitStruct.Pin = BTN3_IN_Pin|BTN2_IN_Pin|BTN1_IN_Pin;
 80053fe:	0021      	movs	r1, r4
 8005400:	187b      	adds	r3, r7, r1
 8005402:	22e0      	movs	r2, #224	@ 0xe0
 8005404:	0092      	lsls	r2, r2, #2
 8005406:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005408:	187b      	adds	r3, r7, r1
 800540a:	2200      	movs	r2, #0
 800540c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540e:	187b      	adds	r3, r7, r1
 8005410:	2200      	movs	r2, #0
 8005412:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005414:	187b      	adds	r3, r7, r1
 8005416:	4a0b      	ldr	r2, [pc, #44]	@ (8005444 <MX_GPIO_Init+0x24c>)
 8005418:	0019      	movs	r1, r3
 800541a:	0010      	movs	r0, r2
 800541c:	f001 fee0 	bl	80071e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8005420:	2200      	movs	r2, #0
 8005422:	2100      	movs	r1, #0
 8005424:	2007      	movs	r0, #7
 8005426:	f001 fb8b 	bl	8006b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800542a:	2007      	movs	r0, #7
 800542c:	f001 fb9d 	bl	8006b6a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8005430:	46c0      	nop			@ (mov r8, r8)
 8005432:	46bd      	mov	sp, r7
 8005434:	b00b      	add	sp, #44	@ 0x2c
 8005436:	bd90      	pop	{r4, r7, pc}
 8005438:	40021000 	.word	0x40021000
 800543c:	50000800 	.word	0x50000800
 8005440:	50001400 	.word	0x50001400
 8005444:	50000400 	.word	0x50000400
 8005448:	50000c00 	.word	0x50000c00

0800544c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005450:	b672      	cpsid	i
}
 8005452:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8005454:	46c0      	nop			@ (mov r8, r8)
 8005456:	e7fd      	b.n	8005454 <Error_Handler+0x8>

08005458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800545e:	4b0f      	ldr	r3, [pc, #60]	@ (800549c <HAL_MspInit+0x44>)
 8005460:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005462:	4b0e      	ldr	r3, [pc, #56]	@ (800549c <HAL_MspInit+0x44>)
 8005464:	2101      	movs	r1, #1
 8005466:	430a      	orrs	r2, r1
 8005468:	641a      	str	r2, [r3, #64]	@ 0x40
 800546a:	4b0c      	ldr	r3, [pc, #48]	@ (800549c <HAL_MspInit+0x44>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546e:	2201      	movs	r2, #1
 8005470:	4013      	ands	r3, r2
 8005472:	607b      	str	r3, [r7, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005476:	4b09      	ldr	r3, [pc, #36]	@ (800549c <HAL_MspInit+0x44>)
 8005478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800547a:	4b08      	ldr	r3, [pc, #32]	@ (800549c <HAL_MspInit+0x44>)
 800547c:	2180      	movs	r1, #128	@ 0x80
 800547e:	0549      	lsls	r1, r1, #21
 8005480:	430a      	orrs	r2, r1
 8005482:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005484:	4b05      	ldr	r3, [pc, #20]	@ (800549c <HAL_MspInit+0x44>)
 8005486:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005488:	2380      	movs	r3, #128	@ 0x80
 800548a:	055b      	lsls	r3, r3, #21
 800548c:	4013      	ands	r3, r2
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005492:	46c0      	nop			@ (mov r8, r8)
 8005494:	46bd      	mov	sp, r7
 8005496:	b002      	add	sp, #8
 8005498:	bd80      	pop	{r7, pc}
 800549a:	46c0      	nop			@ (mov r8, r8)
 800549c:	40021000 	.word	0x40021000

080054a0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b091      	sub	sp, #68	@ 0x44
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054a8:	232c      	movs	r3, #44	@ 0x2c
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	0018      	movs	r0, r3
 80054ae:	2314      	movs	r3, #20
 80054b0:	001a      	movs	r2, r3
 80054b2:	2100      	movs	r1, #0
 80054b4:	f007 f8d2 	bl	800c65c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054b8:	2410      	movs	r4, #16
 80054ba:	193b      	adds	r3, r7, r4
 80054bc:	0018      	movs	r0, r3
 80054be:	231c      	movs	r3, #28
 80054c0:	001a      	movs	r2, r3
 80054c2:	2100      	movs	r1, #0
 80054c4:	f007 f8ca 	bl	800c65c <memset>
  if(hadc->Instance==ADC1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a3a      	ldr	r2, [pc, #232]	@ (80055b8 <HAL_ADC_MspInit+0x118>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d16d      	bne.n	80055ae <HAL_ADC_MspInit+0x10e>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80054d2:	193b      	adds	r3, r7, r4
 80054d4:	2280      	movs	r2, #128	@ 0x80
 80054d6:	01d2      	lsls	r2, r2, #7
 80054d8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 80054da:	193b      	adds	r3, r7, r4
 80054dc:	2280      	movs	r2, #128	@ 0x80
 80054de:	05d2      	lsls	r2, r2, #23
 80054e0:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054e2:	193b      	adds	r3, r7, r4
 80054e4:	0018      	movs	r0, r3
 80054e6:	f003 febf 	bl	8009268 <HAL_RCCEx_PeriphCLKConfig>
 80054ea:	1e03      	subs	r3, r0, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80054ee:	f7ff ffad 	bl	800544c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80054f2:	4b32      	ldr	r3, [pc, #200]	@ (80055bc <HAL_ADC_MspInit+0x11c>)
 80054f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054f6:	4b31      	ldr	r3, [pc, #196]	@ (80055bc <HAL_ADC_MspInit+0x11c>)
 80054f8:	2180      	movs	r1, #128	@ 0x80
 80054fa:	0349      	lsls	r1, r1, #13
 80054fc:	430a      	orrs	r2, r1
 80054fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8005500:	4b2e      	ldr	r3, [pc, #184]	@ (80055bc <HAL_ADC_MspInit+0x11c>)
 8005502:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005504:	2380      	movs	r3, #128	@ 0x80
 8005506:	035b      	lsls	r3, r3, #13
 8005508:	4013      	ands	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800550e:	4b2b      	ldr	r3, [pc, #172]	@ (80055bc <HAL_ADC_MspInit+0x11c>)
 8005510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005512:	4b2a      	ldr	r3, [pc, #168]	@ (80055bc <HAL_ADC_MspInit+0x11c>)
 8005514:	2101      	movs	r1, #1
 8005516:	430a      	orrs	r2, r1
 8005518:	635a      	str	r2, [r3, #52]	@ 0x34
 800551a:	4b28      	ldr	r3, [pc, #160]	@ (80055bc <HAL_ADC_MspInit+0x11c>)
 800551c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800551e:	2201      	movs	r2, #1
 8005520:	4013      	ands	r3, r2
 8005522:	60bb      	str	r3, [r7, #8]
 8005524:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005526:	212c      	movs	r1, #44	@ 0x2c
 8005528:	187b      	adds	r3, r7, r1
 800552a:	220c      	movs	r2, #12
 800552c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800552e:	187b      	adds	r3, r7, r1
 8005530:	2203      	movs	r2, #3
 8005532:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005534:	187b      	adds	r3, r7, r1
 8005536:	2200      	movs	r2, #0
 8005538:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800553a:	187a      	adds	r2, r7, r1
 800553c:	23a0      	movs	r3, #160	@ 0xa0
 800553e:	05db      	lsls	r3, r3, #23
 8005540:	0011      	movs	r1, r2
 8005542:	0018      	movs	r0, r3
 8005544:	f001 fe4c 	bl	80071e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005548:	4b1d      	ldr	r3, [pc, #116]	@ (80055c0 <HAL_ADC_MspInit+0x120>)
 800554a:	4a1e      	ldr	r2, [pc, #120]	@ (80055c4 <HAL_ADC_MspInit+0x124>)
 800554c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800554e:	4b1c      	ldr	r3, [pc, #112]	@ (80055c0 <HAL_ADC_MspInit+0x120>)
 8005550:	2205      	movs	r2, #5
 8005552:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005554:	4b1a      	ldr	r3, [pc, #104]	@ (80055c0 <HAL_ADC_MspInit+0x120>)
 8005556:	2200      	movs	r2, #0
 8005558:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800555a:	4b19      	ldr	r3, [pc, #100]	@ (80055c0 <HAL_ADC_MspInit+0x120>)
 800555c:	2200      	movs	r2, #0
 800555e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005560:	4b17      	ldr	r3, [pc, #92]	@ (80055c0 <HAL_ADC_MspInit+0x120>)
 8005562:	2280      	movs	r2, #128	@ 0x80
 8005564:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005566:	4b16      	ldr	r3, [pc, #88]	@ (80055c0 <HAL_ADC_MspInit+0x120>)
 8005568:	2280      	movs	r2, #128	@ 0x80
 800556a:	0052      	lsls	r2, r2, #1
 800556c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800556e:	4b14      	ldr	r3, [pc, #80]	@ (80055c0 <HAL_ADC_MspInit+0x120>)
 8005570:	2280      	movs	r2, #128	@ 0x80
 8005572:	00d2      	lsls	r2, r2, #3
 8005574:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005576:	4b12      	ldr	r3, [pc, #72]	@ (80055c0 <HAL_ADC_MspInit+0x120>)
 8005578:	2220      	movs	r2, #32
 800557a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800557c:	4b10      	ldr	r3, [pc, #64]	@ (80055c0 <HAL_ADC_MspInit+0x120>)
 800557e:	2200      	movs	r2, #0
 8005580:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005582:	4b0f      	ldr	r3, [pc, #60]	@ (80055c0 <HAL_ADC_MspInit+0x120>)
 8005584:	0018      	movs	r0, r3
 8005586:	f001 fb0d 	bl	8006ba4 <HAL_DMA_Init>
 800558a:	1e03      	subs	r3, r0, #0
 800558c:	d001      	beq.n	8005592 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 800558e:	f7ff ff5d 	bl	800544c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a0a      	ldr	r2, [pc, #40]	@ (80055c0 <HAL_ADC_MspInit+0x120>)
 8005596:	651a      	str	r2, [r3, #80]	@ 0x50
 8005598:	4b09      	ldr	r3, [pc, #36]	@ (80055c0 <HAL_ADC_MspInit+0x120>)
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800559e:	2200      	movs	r2, #0
 80055a0:	2100      	movs	r1, #0
 80055a2:	200c      	movs	r0, #12
 80055a4:	f001 facc 	bl	8006b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80055a8:	200c      	movs	r0, #12
 80055aa:	f001 fade 	bl	8006b6a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80055ae:	46c0      	nop			@ (mov r8, r8)
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b011      	add	sp, #68	@ 0x44
 80055b4:	bd90      	pop	{r4, r7, pc}
 80055b6:	46c0      	nop			@ (mov r8, r8)
 80055b8:	40012400 	.word	0x40012400
 80055bc:	40021000 	.word	0x40021000
 80055c0:	20000274 	.word	0x20000274
 80055c4:	40020008 	.word	0x40020008

080055c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80055c8:	b590      	push	{r4, r7, lr}
 80055ca:	b091      	sub	sp, #68	@ 0x44
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055d0:	232c      	movs	r3, #44	@ 0x2c
 80055d2:	18fb      	adds	r3, r7, r3
 80055d4:	0018      	movs	r0, r3
 80055d6:	2314      	movs	r3, #20
 80055d8:	001a      	movs	r2, r3
 80055da:	2100      	movs	r1, #0
 80055dc:	f007 f83e 	bl	800c65c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80055e0:	2410      	movs	r4, #16
 80055e2:	193b      	adds	r3, r7, r4
 80055e4:	0018      	movs	r0, r3
 80055e6:	231c      	movs	r3, #28
 80055e8:	001a      	movs	r2, r3
 80055ea:	2100      	movs	r1, #0
 80055ec:	f007 f836 	bl	800c65c <memset>
  if(hi2c->Instance==I2C1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a23      	ldr	r2, [pc, #140]	@ (8005684 <HAL_I2C_MspInit+0xbc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d13f      	bne.n	800567a <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80055fa:	193b      	adds	r3, r7, r4
 80055fc:	2220      	movs	r2, #32
 80055fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005600:	193b      	adds	r3, r7, r4
 8005602:	2200      	movs	r2, #0
 8005604:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005606:	193b      	adds	r3, r7, r4
 8005608:	0018      	movs	r0, r3
 800560a:	f003 fe2d 	bl	8009268 <HAL_RCCEx_PeriphCLKConfig>
 800560e:	1e03      	subs	r3, r0, #0
 8005610:	d001      	beq.n	8005616 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005612:	f7ff ff1b 	bl	800544c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005616:	4b1c      	ldr	r3, [pc, #112]	@ (8005688 <HAL_I2C_MspInit+0xc0>)
 8005618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800561a:	4b1b      	ldr	r3, [pc, #108]	@ (8005688 <HAL_I2C_MspInit+0xc0>)
 800561c:	2101      	movs	r1, #1
 800561e:	430a      	orrs	r2, r1
 8005620:	635a      	str	r2, [r3, #52]	@ 0x34
 8005622:	4b19      	ldr	r3, [pc, #100]	@ (8005688 <HAL_I2C_MspInit+0xc0>)
 8005624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005626:	2201      	movs	r2, #1
 8005628:	4013      	ands	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800562e:	212c      	movs	r1, #44	@ 0x2c
 8005630:	187b      	adds	r3, r7, r1
 8005632:	22c0      	movs	r2, #192	@ 0xc0
 8005634:	00d2      	lsls	r2, r2, #3
 8005636:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005638:	187b      	adds	r3, r7, r1
 800563a:	2212      	movs	r2, #18
 800563c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800563e:	187b      	adds	r3, r7, r1
 8005640:	2200      	movs	r2, #0
 8005642:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005644:	187b      	adds	r3, r7, r1
 8005646:	2200      	movs	r2, #0
 8005648:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800564a:	187b      	adds	r3, r7, r1
 800564c:	2206      	movs	r2, #6
 800564e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005650:	187a      	adds	r2, r7, r1
 8005652:	23a0      	movs	r3, #160	@ 0xa0
 8005654:	05db      	lsls	r3, r3, #23
 8005656:	0011      	movs	r1, r2
 8005658:	0018      	movs	r0, r3
 800565a:	f001 fdc1 	bl	80071e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800565e:	4b0a      	ldr	r3, [pc, #40]	@ (8005688 <HAL_I2C_MspInit+0xc0>)
 8005660:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005662:	4b09      	ldr	r3, [pc, #36]	@ (8005688 <HAL_I2C_MspInit+0xc0>)
 8005664:	2180      	movs	r1, #128	@ 0x80
 8005666:	0389      	lsls	r1, r1, #14
 8005668:	430a      	orrs	r2, r1
 800566a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800566c:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <HAL_I2C_MspInit+0xc0>)
 800566e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005670:	2380      	movs	r3, #128	@ 0x80
 8005672:	039b      	lsls	r3, r3, #14
 8005674:	4013      	ands	r3, r2
 8005676:	60bb      	str	r3, [r7, #8]
 8005678:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800567a:	46c0      	nop			@ (mov r8, r8)
 800567c:	46bd      	mov	sp, r7
 800567e:	b011      	add	sp, #68	@ 0x44
 8005680:	bd90      	pop	{r4, r7, pc}
 8005682:	46c0      	nop			@ (mov r8, r8)
 8005684:	40005400 	.word	0x40005400
 8005688:	40021000 	.word	0x40021000

0800568c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800568c:	b590      	push	{r4, r7, lr}
 800568e:	b08b      	sub	sp, #44	@ 0x2c
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005694:	2414      	movs	r4, #20
 8005696:	193b      	adds	r3, r7, r4
 8005698:	0018      	movs	r0, r3
 800569a:	2314      	movs	r3, #20
 800569c:	001a      	movs	r2, r3
 800569e:	2100      	movs	r1, #0
 80056a0:	f006 ffdc 	bl	800c65c <memset>
  if(hspi->Instance==SPI2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a26      	ldr	r2, [pc, #152]	@ (8005744 <HAL_SPI_MspInit+0xb8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d145      	bne.n	800573a <HAL_SPI_MspInit+0xae>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80056ae:	4b26      	ldr	r3, [pc, #152]	@ (8005748 <HAL_SPI_MspInit+0xbc>)
 80056b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056b2:	4b25      	ldr	r3, [pc, #148]	@ (8005748 <HAL_SPI_MspInit+0xbc>)
 80056b4:	2180      	movs	r1, #128	@ 0x80
 80056b6:	01c9      	lsls	r1, r1, #7
 80056b8:	430a      	orrs	r2, r1
 80056ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80056bc:	4b22      	ldr	r3, [pc, #136]	@ (8005748 <HAL_SPI_MspInit+0xbc>)
 80056be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056c0:	2380      	movs	r3, #128	@ 0x80
 80056c2:	01db      	lsls	r3, r3, #7
 80056c4:	4013      	ands	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005748 <HAL_SPI_MspInit+0xbc>)
 80056cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005748 <HAL_SPI_MspInit+0xbc>)
 80056d0:	2102      	movs	r1, #2
 80056d2:	430a      	orrs	r2, r1
 80056d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80056d6:	4b1c      	ldr	r3, [pc, #112]	@ (8005748 <HAL_SPI_MspInit+0xbc>)
 80056d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056da:	2202      	movs	r2, #2
 80056dc:	4013      	ands	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80056e2:	193b      	adds	r3, r7, r4
 80056e4:	2204      	movs	r2, #4
 80056e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e8:	193b      	adds	r3, r7, r4
 80056ea:	2202      	movs	r2, #2
 80056ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ee:	193b      	adds	r3, r7, r4
 80056f0:	2200      	movs	r2, #0
 80056f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056f4:	193b      	adds	r3, r7, r4
 80056f6:	2200      	movs	r2, #0
 80056f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80056fa:	193b      	adds	r3, r7, r4
 80056fc:	2201      	movs	r2, #1
 80056fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005700:	193b      	adds	r3, r7, r4
 8005702:	4a12      	ldr	r2, [pc, #72]	@ (800574c <HAL_SPI_MspInit+0xc0>)
 8005704:	0019      	movs	r1, r3
 8005706:	0010      	movs	r0, r2
 8005708:	f001 fd6a 	bl	80071e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800570c:	0021      	movs	r1, r4
 800570e:	187b      	adds	r3, r7, r1
 8005710:	2280      	movs	r2, #128	@ 0x80
 8005712:	00d2      	lsls	r2, r2, #3
 8005714:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005716:	187b      	adds	r3, r7, r1
 8005718:	2202      	movs	r2, #2
 800571a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800571c:	187b      	adds	r3, r7, r1
 800571e:	2200      	movs	r2, #0
 8005720:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005722:	187b      	adds	r3, r7, r1
 8005724:	2200      	movs	r2, #0
 8005726:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005728:	187b      	adds	r3, r7, r1
 800572a:	2205      	movs	r2, #5
 800572c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800572e:	187b      	adds	r3, r7, r1
 8005730:	4a06      	ldr	r2, [pc, #24]	@ (800574c <HAL_SPI_MspInit+0xc0>)
 8005732:	0019      	movs	r1, r3
 8005734:	0010      	movs	r0, r2
 8005736:	f001 fd53 	bl	80071e0 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800573a:	46c0      	nop			@ (mov r8, r8)
 800573c:	46bd      	mov	sp, r7
 800573e:	b00b      	add	sp, #44	@ 0x2c
 8005740:	bd90      	pop	{r4, r7, pc}
 8005742:	46c0      	nop			@ (mov r8, r8)
 8005744:	40003800 	.word	0x40003800
 8005748:	40021000 	.word	0x40021000
 800574c:	50000400 	.word	0x50000400

08005750 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a0e      	ldr	r2, [pc, #56]	@ (8005798 <HAL_TIM_Base_MspInit+0x48>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d115      	bne.n	800578e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005762:	4b0e      	ldr	r3, [pc, #56]	@ (800579c <HAL_TIM_Base_MspInit+0x4c>)
 8005764:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005766:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <HAL_TIM_Base_MspInit+0x4c>)
 8005768:	2180      	movs	r1, #128	@ 0x80
 800576a:	0289      	lsls	r1, r1, #10
 800576c:	430a      	orrs	r2, r1
 800576e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005770:	4b0a      	ldr	r3, [pc, #40]	@ (800579c <HAL_TIM_Base_MspInit+0x4c>)
 8005772:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005774:	2380      	movs	r3, #128	@ 0x80
 8005776:	029b      	lsls	r3, r3, #10
 8005778:	4013      	ands	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800577e:	2200      	movs	r2, #0
 8005780:	2100      	movs	r1, #0
 8005782:	2015      	movs	r0, #21
 8005784:	f001 f9dc 	bl	8006b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005788:	2015      	movs	r0, #21
 800578a:	f001 f9ee 	bl	8006b6a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 800578e:	46c0      	nop			@ (mov r8, r8)
 8005790:	46bd      	mov	sp, r7
 8005792:	b004      	add	sp, #16
 8005794:	bd80      	pop	{r7, pc}
 8005796:	46c0      	nop			@ (mov r8, r8)
 8005798:	40014400 	.word	0x40014400
 800579c:	40021000 	.word	0x40021000

080057a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80057a0:	b590      	push	{r4, r7, lr}
 80057a2:	b08b      	sub	sp, #44	@ 0x2c
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057a8:	2414      	movs	r4, #20
 80057aa:	193b      	adds	r3, r7, r4
 80057ac:	0018      	movs	r0, r3
 80057ae:	2314      	movs	r3, #20
 80057b0:	001a      	movs	r2, r3
 80057b2:	2100      	movs	r1, #0
 80057b4:	f006 ff52 	bl	800c65c <memset>
  if(huart->Instance==USART3)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a5a      	ldr	r2, [pc, #360]	@ (8005928 <HAL_UART_MspInit+0x188>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d000      	beq.n	80057c4 <HAL_UART_MspInit+0x24>
 80057c2:	e0ad      	b.n	8005920 <HAL_UART_MspInit+0x180>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80057c4:	4b59      	ldr	r3, [pc, #356]	@ (800592c <HAL_UART_MspInit+0x18c>)
 80057c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057c8:	4b58      	ldr	r3, [pc, #352]	@ (800592c <HAL_UART_MspInit+0x18c>)
 80057ca:	2180      	movs	r1, #128	@ 0x80
 80057cc:	02c9      	lsls	r1, r1, #11
 80057ce:	430a      	orrs	r2, r1
 80057d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80057d2:	4b56      	ldr	r3, [pc, #344]	@ (800592c <HAL_UART_MspInit+0x18c>)
 80057d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057d6:	2380      	movs	r3, #128	@ 0x80
 80057d8:	02db      	lsls	r3, r3, #11
 80057da:	4013      	ands	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]
 80057de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057e0:	4b52      	ldr	r3, [pc, #328]	@ (800592c <HAL_UART_MspInit+0x18c>)
 80057e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057e4:	4b51      	ldr	r3, [pc, #324]	@ (800592c <HAL_UART_MspInit+0x18c>)
 80057e6:	2101      	movs	r1, #1
 80057e8:	430a      	orrs	r2, r1
 80057ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80057ec:	4b4f      	ldr	r3, [pc, #316]	@ (800592c <HAL_UART_MspInit+0x18c>)
 80057ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f0:	2201      	movs	r2, #1
 80057f2:	4013      	ands	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057f8:	4b4c      	ldr	r3, [pc, #304]	@ (800592c <HAL_UART_MspInit+0x18c>)
 80057fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057fc:	4b4b      	ldr	r3, [pc, #300]	@ (800592c <HAL_UART_MspInit+0x18c>)
 80057fe:	2102      	movs	r1, #2
 8005800:	430a      	orrs	r2, r1
 8005802:	635a      	str	r2, [r3, #52]	@ 0x34
 8005804:	4b49      	ldr	r3, [pc, #292]	@ (800592c <HAL_UART_MspInit+0x18c>)
 8005806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005808:	2202      	movs	r2, #2
 800580a:	4013      	ands	r3, r2
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GSM_TX_Pin;
 8005810:	193b      	adds	r3, r7, r4
 8005812:	2220      	movs	r2, #32
 8005814:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005816:	193b      	adds	r3, r7, r4
 8005818:	2202      	movs	r2, #2
 800581a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800581c:	193b      	adds	r3, r7, r4
 800581e:	2200      	movs	r2, #0
 8005820:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005822:	193b      	adds	r3, r7, r4
 8005824:	2200      	movs	r2, #0
 8005826:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8005828:	193b      	adds	r3, r7, r4
 800582a:	2204      	movs	r2, #4
 800582c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_TX_GPIO_Port, &GPIO_InitStruct);
 800582e:	193a      	adds	r2, r7, r4
 8005830:	23a0      	movs	r3, #160	@ 0xa0
 8005832:	05db      	lsls	r3, r3, #23
 8005834:	0011      	movs	r1, r2
 8005836:	0018      	movs	r0, r3
 8005838:	f001 fcd2 	bl	80071e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GSM_RX_Pin;
 800583c:	0021      	movs	r1, r4
 800583e:	187b      	adds	r3, r7, r1
 8005840:	2201      	movs	r2, #1
 8005842:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005844:	187b      	adds	r3, r7, r1
 8005846:	2202      	movs	r2, #2
 8005848:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800584a:	187b      	adds	r3, r7, r1
 800584c:	2200      	movs	r2, #0
 800584e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005850:	187b      	adds	r3, r7, r1
 8005852:	2200      	movs	r2, #0
 8005854:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8005856:	187b      	adds	r3, r7, r1
 8005858:	2204      	movs	r2, #4
 800585a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_RX_GPIO_Port, &GPIO_InitStruct);
 800585c:	187b      	adds	r3, r7, r1
 800585e:	4a34      	ldr	r2, [pc, #208]	@ (8005930 <HAL_UART_MspInit+0x190>)
 8005860:	0019      	movs	r1, r3
 8005862:	0010      	movs	r0, r2
 8005864:	f001 fcbc 	bl	80071e0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel2;
 8005868:	4b32      	ldr	r3, [pc, #200]	@ (8005934 <HAL_UART_MspInit+0x194>)
 800586a:	4a33      	ldr	r2, [pc, #204]	@ (8005938 <HAL_UART_MspInit+0x198>)
 800586c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800586e:	4b31      	ldr	r3, [pc, #196]	@ (8005934 <HAL_UART_MspInit+0x194>)
 8005870:	2236      	movs	r2, #54	@ 0x36
 8005872:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005874:	4b2f      	ldr	r3, [pc, #188]	@ (8005934 <HAL_UART_MspInit+0x194>)
 8005876:	2200      	movs	r2, #0
 8005878:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800587a:	4b2e      	ldr	r3, [pc, #184]	@ (8005934 <HAL_UART_MspInit+0x194>)
 800587c:	2200      	movs	r2, #0
 800587e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005880:	4b2c      	ldr	r3, [pc, #176]	@ (8005934 <HAL_UART_MspInit+0x194>)
 8005882:	2280      	movs	r2, #128	@ 0x80
 8005884:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005886:	4b2b      	ldr	r3, [pc, #172]	@ (8005934 <HAL_UART_MspInit+0x194>)
 8005888:	2200      	movs	r2, #0
 800588a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800588c:	4b29      	ldr	r3, [pc, #164]	@ (8005934 <HAL_UART_MspInit+0x194>)
 800588e:	2200      	movs	r2, #0
 8005890:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005892:	4b28      	ldr	r3, [pc, #160]	@ (8005934 <HAL_UART_MspInit+0x194>)
 8005894:	2200      	movs	r2, #0
 8005896:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005898:	4b26      	ldr	r3, [pc, #152]	@ (8005934 <HAL_UART_MspInit+0x194>)
 800589a:	2280      	movs	r2, #128	@ 0x80
 800589c:	0152      	lsls	r2, r2, #5
 800589e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80058a0:	4b24      	ldr	r3, [pc, #144]	@ (8005934 <HAL_UART_MspInit+0x194>)
 80058a2:	0018      	movs	r0, r3
 80058a4:	f001 f97e 	bl	8006ba4 <HAL_DMA_Init>
 80058a8:	1e03      	subs	r3, r0, #0
 80058aa:	d001      	beq.n	80058b0 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80058ac:	f7ff fdce 	bl	800544c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2180      	movs	r1, #128	@ 0x80
 80058b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005934 <HAL_UART_MspInit+0x194>)
 80058b6:	505a      	str	r2, [r3, r1]
 80058b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005934 <HAL_UART_MspInit+0x194>)
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel3;
 80058be:	4b1f      	ldr	r3, [pc, #124]	@ (800593c <HAL_UART_MspInit+0x19c>)
 80058c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005940 <HAL_UART_MspInit+0x1a0>)
 80058c2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80058c4:	4b1d      	ldr	r3, [pc, #116]	@ (800593c <HAL_UART_MspInit+0x19c>)
 80058c6:	2237      	movs	r2, #55	@ 0x37
 80058c8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80058ca:	4b1c      	ldr	r3, [pc, #112]	@ (800593c <HAL_UART_MspInit+0x19c>)
 80058cc:	2210      	movs	r2, #16
 80058ce:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058d0:	4b1a      	ldr	r3, [pc, #104]	@ (800593c <HAL_UART_MspInit+0x19c>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80058d6:	4b19      	ldr	r3, [pc, #100]	@ (800593c <HAL_UART_MspInit+0x19c>)
 80058d8:	2280      	movs	r2, #128	@ 0x80
 80058da:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058dc:	4b17      	ldr	r3, [pc, #92]	@ (800593c <HAL_UART_MspInit+0x19c>)
 80058de:	2200      	movs	r2, #0
 80058e0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058e2:	4b16      	ldr	r3, [pc, #88]	@ (800593c <HAL_UART_MspInit+0x19c>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80058e8:	4b14      	ldr	r3, [pc, #80]	@ (800593c <HAL_UART_MspInit+0x19c>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80058ee:	4b13      	ldr	r3, [pc, #76]	@ (800593c <HAL_UART_MspInit+0x19c>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80058f4:	4b11      	ldr	r3, [pc, #68]	@ (800593c <HAL_UART_MspInit+0x19c>)
 80058f6:	0018      	movs	r0, r3
 80058f8:	f001 f954 	bl	8006ba4 <HAL_DMA_Init>
 80058fc:	1e03      	subs	r3, r0, #0
 80058fe:	d001      	beq.n	8005904 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8005900:	f7ff fda4 	bl	800544c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a0d      	ldr	r2, [pc, #52]	@ (800593c <HAL_UART_MspInit+0x19c>)
 8005908:	67da      	str	r2, [r3, #124]	@ 0x7c
 800590a:	4b0c      	ldr	r3, [pc, #48]	@ (800593c <HAL_UART_MspInit+0x19c>)
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8005910:	2200      	movs	r2, #0
 8005912:	2100      	movs	r1, #0
 8005914:	201d      	movs	r0, #29
 8005916:	f001 f913 	bl	8006b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800591a:	201d      	movs	r0, #29
 800591c:	f001 f925 	bl	8006b6a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8005920:	46c0      	nop			@ (mov r8, r8)
 8005922:	46bd      	mov	sp, r7
 8005924:	b00b      	add	sp, #44	@ 0x2c
 8005926:	bd90      	pop	{r4, r7, pc}
 8005928:	40004800 	.word	0x40004800
 800592c:	40021000 	.word	0x40021000
 8005930:	50000400 	.word	0x50000400
 8005934:	20000468 	.word	0x20000468
 8005938:	4002001c 	.word	0x4002001c
 800593c:	200004c4 	.word	0x200004c4
 8005940:	40020030 	.word	0x40020030

08005944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005948:	46c0      	nop			@ (mov r8, r8)
 800594a:	e7fd      	b.n	8005948 <NMI_Handler+0x4>

0800594c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005950:	46c0      	nop			@ (mov r8, r8)
 8005952:	e7fd      	b.n	8005950 <HardFault_Handler+0x4>

08005954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005958:	46c0      	nop			@ (mov r8, r8)
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005962:	46c0      	nop			@ (mov r8, r8)
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800596c:	f000 fa18 	bl	8005da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005970:	46c0      	nop			@ (mov r8, r8)
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZCD_Pin);
 800597a:	2010      	movs	r0, #16
 800597c:	f001 fdce 	bl	800751c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RTC_INT_Pin);
 8005980:	2040      	movs	r0, #64	@ 0x40
 8005982:	f001 fdcb 	bl	800751c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005986:	46c0      	nop			@ (mov r8, r8)
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005990:	4b03      	ldr	r3, [pc, #12]	@ (80059a0 <DMA1_Channel1_IRQHandler+0x14>)
 8005992:	0018      	movs	r0, r3
 8005994:	f001 fae2 	bl	8006f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005998:	46c0      	nop			@ (mov r8, r8)
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	46c0      	nop			@ (mov r8, r8)
 80059a0:	20000274 	.word	0x20000274

080059a4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80059a8:	4b05      	ldr	r3, [pc, #20]	@ (80059c0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80059aa:	0018      	movs	r0, r3
 80059ac:	f001 fad6 	bl	8006f5c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80059b0:	4b04      	ldr	r3, [pc, #16]	@ (80059c4 <DMA1_Channel2_3_IRQHandler+0x20>)
 80059b2:	0018      	movs	r0, r3
 80059b4:	f001 fad2 	bl	8006f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80059b8:	46c0      	nop			@ (mov r8, r8)
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	46c0      	nop			@ (mov r8, r8)
 80059c0:	20000468 	.word	0x20000468
 80059c4:	200004c4 	.word	0x200004c4

080059c8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80059cc:	4b03      	ldr	r3, [pc, #12]	@ (80059dc <ADC1_IRQHandler+0x14>)
 80059ce:	0018      	movs	r0, r3
 80059d0:	f000 fcea 	bl	80063a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80059d4:	46c0      	nop			@ (mov r8, r8)
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	46c0      	nop			@ (mov r8, r8)
 80059dc:	20000210 	.word	0x20000210

080059e0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80059e4:	4b03      	ldr	r3, [pc, #12]	@ (80059f4 <TIM16_IRQHandler+0x14>)
 80059e6:	0018      	movs	r0, r3
 80059e8:	f004 fbe0 	bl	800a1ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80059ec:	46c0      	nop			@ (mov r8, r8)
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	46c0      	nop			@ (mov r8, r8)
 80059f4:	20000388 	.word	0x20000388

080059f8 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80059fc:	4b03      	ldr	r3, [pc, #12]	@ (8005a0c <USART3_4_IRQHandler+0x14>)
 80059fe:	0018      	movs	r0, r3
 8005a00:	f004 fed8 	bl	800a7b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8005a04:	46c0      	nop			@ (mov r8, r8)
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	46c0      	nop			@ (mov r8, r8)
 8005a0c:	200003d4 	.word	0x200003d4

08005a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
  return 1;
 8005a14:	2301      	movs	r3, #1
}
 8005a16:	0018      	movs	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <_kill>:

int _kill(int pid, int sig)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005a26:	f006 fe89 	bl	800c73c <__errno>
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	2216      	movs	r2, #22
 8005a2e:	601a      	str	r2, [r3, #0]
  return -1;
 8005a30:	2301      	movs	r3, #1
 8005a32:	425b      	negs	r3, r3
}
 8005a34:	0018      	movs	r0, r3
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b002      	add	sp, #8
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <_exit>:

void _exit (int status)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005a44:	2301      	movs	r3, #1
 8005a46:	425a      	negs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	0011      	movs	r1, r2
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f7ff ffe5 	bl	8005a1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8005a52:	46c0      	nop			@ (mov r8, r8)
 8005a54:	e7fd      	b.n	8005a52 <_exit+0x16>

08005a56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b086      	sub	sp, #24
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a62:	2300      	movs	r3, #0
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	e00a      	b.n	8005a7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005a68:	e000      	b.n	8005a6c <_read+0x16>
 8005a6a:	bf00      	nop
 8005a6c:	0001      	movs	r1, r0
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	60ba      	str	r2, [r7, #8]
 8005a74:	b2ca      	uxtb	r2, r1
 8005a76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	dbf0      	blt.n	8005a68 <_read+0x12>
  }

  return len;
 8005a86:	687b      	ldr	r3, [r7, #4]
}
 8005a88:	0018      	movs	r0, r3
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	b006      	add	sp, #24
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	e009      	b.n	8005ab6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	60ba      	str	r2, [r7, #8]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	0018      	movs	r0, r3
 8005aac:	e000      	b.n	8005ab0 <_write+0x20>
 8005aae:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	dbf1      	blt.n	8005aa2 <_write+0x12>
  }
  return len;
 8005abe:	687b      	ldr	r3, [r7, #4]
}
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	b006      	add	sp, #24
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <_close>:

int _close(int file)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	425b      	negs	r3, r3
}
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b002      	add	sp, #8
 8005ada:	bd80      	pop	{r7, pc}

08005adc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2280      	movs	r2, #128	@ 0x80
 8005aea:	0192      	lsls	r2, r2, #6
 8005aec:	605a      	str	r2, [r3, #4]
  return 0;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	0018      	movs	r0, r3
 8005af2:	46bd      	mov	sp, r7
 8005af4:	b002      	add	sp, #8
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <_isatty>:

int _isatty(int file)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005b00:	2301      	movs	r3, #1
}
 8005b02:	0018      	movs	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	b002      	add	sp, #8
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	0018      	movs	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b004      	add	sp, #16
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b28:	4a14      	ldr	r2, [pc, #80]	@ (8005b7c <_sbrk+0x5c>)
 8005b2a:	4b15      	ldr	r3, [pc, #84]	@ (8005b80 <_sbrk+0x60>)
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b34:	4b13      	ldr	r3, [pc, #76]	@ (8005b84 <_sbrk+0x64>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b3c:	4b11      	ldr	r3, [pc, #68]	@ (8005b84 <_sbrk+0x64>)
 8005b3e:	4a12      	ldr	r2, [pc, #72]	@ (8005b88 <_sbrk+0x68>)
 8005b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b42:	4b10      	ldr	r3, [pc, #64]	@ (8005b84 <_sbrk+0x64>)
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	18d3      	adds	r3, r2, r3
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d207      	bcs.n	8005b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b50:	f006 fdf4 	bl	800c73c <__errno>
 8005b54:	0003      	movs	r3, r0
 8005b56:	220c      	movs	r2, #12
 8005b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	425b      	negs	r3, r3
 8005b5e:	e009      	b.n	8005b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b60:	4b08      	ldr	r3, [pc, #32]	@ (8005b84 <_sbrk+0x64>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b66:	4b07      	ldr	r3, [pc, #28]	@ (8005b84 <_sbrk+0x64>)
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	18d2      	adds	r2, r2, r3
 8005b6e:	4b05      	ldr	r3, [pc, #20]	@ (8005b84 <_sbrk+0x64>)
 8005b70:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005b72:	68fb      	ldr	r3, [r7, #12]
}
 8005b74:	0018      	movs	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	b006      	add	sp, #24
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	20009000 	.word	0x20009000
 8005b80:	00000400 	.word	0x00000400
 8005b84:	20000608 	.word	0x20000608
 8005b88:	20000760 	.word	0x20000760

08005b8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b90:	46c0      	nop			@ (mov r8, r8)
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <sensor_rx_disable>:
 *      Author: Jewel James
 */

#include "temp.h"

void sensor_rx_disable() {
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0
	TEMP1_CS(1);
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <sensor_rx_disable+0x3c>)
 8005b9e:	2280      	movs	r2, #128	@ 0x80
 8005ba0:	0112      	lsls	r2, r2, #4
 8005ba2:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8005ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd4 <sensor_rx_disable+0x3c>)
 8005ba6:	2280      	movs	r2, #128	@ 0x80
 8005ba8:	0152      	lsls	r2, r2, #5
 8005baa:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 8005bac:	4b09      	ldr	r3, [pc, #36]	@ (8005bd4 <sensor_rx_disable+0x3c>)
 8005bae:	2280      	movs	r2, #128	@ 0x80
 8005bb0:	0192      	lsls	r2, r2, #6
 8005bb2:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8005bb4:	4b07      	ldr	r3, [pc, #28]	@ (8005bd4 <sensor_rx_disable+0x3c>)
 8005bb6:	2280      	movs	r2, #128	@ 0x80
 8005bb8:	01d2      	lsls	r2, r2, #7
 8005bba:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8005bbc:	4b05      	ldr	r3, [pc, #20]	@ (8005bd4 <sensor_rx_disable+0x3c>)
 8005bbe:	2280      	movs	r2, #128	@ 0x80
 8005bc0:	0212      	lsls	r2, r2, #8
 8005bc2:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8005bc4:	23a0      	movs	r3, #160	@ 0xa0
 8005bc6:	05db      	lsls	r3, r3, #23
 8005bc8:	2280      	movs	r2, #128	@ 0x80
 8005bca:	0052      	lsls	r2, r2, #1
 8005bcc:	619a      	str	r2, [r3, #24]
}
 8005bce:	46c0      	nop			@ (mov r8, r8)
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	50000400 	.word	0x50000400

08005bd8 <sensor_rx_select>:

void sensor_rx_select(uint8_t index) {
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	0002      	movs	r2, r0
 8005be0:	1dfb      	adds	r3, r7, #7
 8005be2:	701a      	strb	r2, [r3, #0]
	TEMP1_CS(1);
 8005be4:	4b22      	ldr	r3, [pc, #136]	@ (8005c70 <sensor_rx_select+0x98>)
 8005be6:	2280      	movs	r2, #128	@ 0x80
 8005be8:	0112      	lsls	r2, r2, #4
 8005bea:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8005bec:	4b20      	ldr	r3, [pc, #128]	@ (8005c70 <sensor_rx_select+0x98>)
 8005bee:	2280      	movs	r2, #128	@ 0x80
 8005bf0:	0152      	lsls	r2, r2, #5
 8005bf2:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 8005bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8005c70 <sensor_rx_select+0x98>)
 8005bf6:	2280      	movs	r2, #128	@ 0x80
 8005bf8:	0192      	lsls	r2, r2, #6
 8005bfa:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8005bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8005c70 <sensor_rx_select+0x98>)
 8005bfe:	2280      	movs	r2, #128	@ 0x80
 8005c00:	01d2      	lsls	r2, r2, #7
 8005c02:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8005c04:	4b1a      	ldr	r3, [pc, #104]	@ (8005c70 <sensor_rx_select+0x98>)
 8005c06:	2280      	movs	r2, #128	@ 0x80
 8005c08:	0212      	lsls	r2, r2, #8
 8005c0a:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8005c0c:	23a0      	movs	r3, #160	@ 0xa0
 8005c0e:	05db      	lsls	r3, r3, #23
 8005c10:	2280      	movs	r2, #128	@ 0x80
 8005c12:	0052      	lsls	r2, r2, #1
 8005c14:	619a      	str	r2, [r3, #24]
	switch(index) {
 8005c16:	1dfb      	adds	r3, r7, #7
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b06      	cmp	r3, #6
 8005c1c:	d824      	bhi.n	8005c68 <sensor_rx_select+0x90>
 8005c1e:	009a      	lsls	r2, r3, #2
 8005c20:	4b14      	ldr	r3, [pc, #80]	@ (8005c74 <sensor_rx_select+0x9c>)
 8005c22:	18d3      	adds	r3, r2, r3
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	469f      	mov	pc, r3
	case 0:
		return;
	case 1:
		TEMP1_CS(0);
 8005c28:	4b11      	ldr	r3, [pc, #68]	@ (8005c70 <sensor_rx_select+0x98>)
 8005c2a:	2280      	movs	r2, #128	@ 0x80
 8005c2c:	0112      	lsls	r2, r2, #4
 8005c2e:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8005c30:	e01a      	b.n	8005c68 <sensor_rx_select+0x90>
	case 2:
		TEMP5_CS(0);
 8005c32:	4b0f      	ldr	r3, [pc, #60]	@ (8005c70 <sensor_rx_select+0x98>)
 8005c34:	2280      	movs	r2, #128	@ 0x80
 8005c36:	0212      	lsls	r2, r2, #8
 8005c38:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8005c3a:	e015      	b.n	8005c68 <sensor_rx_select+0x90>
	case 3:
		TEMP3_CS(0);
 8005c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c70 <sensor_rx_select+0x98>)
 8005c3e:	2280      	movs	r2, #128	@ 0x80
 8005c40:	0192      	lsls	r2, r2, #6
 8005c42:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8005c44:	e010      	b.n	8005c68 <sensor_rx_select+0x90>
	case 4:
		TEMP4_CS(0);
 8005c46:	4b0a      	ldr	r3, [pc, #40]	@ (8005c70 <sensor_rx_select+0x98>)
 8005c48:	2280      	movs	r2, #128	@ 0x80
 8005c4a:	01d2      	lsls	r2, r2, #7
 8005c4c:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8005c4e:	e00b      	b.n	8005c68 <sensor_rx_select+0x90>
	case 5:
		TEMP2_CS(0);
 8005c50:	4b07      	ldr	r3, [pc, #28]	@ (8005c70 <sensor_rx_select+0x98>)
 8005c52:	2280      	movs	r2, #128	@ 0x80
 8005c54:	0152      	lsls	r2, r2, #5
 8005c56:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8005c58:	e006      	b.n	8005c68 <sensor_rx_select+0x90>
	case 6:
		TEMP6_CS(0);
 8005c5a:	23a0      	movs	r3, #160	@ 0xa0
 8005c5c:	05db      	lsls	r3, r3, #23
 8005c5e:	2280      	movs	r2, #128	@ 0x80
 8005c60:	0052      	lsls	r2, r2, #1
 8005c62:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 8005c64:	e000      	b.n	8005c68 <sensor_rx_select+0x90>
		return;
 8005c66:	46c0      	nop			@ (mov r8, r8)
	}
}
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	b002      	add	sp, #8
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	46c0      	nop			@ (mov r8, r8)
 8005c70:	50000400 	.word	0x50000400
 8005c74:	0800ec6c 	.word	0x0800ec6c

08005c78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005c78:	480d      	ldr	r0, [pc, #52]	@ (8005cb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005c7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005c7c:	f7ff ff86 	bl	8005b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c80:	480c      	ldr	r0, [pc, #48]	@ (8005cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005c82:	490d      	ldr	r1, [pc, #52]	@ (8005cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005c84:	4a0d      	ldr	r2, [pc, #52]	@ (8005cbc <LoopForever+0xe>)
  movs r3, #0
 8005c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c88:	e002      	b.n	8005c90 <LoopCopyDataInit>

08005c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c8e:	3304      	adds	r3, #4

08005c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c94:	d3f9      	bcc.n	8005c8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c96:	4a0a      	ldr	r2, [pc, #40]	@ (8005cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005c98:	4c0a      	ldr	r4, [pc, #40]	@ (8005cc4 <LoopForever+0x16>)
  movs r3, #0
 8005c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c9c:	e001      	b.n	8005ca2 <LoopFillZerobss>

08005c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ca0:	3204      	adds	r2, #4

08005ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ca4:	d3fb      	bcc.n	8005c9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005ca6:	f006 fd4f 	bl	800c748 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005caa:	f7fe fa45 	bl	8004138 <main>

08005cae <LoopForever>:

LoopForever:
  b LoopForever
 8005cae:	e7fe      	b.n	8005cae <LoopForever>
  ldr   r0, =_estack
 8005cb0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8005cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005cb8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8005cbc:	0800f01c 	.word	0x0800f01c
  ldr r2, =_sbss
 8005cc0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8005cc4:	2000075c 	.word	0x2000075c

08005cc8 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005cc8:	e7fe      	b.n	8005cc8 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

08005ccc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005cd2:	1dfb      	adds	r3, r7, #7
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d08 <HAL_Init+0x3c>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <HAL_Init+0x3c>)
 8005cde:	2180      	movs	r1, #128	@ 0x80
 8005ce0:	0049      	lsls	r1, r1, #1
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ce6:	2003      	movs	r0, #3
 8005ce8:	f000 f810 	bl	8005d0c <HAL_InitTick>
 8005cec:	1e03      	subs	r3, r0, #0
 8005cee:	d003      	beq.n	8005cf8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005cf0:	1dfb      	adds	r3, r7, #7
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	e001      	b.n	8005cfc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005cf8:	f7ff fbae 	bl	8005458 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005cfc:	1dfb      	adds	r3, r7, #7
 8005cfe:	781b      	ldrb	r3, [r3, #0]
}
 8005d00:	0018      	movs	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	b002      	add	sp, #8
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	40022000 	.word	0x40022000

08005d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d0c:	b590      	push	{r4, r7, lr}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005d14:	230f      	movs	r3, #15
 8005d16:	18fb      	adds	r3, r7, r3
 8005d18:	2200      	movs	r2, #0
 8005d1a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8005d94 <HAL_InitTick+0x88>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d02b      	beq.n	8005d7c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005d24:	4b1c      	ldr	r3, [pc, #112]	@ (8005d98 <HAL_InitTick+0x8c>)
 8005d26:	681c      	ldr	r4, [r3, #0]
 8005d28:	4b1a      	ldr	r3, [pc, #104]	@ (8005d94 <HAL_InitTick+0x88>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	0019      	movs	r1, r3
 8005d2e:	23fa      	movs	r3, #250	@ 0xfa
 8005d30:	0098      	lsls	r0, r3, #2
 8005d32:	f7fa fa01 	bl	8000138 <__udivsi3>
 8005d36:	0003      	movs	r3, r0
 8005d38:	0019      	movs	r1, r3
 8005d3a:	0020      	movs	r0, r4
 8005d3c:	f7fa f9fc 	bl	8000138 <__udivsi3>
 8005d40:	0003      	movs	r3, r0
 8005d42:	0018      	movs	r0, r3
 8005d44:	f000 ff21 	bl	8006b8a <HAL_SYSTICK_Config>
 8005d48:	1e03      	subs	r3, r0, #0
 8005d4a:	d112      	bne.n	8005d72 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b03      	cmp	r3, #3
 8005d50:	d80a      	bhi.n	8005d68 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	2301      	movs	r3, #1
 8005d56:	425b      	negs	r3, r3
 8005d58:	2200      	movs	r2, #0
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	f000 fef0 	bl	8006b40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d60:	4b0e      	ldr	r3, [pc, #56]	@ (8005d9c <HAL_InitTick+0x90>)
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	e00d      	b.n	8005d84 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005d68:	230f      	movs	r3, #15
 8005d6a:	18fb      	adds	r3, r7, r3
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	701a      	strb	r2, [r3, #0]
 8005d70:	e008      	b.n	8005d84 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005d72:	230f      	movs	r3, #15
 8005d74:	18fb      	adds	r3, r7, r3
 8005d76:	2201      	movs	r2, #1
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	e003      	b.n	8005d84 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005d7c:	230f      	movs	r3, #15
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	2201      	movs	r2, #1
 8005d82:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005d84:	230f      	movs	r3, #15
 8005d86:	18fb      	adds	r3, r7, r3
 8005d88:	781b      	ldrb	r3, [r3, #0]
}
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	b005      	add	sp, #20
 8005d90:	bd90      	pop	{r4, r7, pc}
 8005d92:	46c0      	nop			@ (mov r8, r8)
 8005d94:	20000018 	.word	0x20000018
 8005d98:	20000010 	.word	0x20000010
 8005d9c:	20000014 	.word	0x20000014

08005da0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005da4:	4b05      	ldr	r3, [pc, #20]	@ (8005dbc <HAL_IncTick+0x1c>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	001a      	movs	r2, r3
 8005daa:	4b05      	ldr	r3, [pc, #20]	@ (8005dc0 <HAL_IncTick+0x20>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	18d2      	adds	r2, r2, r3
 8005db0:	4b03      	ldr	r3, [pc, #12]	@ (8005dc0 <HAL_IncTick+0x20>)
 8005db2:	601a      	str	r2, [r3, #0]
}
 8005db4:	46c0      	nop			@ (mov r8, r8)
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	46c0      	nop			@ (mov r8, r8)
 8005dbc:	20000018 	.word	0x20000018
 8005dc0:	2000060c 	.word	0x2000060c

08005dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8005dc8:	4b02      	ldr	r3, [pc, #8]	@ (8005dd4 <HAL_GetTick+0x10>)
 8005dca:	681b      	ldr	r3, [r3, #0]
}
 8005dcc:	0018      	movs	r0, r3
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	46c0      	nop			@ (mov r8, r8)
 8005dd4:	2000060c 	.word	0x2000060c

08005dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005de0:	f7ff fff0 	bl	8005dc4 <HAL_GetTick>
 8005de4:	0003      	movs	r3, r0
 8005de6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3301      	adds	r3, #1
 8005df0:	d005      	beq.n	8005dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005df2:	4b0a      	ldr	r3, [pc, #40]	@ (8005e1c <HAL_Delay+0x44>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	001a      	movs	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	189b      	adds	r3, r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005dfe:	46c0      	nop			@ (mov r8, r8)
 8005e00:	f7ff ffe0 	bl	8005dc4 <HAL_GetTick>
 8005e04:	0002      	movs	r2, r0
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d8f7      	bhi.n	8005e00 <HAL_Delay+0x28>
  {
  }
}
 8005e10:	46c0      	nop			@ (mov r8, r8)
 8005e12:	46c0      	nop			@ (mov r8, r8)
 8005e14:	46bd      	mov	sp, r7
 8005e16:	b004      	add	sp, #16
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	46c0      	nop			@ (mov r8, r8)
 8005e1c:	20000018 	.word	0x20000018

08005e20 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a05      	ldr	r2, [pc, #20]	@ (8005e44 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8005e30:	401a      	ands	r2, r3
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	601a      	str	r2, [r3, #0]
}
 8005e3a:	46c0      	nop			@ (mov r8, r8)
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	b002      	add	sp, #8
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	46c0      	nop			@ (mov r8, r8)
 8005e44:	fe3fffff 	.word	0xfe3fffff

08005e48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	23e0      	movs	r3, #224	@ 0xe0
 8005e56:	045b      	lsls	r3, r3, #17
 8005e58:	4013      	ands	r3, r2
}
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b002      	add	sp, #8
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	2104      	movs	r1, #4
 8005e76:	400a      	ands	r2, r1
 8005e78:	2107      	movs	r1, #7
 8005e7a:	4091      	lsls	r1, r2
 8005e7c:	000a      	movs	r2, r1
 8005e7e:	43d2      	mvns	r2, r2
 8005e80:	401a      	ands	r2, r3
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2104      	movs	r1, #4
 8005e86:	400b      	ands	r3, r1
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	4099      	lsls	r1, r3
 8005e8c:	000b      	movs	r3, r1
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005e94:	46c0      	nop			@ (mov r8, r8)
 8005e96:	46bd      	mov	sp, r7
 8005e98:	b004      	add	sp, #16
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	2104      	movs	r1, #4
 8005eae:	400a      	ands	r2, r1
 8005eb0:	2107      	movs	r1, #7
 8005eb2:	4091      	lsls	r1, r2
 8005eb4:	000a      	movs	r2, r1
 8005eb6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2104      	movs	r1, #4
 8005ebc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005ebe:	40da      	lsrs	r2, r3
 8005ec0:	0013      	movs	r3, r2
}
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	b002      	add	sp, #8
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	23c0      	movs	r3, #192	@ 0xc0
 8005ed8:	011b      	lsls	r3, r3, #4
 8005eda:	4013      	ands	r3, r2
 8005edc:	d101      	bne.n	8005ee2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	b002      	add	sp, #8
 8005eea:	bd80      	pop	{r7, pc}

08005eec <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	211f      	movs	r1, #31
 8005f00:	400a      	ands	r2, r1
 8005f02:	210f      	movs	r1, #15
 8005f04:	4091      	lsls	r1, r2
 8005f06:	000a      	movs	r2, r1
 8005f08:	43d2      	mvns	r2, r2
 8005f0a:	401a      	ands	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	0e9b      	lsrs	r3, r3, #26
 8005f10:	210f      	movs	r1, #15
 8005f12:	4019      	ands	r1, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	201f      	movs	r0, #31
 8005f18:	4003      	ands	r3, r0
 8005f1a:	4099      	lsls	r1, r3
 8005f1c:	000b      	movs	r3, r1
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005f24:	46c0      	nop			@ (mov r8, r8)
 8005f26:	46bd      	mov	sp, r7
 8005f28:	b004      	add	sp, #16
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	035b      	lsls	r3, r3, #13
 8005f3e:	0b5b      	lsrs	r3, r3, #13
 8005f40:	431a      	orrs	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f46:	46c0      	nop			@ (mov r8, r8)
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	b002      	add	sp, #8
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b082      	sub	sp, #8
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	0352      	lsls	r2, r2, #13
 8005f60:	0b52      	lsrs	r2, r2, #13
 8005f62:	43d2      	mvns	r2, r2
 8005f64:	401a      	ands	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005f6a:	46c0      	nop			@ (mov r8, r8)
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	b002      	add	sp, #8
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b082      	sub	sp, #8
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	2203      	movs	r2, #3
 8005f80:	4013      	ands	r3, r2
}
 8005f82:	0018      	movs	r0, r3
 8005f84:	46bd      	mov	sp, r7
 8005f86:	b002      	add	sp, #8
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	0212      	lsls	r2, r2, #8
 8005fa0:	43d2      	mvns	r2, r2
 8005fa2:	401a      	ands	r2, r3
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	021b      	lsls	r3, r3, #8
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	400b      	ands	r3, r1
 8005fac:	4904      	ldr	r1, [pc, #16]	@ (8005fc0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8005fae:	400b      	ands	r3, r1
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005fb6:	46c0      	nop			@ (mov r8, r8)
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	b004      	add	sp, #16
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	46c0      	nop			@ (mov r8, r8)
 8005fc0:	07ffff00 	.word	0x07ffff00

08005fc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	4a05      	ldr	r2, [pc, #20]	@ (8005fe8 <LL_ADC_EnableInternalRegulator+0x24>)
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	2280      	movs	r2, #128	@ 0x80
 8005fd6:	0552      	lsls	r2, r2, #21
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005fde:	46c0      	nop			@ (mov r8, r8)
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	b002      	add	sp, #8
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	46c0      	nop			@ (mov r8, r8)
 8005fe8:	6fffffe8 	.word	0x6fffffe8

08005fec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	2380      	movs	r3, #128	@ 0x80
 8005ffa:	055b      	lsls	r3, r3, #21
 8005ffc:	401a      	ands	r2, r3
 8005ffe:	2380      	movs	r3, #128	@ 0x80
 8006000:	055b      	lsls	r3, r3, #21
 8006002:	429a      	cmp	r2, r3
 8006004:	d101      	bne.n	800600a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800600a:	2300      	movs	r3, #0
}
 800600c:	0018      	movs	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	b002      	add	sp, #8
 8006012:	bd80      	pop	{r7, pc}

08006014 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	2201      	movs	r2, #1
 8006022:	4013      	ands	r3, r2
 8006024:	2b01      	cmp	r3, #1
 8006026:	d101      	bne.n	800602c <LL_ADC_IsEnabled+0x18>
 8006028:	2301      	movs	r3, #1
 800602a:	e000      	b.n	800602e <LL_ADC_IsEnabled+0x1a>
 800602c:	2300      	movs	r3, #0
}
 800602e:	0018      	movs	r0, r3
 8006030:	46bd      	mov	sp, r7
 8006032:	b002      	add	sp, #8
 8006034:	bd80      	pop	{r7, pc}

08006036 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	2204      	movs	r2, #4
 8006044:	4013      	ands	r3, r2
 8006046:	2b04      	cmp	r3, #4
 8006048:	d101      	bne.n	800604e <LL_ADC_REG_IsConversionOngoing+0x18>
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800604e:	2300      	movs	r3, #0
}
 8006050:	0018      	movs	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	b002      	add	sp, #8
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006060:	231f      	movs	r3, #31
 8006062:	18fb      	adds	r3, r7, r3
 8006064:	2200      	movs	r2, #0
 8006066:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8006068:	2300      	movs	r3, #0
 800606a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800606c:	2300      	movs	r3, #0
 800606e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e17f      	b.n	800637e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	0018      	movs	r0, r3
 800608a:	f7ff fa09 	bl	80054a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2254      	movs	r2, #84	@ 0x54
 8006098:	2100      	movs	r1, #0
 800609a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	0018      	movs	r0, r3
 80060a2:	f7ff ffa3 	bl	8005fec <LL_ADC_IsInternalRegulatorEnabled>
 80060a6:	1e03      	subs	r3, r0, #0
 80060a8:	d115      	bne.n	80060d6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	0018      	movs	r0, r3
 80060b0:	f7ff ff88 	bl	8005fc4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80060b4:	4bb4      	ldr	r3, [pc, #720]	@ (8006388 <HAL_ADC_Init+0x330>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	49b4      	ldr	r1, [pc, #720]	@ (800638c <HAL_ADC_Init+0x334>)
 80060ba:	0018      	movs	r0, r3
 80060bc:	f7fa f83c 	bl	8000138 <__udivsi3>
 80060c0:	0003      	movs	r3, r0
 80060c2:	3301      	adds	r3, #1
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80060c8:	e002      	b.n	80060d0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f9      	bne.n	80060ca <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	0018      	movs	r0, r3
 80060dc:	f7ff ff86 	bl	8005fec <LL_ADC_IsInternalRegulatorEnabled>
 80060e0:	1e03      	subs	r3, r0, #0
 80060e2:	d10f      	bne.n	8006104 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e8:	2210      	movs	r2, #16
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060f4:	2201      	movs	r2, #1
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80060fc:	231f      	movs	r3, #31
 80060fe:	18fb      	adds	r3, r7, r3
 8006100:	2201      	movs	r2, #1
 8006102:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	0018      	movs	r0, r3
 800610a:	f7ff ff94 	bl	8006036 <LL_ADC_REG_IsConversionOngoing>
 800610e:	0003      	movs	r3, r0
 8006110:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006116:	2210      	movs	r2, #16
 8006118:	4013      	ands	r3, r2
 800611a:	d000      	beq.n	800611e <HAL_ADC_Init+0xc6>
 800611c:	e122      	b.n	8006364 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d000      	beq.n	8006126 <HAL_ADC_Init+0xce>
 8006124:	e11e      	b.n	8006364 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612a:	4a99      	ldr	r2, [pc, #612]	@ (8006390 <HAL_ADC_Init+0x338>)
 800612c:	4013      	ands	r3, r2
 800612e:	2202      	movs	r2, #2
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	0018      	movs	r0, r3
 800613c:	f7ff ff6a 	bl	8006014 <LL_ADC_IsEnabled>
 8006140:	1e03      	subs	r3, r0, #0
 8006142:	d000      	beq.n	8006146 <HAL_ADC_Init+0xee>
 8006144:	e0ad      	b.n	80062a2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	7e1b      	ldrb	r3, [r3, #24]
 800614e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006150:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	7e5b      	ldrb	r3, [r3, #25]
 8006156:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006158:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	7e9b      	ldrb	r3, [r3, #26]
 800615e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006160:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <HAL_ADC_Init+0x118>
 800616a:	2380      	movs	r3, #128	@ 0x80
 800616c:	015b      	lsls	r3, r3, #5
 800616e:	e000      	b.n	8006172 <HAL_ADC_Init+0x11a>
 8006170:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006172:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006178:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	da04      	bge.n	800618c <HAL_ADC_Init+0x134>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	085b      	lsrs	r3, r3, #1
 800618a:	e001      	b.n	8006190 <HAL_ADC_Init+0x138>
 800618c:	2380      	movs	r3, #128	@ 0x80
 800618e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8006190:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	212c      	movs	r1, #44	@ 0x2c
 8006196:	5c5b      	ldrb	r3, [r3, r1]
 8006198:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800619a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	4313      	orrs	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2220      	movs	r2, #32
 80061a6:	5c9b      	ldrb	r3, [r3, r2]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d115      	bne.n	80061d8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	7e9b      	ldrb	r3, [r3, #26]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d105      	bne.n	80061c0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	2280      	movs	r2, #128	@ 0x80
 80061b8:	0252      	lsls	r2, r2, #9
 80061ba:	4313      	orrs	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	e00b      	b.n	80061d8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c4:	2220      	movs	r2, #32
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061d0:	2201      	movs	r2, #1
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00a      	beq.n	80061f6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061e4:	23e0      	movs	r3, #224	@ 0xe0
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80061ee:	4313      	orrs	r3, r2
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	4a65      	ldr	r2, [pc, #404]	@ (8006394 <HAL_ADC_Init+0x33c>)
 80061fe:	4013      	ands	r3, r2
 8006200:	0019      	movs	r1, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	430a      	orrs	r2, r1
 800620a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	0f9b      	lsrs	r3, r3, #30
 8006212:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006218:	4313      	orrs	r3, r2
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	223c      	movs	r2, #60	@ 0x3c
 8006224:	5c9b      	ldrb	r3, [r3, r2]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d111      	bne.n	800624e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	0f9b      	lsrs	r3, r3, #30
 8006230:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006236:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800623c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8006242:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	2201      	movs	r2, #1
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	4a50      	ldr	r2, [pc, #320]	@ (8006398 <HAL_ADC_Init+0x340>)
 8006256:	4013      	ands	r3, r2
 8006258:	0019      	movs	r1, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	430a      	orrs	r2, r1
 8006262:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	23c0      	movs	r3, #192	@ 0xc0
 800626a:	061b      	lsls	r3, r3, #24
 800626c:	429a      	cmp	r2, r3
 800626e:	d018      	beq.n	80062a2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006274:	2380      	movs	r3, #128	@ 0x80
 8006276:	05db      	lsls	r3, r3, #23
 8006278:	429a      	cmp	r2, r3
 800627a:	d012      	beq.n	80062a2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8006280:	2380      	movs	r3, #128	@ 0x80
 8006282:	061b      	lsls	r3, r3, #24
 8006284:	429a      	cmp	r2, r3
 8006286:	d00c      	beq.n	80062a2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8006288:	4b44      	ldr	r3, [pc, #272]	@ (800639c <HAL_ADC_Init+0x344>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a44      	ldr	r2, [pc, #272]	@ (80063a0 <HAL_ADC_Init+0x348>)
 800628e:	4013      	ands	r3, r2
 8006290:	0019      	movs	r1, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	23f0      	movs	r3, #240	@ 0xf0
 8006298:	039b      	lsls	r3, r3, #14
 800629a:	401a      	ands	r2, r3
 800629c:	4b3f      	ldr	r3, [pc, #252]	@ (800639c <HAL_ADC_Init+0x344>)
 800629e:	430a      	orrs	r2, r1
 80062a0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6818      	ldr	r0, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062aa:	001a      	movs	r2, r3
 80062ac:	2100      	movs	r1, #0
 80062ae:	f7ff fdd8 	bl	8005e62 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6818      	ldr	r0, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ba:	493a      	ldr	r1, [pc, #232]	@ (80063a4 <HAL_ADC_Init+0x34c>)
 80062bc:	001a      	movs	r2, r3
 80062be:	f7ff fdd0 	bl	8005e62 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d109      	bne.n	80062de <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2110      	movs	r1, #16
 80062d6:	4249      	negs	r1, r1
 80062d8:	430a      	orrs	r2, r1
 80062da:	629a      	str	r2, [r3, #40]	@ 0x28
 80062dc:	e018      	b.n	8006310 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691a      	ldr	r2, [r3, #16]
 80062e2:	2380      	movs	r3, #128	@ 0x80
 80062e4:	039b      	lsls	r3, r3, #14
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d112      	bne.n	8006310 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	3b01      	subs	r3, #1
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	221c      	movs	r2, #28
 80062fa:	4013      	ands	r3, r2
 80062fc:	2210      	movs	r2, #16
 80062fe:	4252      	negs	r2, r2
 8006300:	409a      	lsls	r2, r3
 8006302:	0011      	movs	r1, r2
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2100      	movs	r1, #0
 8006316:	0018      	movs	r0, r3
 8006318:	f7ff fdc0 	bl	8005e9c <LL_ADC_GetSamplingTimeCommonChannels>
 800631c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006322:	429a      	cmp	r2, r3
 8006324:	d10b      	bne.n	800633e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006330:	2203      	movs	r2, #3
 8006332:	4393      	bics	r3, r2
 8006334:	2201      	movs	r2, #1
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800633c:	e01c      	b.n	8006378 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006342:	2212      	movs	r2, #18
 8006344:	4393      	bics	r3, r2
 8006346:	2210      	movs	r2, #16
 8006348:	431a      	orrs	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006352:	2201      	movs	r2, #1
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800635a:	231f      	movs	r3, #31
 800635c:	18fb      	adds	r3, r7, r3
 800635e:	2201      	movs	r2, #1
 8006360:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006362:	e009      	b.n	8006378 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006368:	2210      	movs	r2, #16
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006370:	231f      	movs	r3, #31
 8006372:	18fb      	adds	r3, r7, r3
 8006374:	2201      	movs	r2, #1
 8006376:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006378:	231f      	movs	r3, #31
 800637a:	18fb      	adds	r3, r7, r3
 800637c:	781b      	ldrb	r3, [r3, #0]
}
 800637e:	0018      	movs	r0, r3
 8006380:	46bd      	mov	sp, r7
 8006382:	b008      	add	sp, #32
 8006384:	bd80      	pop	{r7, pc}
 8006386:	46c0      	nop			@ (mov r8, r8)
 8006388:	20000010 	.word	0x20000010
 800638c:	00030d40 	.word	0x00030d40
 8006390:	fffffefd 	.word	0xfffffefd
 8006394:	ffde0201 	.word	0xffde0201
 8006398:	1ffffc02 	.word	0x1ffffc02
 800639c:	40012708 	.word	0x40012708
 80063a0:	ffc3ffff 	.word	0xffc3ffff
 80063a4:	07ffff04 	.word	0x07ffff04

080063a8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2202      	movs	r2, #2
 80063c8:	4013      	ands	r3, r2
 80063ca:	d017      	beq.n	80063fc <HAL_ADC_IRQHandler+0x54>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2202      	movs	r2, #2
 80063d0:	4013      	ands	r3, r2
 80063d2:	d013      	beq.n	80063fc <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063d8:	2210      	movs	r2, #16
 80063da:	4013      	ands	r3, r2
 80063dc:	d106      	bne.n	80063ec <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063e2:	2280      	movs	r2, #128	@ 0x80
 80063e4:	0112      	lsls	r2, r2, #4
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	0018      	movs	r0, r3
 80063f0:	f000 faea 	bl	80069c8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2202      	movs	r2, #2
 80063fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	2204      	movs	r2, #4
 8006400:	4013      	ands	r3, r2
 8006402:	d003      	beq.n	800640c <HAL_ADC_IRQHandler+0x64>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2204      	movs	r2, #4
 8006408:	4013      	ands	r3, r2
 800640a:	d107      	bne.n	800641c <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	2208      	movs	r2, #8
 8006410:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006412:	d04d      	beq.n	80064b0 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2208      	movs	r2, #8
 8006418:	4013      	ands	r3, r2
 800641a:	d049      	beq.n	80064b0 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006420:	2210      	movs	r2, #16
 8006422:	4013      	ands	r3, r2
 8006424:	d106      	bne.n	8006434 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800642a:	2280      	movs	r2, #128	@ 0x80
 800642c:	0092      	lsls	r2, r2, #2
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	0018      	movs	r0, r3
 800643a:	f7ff fd46 	bl	8005eca <LL_ADC_REG_IsTriggerSourceSWStart>
 800643e:	1e03      	subs	r3, r0, #0
 8006440:	d02e      	beq.n	80064a0 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	7e9b      	ldrb	r3, [r3, #26]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d12a      	bne.n	80064a0 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2208      	movs	r2, #8
 8006452:	4013      	ands	r3, r2
 8006454:	2b08      	cmp	r3, #8
 8006456:	d123      	bne.n	80064a0 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	0018      	movs	r0, r3
 800645e:	f7ff fdea 	bl	8006036 <LL_ADC_REG_IsConversionOngoing>
 8006462:	1e03      	subs	r3, r0, #0
 8006464:	d110      	bne.n	8006488 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	210c      	movs	r1, #12
 8006472:	438a      	bics	r2, r1
 8006474:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800647a:	4a56      	ldr	r2, [pc, #344]	@ (80065d4 <HAL_ADC_IRQHandler+0x22c>)
 800647c:	4013      	ands	r3, r2
 800647e:	2201      	movs	r2, #1
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	659a      	str	r2, [r3, #88]	@ 0x58
 8006486:	e00b      	b.n	80064a0 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800648c:	2220      	movs	r2, #32
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006498:	2201      	movs	r2, #1
 800649a:	431a      	orrs	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	0018      	movs	r0, r3
 80064a4:	f7fd fa84 	bl	80039b0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	220c      	movs	r2, #12
 80064ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	2280      	movs	r2, #128	@ 0x80
 80064b4:	4013      	ands	r3, r2
 80064b6:	d012      	beq.n	80064de <HAL_ADC_IRQHandler+0x136>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2280      	movs	r2, #128	@ 0x80
 80064bc:	4013      	ands	r3, r2
 80064be:	d00e      	beq.n	80064de <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c4:	2280      	movs	r2, #128	@ 0x80
 80064c6:	0252      	lsls	r2, r2, #9
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	0018      	movs	r0, r3
 80064d2:	f000 f881 	bl	80065d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2280      	movs	r2, #128	@ 0x80
 80064dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	2380      	movs	r3, #128	@ 0x80
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	4013      	ands	r3, r2
 80064e6:	d014      	beq.n	8006512 <HAL_ADC_IRQHandler+0x16a>
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	2380      	movs	r3, #128	@ 0x80
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	4013      	ands	r3, r2
 80064f0:	d00f      	beq.n	8006512 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f6:	2280      	movs	r2, #128	@ 0x80
 80064f8:	0292      	lsls	r2, r2, #10
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	0018      	movs	r0, r3
 8006504:	f000 fa50 	bl	80069a8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2280      	movs	r2, #128	@ 0x80
 800650e:	0052      	lsls	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	2380      	movs	r3, #128	@ 0x80
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4013      	ands	r3, r2
 800651a:	d014      	beq.n	8006546 <HAL_ADC_IRQHandler+0x19e>
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	2380      	movs	r3, #128	@ 0x80
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4013      	ands	r3, r2
 8006524:	d00f      	beq.n	8006546 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800652a:	2280      	movs	r2, #128	@ 0x80
 800652c:	02d2      	lsls	r2, r2, #11
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	0018      	movs	r0, r3
 8006538:	f000 fa3e 	bl	80069b8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2280      	movs	r2, #128	@ 0x80
 8006542:	0092      	lsls	r2, r2, #2
 8006544:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	2210      	movs	r2, #16
 800654a:	4013      	ands	r3, r2
 800654c:	d02b      	beq.n	80065a6 <HAL_ADC_IRQHandler+0x1fe>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2210      	movs	r2, #16
 8006552:	4013      	ands	r3, r2
 8006554:	d027      	beq.n	80065a6 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800655e:	2301      	movs	r3, #1
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	e008      	b.n	8006576 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	0018      	movs	r0, r3
 800656a:	f7ff fd02 	bl	8005f72 <LL_ADC_REG_GetDMATransfer>
 800656e:	1e03      	subs	r3, r0, #0
 8006570:	d001      	beq.n	8006576 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8006572:	2301      	movs	r3, #1
 8006574:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d110      	bne.n	800659e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006580:	2280      	movs	r2, #128	@ 0x80
 8006582:	00d2      	lsls	r2, r2, #3
 8006584:	431a      	orrs	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800658e:	2202      	movs	r2, #2
 8006590:	431a      	orrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	0018      	movs	r0, r3
 800659a:	f000 f825 	bl	80065e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2210      	movs	r2, #16
 80065a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	2380      	movs	r3, #128	@ 0x80
 80065aa:	019b      	lsls	r3, r3, #6
 80065ac:	4013      	ands	r3, r2
 80065ae:	d00d      	beq.n	80065cc <HAL_ADC_IRQHandler+0x224>
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	2380      	movs	r3, #128	@ 0x80
 80065b4:	019b      	lsls	r3, r3, #6
 80065b6:	4013      	ands	r3, r2
 80065b8:	d008      	beq.n	80065cc <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	0018      	movs	r0, r3
 80065be:	f000 fa0b 	bl	80069d8 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2280      	movs	r2, #128	@ 0x80
 80065c8:	0192      	lsls	r2, r2, #6
 80065ca:	601a      	str	r2, [r3, #0]
  }
}
 80065cc:	46c0      	nop			@ (mov r8, r8)
 80065ce:	46bd      	mov	sp, r7
 80065d0:	b006      	add	sp, #24
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	fffffefe 	.word	0xfffffefe

080065d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80065e0:	46c0      	nop			@ (mov r8, r8)
 80065e2:	46bd      	mov	sp, r7
 80065e4:	b002      	add	sp, #8
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80065f0:	46c0      	nop			@ (mov r8, r8)
 80065f2:	46bd      	mov	sp, r7
 80065f4:	b002      	add	sp, #8
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006602:	2317      	movs	r3, #23
 8006604:	18fb      	adds	r3, r7, r3
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2254      	movs	r2, #84	@ 0x54
 8006612:	5c9b      	ldrb	r3, [r3, r2]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_ADC_ConfigChannel+0x24>
 8006618:	2302      	movs	r3, #2
 800661a:	e1c0      	b.n	800699e <HAL_ADC_ConfigChannel+0x3a6>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2254      	movs	r2, #84	@ 0x54
 8006620:	2101      	movs	r1, #1
 8006622:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	0018      	movs	r0, r3
 800662a:	f7ff fd04 	bl	8006036 <LL_ADC_REG_IsConversionOngoing>
 800662e:	1e03      	subs	r3, r0, #0
 8006630:	d000      	beq.n	8006634 <HAL_ADC_ConfigChannel+0x3c>
 8006632:	e1a3      	b.n	800697c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	2b02      	cmp	r3, #2
 800663a:	d100      	bne.n	800663e <HAL_ADC_ConfigChannel+0x46>
 800663c:	e143      	b.n	80068c6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691a      	ldr	r2, [r3, #16]
 8006642:	2380      	movs	r3, #128	@ 0x80
 8006644:	061b      	lsls	r3, r3, #24
 8006646:	429a      	cmp	r2, r3
 8006648:	d004      	beq.n	8006654 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800664e:	4ac1      	ldr	r2, [pc, #772]	@ (8006954 <HAL_ADC_ConfigChannel+0x35c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d108      	bne.n	8006666 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	0019      	movs	r1, r3
 800665e:	0010      	movs	r0, r2
 8006660:	f7ff fc64 	bl	8005f2c <LL_ADC_REG_SetSequencerChAdd>
 8006664:	e0c9      	b.n	80067fa <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	211f      	movs	r1, #31
 8006670:	400b      	ands	r3, r1
 8006672:	210f      	movs	r1, #15
 8006674:	4099      	lsls	r1, r3
 8006676:	000b      	movs	r3, r1
 8006678:	43db      	mvns	r3, r3
 800667a:	4013      	ands	r3, r2
 800667c:	0019      	movs	r1, r3
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	035b      	lsls	r3, r3, #13
 8006684:	0b5b      	lsrs	r3, r3, #13
 8006686:	d105      	bne.n	8006694 <HAL_ADC_ConfigChannel+0x9c>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	0e9b      	lsrs	r3, r3, #26
 800668e:	221f      	movs	r2, #31
 8006690:	4013      	ands	r3, r2
 8006692:	e098      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2201      	movs	r2, #1
 800669a:	4013      	ands	r3, r2
 800669c:	d000      	beq.n	80066a0 <HAL_ADC_ConfigChannel+0xa8>
 800669e:	e091      	b.n	80067c4 <HAL_ADC_ConfigChannel+0x1cc>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2202      	movs	r2, #2
 80066a6:	4013      	ands	r3, r2
 80066a8:	d000      	beq.n	80066ac <HAL_ADC_ConfigChannel+0xb4>
 80066aa:	e089      	b.n	80067c0 <HAL_ADC_ConfigChannel+0x1c8>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2204      	movs	r2, #4
 80066b2:	4013      	ands	r3, r2
 80066b4:	d000      	beq.n	80066b8 <HAL_ADC_ConfigChannel+0xc0>
 80066b6:	e081      	b.n	80067bc <HAL_ADC_ConfigChannel+0x1c4>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2208      	movs	r2, #8
 80066be:	4013      	ands	r3, r2
 80066c0:	d000      	beq.n	80066c4 <HAL_ADC_ConfigChannel+0xcc>
 80066c2:	e079      	b.n	80067b8 <HAL_ADC_ConfigChannel+0x1c0>
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2210      	movs	r2, #16
 80066ca:	4013      	ands	r3, r2
 80066cc:	d000      	beq.n	80066d0 <HAL_ADC_ConfigChannel+0xd8>
 80066ce:	e071      	b.n	80067b4 <HAL_ADC_ConfigChannel+0x1bc>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2220      	movs	r2, #32
 80066d6:	4013      	ands	r3, r2
 80066d8:	d000      	beq.n	80066dc <HAL_ADC_ConfigChannel+0xe4>
 80066da:	e069      	b.n	80067b0 <HAL_ADC_ConfigChannel+0x1b8>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2240      	movs	r2, #64	@ 0x40
 80066e2:	4013      	ands	r3, r2
 80066e4:	d000      	beq.n	80066e8 <HAL_ADC_ConfigChannel+0xf0>
 80066e6:	e061      	b.n	80067ac <HAL_ADC_ConfigChannel+0x1b4>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2280      	movs	r2, #128	@ 0x80
 80066ee:	4013      	ands	r3, r2
 80066f0:	d000      	beq.n	80066f4 <HAL_ADC_ConfigChannel+0xfc>
 80066f2:	e059      	b.n	80067a8 <HAL_ADC_ConfigChannel+0x1b0>
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	2380      	movs	r3, #128	@ 0x80
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	4013      	ands	r3, r2
 80066fe:	d151      	bne.n	80067a4 <HAL_ADC_ConfigChannel+0x1ac>
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	2380      	movs	r3, #128	@ 0x80
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4013      	ands	r3, r2
 800670a:	d149      	bne.n	80067a0 <HAL_ADC_ConfigChannel+0x1a8>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	2380      	movs	r3, #128	@ 0x80
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4013      	ands	r3, r2
 8006716:	d141      	bne.n	800679c <HAL_ADC_ConfigChannel+0x1a4>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	2380      	movs	r3, #128	@ 0x80
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	4013      	ands	r3, r2
 8006722:	d139      	bne.n	8006798 <HAL_ADC_ConfigChannel+0x1a0>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	2380      	movs	r3, #128	@ 0x80
 800672a:	015b      	lsls	r3, r3, #5
 800672c:	4013      	ands	r3, r2
 800672e:	d131      	bne.n	8006794 <HAL_ADC_ConfigChannel+0x19c>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	2380      	movs	r3, #128	@ 0x80
 8006736:	019b      	lsls	r3, r3, #6
 8006738:	4013      	ands	r3, r2
 800673a:	d129      	bne.n	8006790 <HAL_ADC_ConfigChannel+0x198>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	2380      	movs	r3, #128	@ 0x80
 8006742:	01db      	lsls	r3, r3, #7
 8006744:	4013      	ands	r3, r2
 8006746:	d121      	bne.n	800678c <HAL_ADC_ConfigChannel+0x194>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	2380      	movs	r3, #128	@ 0x80
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	4013      	ands	r3, r2
 8006752:	d119      	bne.n	8006788 <HAL_ADC_ConfigChannel+0x190>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	2380      	movs	r3, #128	@ 0x80
 800675a:	025b      	lsls	r3, r3, #9
 800675c:	4013      	ands	r3, r2
 800675e:	d111      	bne.n	8006784 <HAL_ADC_ConfigChannel+0x18c>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	2380      	movs	r3, #128	@ 0x80
 8006766:	029b      	lsls	r3, r3, #10
 8006768:	4013      	ands	r3, r2
 800676a:	d109      	bne.n	8006780 <HAL_ADC_ConfigChannel+0x188>
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	2380      	movs	r3, #128	@ 0x80
 8006772:	02db      	lsls	r3, r3, #11
 8006774:	4013      	ands	r3, r2
 8006776:	d001      	beq.n	800677c <HAL_ADC_ConfigChannel+0x184>
 8006778:	2312      	movs	r3, #18
 800677a:	e024      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 800677c:	2300      	movs	r3, #0
 800677e:	e022      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 8006780:	2311      	movs	r3, #17
 8006782:	e020      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 8006784:	2310      	movs	r3, #16
 8006786:	e01e      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 8006788:	230f      	movs	r3, #15
 800678a:	e01c      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 800678c:	230e      	movs	r3, #14
 800678e:	e01a      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 8006790:	230d      	movs	r3, #13
 8006792:	e018      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 8006794:	230c      	movs	r3, #12
 8006796:	e016      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 8006798:	230b      	movs	r3, #11
 800679a:	e014      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 800679c:	230a      	movs	r3, #10
 800679e:	e012      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 80067a0:	2309      	movs	r3, #9
 80067a2:	e010      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 80067a4:	2308      	movs	r3, #8
 80067a6:	e00e      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 80067a8:	2307      	movs	r3, #7
 80067aa:	e00c      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 80067ac:	2306      	movs	r3, #6
 80067ae:	e00a      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 80067b0:	2305      	movs	r3, #5
 80067b2:	e008      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 80067b4:	2304      	movs	r3, #4
 80067b6:	e006      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 80067b8:	2303      	movs	r3, #3
 80067ba:	e004      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 80067bc:	2302      	movs	r3, #2
 80067be:	e002      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 80067c0:	2301      	movs	r3, #1
 80067c2:	e000      	b.n	80067c6 <HAL_ADC_ConfigChannel+0x1ce>
 80067c4:	2300      	movs	r3, #0
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	6852      	ldr	r2, [r2, #4]
 80067ca:	201f      	movs	r0, #31
 80067cc:	4002      	ands	r2, r0
 80067ce:	4093      	lsls	r3, r2
 80067d0:	000a      	movs	r2, r1
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	089b      	lsrs	r3, r3, #2
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d808      	bhi.n	80067fa <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	6859      	ldr	r1, [r3, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	001a      	movs	r2, r3
 80067f6:	f7ff fb79 	bl	8005eec <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6818      	ldr	r0, [r3, #0]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	6819      	ldr	r1, [r3, #0]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	001a      	movs	r2, r3
 8006808:	f7ff fbc0 	bl	8005f8c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	db00      	blt.n	8006816 <HAL_ADC_ConfigChannel+0x21e>
 8006814:	e0bc      	b.n	8006990 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006816:	4b50      	ldr	r3, [pc, #320]	@ (8006958 <HAL_ADC_ConfigChannel+0x360>)
 8006818:	0018      	movs	r0, r3
 800681a:	f7ff fb15 	bl	8005e48 <LL_ADC_GetCommonPathInternalCh>
 800681e:	0003      	movs	r3, r0
 8006820:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a4d      	ldr	r2, [pc, #308]	@ (800695c <HAL_ADC_ConfigChannel+0x364>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d122      	bne.n	8006872 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	2380      	movs	r3, #128	@ 0x80
 8006830:	041b      	lsls	r3, r3, #16
 8006832:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006834:	d11d      	bne.n	8006872 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	2280      	movs	r2, #128	@ 0x80
 800683a:	0412      	lsls	r2, r2, #16
 800683c:	4313      	orrs	r3, r2
 800683e:	4a46      	ldr	r2, [pc, #280]	@ (8006958 <HAL_ADC_ConfigChannel+0x360>)
 8006840:	0019      	movs	r1, r3
 8006842:	0010      	movs	r0, r2
 8006844:	f7ff faec 	bl	8005e20 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006848:	4b45      	ldr	r3, [pc, #276]	@ (8006960 <HAL_ADC_ConfigChannel+0x368>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4945      	ldr	r1, [pc, #276]	@ (8006964 <HAL_ADC_ConfigChannel+0x36c>)
 800684e:	0018      	movs	r0, r3
 8006850:	f7f9 fc72 	bl	8000138 <__udivsi3>
 8006854:	0003      	movs	r3, r0
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	0013      	movs	r3, r2
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	189b      	adds	r3, r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006862:	e002      	b.n	800686a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3b01      	subs	r3, #1
 8006868:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1f9      	bne.n	8006864 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006870:	e08e      	b.n	8006990 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a3c      	ldr	r2, [pc, #240]	@ (8006968 <HAL_ADC_ConfigChannel+0x370>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d10e      	bne.n	800689a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	2380      	movs	r3, #128	@ 0x80
 8006880:	045b      	lsls	r3, r3, #17
 8006882:	4013      	ands	r3, r2
 8006884:	d109      	bne.n	800689a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	2280      	movs	r2, #128	@ 0x80
 800688a:	0452      	lsls	r2, r2, #17
 800688c:	4313      	orrs	r3, r2
 800688e:	4a32      	ldr	r2, [pc, #200]	@ (8006958 <HAL_ADC_ConfigChannel+0x360>)
 8006890:	0019      	movs	r1, r3
 8006892:	0010      	movs	r0, r2
 8006894:	f7ff fac4 	bl	8005e20 <LL_ADC_SetCommonPathInternalCh>
 8006898:	e07a      	b.n	8006990 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a33      	ldr	r2, [pc, #204]	@ (800696c <HAL_ADC_ConfigChannel+0x374>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d000      	beq.n	80068a6 <HAL_ADC_ConfigChannel+0x2ae>
 80068a4:	e074      	b.n	8006990 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	2380      	movs	r3, #128	@ 0x80
 80068aa:	03db      	lsls	r3, r3, #15
 80068ac:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80068ae:	d000      	beq.n	80068b2 <HAL_ADC_ConfigChannel+0x2ba>
 80068b0:	e06e      	b.n	8006990 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	2280      	movs	r2, #128	@ 0x80
 80068b6:	03d2      	lsls	r2, r2, #15
 80068b8:	4313      	orrs	r3, r2
 80068ba:	4a27      	ldr	r2, [pc, #156]	@ (8006958 <HAL_ADC_ConfigChannel+0x360>)
 80068bc:	0019      	movs	r1, r3
 80068be:	0010      	movs	r0, r2
 80068c0:	f7ff faae 	bl	8005e20 <LL_ADC_SetCommonPathInternalCh>
 80068c4:	e064      	b.n	8006990 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691a      	ldr	r2, [r3, #16]
 80068ca:	2380      	movs	r3, #128	@ 0x80
 80068cc:	061b      	lsls	r3, r3, #24
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d004      	beq.n	80068dc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80068d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006954 <HAL_ADC_ConfigChannel+0x35c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d107      	bne.n	80068ec <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	0019      	movs	r1, r3
 80068e6:	0010      	movs	r0, r2
 80068e8:	f7ff fb31 	bl	8005f4e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	da4d      	bge.n	8006990 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068f4:	4b18      	ldr	r3, [pc, #96]	@ (8006958 <HAL_ADC_ConfigChannel+0x360>)
 80068f6:	0018      	movs	r0, r3
 80068f8:	f7ff faa6 	bl	8005e48 <LL_ADC_GetCommonPathInternalCh>
 80068fc:	0003      	movs	r3, r0
 80068fe:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a15      	ldr	r2, [pc, #84]	@ (800695c <HAL_ADC_ConfigChannel+0x364>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d108      	bne.n	800691c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	4a18      	ldr	r2, [pc, #96]	@ (8006970 <HAL_ADC_ConfigChannel+0x378>)
 800690e:	4013      	ands	r3, r2
 8006910:	4a11      	ldr	r2, [pc, #68]	@ (8006958 <HAL_ADC_ConfigChannel+0x360>)
 8006912:	0019      	movs	r1, r3
 8006914:	0010      	movs	r0, r2
 8006916:	f7ff fa83 	bl	8005e20 <LL_ADC_SetCommonPathInternalCh>
 800691a:	e039      	b.n	8006990 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a11      	ldr	r2, [pc, #68]	@ (8006968 <HAL_ADC_ConfigChannel+0x370>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d108      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	4a12      	ldr	r2, [pc, #72]	@ (8006974 <HAL_ADC_ConfigChannel+0x37c>)
 800692a:	4013      	ands	r3, r2
 800692c:	4a0a      	ldr	r2, [pc, #40]	@ (8006958 <HAL_ADC_ConfigChannel+0x360>)
 800692e:	0019      	movs	r1, r3
 8006930:	0010      	movs	r0, r2
 8006932:	f7ff fa75 	bl	8005e20 <LL_ADC_SetCommonPathInternalCh>
 8006936:	e02b      	b.n	8006990 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a0b      	ldr	r2, [pc, #44]	@ (800696c <HAL_ADC_ConfigChannel+0x374>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d126      	bne.n	8006990 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	4a0c      	ldr	r2, [pc, #48]	@ (8006978 <HAL_ADC_ConfigChannel+0x380>)
 8006946:	4013      	ands	r3, r2
 8006948:	4a03      	ldr	r2, [pc, #12]	@ (8006958 <HAL_ADC_ConfigChannel+0x360>)
 800694a:	0019      	movs	r1, r3
 800694c:	0010      	movs	r0, r2
 800694e:	f7ff fa67 	bl	8005e20 <LL_ADC_SetCommonPathInternalCh>
 8006952:	e01d      	b.n	8006990 <HAL_ADC_ConfigChannel+0x398>
 8006954:	80000004 	.word	0x80000004
 8006958:	40012708 	.word	0x40012708
 800695c:	b0001000 	.word	0xb0001000
 8006960:	20000010 	.word	0x20000010
 8006964:	00030d40 	.word	0x00030d40
 8006968:	b8004000 	.word	0xb8004000
 800696c:	b4002000 	.word	0xb4002000
 8006970:	ff7fffff 	.word	0xff7fffff
 8006974:	feffffff 	.word	0xfeffffff
 8006978:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006980:	2220      	movs	r2, #32
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006988:	2317      	movs	r3, #23
 800698a:	18fb      	adds	r3, r7, r3
 800698c:	2201      	movs	r2, #1
 800698e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2254      	movs	r2, #84	@ 0x54
 8006994:	2100      	movs	r1, #0
 8006996:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006998:	2317      	movs	r3, #23
 800699a:	18fb      	adds	r3, r7, r3
 800699c:	781b      	ldrb	r3, [r3, #0]
}
 800699e:	0018      	movs	r0, r3
 80069a0:	46bd      	mov	sp, r7
 80069a2:	b006      	add	sp, #24
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	46c0      	nop			@ (mov r8, r8)

080069a8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80069b0:	46c0      	nop			@ (mov r8, r8)
 80069b2:	46bd      	mov	sp, r7
 80069b4:	b002      	add	sp, #8
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80069c0:	46c0      	nop			@ (mov r8, r8)
 80069c2:	46bd      	mov	sp, r7
 80069c4:	b002      	add	sp, #8
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80069d0:	46c0      	nop			@ (mov r8, r8)
 80069d2:	46bd      	mov	sp, r7
 80069d4:	b002      	add	sp, #8
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80069e0:	46c0      	nop			@ (mov r8, r8)
 80069e2:	46bd      	mov	sp, r7
 80069e4:	b002      	add	sp, #8
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	0002      	movs	r2, r0
 80069f0:	1dfb      	adds	r3, r7, #7
 80069f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80069f4:	1dfb      	adds	r3, r7, #7
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80069fa:	d809      	bhi.n	8006a10 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069fc:	1dfb      	adds	r3, r7, #7
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	001a      	movs	r2, r3
 8006a02:	231f      	movs	r3, #31
 8006a04:	401a      	ands	r2, r3
 8006a06:	4b04      	ldr	r3, [pc, #16]	@ (8006a18 <__NVIC_EnableIRQ+0x30>)
 8006a08:	2101      	movs	r1, #1
 8006a0a:	4091      	lsls	r1, r2
 8006a0c:	000a      	movs	r2, r1
 8006a0e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006a10:	46c0      	nop			@ (mov r8, r8)
 8006a12:	46bd      	mov	sp, r7
 8006a14:	b002      	add	sp, #8
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	e000e100 	.word	0xe000e100

08006a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a1c:	b590      	push	{r4, r7, lr}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	0002      	movs	r2, r0
 8006a24:	6039      	str	r1, [r7, #0]
 8006a26:	1dfb      	adds	r3, r7, #7
 8006a28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006a2a:	1dfb      	adds	r3, r7, #7
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a30:	d828      	bhi.n	8006a84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a32:	4a2f      	ldr	r2, [pc, #188]	@ (8006af0 <__NVIC_SetPriority+0xd4>)
 8006a34:	1dfb      	adds	r3, r7, #7
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	b25b      	sxtb	r3, r3
 8006a3a:	089b      	lsrs	r3, r3, #2
 8006a3c:	33c0      	adds	r3, #192	@ 0xc0
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	589b      	ldr	r3, [r3, r2]
 8006a42:	1dfa      	adds	r2, r7, #7
 8006a44:	7812      	ldrb	r2, [r2, #0]
 8006a46:	0011      	movs	r1, r2
 8006a48:	2203      	movs	r2, #3
 8006a4a:	400a      	ands	r2, r1
 8006a4c:	00d2      	lsls	r2, r2, #3
 8006a4e:	21ff      	movs	r1, #255	@ 0xff
 8006a50:	4091      	lsls	r1, r2
 8006a52:	000a      	movs	r2, r1
 8006a54:	43d2      	mvns	r2, r2
 8006a56:	401a      	ands	r2, r3
 8006a58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	019b      	lsls	r3, r3, #6
 8006a5e:	22ff      	movs	r2, #255	@ 0xff
 8006a60:	401a      	ands	r2, r3
 8006a62:	1dfb      	adds	r3, r7, #7
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	0018      	movs	r0, r3
 8006a68:	2303      	movs	r3, #3
 8006a6a:	4003      	ands	r3, r0
 8006a6c:	00db      	lsls	r3, r3, #3
 8006a6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a70:	481f      	ldr	r0, [pc, #124]	@ (8006af0 <__NVIC_SetPriority+0xd4>)
 8006a72:	1dfb      	adds	r3, r7, #7
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	b25b      	sxtb	r3, r3
 8006a78:	089b      	lsrs	r3, r3, #2
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	33c0      	adds	r3, #192	@ 0xc0
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006a82:	e031      	b.n	8006ae8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a84:	4a1b      	ldr	r2, [pc, #108]	@ (8006af4 <__NVIC_SetPriority+0xd8>)
 8006a86:	1dfb      	adds	r3, r7, #7
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	0019      	movs	r1, r3
 8006a8c:	230f      	movs	r3, #15
 8006a8e:	400b      	ands	r3, r1
 8006a90:	3b08      	subs	r3, #8
 8006a92:	089b      	lsrs	r3, r3, #2
 8006a94:	3306      	adds	r3, #6
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	18d3      	adds	r3, r2, r3
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	1dfa      	adds	r2, r7, #7
 8006aa0:	7812      	ldrb	r2, [r2, #0]
 8006aa2:	0011      	movs	r1, r2
 8006aa4:	2203      	movs	r2, #3
 8006aa6:	400a      	ands	r2, r1
 8006aa8:	00d2      	lsls	r2, r2, #3
 8006aaa:	21ff      	movs	r1, #255	@ 0xff
 8006aac:	4091      	lsls	r1, r2
 8006aae:	000a      	movs	r2, r1
 8006ab0:	43d2      	mvns	r2, r2
 8006ab2:	401a      	ands	r2, r3
 8006ab4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	019b      	lsls	r3, r3, #6
 8006aba:	22ff      	movs	r2, #255	@ 0xff
 8006abc:	401a      	ands	r2, r3
 8006abe:	1dfb      	adds	r3, r7, #7
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	4003      	ands	r3, r0
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006acc:	4809      	ldr	r0, [pc, #36]	@ (8006af4 <__NVIC_SetPriority+0xd8>)
 8006ace:	1dfb      	adds	r3, r7, #7
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	001c      	movs	r4, r3
 8006ad4:	230f      	movs	r3, #15
 8006ad6:	4023      	ands	r3, r4
 8006ad8:	3b08      	subs	r3, #8
 8006ada:	089b      	lsrs	r3, r3, #2
 8006adc:	430a      	orrs	r2, r1
 8006ade:	3306      	adds	r3, #6
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	18c3      	adds	r3, r0, r3
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	601a      	str	r2, [r3, #0]
}
 8006ae8:	46c0      	nop			@ (mov r8, r8)
 8006aea:	46bd      	mov	sp, r7
 8006aec:	b003      	add	sp, #12
 8006aee:	bd90      	pop	{r4, r7, pc}
 8006af0:	e000e100 	.word	0xe000e100
 8006af4:	e000ed00 	.word	0xe000ed00

08006af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	1e5a      	subs	r2, r3, #1
 8006b04:	2380      	movs	r3, #128	@ 0x80
 8006b06:	045b      	lsls	r3, r3, #17
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d301      	bcc.n	8006b10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e010      	b.n	8006b32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b10:	4b0a      	ldr	r3, [pc, #40]	@ (8006b3c <SysTick_Config+0x44>)
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	3a01      	subs	r2, #1
 8006b16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b18:	2301      	movs	r3, #1
 8006b1a:	425b      	negs	r3, r3
 8006b1c:	2103      	movs	r1, #3
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f7ff ff7c 	bl	8006a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b24:	4b05      	ldr	r3, [pc, #20]	@ (8006b3c <SysTick_Config+0x44>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b2a:	4b04      	ldr	r3, [pc, #16]	@ (8006b3c <SysTick_Config+0x44>)
 8006b2c:	2207      	movs	r2, #7
 8006b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	0018      	movs	r0, r3
 8006b34:	46bd      	mov	sp, r7
 8006b36:	b002      	add	sp, #8
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	46c0      	nop			@ (mov r8, r8)
 8006b3c:	e000e010 	.word	0xe000e010

08006b40 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
 8006b4a:	210f      	movs	r1, #15
 8006b4c:	187b      	adds	r3, r7, r1
 8006b4e:	1c02      	adds	r2, r0, #0
 8006b50:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	187b      	adds	r3, r7, r1
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	b25b      	sxtb	r3, r3
 8006b5a:	0011      	movs	r1, r2
 8006b5c:	0018      	movs	r0, r3
 8006b5e:	f7ff ff5d 	bl	8006a1c <__NVIC_SetPriority>
}
 8006b62:	46c0      	nop			@ (mov r8, r8)
 8006b64:	46bd      	mov	sp, r7
 8006b66:	b004      	add	sp, #16
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	0002      	movs	r2, r0
 8006b72:	1dfb      	adds	r3, r7, #7
 8006b74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b76:	1dfb      	adds	r3, r7, #7
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	b25b      	sxtb	r3, r3
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	f7ff ff33 	bl	80069e8 <__NVIC_EnableIRQ>
}
 8006b82:	46c0      	nop			@ (mov r8, r8)
 8006b84:	46bd      	mov	sp, r7
 8006b86:	b002      	add	sp, #8
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	0018      	movs	r0, r3
 8006b96:	f7ff ffaf 	bl	8006af8 <SysTick_Config>
 8006b9a:	0003      	movs	r3, r0
}
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	b002      	add	sp, #8
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e077      	b.n	8006ca6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a3d      	ldr	r2, [pc, #244]	@ (8006cb0 <HAL_DMA_Init+0x10c>)
 8006bbc:	4694      	mov	ip, r2
 8006bbe:	4463      	add	r3, ip
 8006bc0:	2114      	movs	r1, #20
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f7f9 fab8 	bl	8000138 <__udivsi3>
 8006bc8:	0003      	movs	r3, r0
 8006bca:	009a      	lsls	r2, r3, #2
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2225      	movs	r2, #37	@ 0x25
 8006bd4:	2102      	movs	r1, #2
 8006bd6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4934      	ldr	r1, [pc, #208]	@ (8006cb4 <HAL_DMA_Init+0x110>)
 8006be4:	400a      	ands	r2, r1
 8006be6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6819      	ldr	r1, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	431a      	orrs	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	0018      	movs	r0, r3
 8006c22:	f000 fa8d 	bl	8007140 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	2380      	movs	r3, #128	@ 0x80
 8006c2c:	01db      	lsls	r3, r3, #7
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d102      	bne.n	8006c38 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c40:	213f      	movs	r1, #63	@ 0x3f
 8006c42:	400a      	ands	r2, r1
 8006c44:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006c4e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d011      	beq.n	8006c7c <HAL_DMA_Init+0xd8>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d80d      	bhi.n	8006c7c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	0018      	movs	r0, r3
 8006c64:	f000 fa98 	bl	8007198 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006c78:	605a      	str	r2, [r3, #4]
 8006c7a:	e008      	b.n	8006c8e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2225      	movs	r2, #37	@ 0x25
 8006c98:	2101      	movs	r1, #1
 8006c9a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2224      	movs	r2, #36	@ 0x24
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	b002      	add	sp, #8
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	46c0      	nop			@ (mov r8, r8)
 8006cb0:	bffdfff8 	.word	0xbffdfff8
 8006cb4:	ffff800f 	.word	0xffff800f

08006cb8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cc6:	2317      	movs	r3, #23
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	2200      	movs	r2, #0
 8006ccc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2224      	movs	r2, #36	@ 0x24
 8006cd2:	5c9b      	ldrb	r3, [r3, r2]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_DMA_Start_IT+0x24>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e06f      	b.n	8006dbc <HAL_DMA_Start_IT+0x104>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2224      	movs	r2, #36	@ 0x24
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2225      	movs	r2, #37	@ 0x25
 8006ce8:	5c9b      	ldrb	r3, [r3, r2]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d157      	bne.n	8006da0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2225      	movs	r2, #37	@ 0x25
 8006cf4:	2102      	movs	r1, #2
 8006cf6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2101      	movs	r1, #1
 8006d0a:	438a      	bics	r2, r1
 8006d0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	68b9      	ldr	r1, [r7, #8]
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 f9d3 	bl	80070c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d008      	beq.n	8006d34 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	210e      	movs	r1, #14
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	e00f      	b.n	8006d54 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2104      	movs	r1, #4
 8006d40:	438a      	bics	r2, r1
 8006d42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	210a      	movs	r1, #10
 8006d50:	430a      	orrs	r2, r1
 8006d52:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	2380      	movs	r3, #128	@ 0x80
 8006d5c:	025b      	lsls	r3, r3, #9
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d008      	beq.n	8006d74 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d6c:	2180      	movs	r1, #128	@ 0x80
 8006d6e:	0049      	lsls	r1, r1, #1
 8006d70:	430a      	orrs	r2, r1
 8006d72:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d008      	beq.n	8006d8e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d86:	2180      	movs	r1, #128	@ 0x80
 8006d88:	0049      	lsls	r1, r1, #1
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2101      	movs	r1, #1
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	e00a      	b.n	8006db6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2280      	movs	r2, #128	@ 0x80
 8006da4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2224      	movs	r2, #36	@ 0x24
 8006daa:	2100      	movs	r1, #0
 8006dac:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8006dae:	2317      	movs	r3, #23
 8006db0:	18fb      	adds	r3, r7, r3
 8006db2:	2201      	movs	r2, #1
 8006db4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006db6:	2317      	movs	r3, #23
 8006db8:	18fb      	adds	r3, r7, r3
 8006dba:	781b      	ldrb	r3, [r3, #0]
}
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	b006      	add	sp, #24
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e050      	b.n	8006e78 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2225      	movs	r2, #37	@ 0x25
 8006dda:	5c9b      	ldrb	r3, [r3, r2]
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d008      	beq.n	8006df4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2204      	movs	r2, #4
 8006de6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2224      	movs	r2, #36	@ 0x24
 8006dec:	2100      	movs	r1, #0
 8006dee:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e041      	b.n	8006e78 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	210e      	movs	r1, #14
 8006e00:	438a      	bics	r2, r1
 8006e02:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e0e:	491c      	ldr	r1, [pc, #112]	@ (8006e80 <HAL_DMA_Abort+0xbc>)
 8006e10:	400a      	ands	r2, r1
 8006e12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2101      	movs	r1, #1
 8006e20:	438a      	bics	r2, r1
 8006e22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8006e24:	4b17      	ldr	r3, [pc, #92]	@ (8006e84 <HAL_DMA_Abort+0xc0>)
 8006e26:	6859      	ldr	r1, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2c:	221c      	movs	r2, #28
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2201      	movs	r2, #1
 8006e32:	409a      	lsls	r2, r3
 8006e34:	4b13      	ldr	r3, [pc, #76]	@ (8006e84 <HAL_DMA_Abort+0xc0>)
 8006e36:	430a      	orrs	r2, r1
 8006e38:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006e42:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00c      	beq.n	8006e66 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e56:	490a      	ldr	r1, [pc, #40]	@ (8006e80 <HAL_DMA_Abort+0xbc>)
 8006e58:	400a      	ands	r2, r1
 8006e5a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006e64:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2225      	movs	r2, #37	@ 0x25
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2224      	movs	r2, #36	@ 0x24
 8006e72:	2100      	movs	r1, #0
 8006e74:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	0018      	movs	r0, r3
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	b002      	add	sp, #8
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	fffffeff 	.word	0xfffffeff
 8006e84:	40020000 	.word	0x40020000

08006e88 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e90:	210f      	movs	r1, #15
 8006e92:	187b      	adds	r3, r7, r1
 8006e94:	2200      	movs	r2, #0
 8006e96:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2225      	movs	r2, #37	@ 0x25
 8006e9c:	5c9b      	ldrb	r3, [r3, r2]
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d006      	beq.n	8006eb2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2204      	movs	r2, #4
 8006ea8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006eaa:	187b      	adds	r3, r7, r1
 8006eac:	2201      	movs	r2, #1
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	e049      	b.n	8006f46 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	210e      	movs	r1, #14
 8006ebe:	438a      	bics	r2, r1
 8006ec0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2101      	movs	r1, #1
 8006ece:	438a      	bics	r2, r1
 8006ed0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006edc:	491d      	ldr	r1, [pc, #116]	@ (8006f54 <HAL_DMA_Abort_IT+0xcc>)
 8006ede:	400a      	ands	r2, r1
 8006ee0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8006ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8006f58 <HAL_DMA_Abort_IT+0xd0>)
 8006ee4:	6859      	ldr	r1, [r3, #4]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eea:	221c      	movs	r2, #28
 8006eec:	4013      	ands	r3, r2
 8006eee:	2201      	movs	r2, #1
 8006ef0:	409a      	lsls	r2, r3
 8006ef2:	4b19      	ldr	r3, [pc, #100]	@ (8006f58 <HAL_DMA_Abort_IT+0xd0>)
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006f00:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00c      	beq.n	8006f24 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f14:	490f      	ldr	r1, [pc, #60]	@ (8006f54 <HAL_DMA_Abort_IT+0xcc>)
 8006f16:	400a      	ands	r2, r1
 8006f18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006f22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2225      	movs	r2, #37	@ 0x25
 8006f28:	2101      	movs	r1, #1
 8006f2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2224      	movs	r2, #36	@ 0x24
 8006f30:	2100      	movs	r1, #0
 8006f32:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d004      	beq.n	8006f46 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	0010      	movs	r0, r2
 8006f44:	4798      	blx	r3
    }
  }
  return status;
 8006f46:	230f      	movs	r3, #15
 8006f48:	18fb      	adds	r3, r7, r3
 8006f4a:	781b      	ldrb	r3, [r3, #0]
}
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	b004      	add	sp, #16
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	fffffeff 	.word	0xfffffeff
 8006f58:	40020000 	.word	0x40020000

08006f5c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8006f64:	4b55      	ldr	r3, [pc, #340]	@ (80070bc <HAL_DMA_IRQHandler+0x160>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f76:	221c      	movs	r2, #28
 8006f78:	4013      	ands	r3, r2
 8006f7a:	2204      	movs	r2, #4
 8006f7c:	409a      	lsls	r2, r3
 8006f7e:	0013      	movs	r3, r2
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4013      	ands	r3, r2
 8006f84:	d027      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x7a>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2204      	movs	r2, #4
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	d023      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2220      	movs	r2, #32
 8006f96:	4013      	ands	r3, r2
 8006f98:	d107      	bne.n	8006faa <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2104      	movs	r1, #4
 8006fa6:	438a      	bics	r2, r1
 8006fa8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8006faa:	4b44      	ldr	r3, [pc, #272]	@ (80070bc <HAL_DMA_IRQHandler+0x160>)
 8006fac:	6859      	ldr	r1, [r3, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb2:	221c      	movs	r2, #28
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	2204      	movs	r2, #4
 8006fb8:	409a      	lsls	r2, r3
 8006fba:	4b40      	ldr	r3, [pc, #256]	@ (80070bc <HAL_DMA_IRQHandler+0x160>)
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d100      	bne.n	8006fca <HAL_DMA_IRQHandler+0x6e>
 8006fc8:	e073      	b.n	80070b2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	0010      	movs	r0, r2
 8006fd2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006fd4:	e06d      	b.n	80070b2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fda:	221c      	movs	r2, #28
 8006fdc:	4013      	ands	r3, r2
 8006fde:	2202      	movs	r2, #2
 8006fe0:	409a      	lsls	r2, r3
 8006fe2:	0013      	movs	r3, r2
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	d02e      	beq.n	8007048 <HAL_DMA_IRQHandler+0xec>
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2202      	movs	r2, #2
 8006fee:	4013      	ands	r3, r2
 8006ff0:	d02a      	beq.n	8007048 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	d10b      	bne.n	8007016 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	210a      	movs	r1, #10
 800700a:	438a      	bics	r2, r1
 800700c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2225      	movs	r2, #37	@ 0x25
 8007012:	2101      	movs	r1, #1
 8007014:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007016:	4b29      	ldr	r3, [pc, #164]	@ (80070bc <HAL_DMA_IRQHandler+0x160>)
 8007018:	6859      	ldr	r1, [r3, #4]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701e:	221c      	movs	r2, #28
 8007020:	4013      	ands	r3, r2
 8007022:	2202      	movs	r2, #2
 8007024:	409a      	lsls	r2, r3
 8007026:	4b25      	ldr	r3, [pc, #148]	@ (80070bc <HAL_DMA_IRQHandler+0x160>)
 8007028:	430a      	orrs	r2, r1
 800702a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2224      	movs	r2, #36	@ 0x24
 8007030:	2100      	movs	r1, #0
 8007032:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007038:	2b00      	cmp	r3, #0
 800703a:	d03a      	beq.n	80070b2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	0010      	movs	r0, r2
 8007044:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8007046:	e034      	b.n	80070b2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704c:	221c      	movs	r2, #28
 800704e:	4013      	ands	r3, r2
 8007050:	2208      	movs	r2, #8
 8007052:	409a      	lsls	r2, r3
 8007054:	0013      	movs	r3, r2
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	4013      	ands	r3, r2
 800705a:	d02b      	beq.n	80070b4 <HAL_DMA_IRQHandler+0x158>
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2208      	movs	r2, #8
 8007060:	4013      	ands	r3, r2
 8007062:	d027      	beq.n	80070b4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	210e      	movs	r1, #14
 8007070:	438a      	bics	r2, r1
 8007072:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007074:	4b11      	ldr	r3, [pc, #68]	@ (80070bc <HAL_DMA_IRQHandler+0x160>)
 8007076:	6859      	ldr	r1, [r3, #4]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707c:	221c      	movs	r2, #28
 800707e:	4013      	ands	r3, r2
 8007080:	2201      	movs	r2, #1
 8007082:	409a      	lsls	r2, r3
 8007084:	4b0d      	ldr	r3, [pc, #52]	@ (80070bc <HAL_DMA_IRQHandler+0x160>)
 8007086:	430a      	orrs	r2, r1
 8007088:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2225      	movs	r2, #37	@ 0x25
 8007094:	2101      	movs	r1, #1
 8007096:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2224      	movs	r2, #36	@ 0x24
 800709c:	2100      	movs	r1, #0
 800709e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	0010      	movs	r0, r2
 80070b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80070b2:	46c0      	nop			@ (mov r8, r8)
 80070b4:	46c0      	nop			@ (mov r8, r8)
}
 80070b6:	46bd      	mov	sp, r7
 80070b8:	b004      	add	sp, #16
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	40020000 	.word	0x40020000

080070c0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80070d6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d004      	beq.n	80070ea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80070e8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80070ea:	4b14      	ldr	r3, [pc, #80]	@ (800713c <DMA_SetConfig+0x7c>)
 80070ec:	6859      	ldr	r1, [r3, #4]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f2:	221c      	movs	r2, #28
 80070f4:	4013      	ands	r3, r2
 80070f6:	2201      	movs	r2, #1
 80070f8:	409a      	lsls	r2, r3
 80070fa:	4b10      	ldr	r3, [pc, #64]	@ (800713c <DMA_SetConfig+0x7c>)
 80070fc:	430a      	orrs	r2, r1
 80070fe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	2b10      	cmp	r3, #16
 800710e:	d108      	bne.n	8007122 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007120:	e007      	b.n	8007132 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	60da      	str	r2, [r3, #12]
}
 8007132:	46c0      	nop			@ (mov r8, r8)
 8007134:	46bd      	mov	sp, r7
 8007136:	b004      	add	sp, #16
 8007138:	bd80      	pop	{r7, pc}
 800713a:	46c0      	nop			@ (mov r8, r8)
 800713c:	40020000 	.word	0x40020000

08007140 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714c:	089b      	lsrs	r3, r3, #2
 800714e:	4a10      	ldr	r2, [pc, #64]	@ (8007190 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8007150:	4694      	mov	ip, r2
 8007152:	4463      	add	r3, ip
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	001a      	movs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	001a      	movs	r2, r3
 8007162:	23ff      	movs	r3, #255	@ 0xff
 8007164:	4013      	ands	r3, r2
 8007166:	3b08      	subs	r3, #8
 8007168:	2114      	movs	r1, #20
 800716a:	0018      	movs	r0, r3
 800716c:	f7f8 ffe4 	bl	8000138 <__udivsi3>
 8007170:	0003      	movs	r3, r0
 8007172:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a07      	ldr	r2, [pc, #28]	@ (8007194 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8007178:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	221f      	movs	r2, #31
 800717e:	4013      	ands	r3, r2
 8007180:	2201      	movs	r2, #1
 8007182:	409a      	lsls	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8007188:	46c0      	nop			@ (mov r8, r8)
 800718a:	46bd      	mov	sp, r7
 800718c:	b004      	add	sp, #16
 800718e:	bd80      	pop	{r7, pc}
 8007190:	10008200 	.word	0x10008200
 8007194:	40020880 	.word	0x40020880

08007198 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	223f      	movs	r2, #63	@ 0x3f
 80071a6:	4013      	ands	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4a0a      	ldr	r2, [pc, #40]	@ (80071d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80071ae:	4694      	mov	ip, r2
 80071b0:	4463      	add	r3, ip
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	001a      	movs	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a07      	ldr	r2, [pc, #28]	@ (80071dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80071be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	2203      	movs	r2, #3
 80071c6:	4013      	ands	r3, r2
 80071c8:	2201      	movs	r2, #1
 80071ca:	409a      	lsls	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80071d0:	46c0      	nop			@ (mov r8, r8)
 80071d2:	46bd      	mov	sp, r7
 80071d4:	b004      	add	sp, #16
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	1000823f 	.word	0x1000823f
 80071dc:	40020940 	.word	0x40020940

080071e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80071ea:	2300      	movs	r3, #0
 80071ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80071ee:	e147      	b.n	8007480 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2101      	movs	r1, #1
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4091      	lsls	r1, r2
 80071fa:	000a      	movs	r2, r1
 80071fc:	4013      	ands	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d100      	bne.n	8007208 <HAL_GPIO_Init+0x28>
 8007206:	e138      	b.n	800747a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2203      	movs	r2, #3
 800720e:	4013      	ands	r3, r2
 8007210:	2b01      	cmp	r3, #1
 8007212:	d005      	beq.n	8007220 <HAL_GPIO_Init+0x40>
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	2203      	movs	r2, #3
 800721a:	4013      	ands	r3, r2
 800721c:	2b02      	cmp	r3, #2
 800721e:	d130      	bne.n	8007282 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	2203      	movs	r2, #3
 800722c:	409a      	lsls	r2, r3
 800722e:	0013      	movs	r3, r2
 8007230:	43da      	mvns	r2, r3
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	4013      	ands	r3, r2
 8007236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	409a      	lsls	r2, r3
 8007242:	0013      	movs	r3, r2
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	4313      	orrs	r3, r2
 8007248:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007256:	2201      	movs	r2, #1
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	409a      	lsls	r2, r3
 800725c:	0013      	movs	r3, r2
 800725e:	43da      	mvns	r2, r3
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	4013      	ands	r3, r2
 8007264:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	091b      	lsrs	r3, r3, #4
 800726c:	2201      	movs	r2, #1
 800726e:	401a      	ands	r2, r3
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	409a      	lsls	r2, r3
 8007274:	0013      	movs	r3, r2
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	4313      	orrs	r3, r2
 800727a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	2203      	movs	r2, #3
 8007288:	4013      	ands	r3, r2
 800728a:	2b03      	cmp	r3, #3
 800728c:	d017      	beq.n	80072be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	2203      	movs	r2, #3
 800729a:	409a      	lsls	r2, r3
 800729c:	0013      	movs	r3, r2
 800729e:	43da      	mvns	r2, r3
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	4013      	ands	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	409a      	lsls	r2, r3
 80072b0:	0013      	movs	r3, r2
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	2203      	movs	r2, #3
 80072c4:	4013      	ands	r3, r2
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d123      	bne.n	8007312 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	08da      	lsrs	r2, r3, #3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3208      	adds	r2, #8
 80072d2:	0092      	lsls	r2, r2, #2
 80072d4:	58d3      	ldr	r3, [r2, r3]
 80072d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2207      	movs	r2, #7
 80072dc:	4013      	ands	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	220f      	movs	r2, #15
 80072e2:	409a      	lsls	r2, r3
 80072e4:	0013      	movs	r3, r2
 80072e6:	43da      	mvns	r2, r3
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	4013      	ands	r3, r2
 80072ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	691a      	ldr	r2, [r3, #16]
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2107      	movs	r1, #7
 80072f6:	400b      	ands	r3, r1
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	409a      	lsls	r2, r3
 80072fc:	0013      	movs	r3, r2
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	4313      	orrs	r3, r2
 8007302:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	08da      	lsrs	r2, r3, #3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3208      	adds	r2, #8
 800730c:	0092      	lsls	r2, r2, #2
 800730e:	6939      	ldr	r1, [r7, #16]
 8007310:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	2203      	movs	r2, #3
 800731e:	409a      	lsls	r2, r3
 8007320:	0013      	movs	r3, r2
 8007322:	43da      	mvns	r2, r3
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	4013      	ands	r3, r2
 8007328:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	2203      	movs	r2, #3
 8007330:	401a      	ands	r2, r3
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	409a      	lsls	r2, r3
 8007338:	0013      	movs	r3, r2
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	4313      	orrs	r3, r2
 800733e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	23c0      	movs	r3, #192	@ 0xc0
 800734c:	029b      	lsls	r3, r3, #10
 800734e:	4013      	ands	r3, r2
 8007350:	d100      	bne.n	8007354 <HAL_GPIO_Init+0x174>
 8007352:	e092      	b.n	800747a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8007354:	4a50      	ldr	r2, [pc, #320]	@ (8007498 <HAL_GPIO_Init+0x2b8>)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	089b      	lsrs	r3, r3, #2
 800735a:	3318      	adds	r3, #24
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	589b      	ldr	r3, [r3, r2]
 8007360:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2203      	movs	r2, #3
 8007366:	4013      	ands	r3, r2
 8007368:	00db      	lsls	r3, r3, #3
 800736a:	220f      	movs	r2, #15
 800736c:	409a      	lsls	r2, r3
 800736e:	0013      	movs	r3, r2
 8007370:	43da      	mvns	r2, r3
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	4013      	ands	r3, r2
 8007376:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	23a0      	movs	r3, #160	@ 0xa0
 800737c:	05db      	lsls	r3, r3, #23
 800737e:	429a      	cmp	r2, r3
 8007380:	d013      	beq.n	80073aa <HAL_GPIO_Init+0x1ca>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a45      	ldr	r2, [pc, #276]	@ (800749c <HAL_GPIO_Init+0x2bc>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d00d      	beq.n	80073a6 <HAL_GPIO_Init+0x1c6>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a44      	ldr	r2, [pc, #272]	@ (80074a0 <HAL_GPIO_Init+0x2c0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d007      	beq.n	80073a2 <HAL_GPIO_Init+0x1c2>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a43      	ldr	r2, [pc, #268]	@ (80074a4 <HAL_GPIO_Init+0x2c4>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d101      	bne.n	800739e <HAL_GPIO_Init+0x1be>
 800739a:	2303      	movs	r3, #3
 800739c:	e006      	b.n	80073ac <HAL_GPIO_Init+0x1cc>
 800739e:	2305      	movs	r3, #5
 80073a0:	e004      	b.n	80073ac <HAL_GPIO_Init+0x1cc>
 80073a2:	2302      	movs	r3, #2
 80073a4:	e002      	b.n	80073ac <HAL_GPIO_Init+0x1cc>
 80073a6:	2301      	movs	r3, #1
 80073a8:	e000      	b.n	80073ac <HAL_GPIO_Init+0x1cc>
 80073aa:	2300      	movs	r3, #0
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	2103      	movs	r1, #3
 80073b0:	400a      	ands	r2, r1
 80073b2:	00d2      	lsls	r2, r2, #3
 80073b4:	4093      	lsls	r3, r2
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80073bc:	4936      	ldr	r1, [pc, #216]	@ (8007498 <HAL_GPIO_Init+0x2b8>)
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	089b      	lsrs	r3, r3, #2
 80073c2:	3318      	adds	r3, #24
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80073ca:	4b33      	ldr	r3, [pc, #204]	@ (8007498 <HAL_GPIO_Init+0x2b8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	43da      	mvns	r2, r3
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	4013      	ands	r3, r2
 80073d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	2380      	movs	r3, #128	@ 0x80
 80073e0:	035b      	lsls	r3, r3, #13
 80073e2:	4013      	ands	r3, r2
 80073e4:	d003      	beq.n	80073ee <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80073ee:	4b2a      	ldr	r3, [pc, #168]	@ (8007498 <HAL_GPIO_Init+0x2b8>)
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80073f4:	4b28      	ldr	r3, [pc, #160]	@ (8007498 <HAL_GPIO_Init+0x2b8>)
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	43da      	mvns	r2, r3
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	4013      	ands	r3, r2
 8007402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	2380      	movs	r3, #128	@ 0x80
 800740a:	039b      	lsls	r3, r3, #14
 800740c:	4013      	ands	r3, r2
 800740e:	d003      	beq.n	8007418 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4313      	orrs	r3, r2
 8007416:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007418:	4b1f      	ldr	r3, [pc, #124]	@ (8007498 <HAL_GPIO_Init+0x2b8>)
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800741e:	4a1e      	ldr	r2, [pc, #120]	@ (8007498 <HAL_GPIO_Init+0x2b8>)
 8007420:	2384      	movs	r3, #132	@ 0x84
 8007422:	58d3      	ldr	r3, [r2, r3]
 8007424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	43da      	mvns	r2, r3
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	4013      	ands	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	2380      	movs	r3, #128	@ 0x80
 8007436:	029b      	lsls	r3, r3, #10
 8007438:	4013      	ands	r3, r2
 800743a:	d003      	beq.n	8007444 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4313      	orrs	r3, r2
 8007442:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007444:	4914      	ldr	r1, [pc, #80]	@ (8007498 <HAL_GPIO_Init+0x2b8>)
 8007446:	2284      	movs	r2, #132	@ 0x84
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800744c:	4a12      	ldr	r2, [pc, #72]	@ (8007498 <HAL_GPIO_Init+0x2b8>)
 800744e:	2380      	movs	r3, #128	@ 0x80
 8007450:	58d3      	ldr	r3, [r2, r3]
 8007452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	43da      	mvns	r2, r3
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	4013      	ands	r3, r2
 800745c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	2380      	movs	r3, #128	@ 0x80
 8007464:	025b      	lsls	r3, r3, #9
 8007466:	4013      	ands	r3, r2
 8007468:	d003      	beq.n	8007472 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4313      	orrs	r3, r2
 8007470:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007472:	4909      	ldr	r1, [pc, #36]	@ (8007498 <HAL_GPIO_Init+0x2b8>)
 8007474:	2280      	movs	r2, #128	@ 0x80
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	3301      	adds	r3, #1
 800747e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	40da      	lsrs	r2, r3
 8007488:	1e13      	subs	r3, r2, #0
 800748a:	d000      	beq.n	800748e <HAL_GPIO_Init+0x2ae>
 800748c:	e6b0      	b.n	80071f0 <HAL_GPIO_Init+0x10>
  }
}
 800748e:	46c0      	nop			@ (mov r8, r8)
 8007490:	46c0      	nop			@ (mov r8, r8)
 8007492:	46bd      	mov	sp, r7
 8007494:	b006      	add	sp, #24
 8007496:	bd80      	pop	{r7, pc}
 8007498:	40021800 	.word	0x40021800
 800749c:	50000400 	.word	0x50000400
 80074a0:	50000800 	.word	0x50000800
 80074a4:	50000c00 	.word	0x50000c00

080074a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	000a      	movs	r2, r1
 80074b2:	1cbb      	adds	r3, r7, #2
 80074b4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	1cba      	adds	r2, r7, #2
 80074bc:	8812      	ldrh	r2, [r2, #0]
 80074be:	4013      	ands	r3, r2
 80074c0:	d004      	beq.n	80074cc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80074c2:	230f      	movs	r3, #15
 80074c4:	18fb      	adds	r3, r7, r3
 80074c6:	2201      	movs	r2, #1
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	e003      	b.n	80074d4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80074cc:	230f      	movs	r3, #15
 80074ce:	18fb      	adds	r3, r7, r3
 80074d0:	2200      	movs	r2, #0
 80074d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80074d4:	230f      	movs	r3, #15
 80074d6:	18fb      	adds	r3, r7, r3
 80074d8:	781b      	ldrb	r3, [r3, #0]
}
 80074da:	0018      	movs	r0, r3
 80074dc:	46bd      	mov	sp, r7
 80074de:	b004      	add	sp, #16
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	0008      	movs	r0, r1
 80074ec:	0011      	movs	r1, r2
 80074ee:	1cbb      	adds	r3, r7, #2
 80074f0:	1c02      	adds	r2, r0, #0
 80074f2:	801a      	strh	r2, [r3, #0]
 80074f4:	1c7b      	adds	r3, r7, #1
 80074f6:	1c0a      	adds	r2, r1, #0
 80074f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80074fa:	1c7b      	adds	r3, r7, #1
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d004      	beq.n	800750c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007502:	1cbb      	adds	r3, r7, #2
 8007504:	881a      	ldrh	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800750a:	e003      	b.n	8007514 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800750c:	1cbb      	adds	r3, r7, #2
 800750e:	881a      	ldrh	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007514:	46c0      	nop			@ (mov r8, r8)
 8007516:	46bd      	mov	sp, r7
 8007518:	b002      	add	sp, #8
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	0002      	movs	r2, r0
 8007524:	1dbb      	adds	r3, r7, #6
 8007526:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8007528:	4b10      	ldr	r3, [pc, #64]	@ (800756c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	1dba      	adds	r2, r7, #6
 800752e:	8812      	ldrh	r2, [r2, #0]
 8007530:	4013      	ands	r3, r2
 8007532:	d008      	beq.n	8007546 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007534:	4b0d      	ldr	r3, [pc, #52]	@ (800756c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007536:	1dba      	adds	r2, r7, #6
 8007538:	8812      	ldrh	r2, [r2, #0]
 800753a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800753c:	1dbb      	adds	r3, r7, #6
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	0018      	movs	r0, r3
 8007542:	f000 f815 	bl	8007570 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8007546:	4b09      	ldr	r3, [pc, #36]	@ (800756c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	1dba      	adds	r2, r7, #6
 800754c:	8812      	ldrh	r2, [r2, #0]
 800754e:	4013      	ands	r3, r2
 8007550:	d008      	beq.n	8007564 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007552:	4b06      	ldr	r3, [pc, #24]	@ (800756c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8007554:	1dba      	adds	r2, r7, #6
 8007556:	8812      	ldrh	r2, [r2, #0]
 8007558:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800755a:	1dbb      	adds	r3, r7, #6
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	0018      	movs	r0, r3
 8007560:	f7fc fab6 	bl	8003ad0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8007564:	46c0      	nop			@ (mov r8, r8)
 8007566:	46bd      	mov	sp, r7
 8007568:	b002      	add	sp, #8
 800756a:	bd80      	pop	{r7, pc}
 800756c:	40021800 	.word	0x40021800

08007570 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	0002      	movs	r2, r0
 8007578:	1dbb      	adds	r3, r7, #6
 800757a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800757c:	46c0      	nop			@ (mov r8, r8)
 800757e:	46bd      	mov	sp, r7
 8007580:	b002      	add	sp, #8
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e08f      	b.n	80076b6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2241      	movs	r2, #65	@ 0x41
 800759a:	5c9b      	ldrb	r3, [r3, r2]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d107      	bne.n	80075b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2240      	movs	r2, #64	@ 0x40
 80075a6:	2100      	movs	r1, #0
 80075a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	0018      	movs	r0, r3
 80075ae:	f7fe f80b 	bl	80055c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2241      	movs	r2, #65	@ 0x41
 80075b6:	2124      	movs	r1, #36	@ 0x24
 80075b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2101      	movs	r1, #1
 80075c6:	438a      	bics	r2, r1
 80075c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	493b      	ldr	r1, [pc, #236]	@ (80076c0 <HAL_I2C_Init+0x13c>)
 80075d4:	400a      	ands	r2, r1
 80075d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4938      	ldr	r1, [pc, #224]	@ (80076c4 <HAL_I2C_Init+0x140>)
 80075e4:	400a      	ands	r2, r1
 80075e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d108      	bne.n	8007602 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689a      	ldr	r2, [r3, #8]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2180      	movs	r1, #128	@ 0x80
 80075fa:	0209      	lsls	r1, r1, #8
 80075fc:	430a      	orrs	r2, r1
 80075fe:	609a      	str	r2, [r3, #8]
 8007600:	e007      	b.n	8007612 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2184      	movs	r1, #132	@ 0x84
 800760c:	0209      	lsls	r1, r1, #8
 800760e:	430a      	orrs	r2, r1
 8007610:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	2b02      	cmp	r3, #2
 8007618:	d109      	bne.n	800762e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2180      	movs	r1, #128	@ 0x80
 8007626:	0109      	lsls	r1, r1, #4
 8007628:	430a      	orrs	r2, r1
 800762a:	605a      	str	r2, [r3, #4]
 800762c:	e007      	b.n	800763e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4923      	ldr	r1, [pc, #140]	@ (80076c8 <HAL_I2C_Init+0x144>)
 800763a:	400a      	ands	r2, r1
 800763c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4920      	ldr	r1, [pc, #128]	@ (80076cc <HAL_I2C_Init+0x148>)
 800764a:	430a      	orrs	r2, r1
 800764c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68da      	ldr	r2, [r3, #12]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	491a      	ldr	r1, [pc, #104]	@ (80076c4 <HAL_I2C_Init+0x140>)
 800765a:	400a      	ands	r2, r1
 800765c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	691a      	ldr	r2, [r3, #16]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	431a      	orrs	r2, r3
 8007668:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	69d9      	ldr	r1, [r3, #28]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1a      	ldr	r2, [r3, #32]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2101      	movs	r1, #1
 8007694:	430a      	orrs	r2, r1
 8007696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2241      	movs	r2, #65	@ 0x41
 80076a2:	2120      	movs	r1, #32
 80076a4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2242      	movs	r2, #66	@ 0x42
 80076b0:	2100      	movs	r1, #0
 80076b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	0018      	movs	r0, r3
 80076b8:	46bd      	mov	sp, r7
 80076ba:	b002      	add	sp, #8
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	46c0      	nop			@ (mov r8, r8)
 80076c0:	f0ffffff 	.word	0xf0ffffff
 80076c4:	ffff7fff 	.word	0xffff7fff
 80076c8:	fffff7ff 	.word	0xfffff7ff
 80076cc:	02008000 	.word	0x02008000

080076d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80076d0:	b590      	push	{r4, r7, lr}
 80076d2:	b089      	sub	sp, #36	@ 0x24
 80076d4:	af02      	add	r7, sp, #8
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	0008      	movs	r0, r1
 80076da:	607a      	str	r2, [r7, #4]
 80076dc:	0019      	movs	r1, r3
 80076de:	230a      	movs	r3, #10
 80076e0:	18fb      	adds	r3, r7, r3
 80076e2:	1c02      	adds	r2, r0, #0
 80076e4:	801a      	strh	r2, [r3, #0]
 80076e6:	2308      	movs	r3, #8
 80076e8:	18fb      	adds	r3, r7, r3
 80076ea:	1c0a      	adds	r2, r1, #0
 80076ec:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2241      	movs	r2, #65	@ 0x41
 80076f2:	5c9b      	ldrb	r3, [r3, r2]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b20      	cmp	r3, #32
 80076f8:	d000      	beq.n	80076fc <HAL_I2C_Master_Transmit+0x2c>
 80076fa:	e10a      	b.n	8007912 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2240      	movs	r2, #64	@ 0x40
 8007700:	5c9b      	ldrb	r3, [r3, r2]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d101      	bne.n	800770a <HAL_I2C_Master_Transmit+0x3a>
 8007706:	2302      	movs	r3, #2
 8007708:	e104      	b.n	8007914 <HAL_I2C_Master_Transmit+0x244>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2240      	movs	r2, #64	@ 0x40
 800770e:	2101      	movs	r1, #1
 8007710:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007712:	f7fe fb57 	bl	8005dc4 <HAL_GetTick>
 8007716:	0003      	movs	r3, r0
 8007718:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800771a:	2380      	movs	r3, #128	@ 0x80
 800771c:	0219      	lsls	r1, r3, #8
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	2319      	movs	r3, #25
 8007726:	2201      	movs	r2, #1
 8007728:	f000 fd4e 	bl	80081c8 <I2C_WaitOnFlagUntilTimeout>
 800772c:	1e03      	subs	r3, r0, #0
 800772e:	d001      	beq.n	8007734 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e0ef      	b.n	8007914 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2241      	movs	r2, #65	@ 0x41
 8007738:	2121      	movs	r1, #33	@ 0x21
 800773a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2242      	movs	r2, #66	@ 0x42
 8007740:	2110      	movs	r1, #16
 8007742:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2208      	movs	r2, #8
 8007754:	18ba      	adds	r2, r7, r2
 8007756:	8812      	ldrh	r2, [r2, #0]
 8007758:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007764:	b29b      	uxth	r3, r3
 8007766:	2bff      	cmp	r3, #255	@ 0xff
 8007768:	d906      	bls.n	8007778 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	22ff      	movs	r2, #255	@ 0xff
 800776e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007770:	2380      	movs	r3, #128	@ 0x80
 8007772:	045b      	lsls	r3, r3, #17
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	e007      	b.n	8007788 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007782:	2380      	movs	r3, #128	@ 0x80
 8007784:	049b      	lsls	r3, r3, #18
 8007786:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800778c:	2b00      	cmp	r3, #0
 800778e:	d027      	beq.n	80077e0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007794:	781a      	ldrb	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077b8:	3b01      	subs	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	3301      	adds	r3, #1
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	697c      	ldr	r4, [r7, #20]
 80077cc:	230a      	movs	r3, #10
 80077ce:	18fb      	adds	r3, r7, r3
 80077d0:	8819      	ldrh	r1, [r3, #0]
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	4b51      	ldr	r3, [pc, #324]	@ (800791c <HAL_I2C_Master_Transmit+0x24c>)
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	0023      	movs	r3, r4
 80077da:	f000 ff6d 	bl	80086b8 <I2C_TransferConfig>
 80077de:	e06f      	b.n	80078c0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	697c      	ldr	r4, [r7, #20]
 80077e8:	230a      	movs	r3, #10
 80077ea:	18fb      	adds	r3, r7, r3
 80077ec:	8819      	ldrh	r1, [r3, #0]
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	4b4a      	ldr	r3, [pc, #296]	@ (800791c <HAL_I2C_Master_Transmit+0x24c>)
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	0023      	movs	r3, r4
 80077f6:	f000 ff5f 	bl	80086b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80077fa:	e061      	b.n	80078c0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	0018      	movs	r0, r3
 8007804:	f000 fd38 	bl	8008278 <I2C_WaitOnTXISFlagUntilTimeout>
 8007808:	1e03      	subs	r3, r0, #0
 800780a:	d001      	beq.n	8007810 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e081      	b.n	8007914 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007814:	781a      	ldrb	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800782a:	b29b      	uxth	r3, r3
 800782c:	3b01      	subs	r3, #1
 800782e:	b29a      	uxth	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007838:	3b01      	subs	r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007844:	b29b      	uxth	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d03a      	beq.n	80078c0 <HAL_I2C_Master_Transmit+0x1f0>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800784e:	2b00      	cmp	r3, #0
 8007850:	d136      	bne.n	80078c0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	0013      	movs	r3, r2
 800785c:	2200      	movs	r2, #0
 800785e:	2180      	movs	r1, #128	@ 0x80
 8007860:	f000 fcb2 	bl	80081c8 <I2C_WaitOnFlagUntilTimeout>
 8007864:	1e03      	subs	r3, r0, #0
 8007866:	d001      	beq.n	800786c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e053      	b.n	8007914 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007870:	b29b      	uxth	r3, r3
 8007872:	2bff      	cmp	r3, #255	@ 0xff
 8007874:	d911      	bls.n	800789a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	22ff      	movs	r2, #255	@ 0xff
 800787a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007880:	b2da      	uxtb	r2, r3
 8007882:	2380      	movs	r3, #128	@ 0x80
 8007884:	045c      	lsls	r4, r3, #17
 8007886:	230a      	movs	r3, #10
 8007888:	18fb      	adds	r3, r7, r3
 800788a:	8819      	ldrh	r1, [r3, #0]
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	2300      	movs	r3, #0
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	0023      	movs	r3, r4
 8007894:	f000 ff10 	bl	80086b8 <I2C_TransferConfig>
 8007898:	e012      	b.n	80078c0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	2380      	movs	r3, #128	@ 0x80
 80078ac:	049c      	lsls	r4, r3, #18
 80078ae:	230a      	movs	r3, #10
 80078b0:	18fb      	adds	r3, r7, r3
 80078b2:	8819      	ldrh	r1, [r3, #0]
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	2300      	movs	r3, #0
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	0023      	movs	r3, r4
 80078bc:	f000 fefc 	bl	80086b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d198      	bne.n	80077fc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	0018      	movs	r0, r3
 80078d2:	f000 fd17 	bl	8008304 <I2C_WaitOnSTOPFlagUntilTimeout>
 80078d6:	1e03      	subs	r3, r0, #0
 80078d8:	d001      	beq.n	80078de <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e01a      	b.n	8007914 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2220      	movs	r2, #32
 80078e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	490b      	ldr	r1, [pc, #44]	@ (8007920 <HAL_I2C_Master_Transmit+0x250>)
 80078f2:	400a      	ands	r2, r1
 80078f4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2241      	movs	r2, #65	@ 0x41
 80078fa:	2120      	movs	r1, #32
 80078fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2242      	movs	r2, #66	@ 0x42
 8007902:	2100      	movs	r1, #0
 8007904:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2240      	movs	r2, #64	@ 0x40
 800790a:	2100      	movs	r1, #0
 800790c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	e000      	b.n	8007914 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8007912:	2302      	movs	r3, #2
  }
}
 8007914:	0018      	movs	r0, r3
 8007916:	46bd      	mov	sp, r7
 8007918:	b007      	add	sp, #28
 800791a:	bd90      	pop	{r4, r7, pc}
 800791c:	80002000 	.word	0x80002000
 8007920:	fe00e800 	.word	0xfe00e800

08007924 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007924:	b590      	push	{r4, r7, lr}
 8007926:	b089      	sub	sp, #36	@ 0x24
 8007928:	af02      	add	r7, sp, #8
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	0008      	movs	r0, r1
 800792e:	607a      	str	r2, [r7, #4]
 8007930:	0019      	movs	r1, r3
 8007932:	230a      	movs	r3, #10
 8007934:	18fb      	adds	r3, r7, r3
 8007936:	1c02      	adds	r2, r0, #0
 8007938:	801a      	strh	r2, [r3, #0]
 800793a:	2308      	movs	r3, #8
 800793c:	18fb      	adds	r3, r7, r3
 800793e:	1c0a      	adds	r2, r1, #0
 8007940:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2241      	movs	r2, #65	@ 0x41
 8007946:	5c9b      	ldrb	r3, [r3, r2]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b20      	cmp	r3, #32
 800794c:	d000      	beq.n	8007950 <HAL_I2C_Master_Receive+0x2c>
 800794e:	e0e8      	b.n	8007b22 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2240      	movs	r2, #64	@ 0x40
 8007954:	5c9b      	ldrb	r3, [r3, r2]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <HAL_I2C_Master_Receive+0x3a>
 800795a:	2302      	movs	r3, #2
 800795c:	e0e2      	b.n	8007b24 <HAL_I2C_Master_Receive+0x200>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2240      	movs	r2, #64	@ 0x40
 8007962:	2101      	movs	r1, #1
 8007964:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007966:	f7fe fa2d 	bl	8005dc4 <HAL_GetTick>
 800796a:	0003      	movs	r3, r0
 800796c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800796e:	2380      	movs	r3, #128	@ 0x80
 8007970:	0219      	lsls	r1, r3, #8
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	2319      	movs	r3, #25
 800797a:	2201      	movs	r2, #1
 800797c:	f000 fc24 	bl	80081c8 <I2C_WaitOnFlagUntilTimeout>
 8007980:	1e03      	subs	r3, r0, #0
 8007982:	d001      	beq.n	8007988 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e0cd      	b.n	8007b24 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2241      	movs	r2, #65	@ 0x41
 800798c:	2122      	movs	r1, #34	@ 0x22
 800798e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2242      	movs	r2, #66	@ 0x42
 8007994:	2110      	movs	r1, #16
 8007996:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2208      	movs	r2, #8
 80079a8:	18ba      	adds	r2, r7, r2
 80079aa:	8812      	ldrh	r2, [r2, #0]
 80079ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2bff      	cmp	r3, #255	@ 0xff
 80079bc:	d911      	bls.n	80079e2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	22ff      	movs	r2, #255	@ 0xff
 80079c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	2380      	movs	r3, #128	@ 0x80
 80079cc:	045c      	lsls	r4, r3, #17
 80079ce:	230a      	movs	r3, #10
 80079d0:	18fb      	adds	r3, r7, r3
 80079d2:	8819      	ldrh	r1, [r3, #0]
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	4b55      	ldr	r3, [pc, #340]	@ (8007b2c <HAL_I2C_Master_Receive+0x208>)
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	0023      	movs	r3, r4
 80079dc:	f000 fe6c 	bl	80086b8 <I2C_TransferConfig>
 80079e0:	e076      	b.n	8007ad0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	2380      	movs	r3, #128	@ 0x80
 80079f4:	049c      	lsls	r4, r3, #18
 80079f6:	230a      	movs	r3, #10
 80079f8:	18fb      	adds	r3, r7, r3
 80079fa:	8819      	ldrh	r1, [r3, #0]
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	4b4b      	ldr	r3, [pc, #300]	@ (8007b2c <HAL_I2C_Master_Receive+0x208>)
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	0023      	movs	r3, r4
 8007a04:	f000 fe58 	bl	80086b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007a08:	e062      	b.n	8007ad0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	0018      	movs	r0, r3
 8007a12:	f000 fcbb 	bl	800838c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a16:	1e03      	subs	r3, r0, #0
 8007a18:	d001      	beq.n	8007a1e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e082      	b.n	8007b24 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d03a      	beq.n	8007ad0 <HAL_I2C_Master_Receive+0x1ac>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d136      	bne.n	8007ad0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	0013      	movs	r3, r2
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2180      	movs	r1, #128	@ 0x80
 8007a70:	f000 fbaa 	bl	80081c8 <I2C_WaitOnFlagUntilTimeout>
 8007a74:	1e03      	subs	r3, r0, #0
 8007a76:	d001      	beq.n	8007a7c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e053      	b.n	8007b24 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2bff      	cmp	r3, #255	@ 0xff
 8007a84:	d911      	bls.n	8007aaa <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	22ff      	movs	r2, #255	@ 0xff
 8007a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	2380      	movs	r3, #128	@ 0x80
 8007a94:	045c      	lsls	r4, r3, #17
 8007a96:	230a      	movs	r3, #10
 8007a98:	18fb      	adds	r3, r7, r3
 8007a9a:	8819      	ldrh	r1, [r3, #0]
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	0023      	movs	r3, r4
 8007aa4:	f000 fe08 	bl	80086b8 <I2C_TransferConfig>
 8007aa8:	e012      	b.n	8007ad0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	2380      	movs	r3, #128	@ 0x80
 8007abc:	049c      	lsls	r4, r3, #18
 8007abe:	230a      	movs	r3, #10
 8007ac0:	18fb      	adds	r3, r7, r3
 8007ac2:	8819      	ldrh	r1, [r3, #0]
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	0023      	movs	r3, r4
 8007acc:	f000 fdf4 	bl	80086b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d197      	bne.n	8007a0a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	0018      	movs	r0, r3
 8007ae2:	f000 fc0f 	bl	8008304 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ae6:	1e03      	subs	r3, r0, #0
 8007ae8:	d001      	beq.n	8007aee <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e01a      	b.n	8007b24 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2220      	movs	r2, #32
 8007af4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	490b      	ldr	r1, [pc, #44]	@ (8007b30 <HAL_I2C_Master_Receive+0x20c>)
 8007b02:	400a      	ands	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2241      	movs	r2, #65	@ 0x41
 8007b0a:	2120      	movs	r1, #32
 8007b0c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2242      	movs	r2, #66	@ 0x42
 8007b12:	2100      	movs	r1, #0
 8007b14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2240      	movs	r2, #64	@ 0x40
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e000      	b.n	8007b24 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8007b22:	2302      	movs	r3, #2
  }
}
 8007b24:	0018      	movs	r0, r3
 8007b26:	46bd      	mov	sp, r7
 8007b28:	b007      	add	sp, #28
 8007b2a:	bd90      	pop	{r4, r7, pc}
 8007b2c:	80002400 	.word	0x80002400
 8007b30:	fe00e800 	.word	0xfe00e800

08007b34 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b34:	b590      	push	{r4, r7, lr}
 8007b36:	b089      	sub	sp, #36	@ 0x24
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	000c      	movs	r4, r1
 8007b3e:	0010      	movs	r0, r2
 8007b40:	0019      	movs	r1, r3
 8007b42:	230a      	movs	r3, #10
 8007b44:	18fb      	adds	r3, r7, r3
 8007b46:	1c22      	adds	r2, r4, #0
 8007b48:	801a      	strh	r2, [r3, #0]
 8007b4a:	2308      	movs	r3, #8
 8007b4c:	18fb      	adds	r3, r7, r3
 8007b4e:	1c02      	adds	r2, r0, #0
 8007b50:	801a      	strh	r2, [r3, #0]
 8007b52:	1dbb      	adds	r3, r7, #6
 8007b54:	1c0a      	adds	r2, r1, #0
 8007b56:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2241      	movs	r2, #65	@ 0x41
 8007b5c:	5c9b      	ldrb	r3, [r3, r2]
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b20      	cmp	r3, #32
 8007b62:	d000      	beq.n	8007b66 <HAL_I2C_Mem_Write+0x32>
 8007b64:	e10c      	b.n	8007d80 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d004      	beq.n	8007b76 <HAL_I2C_Mem_Write+0x42>
 8007b6c:	232c      	movs	r3, #44	@ 0x2c
 8007b6e:	18fb      	adds	r3, r7, r3
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d105      	bne.n	8007b82 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2280      	movs	r2, #128	@ 0x80
 8007b7a:	0092      	lsls	r2, r2, #2
 8007b7c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e0ff      	b.n	8007d82 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2240      	movs	r2, #64	@ 0x40
 8007b86:	5c9b      	ldrb	r3, [r3, r2]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d101      	bne.n	8007b90 <HAL_I2C_Mem_Write+0x5c>
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	e0f8      	b.n	8007d82 <HAL_I2C_Mem_Write+0x24e>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2240      	movs	r2, #64	@ 0x40
 8007b94:	2101      	movs	r1, #1
 8007b96:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b98:	f7fe f914 	bl	8005dc4 <HAL_GetTick>
 8007b9c:	0003      	movs	r3, r0
 8007b9e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ba0:	2380      	movs	r3, #128	@ 0x80
 8007ba2:	0219      	lsls	r1, r3, #8
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	2319      	movs	r3, #25
 8007bac:	2201      	movs	r2, #1
 8007bae:	f000 fb0b 	bl	80081c8 <I2C_WaitOnFlagUntilTimeout>
 8007bb2:	1e03      	subs	r3, r0, #0
 8007bb4:	d001      	beq.n	8007bba <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e0e3      	b.n	8007d82 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2241      	movs	r2, #65	@ 0x41
 8007bbe:	2121      	movs	r1, #33	@ 0x21
 8007bc0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2242      	movs	r2, #66	@ 0x42
 8007bc6:	2140      	movs	r1, #64	@ 0x40
 8007bc8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	222c      	movs	r2, #44	@ 0x2c
 8007bda:	18ba      	adds	r2, r7, r2
 8007bdc:	8812      	ldrh	r2, [r2, #0]
 8007bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007be6:	1dbb      	adds	r3, r7, #6
 8007be8:	881c      	ldrh	r4, [r3, #0]
 8007bea:	2308      	movs	r3, #8
 8007bec:	18fb      	adds	r3, r7, r3
 8007bee:	881a      	ldrh	r2, [r3, #0]
 8007bf0:	230a      	movs	r3, #10
 8007bf2:	18fb      	adds	r3, r7, r3
 8007bf4:	8819      	ldrh	r1, [r3, #0]
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	9301      	str	r3, [sp, #4]
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	0023      	movs	r3, r4
 8007c02:	f000 f9f9 	bl	8007ff8 <I2C_RequestMemoryWrite>
 8007c06:	1e03      	subs	r3, r0, #0
 8007c08:	d005      	beq.n	8007c16 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2240      	movs	r2, #64	@ 0x40
 8007c0e:	2100      	movs	r1, #0
 8007c10:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e0b5      	b.n	8007d82 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	2bff      	cmp	r3, #255	@ 0xff
 8007c1e:	d911      	bls.n	8007c44 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	22ff      	movs	r2, #255	@ 0xff
 8007c24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	2380      	movs	r3, #128	@ 0x80
 8007c2e:	045c      	lsls	r4, r3, #17
 8007c30:	230a      	movs	r3, #10
 8007c32:	18fb      	adds	r3, r7, r3
 8007c34:	8819      	ldrh	r1, [r3, #0]
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	0023      	movs	r3, r4
 8007c3e:	f000 fd3b 	bl	80086b8 <I2C_TransferConfig>
 8007c42:	e012      	b.n	8007c6a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	2380      	movs	r3, #128	@ 0x80
 8007c56:	049c      	lsls	r4, r3, #18
 8007c58:	230a      	movs	r3, #10
 8007c5a:	18fb      	adds	r3, r7, r3
 8007c5c:	8819      	ldrh	r1, [r3, #0]
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	2300      	movs	r3, #0
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	0023      	movs	r3, r4
 8007c66:	f000 fd27 	bl	80086b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	0018      	movs	r0, r3
 8007c72:	f000 fb01 	bl	8008278 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c76:	1e03      	subs	r3, r0, #0
 8007c78:	d001      	beq.n	8007c7e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e081      	b.n	8007d82 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c82:	781a      	ldrb	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8e:	1c5a      	adds	r2, r3, #1
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d03a      	beq.n	8007d2e <HAL_I2C_Mem_Write+0x1fa>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d136      	bne.n	8007d2e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	0013      	movs	r3, r2
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2180      	movs	r1, #128	@ 0x80
 8007cce:	f000 fa7b 	bl	80081c8 <I2C_WaitOnFlagUntilTimeout>
 8007cd2:	1e03      	subs	r3, r0, #0
 8007cd4:	d001      	beq.n	8007cda <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e053      	b.n	8007d82 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	2bff      	cmp	r3, #255	@ 0xff
 8007ce2:	d911      	bls.n	8007d08 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	22ff      	movs	r2, #255	@ 0xff
 8007ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	2380      	movs	r3, #128	@ 0x80
 8007cf2:	045c      	lsls	r4, r3, #17
 8007cf4:	230a      	movs	r3, #10
 8007cf6:	18fb      	adds	r3, r7, r3
 8007cf8:	8819      	ldrh	r1, [r3, #0]
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	0023      	movs	r3, r4
 8007d02:	f000 fcd9 	bl	80086b8 <I2C_TransferConfig>
 8007d06:	e012      	b.n	8007d2e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	2380      	movs	r3, #128	@ 0x80
 8007d1a:	049c      	lsls	r4, r3, #18
 8007d1c:	230a      	movs	r3, #10
 8007d1e:	18fb      	adds	r3, r7, r3
 8007d20:	8819      	ldrh	r1, [r3, #0]
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	2300      	movs	r3, #0
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	0023      	movs	r3, r4
 8007d2a:	f000 fcc5 	bl	80086b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d198      	bne.n	8007c6a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	0018      	movs	r0, r3
 8007d40:	f000 fae0 	bl	8008304 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d44:	1e03      	subs	r3, r0, #0
 8007d46:	d001      	beq.n	8007d4c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e01a      	b.n	8007d82 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2220      	movs	r2, #32
 8007d52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	490b      	ldr	r1, [pc, #44]	@ (8007d8c <HAL_I2C_Mem_Write+0x258>)
 8007d60:	400a      	ands	r2, r1
 8007d62:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2241      	movs	r2, #65	@ 0x41
 8007d68:	2120      	movs	r1, #32
 8007d6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2242      	movs	r2, #66	@ 0x42
 8007d70:	2100      	movs	r1, #0
 8007d72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2240      	movs	r2, #64	@ 0x40
 8007d78:	2100      	movs	r1, #0
 8007d7a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	e000      	b.n	8007d82 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8007d80:	2302      	movs	r3, #2
  }
}
 8007d82:	0018      	movs	r0, r3
 8007d84:	46bd      	mov	sp, r7
 8007d86:	b007      	add	sp, #28
 8007d88:	bd90      	pop	{r4, r7, pc}
 8007d8a:	46c0      	nop			@ (mov r8, r8)
 8007d8c:	fe00e800 	.word	0xfe00e800

08007d90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d90:	b590      	push	{r4, r7, lr}
 8007d92:	b089      	sub	sp, #36	@ 0x24
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	000c      	movs	r4, r1
 8007d9a:	0010      	movs	r0, r2
 8007d9c:	0019      	movs	r1, r3
 8007d9e:	230a      	movs	r3, #10
 8007da0:	18fb      	adds	r3, r7, r3
 8007da2:	1c22      	adds	r2, r4, #0
 8007da4:	801a      	strh	r2, [r3, #0]
 8007da6:	2308      	movs	r3, #8
 8007da8:	18fb      	adds	r3, r7, r3
 8007daa:	1c02      	adds	r2, r0, #0
 8007dac:	801a      	strh	r2, [r3, #0]
 8007dae:	1dbb      	adds	r3, r7, #6
 8007db0:	1c0a      	adds	r2, r1, #0
 8007db2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2241      	movs	r2, #65	@ 0x41
 8007db8:	5c9b      	ldrb	r3, [r3, r2]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b20      	cmp	r3, #32
 8007dbe:	d000      	beq.n	8007dc2 <HAL_I2C_Mem_Read+0x32>
 8007dc0:	e110      	b.n	8007fe4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d004      	beq.n	8007dd2 <HAL_I2C_Mem_Read+0x42>
 8007dc8:	232c      	movs	r3, #44	@ 0x2c
 8007dca:	18fb      	adds	r3, r7, r3
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d105      	bne.n	8007dde <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2280      	movs	r2, #128	@ 0x80
 8007dd6:	0092      	lsls	r2, r2, #2
 8007dd8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e103      	b.n	8007fe6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2240      	movs	r2, #64	@ 0x40
 8007de2:	5c9b      	ldrb	r3, [r3, r2]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d101      	bne.n	8007dec <HAL_I2C_Mem_Read+0x5c>
 8007de8:	2302      	movs	r3, #2
 8007dea:	e0fc      	b.n	8007fe6 <HAL_I2C_Mem_Read+0x256>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2240      	movs	r2, #64	@ 0x40
 8007df0:	2101      	movs	r1, #1
 8007df2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007df4:	f7fd ffe6 	bl	8005dc4 <HAL_GetTick>
 8007df8:	0003      	movs	r3, r0
 8007dfa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007dfc:	2380      	movs	r3, #128	@ 0x80
 8007dfe:	0219      	lsls	r1, r3, #8
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	2319      	movs	r3, #25
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f000 f9dd 	bl	80081c8 <I2C_WaitOnFlagUntilTimeout>
 8007e0e:	1e03      	subs	r3, r0, #0
 8007e10:	d001      	beq.n	8007e16 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e0e7      	b.n	8007fe6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2241      	movs	r2, #65	@ 0x41
 8007e1a:	2122      	movs	r1, #34	@ 0x22
 8007e1c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2242      	movs	r2, #66	@ 0x42
 8007e22:	2140      	movs	r1, #64	@ 0x40
 8007e24:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	222c      	movs	r2, #44	@ 0x2c
 8007e36:	18ba      	adds	r2, r7, r2
 8007e38:	8812      	ldrh	r2, [r2, #0]
 8007e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e42:	1dbb      	adds	r3, r7, #6
 8007e44:	881c      	ldrh	r4, [r3, #0]
 8007e46:	2308      	movs	r3, #8
 8007e48:	18fb      	adds	r3, r7, r3
 8007e4a:	881a      	ldrh	r2, [r3, #0]
 8007e4c:	230a      	movs	r3, #10
 8007e4e:	18fb      	adds	r3, r7, r3
 8007e50:	8819      	ldrh	r1, [r3, #0]
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	9301      	str	r3, [sp, #4]
 8007e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	0023      	movs	r3, r4
 8007e5e:	f000 f92f 	bl	80080c0 <I2C_RequestMemoryRead>
 8007e62:	1e03      	subs	r3, r0, #0
 8007e64:	d005      	beq.n	8007e72 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2240      	movs	r2, #64	@ 0x40
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e0b9      	b.n	8007fe6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	2bff      	cmp	r3, #255	@ 0xff
 8007e7a:	d911      	bls.n	8007ea0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	22ff      	movs	r2, #255	@ 0xff
 8007e80:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	2380      	movs	r3, #128	@ 0x80
 8007e8a:	045c      	lsls	r4, r3, #17
 8007e8c:	230a      	movs	r3, #10
 8007e8e:	18fb      	adds	r3, r7, r3
 8007e90:	8819      	ldrh	r1, [r3, #0]
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	4b56      	ldr	r3, [pc, #344]	@ (8007ff0 <HAL_I2C_Mem_Read+0x260>)
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	0023      	movs	r3, r4
 8007e9a:	f000 fc0d 	bl	80086b8 <I2C_TransferConfig>
 8007e9e:	e012      	b.n	8007ec6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	2380      	movs	r3, #128	@ 0x80
 8007eb2:	049c      	lsls	r4, r3, #18
 8007eb4:	230a      	movs	r3, #10
 8007eb6:	18fb      	adds	r3, r7, r3
 8007eb8:	8819      	ldrh	r1, [r3, #0]
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	4b4c      	ldr	r3, [pc, #304]	@ (8007ff0 <HAL_I2C_Mem_Read+0x260>)
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	0023      	movs	r3, r4
 8007ec2:	f000 fbf9 	bl	80086b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	0013      	movs	r3, r2
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2104      	movs	r1, #4
 8007ed4:	f000 f978 	bl	80081c8 <I2C_WaitOnFlagUntilTimeout>
 8007ed8:	1e03      	subs	r3, r0, #0
 8007eda:	d001      	beq.n	8007ee0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e082      	b.n	8007fe6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eea:	b2d2      	uxtb	r2, r2
 8007eec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007efc:	3b01      	subs	r3, #1
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d03a      	beq.n	8007f92 <HAL_I2C_Mem_Read+0x202>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d136      	bne.n	8007f92 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	0013      	movs	r3, r2
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2180      	movs	r1, #128	@ 0x80
 8007f32:	f000 f949 	bl	80081c8 <I2C_WaitOnFlagUntilTimeout>
 8007f36:	1e03      	subs	r3, r0, #0
 8007f38:	d001      	beq.n	8007f3e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e053      	b.n	8007fe6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	2bff      	cmp	r3, #255	@ 0xff
 8007f46:	d911      	bls.n	8007f6c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	22ff      	movs	r2, #255	@ 0xff
 8007f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	2380      	movs	r3, #128	@ 0x80
 8007f56:	045c      	lsls	r4, r3, #17
 8007f58:	230a      	movs	r3, #10
 8007f5a:	18fb      	adds	r3, r7, r3
 8007f5c:	8819      	ldrh	r1, [r3, #0]
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	2300      	movs	r3, #0
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	0023      	movs	r3, r4
 8007f66:	f000 fba7 	bl	80086b8 <I2C_TransferConfig>
 8007f6a:	e012      	b.n	8007f92 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	2380      	movs	r3, #128	@ 0x80
 8007f7e:	049c      	lsls	r4, r3, #18
 8007f80:	230a      	movs	r3, #10
 8007f82:	18fb      	adds	r3, r7, r3
 8007f84:	8819      	ldrh	r1, [r3, #0]
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	0023      	movs	r3, r4
 8007f8e:	f000 fb93 	bl	80086b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d194      	bne.n	8007ec6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	0018      	movs	r0, r3
 8007fa4:	f000 f9ae 	bl	8008304 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007fa8:	1e03      	subs	r3, r0, #0
 8007faa:	d001      	beq.n	8007fb0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e01a      	b.n	8007fe6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	490c      	ldr	r1, [pc, #48]	@ (8007ff4 <HAL_I2C_Mem_Read+0x264>)
 8007fc4:	400a      	ands	r2, r1
 8007fc6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2241      	movs	r2, #65	@ 0x41
 8007fcc:	2120      	movs	r1, #32
 8007fce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2242      	movs	r2, #66	@ 0x42
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2240      	movs	r2, #64	@ 0x40
 8007fdc:	2100      	movs	r1, #0
 8007fde:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	e000      	b.n	8007fe6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8007fe4:	2302      	movs	r3, #2
  }
}
 8007fe6:	0018      	movs	r0, r3
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	b007      	add	sp, #28
 8007fec:	bd90      	pop	{r4, r7, pc}
 8007fee:	46c0      	nop			@ (mov r8, r8)
 8007ff0:	80002400 	.word	0x80002400
 8007ff4:	fe00e800 	.word	0xfe00e800

08007ff8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007ff8:	b5b0      	push	{r4, r5, r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af02      	add	r7, sp, #8
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	000c      	movs	r4, r1
 8008002:	0010      	movs	r0, r2
 8008004:	0019      	movs	r1, r3
 8008006:	250a      	movs	r5, #10
 8008008:	197b      	adds	r3, r7, r5
 800800a:	1c22      	adds	r2, r4, #0
 800800c:	801a      	strh	r2, [r3, #0]
 800800e:	2308      	movs	r3, #8
 8008010:	18fb      	adds	r3, r7, r3
 8008012:	1c02      	adds	r2, r0, #0
 8008014:	801a      	strh	r2, [r3, #0]
 8008016:	1dbb      	adds	r3, r7, #6
 8008018:	1c0a      	adds	r2, r1, #0
 800801a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800801c:	1dbb      	adds	r3, r7, #6
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	b2da      	uxtb	r2, r3
 8008022:	2380      	movs	r3, #128	@ 0x80
 8008024:	045c      	lsls	r4, r3, #17
 8008026:	197b      	adds	r3, r7, r5
 8008028:	8819      	ldrh	r1, [r3, #0]
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	4b23      	ldr	r3, [pc, #140]	@ (80080bc <I2C_RequestMemoryWrite+0xc4>)
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	0023      	movs	r3, r4
 8008032:	f000 fb41 	bl	80086b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008038:	6a39      	ldr	r1, [r7, #32]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	0018      	movs	r0, r3
 800803e:	f000 f91b 	bl	8008278 <I2C_WaitOnTXISFlagUntilTimeout>
 8008042:	1e03      	subs	r3, r0, #0
 8008044:	d001      	beq.n	800804a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e033      	b.n	80080b2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800804a:	1dbb      	adds	r3, r7, #6
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d107      	bne.n	8008062 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008052:	2308      	movs	r3, #8
 8008054:	18fb      	adds	r3, r7, r3
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	b2da      	uxtb	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008060:	e019      	b.n	8008096 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008062:	2308      	movs	r3, #8
 8008064:	18fb      	adds	r3, r7, r3
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	0a1b      	lsrs	r3, r3, #8
 800806a:	b29b      	uxth	r3, r3
 800806c:	b2da      	uxtb	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008076:	6a39      	ldr	r1, [r7, #32]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	0018      	movs	r0, r3
 800807c:	f000 f8fc 	bl	8008278 <I2C_WaitOnTXISFlagUntilTimeout>
 8008080:	1e03      	subs	r3, r0, #0
 8008082:	d001      	beq.n	8008088 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e014      	b.n	80080b2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008088:	2308      	movs	r3, #8
 800808a:	18fb      	adds	r3, r7, r3
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	b2da      	uxtb	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008096:	6a3a      	ldr	r2, [r7, #32]
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	0013      	movs	r3, r2
 80080a0:	2200      	movs	r2, #0
 80080a2:	2180      	movs	r1, #128	@ 0x80
 80080a4:	f000 f890 	bl	80081c8 <I2C_WaitOnFlagUntilTimeout>
 80080a8:	1e03      	subs	r3, r0, #0
 80080aa:	d001      	beq.n	80080b0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e000      	b.n	80080b2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	0018      	movs	r0, r3
 80080b4:	46bd      	mov	sp, r7
 80080b6:	b004      	add	sp, #16
 80080b8:	bdb0      	pop	{r4, r5, r7, pc}
 80080ba:	46c0      	nop			@ (mov r8, r8)
 80080bc:	80002000 	.word	0x80002000

080080c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80080c0:	b5b0      	push	{r4, r5, r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af02      	add	r7, sp, #8
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	000c      	movs	r4, r1
 80080ca:	0010      	movs	r0, r2
 80080cc:	0019      	movs	r1, r3
 80080ce:	250a      	movs	r5, #10
 80080d0:	197b      	adds	r3, r7, r5
 80080d2:	1c22      	adds	r2, r4, #0
 80080d4:	801a      	strh	r2, [r3, #0]
 80080d6:	2308      	movs	r3, #8
 80080d8:	18fb      	adds	r3, r7, r3
 80080da:	1c02      	adds	r2, r0, #0
 80080dc:	801a      	strh	r2, [r3, #0]
 80080de:	1dbb      	adds	r3, r7, #6
 80080e0:	1c0a      	adds	r2, r1, #0
 80080e2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80080e4:	1dbb      	adds	r3, r7, #6
 80080e6:	881b      	ldrh	r3, [r3, #0]
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	197b      	adds	r3, r7, r5
 80080ec:	8819      	ldrh	r1, [r3, #0]
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	4b23      	ldr	r3, [pc, #140]	@ (8008180 <I2C_RequestMemoryRead+0xc0>)
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	2300      	movs	r3, #0
 80080f6:	f000 fadf 	bl	80086b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080fc:	6a39      	ldr	r1, [r7, #32]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	0018      	movs	r0, r3
 8008102:	f000 f8b9 	bl	8008278 <I2C_WaitOnTXISFlagUntilTimeout>
 8008106:	1e03      	subs	r3, r0, #0
 8008108:	d001      	beq.n	800810e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e033      	b.n	8008176 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800810e:	1dbb      	adds	r3, r7, #6
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d107      	bne.n	8008126 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008116:	2308      	movs	r3, #8
 8008118:	18fb      	adds	r3, r7, r3
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	b2da      	uxtb	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	629a      	str	r2, [r3, #40]	@ 0x28
 8008124:	e019      	b.n	800815a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008126:	2308      	movs	r3, #8
 8008128:	18fb      	adds	r3, r7, r3
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	0a1b      	lsrs	r3, r3, #8
 800812e:	b29b      	uxth	r3, r3
 8008130:	b2da      	uxtb	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800813a:	6a39      	ldr	r1, [r7, #32]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	0018      	movs	r0, r3
 8008140:	f000 f89a 	bl	8008278 <I2C_WaitOnTXISFlagUntilTimeout>
 8008144:	1e03      	subs	r3, r0, #0
 8008146:	d001      	beq.n	800814c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e014      	b.n	8008176 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800814c:	2308      	movs	r3, #8
 800814e:	18fb      	adds	r3, r7, r3
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	b2da      	uxtb	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800815a:	6a3a      	ldr	r2, [r7, #32]
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	0013      	movs	r3, r2
 8008164:	2200      	movs	r2, #0
 8008166:	2140      	movs	r1, #64	@ 0x40
 8008168:	f000 f82e 	bl	80081c8 <I2C_WaitOnFlagUntilTimeout>
 800816c:	1e03      	subs	r3, r0, #0
 800816e:	d001      	beq.n	8008174 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e000      	b.n	8008176 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	0018      	movs	r0, r3
 8008178:	46bd      	mov	sp, r7
 800817a:	b004      	add	sp, #16
 800817c:	bdb0      	pop	{r4, r5, r7, pc}
 800817e:	46c0      	nop			@ (mov r8, r8)
 8008180:	80002000 	.word	0x80002000

08008184 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	2202      	movs	r2, #2
 8008194:	4013      	ands	r3, r2
 8008196:	2b02      	cmp	r3, #2
 8008198:	d103      	bne.n	80081a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2200      	movs	r2, #0
 80081a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	2201      	movs	r2, #1
 80081aa:	4013      	ands	r3, r2
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d007      	beq.n	80081c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699a      	ldr	r2, [r3, #24]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2101      	movs	r1, #1
 80081bc:	430a      	orrs	r2, r1
 80081be:	619a      	str	r2, [r3, #24]
  }
}
 80081c0:	46c0      	nop			@ (mov r8, r8)
 80081c2:	46bd      	mov	sp, r7
 80081c4:	b002      	add	sp, #8
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	603b      	str	r3, [r7, #0]
 80081d4:	1dfb      	adds	r3, r7, #7
 80081d6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081d8:	e03a      	b.n	8008250 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	0018      	movs	r0, r3
 80081e2:	f000 f971 	bl	80084c8 <I2C_IsErrorOccurred>
 80081e6:	1e03      	subs	r3, r0, #0
 80081e8:	d001      	beq.n	80081ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e040      	b.n	8008270 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	3301      	adds	r3, #1
 80081f2:	d02d      	beq.n	8008250 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081f4:	f7fd fde6 	bl	8005dc4 <HAL_GetTick>
 80081f8:	0002      	movs	r2, r0
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	429a      	cmp	r2, r3
 8008202:	d302      	bcc.n	800820a <I2C_WaitOnFlagUntilTimeout+0x42>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d122      	bne.n	8008250 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	4013      	ands	r3, r2
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	425a      	negs	r2, r3
 800821a:	4153      	adcs	r3, r2
 800821c:	b2db      	uxtb	r3, r3
 800821e:	001a      	movs	r2, r3
 8008220:	1dfb      	adds	r3, r7, #7
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	429a      	cmp	r2, r3
 8008226:	d113      	bne.n	8008250 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800822c:	2220      	movs	r2, #32
 800822e:	431a      	orrs	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2241      	movs	r2, #65	@ 0x41
 8008238:	2120      	movs	r1, #32
 800823a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2242      	movs	r2, #66	@ 0x42
 8008240:	2100      	movs	r1, #0
 8008242:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2240      	movs	r2, #64	@ 0x40
 8008248:	2100      	movs	r1, #0
 800824a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e00f      	b.n	8008270 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	4013      	ands	r3, r2
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	425a      	negs	r2, r3
 8008260:	4153      	adcs	r3, r2
 8008262:	b2db      	uxtb	r3, r3
 8008264:	001a      	movs	r2, r3
 8008266:	1dfb      	adds	r3, r7, #7
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d0b5      	beq.n	80081da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	0018      	movs	r0, r3
 8008272:	46bd      	mov	sp, r7
 8008274:	b004      	add	sp, #16
 8008276:	bd80      	pop	{r7, pc}

08008278 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008284:	e032      	b.n	80082ec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	68b9      	ldr	r1, [r7, #8]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	0018      	movs	r0, r3
 800828e:	f000 f91b 	bl	80084c8 <I2C_IsErrorOccurred>
 8008292:	1e03      	subs	r3, r0, #0
 8008294:	d001      	beq.n	800829a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e030      	b.n	80082fc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	3301      	adds	r3, #1
 800829e:	d025      	beq.n	80082ec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082a0:	f7fd fd90 	bl	8005dc4 <HAL_GetTick>
 80082a4:	0002      	movs	r2, r0
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d302      	bcc.n	80082b6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d11a      	bne.n	80082ec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	2202      	movs	r2, #2
 80082be:	4013      	ands	r3, r2
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d013      	beq.n	80082ec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082c8:	2220      	movs	r2, #32
 80082ca:	431a      	orrs	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2241      	movs	r2, #65	@ 0x41
 80082d4:	2120      	movs	r1, #32
 80082d6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2242      	movs	r2, #66	@ 0x42
 80082dc:	2100      	movs	r1, #0
 80082de:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2240      	movs	r2, #64	@ 0x40
 80082e4:	2100      	movs	r1, #0
 80082e6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e007      	b.n	80082fc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	2202      	movs	r2, #2
 80082f4:	4013      	ands	r3, r2
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d1c5      	bne.n	8008286 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	0018      	movs	r0, r3
 80082fe:	46bd      	mov	sp, r7
 8008300:	b004      	add	sp, #16
 8008302:	bd80      	pop	{r7, pc}

08008304 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008310:	e02f      	b.n	8008372 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	0018      	movs	r0, r3
 800831a:	f000 f8d5 	bl	80084c8 <I2C_IsErrorOccurred>
 800831e:	1e03      	subs	r3, r0, #0
 8008320:	d001      	beq.n	8008326 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e02d      	b.n	8008382 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008326:	f7fd fd4d 	bl	8005dc4 <HAL_GetTick>
 800832a:	0002      	movs	r2, r0
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	429a      	cmp	r2, r3
 8008334:	d302      	bcc.n	800833c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d11a      	bne.n	8008372 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	2220      	movs	r2, #32
 8008344:	4013      	ands	r3, r2
 8008346:	2b20      	cmp	r3, #32
 8008348:	d013      	beq.n	8008372 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800834e:	2220      	movs	r2, #32
 8008350:	431a      	orrs	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2241      	movs	r2, #65	@ 0x41
 800835a:	2120      	movs	r1, #32
 800835c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2242      	movs	r2, #66	@ 0x42
 8008362:	2100      	movs	r1, #0
 8008364:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2240      	movs	r2, #64	@ 0x40
 800836a:	2100      	movs	r1, #0
 800836c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e007      	b.n	8008382 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	2220      	movs	r2, #32
 800837a:	4013      	ands	r3, r2
 800837c:	2b20      	cmp	r3, #32
 800837e:	d1c8      	bne.n	8008312 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	0018      	movs	r0, r3
 8008384:	46bd      	mov	sp, r7
 8008386:	b004      	add	sp, #16
 8008388:	bd80      	pop	{r7, pc}
	...

0800838c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008398:	2317      	movs	r3, #23
 800839a:	18fb      	adds	r3, r7, r3
 800839c:	2200      	movs	r2, #0
 800839e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80083a0:	e07b      	b.n	800849a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	68b9      	ldr	r1, [r7, #8]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	0018      	movs	r0, r3
 80083aa:	f000 f88d 	bl	80084c8 <I2C_IsErrorOccurred>
 80083ae:	1e03      	subs	r3, r0, #0
 80083b0:	d003      	beq.n	80083ba <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80083b2:	2317      	movs	r3, #23
 80083b4:	18fb      	adds	r3, r7, r3
 80083b6:	2201      	movs	r2, #1
 80083b8:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	2220      	movs	r2, #32
 80083c2:	4013      	ands	r3, r2
 80083c4:	2b20      	cmp	r3, #32
 80083c6:	d140      	bne.n	800844a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80083c8:	2117      	movs	r1, #23
 80083ca:	187b      	adds	r3, r7, r1
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d13b      	bne.n	800844a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	2204      	movs	r2, #4
 80083da:	4013      	ands	r3, r2
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d106      	bne.n	80083ee <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80083e8:	187b      	adds	r3, r7, r1
 80083ea:	2200      	movs	r2, #0
 80083ec:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	2210      	movs	r2, #16
 80083f6:	4013      	ands	r3, r2
 80083f8:	2b10      	cmp	r3, #16
 80083fa:	d123      	bne.n	8008444 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2210      	movs	r2, #16
 8008402:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2204      	movs	r2, #4
 8008408:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2220      	movs	r2, #32
 8008410:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4929      	ldr	r1, [pc, #164]	@ (80084c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800841e:	400a      	ands	r2, r1
 8008420:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2241      	movs	r2, #65	@ 0x41
 8008426:	2120      	movs	r1, #32
 8008428:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2242      	movs	r2, #66	@ 0x42
 800842e:	2100      	movs	r1, #0
 8008430:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2240      	movs	r2, #64	@ 0x40
 8008436:	2100      	movs	r1, #0
 8008438:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800843a:	2317      	movs	r3, #23
 800843c:	18fb      	adds	r3, r7, r3
 800843e:	2201      	movs	r2, #1
 8008440:	701a      	strb	r2, [r3, #0]
 8008442:	e002      	b.n	800844a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800844a:	f7fd fcbb 	bl	8005dc4 <HAL_GetTick>
 800844e:	0002      	movs	r2, r0
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	429a      	cmp	r2, r3
 8008458:	d302      	bcc.n	8008460 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d11c      	bne.n	800849a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8008460:	2017      	movs	r0, #23
 8008462:	183b      	adds	r3, r7, r0
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d117      	bne.n	800849a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	2204      	movs	r2, #4
 8008472:	4013      	ands	r3, r2
 8008474:	2b04      	cmp	r3, #4
 8008476:	d010      	beq.n	800849a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800847c:	2220      	movs	r2, #32
 800847e:	431a      	orrs	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2241      	movs	r2, #65	@ 0x41
 8008488:	2120      	movs	r1, #32
 800848a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2240      	movs	r2, #64	@ 0x40
 8008490:	2100      	movs	r1, #0
 8008492:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8008494:	183b      	adds	r3, r7, r0
 8008496:	2201      	movs	r2, #1
 8008498:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	2204      	movs	r2, #4
 80084a2:	4013      	ands	r3, r2
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	d005      	beq.n	80084b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80084a8:	2317      	movs	r3, #23
 80084aa:	18fb      	adds	r3, r7, r3
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d100      	bne.n	80084b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80084b2:	e776      	b.n	80083a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80084b4:	2317      	movs	r3, #23
 80084b6:	18fb      	adds	r3, r7, r3
 80084b8:	781b      	ldrb	r3, [r3, #0]
}
 80084ba:	0018      	movs	r0, r3
 80084bc:	46bd      	mov	sp, r7
 80084be:	b006      	add	sp, #24
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	46c0      	nop			@ (mov r8, r8)
 80084c4:	fe00e800 	.word	0xfe00e800

080084c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b08a      	sub	sp, #40	@ 0x28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084d4:	2327      	movs	r3, #39	@ 0x27
 80084d6:	18fb      	adds	r3, r7, r3
 80084d8:	2200      	movs	r2, #0
 80084da:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	2210      	movs	r2, #16
 80084f0:	4013      	ands	r3, r2
 80084f2:	d100      	bne.n	80084f6 <I2C_IsErrorOccurred+0x2e>
 80084f4:	e079      	b.n	80085ea <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2210      	movs	r2, #16
 80084fc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80084fe:	e057      	b.n	80085b0 <I2C_IsErrorOccurred+0xe8>
 8008500:	2227      	movs	r2, #39	@ 0x27
 8008502:	18bb      	adds	r3, r7, r2
 8008504:	18ba      	adds	r2, r7, r2
 8008506:	7812      	ldrb	r2, [r2, #0]
 8008508:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	3301      	adds	r3, #1
 800850e:	d04f      	beq.n	80085b0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008510:	f7fd fc58 	bl	8005dc4 <HAL_GetTick>
 8008514:	0002      	movs	r2, r0
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	429a      	cmp	r2, r3
 800851e:	d302      	bcc.n	8008526 <I2C_IsErrorOccurred+0x5e>
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d144      	bne.n	80085b0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	2380      	movs	r3, #128	@ 0x80
 800852e:	01db      	lsls	r3, r3, #7
 8008530:	4013      	ands	r3, r2
 8008532:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008534:	2013      	movs	r0, #19
 8008536:	183b      	adds	r3, r7, r0
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	2142      	movs	r1, #66	@ 0x42
 800853c:	5c52      	ldrb	r2, [r2, r1]
 800853e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	2380      	movs	r3, #128	@ 0x80
 8008548:	021b      	lsls	r3, r3, #8
 800854a:	401a      	ands	r2, r3
 800854c:	2380      	movs	r3, #128	@ 0x80
 800854e:	021b      	lsls	r3, r3, #8
 8008550:	429a      	cmp	r2, r3
 8008552:	d126      	bne.n	80085a2 <I2C_IsErrorOccurred+0xda>
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	2380      	movs	r3, #128	@ 0x80
 8008558:	01db      	lsls	r3, r3, #7
 800855a:	429a      	cmp	r2, r3
 800855c:	d021      	beq.n	80085a2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800855e:	183b      	adds	r3, r7, r0
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	2b20      	cmp	r3, #32
 8008564:	d01d      	beq.n	80085a2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2180      	movs	r1, #128	@ 0x80
 8008572:	01c9      	lsls	r1, r1, #7
 8008574:	430a      	orrs	r2, r1
 8008576:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008578:	f7fd fc24 	bl	8005dc4 <HAL_GetTick>
 800857c:	0003      	movs	r3, r0
 800857e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008580:	e00f      	b.n	80085a2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008582:	f7fd fc1f 	bl	8005dc4 <HAL_GetTick>
 8008586:	0002      	movs	r2, r0
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	2b19      	cmp	r3, #25
 800858e:	d908      	bls.n	80085a2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	2220      	movs	r2, #32
 8008594:	4313      	orrs	r3, r2
 8008596:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008598:	2327      	movs	r3, #39	@ 0x27
 800859a:	18fb      	adds	r3, r7, r3
 800859c:	2201      	movs	r2, #1
 800859e:	701a      	strb	r2, [r3, #0]

              break;
 80085a0:	e006      	b.n	80085b0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	2220      	movs	r2, #32
 80085aa:	4013      	ands	r3, r2
 80085ac:	2b20      	cmp	r3, #32
 80085ae:	d1e8      	bne.n	8008582 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	2220      	movs	r2, #32
 80085b8:	4013      	ands	r3, r2
 80085ba:	2b20      	cmp	r3, #32
 80085bc:	d004      	beq.n	80085c8 <I2C_IsErrorOccurred+0x100>
 80085be:	2327      	movs	r3, #39	@ 0x27
 80085c0:	18fb      	adds	r3, r7, r3
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d09b      	beq.n	8008500 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80085c8:	2327      	movs	r3, #39	@ 0x27
 80085ca:	18fb      	adds	r3, r7, r3
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d103      	bne.n	80085da <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2220      	movs	r2, #32
 80085d8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	2204      	movs	r2, #4
 80085de:	4313      	orrs	r3, r2
 80085e0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80085e2:	2327      	movs	r3, #39	@ 0x27
 80085e4:	18fb      	adds	r3, r7, r3
 80085e6:	2201      	movs	r2, #1
 80085e8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80085f2:	69ba      	ldr	r2, [r7, #24]
 80085f4:	2380      	movs	r3, #128	@ 0x80
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	4013      	ands	r3, r2
 80085fa:	d00c      	beq.n	8008616 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	2201      	movs	r2, #1
 8008600:	4313      	orrs	r3, r2
 8008602:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2280      	movs	r2, #128	@ 0x80
 800860a:	0052      	lsls	r2, r2, #1
 800860c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800860e:	2327      	movs	r3, #39	@ 0x27
 8008610:	18fb      	adds	r3, r7, r3
 8008612:	2201      	movs	r2, #1
 8008614:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008616:	69ba      	ldr	r2, [r7, #24]
 8008618:	2380      	movs	r3, #128	@ 0x80
 800861a:	00db      	lsls	r3, r3, #3
 800861c:	4013      	ands	r3, r2
 800861e:	d00c      	beq.n	800863a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	2208      	movs	r2, #8
 8008624:	4313      	orrs	r3, r2
 8008626:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2280      	movs	r2, #128	@ 0x80
 800862e:	00d2      	lsls	r2, r2, #3
 8008630:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008632:	2327      	movs	r3, #39	@ 0x27
 8008634:	18fb      	adds	r3, r7, r3
 8008636:	2201      	movs	r2, #1
 8008638:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800863a:	69ba      	ldr	r2, [r7, #24]
 800863c:	2380      	movs	r3, #128	@ 0x80
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4013      	ands	r3, r2
 8008642:	d00c      	beq.n	800865e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	2202      	movs	r2, #2
 8008648:	4313      	orrs	r3, r2
 800864a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2280      	movs	r2, #128	@ 0x80
 8008652:	0092      	lsls	r2, r2, #2
 8008654:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008656:	2327      	movs	r3, #39	@ 0x27
 8008658:	18fb      	adds	r3, r7, r3
 800865a:	2201      	movs	r2, #1
 800865c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800865e:	2327      	movs	r3, #39	@ 0x27
 8008660:	18fb      	adds	r3, r7, r3
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01d      	beq.n	80086a4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	0018      	movs	r0, r3
 800866c:	f7ff fd8a 	bl	8008184 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	490e      	ldr	r1, [pc, #56]	@ (80086b4 <I2C_IsErrorOccurred+0x1ec>)
 800867c:	400a      	ands	r2, r1
 800867e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	431a      	orrs	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2241      	movs	r2, #65	@ 0x41
 8008690:	2120      	movs	r1, #32
 8008692:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2242      	movs	r2, #66	@ 0x42
 8008698:	2100      	movs	r1, #0
 800869a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2240      	movs	r2, #64	@ 0x40
 80086a0:	2100      	movs	r1, #0
 80086a2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80086a4:	2327      	movs	r3, #39	@ 0x27
 80086a6:	18fb      	adds	r3, r7, r3
 80086a8:	781b      	ldrb	r3, [r3, #0]
}
 80086aa:	0018      	movs	r0, r3
 80086ac:	46bd      	mov	sp, r7
 80086ae:	b00a      	add	sp, #40	@ 0x28
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	46c0      	nop			@ (mov r8, r8)
 80086b4:	fe00e800 	.word	0xfe00e800

080086b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80086b8:	b590      	push	{r4, r7, lr}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	0008      	movs	r0, r1
 80086c2:	0011      	movs	r1, r2
 80086c4:	607b      	str	r3, [r7, #4]
 80086c6:	240a      	movs	r4, #10
 80086c8:	193b      	adds	r3, r7, r4
 80086ca:	1c02      	adds	r2, r0, #0
 80086cc:	801a      	strh	r2, [r3, #0]
 80086ce:	2009      	movs	r0, #9
 80086d0:	183b      	adds	r3, r7, r0
 80086d2:	1c0a      	adds	r2, r1, #0
 80086d4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086d6:	193b      	adds	r3, r7, r4
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	059b      	lsls	r3, r3, #22
 80086dc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80086de:	183b      	adds	r3, r7, r0
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	0419      	lsls	r1, r3, #16
 80086e4:	23ff      	movs	r3, #255	@ 0xff
 80086e6:	041b      	lsls	r3, r3, #16
 80086e8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086ea:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f2:	4313      	orrs	r3, r2
 80086f4:	005b      	lsls	r3, r3, #1
 80086f6:	085b      	lsrs	r3, r3, #1
 80086f8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008702:	0d51      	lsrs	r1, r2, #21
 8008704:	2280      	movs	r2, #128	@ 0x80
 8008706:	00d2      	lsls	r2, r2, #3
 8008708:	400a      	ands	r2, r1
 800870a:	4907      	ldr	r1, [pc, #28]	@ (8008728 <I2C_TransferConfig+0x70>)
 800870c:	430a      	orrs	r2, r1
 800870e:	43d2      	mvns	r2, r2
 8008710:	401a      	ands	r2, r3
 8008712:	0011      	movs	r1, r2
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	697a      	ldr	r2, [r7, #20]
 800871a:	430a      	orrs	r2, r1
 800871c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800871e:	46c0      	nop			@ (mov r8, r8)
 8008720:	46bd      	mov	sp, r7
 8008722:	b007      	add	sp, #28
 8008724:	bd90      	pop	{r4, r7, pc}
 8008726:	46c0      	nop			@ (mov r8, r8)
 8008728:	03ff63ff 	.word	0x03ff63ff

0800872c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2241      	movs	r2, #65	@ 0x41
 800873a:	5c9b      	ldrb	r3, [r3, r2]
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b20      	cmp	r3, #32
 8008740:	d138      	bne.n	80087b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2240      	movs	r2, #64	@ 0x40
 8008746:	5c9b      	ldrb	r3, [r3, r2]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d101      	bne.n	8008750 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800874c:	2302      	movs	r3, #2
 800874e:	e032      	b.n	80087b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2240      	movs	r2, #64	@ 0x40
 8008754:	2101      	movs	r1, #1
 8008756:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2241      	movs	r2, #65	@ 0x41
 800875c:	2124      	movs	r1, #36	@ 0x24
 800875e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2101      	movs	r1, #1
 800876c:	438a      	bics	r2, r1
 800876e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4911      	ldr	r1, [pc, #68]	@ (80087c0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800877c:	400a      	ands	r2, r1
 800877e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6819      	ldr	r1, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	430a      	orrs	r2, r1
 800878e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2101      	movs	r1, #1
 800879c:	430a      	orrs	r2, r1
 800879e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2241      	movs	r2, #65	@ 0x41
 80087a4:	2120      	movs	r1, #32
 80087a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2240      	movs	r2, #64	@ 0x40
 80087ac:	2100      	movs	r1, #0
 80087ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	e000      	b.n	80087b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80087b4:	2302      	movs	r3, #2
  }
}
 80087b6:	0018      	movs	r0, r3
 80087b8:	46bd      	mov	sp, r7
 80087ba:	b002      	add	sp, #8
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	46c0      	nop			@ (mov r8, r8)
 80087c0:	ffffefff 	.word	0xffffefff

080087c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2241      	movs	r2, #65	@ 0x41
 80087d2:	5c9b      	ldrb	r3, [r3, r2]
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	2b20      	cmp	r3, #32
 80087d8:	d139      	bne.n	800884e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2240      	movs	r2, #64	@ 0x40
 80087de:	5c9b      	ldrb	r3, [r3, r2]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d101      	bne.n	80087e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80087e4:	2302      	movs	r3, #2
 80087e6:	e033      	b.n	8008850 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2240      	movs	r2, #64	@ 0x40
 80087ec:	2101      	movs	r1, #1
 80087ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2241      	movs	r2, #65	@ 0x41
 80087f4:	2124      	movs	r1, #36	@ 0x24
 80087f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2101      	movs	r1, #1
 8008804:	438a      	bics	r2, r1
 8008806:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	4a11      	ldr	r2, [pc, #68]	@ (8008858 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008814:	4013      	ands	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	021b      	lsls	r3, r3, #8
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2101      	movs	r1, #1
 8008836:	430a      	orrs	r2, r1
 8008838:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2241      	movs	r2, #65	@ 0x41
 800883e:	2120      	movs	r1, #32
 8008840:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2240      	movs	r2, #64	@ 0x40
 8008846:	2100      	movs	r1, #0
 8008848:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	e000      	b.n	8008850 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800884e:	2302      	movs	r3, #2
  }
}
 8008850:	0018      	movs	r0, r3
 8008852:	46bd      	mov	sp, r7
 8008854:	b004      	add	sp, #16
 8008856:	bd80      	pop	{r7, pc}
 8008858:	fffff0ff 	.word	0xfffff0ff

0800885c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008864:	4b19      	ldr	r3, [pc, #100]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a19      	ldr	r2, [pc, #100]	@ (80088d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800886a:	4013      	ands	r3, r2
 800886c:	0019      	movs	r1, r3
 800886e:	4b17      	ldr	r3, [pc, #92]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	430a      	orrs	r2, r1
 8008874:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	2380      	movs	r3, #128	@ 0x80
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	429a      	cmp	r2, r3
 800887e:	d11f      	bne.n	80088c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008880:	4b14      	ldr	r3, [pc, #80]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	0013      	movs	r3, r2
 8008886:	005b      	lsls	r3, r3, #1
 8008888:	189b      	adds	r3, r3, r2
 800888a:	005b      	lsls	r3, r3, #1
 800888c:	4912      	ldr	r1, [pc, #72]	@ (80088d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800888e:	0018      	movs	r0, r3
 8008890:	f7f7 fc52 	bl	8000138 <__udivsi3>
 8008894:	0003      	movs	r3, r0
 8008896:	3301      	adds	r3, #1
 8008898:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800889a:	e008      	b.n	80088ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d003      	beq.n	80088aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3b01      	subs	r3, #1
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	e001      	b.n	80088ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e009      	b.n	80088c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80088ae:	4b07      	ldr	r3, [pc, #28]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80088b0:	695a      	ldr	r2, [r3, #20]
 80088b2:	2380      	movs	r3, #128	@ 0x80
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	401a      	ands	r2, r3
 80088b8:	2380      	movs	r3, #128	@ 0x80
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	429a      	cmp	r2, r3
 80088be:	d0ed      	beq.n	800889c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	0018      	movs	r0, r3
 80088c4:	46bd      	mov	sp, r7
 80088c6:	b004      	add	sp, #16
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	46c0      	nop			@ (mov r8, r8)
 80088cc:	40007000 	.word	0x40007000
 80088d0:	fffff9ff 	.word	0xfffff9ff
 80088d4:	20000010 	.word	0x20000010
 80088d8:	000f4240 	.word	0x000f4240

080088dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80088e0:	4b03      	ldr	r3, [pc, #12]	@ (80088f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80088e2:	689a      	ldr	r2, [r3, #8]
 80088e4:	23e0      	movs	r3, #224	@ 0xe0
 80088e6:	01db      	lsls	r3, r3, #7
 80088e8:	4013      	ands	r3, r2
}
 80088ea:	0018      	movs	r0, r3
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	40021000 	.word	0x40021000

080088f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b088      	sub	sp, #32
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e2f3      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2201      	movs	r2, #1
 800890c:	4013      	ands	r3, r2
 800890e:	d100      	bne.n	8008912 <HAL_RCC_OscConfig+0x1e>
 8008910:	e07c      	b.n	8008a0c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008912:	4bc3      	ldr	r3, [pc, #780]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	2238      	movs	r2, #56	@ 0x38
 8008918:	4013      	ands	r3, r2
 800891a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800891c:	4bc0      	ldr	r3, [pc, #768]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	2203      	movs	r2, #3
 8008922:	4013      	ands	r3, r2
 8008924:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	2b10      	cmp	r3, #16
 800892a:	d102      	bne.n	8008932 <HAL_RCC_OscConfig+0x3e>
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	2b03      	cmp	r3, #3
 8008930:	d002      	beq.n	8008938 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	2b08      	cmp	r3, #8
 8008936:	d10b      	bne.n	8008950 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008938:	4bb9      	ldr	r3, [pc, #740]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	2380      	movs	r3, #128	@ 0x80
 800893e:	029b      	lsls	r3, r3, #10
 8008940:	4013      	ands	r3, r2
 8008942:	d062      	beq.n	8008a0a <HAL_RCC_OscConfig+0x116>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d15e      	bne.n	8008a0a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e2ce      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	2380      	movs	r3, #128	@ 0x80
 8008956:	025b      	lsls	r3, r3, #9
 8008958:	429a      	cmp	r2, r3
 800895a:	d107      	bne.n	800896c <HAL_RCC_OscConfig+0x78>
 800895c:	4bb0      	ldr	r3, [pc, #704]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	4baf      	ldr	r3, [pc, #700]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008962:	2180      	movs	r1, #128	@ 0x80
 8008964:	0249      	lsls	r1, r1, #9
 8008966:	430a      	orrs	r2, r1
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	e020      	b.n	80089ae <HAL_RCC_OscConfig+0xba>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	23a0      	movs	r3, #160	@ 0xa0
 8008972:	02db      	lsls	r3, r3, #11
 8008974:	429a      	cmp	r2, r3
 8008976:	d10e      	bne.n	8008996 <HAL_RCC_OscConfig+0xa2>
 8008978:	4ba9      	ldr	r3, [pc, #676]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	4ba8      	ldr	r3, [pc, #672]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 800897e:	2180      	movs	r1, #128	@ 0x80
 8008980:	02c9      	lsls	r1, r1, #11
 8008982:	430a      	orrs	r2, r1
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	4ba6      	ldr	r3, [pc, #664]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	4ba5      	ldr	r3, [pc, #660]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 800898c:	2180      	movs	r1, #128	@ 0x80
 800898e:	0249      	lsls	r1, r1, #9
 8008990:	430a      	orrs	r2, r1
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	e00b      	b.n	80089ae <HAL_RCC_OscConfig+0xba>
 8008996:	4ba2      	ldr	r3, [pc, #648]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	4ba1      	ldr	r3, [pc, #644]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 800899c:	49a1      	ldr	r1, [pc, #644]	@ (8008c24 <HAL_RCC_OscConfig+0x330>)
 800899e:	400a      	ands	r2, r1
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	4b9f      	ldr	r3, [pc, #636]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	4b9e      	ldr	r3, [pc, #632]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 80089a8:	499f      	ldr	r1, [pc, #636]	@ (8008c28 <HAL_RCC_OscConfig+0x334>)
 80089aa:	400a      	ands	r2, r1
 80089ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d014      	beq.n	80089e0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b6:	f7fd fa05 	bl	8005dc4 <HAL_GetTick>
 80089ba:	0003      	movs	r3, r0
 80089bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089be:	e008      	b.n	80089d2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089c0:	f7fd fa00 	bl	8005dc4 <HAL_GetTick>
 80089c4:	0002      	movs	r2, r0
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	2b64      	cmp	r3, #100	@ 0x64
 80089cc:	d901      	bls.n	80089d2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e28d      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089d2:	4b93      	ldr	r3, [pc, #588]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	2380      	movs	r3, #128	@ 0x80
 80089d8:	029b      	lsls	r3, r3, #10
 80089da:	4013      	ands	r3, r2
 80089dc:	d0f0      	beq.n	80089c0 <HAL_RCC_OscConfig+0xcc>
 80089de:	e015      	b.n	8008a0c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e0:	f7fd f9f0 	bl	8005dc4 <HAL_GetTick>
 80089e4:	0003      	movs	r3, r0
 80089e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089e8:	e008      	b.n	80089fc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089ea:	f7fd f9eb 	bl	8005dc4 <HAL_GetTick>
 80089ee:	0002      	movs	r2, r0
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	2b64      	cmp	r3, #100	@ 0x64
 80089f6:	d901      	bls.n	80089fc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e278      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089fc:	4b88      	ldr	r3, [pc, #544]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	2380      	movs	r3, #128	@ 0x80
 8008a02:	029b      	lsls	r3, r3, #10
 8008a04:	4013      	ands	r3, r2
 8008a06:	d1f0      	bne.n	80089ea <HAL_RCC_OscConfig+0xf6>
 8008a08:	e000      	b.n	8008a0c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a0a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2202      	movs	r2, #2
 8008a12:	4013      	ands	r3, r2
 8008a14:	d100      	bne.n	8008a18 <HAL_RCC_OscConfig+0x124>
 8008a16:	e099      	b.n	8008b4c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a18:	4b81      	ldr	r3, [pc, #516]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	2238      	movs	r2, #56	@ 0x38
 8008a1e:	4013      	ands	r3, r2
 8008a20:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a22:	4b7f      	ldr	r3, [pc, #508]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	2203      	movs	r2, #3
 8008a28:	4013      	ands	r3, r2
 8008a2a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	2b10      	cmp	r3, #16
 8008a30:	d102      	bne.n	8008a38 <HAL_RCC_OscConfig+0x144>
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d002      	beq.n	8008a3e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d135      	bne.n	8008aaa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a3e:	4b78      	ldr	r3, [pc, #480]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	2380      	movs	r3, #128	@ 0x80
 8008a44:	00db      	lsls	r3, r3, #3
 8008a46:	4013      	ands	r3, r2
 8008a48:	d005      	beq.n	8008a56 <HAL_RCC_OscConfig+0x162>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e24b      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a56:	4b72      	ldr	r3, [pc, #456]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	4a74      	ldr	r2, [pc, #464]	@ (8008c2c <HAL_RCC_OscConfig+0x338>)
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	0019      	movs	r1, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	021a      	lsls	r2, r3, #8
 8008a66:	4b6e      	ldr	r3, [pc, #440]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008a68:	430a      	orrs	r2, r1
 8008a6a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d112      	bne.n	8008a98 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008a72:	4b6b      	ldr	r3, [pc, #428]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a6e      	ldr	r2, [pc, #440]	@ (8008c30 <HAL_RCC_OscConfig+0x33c>)
 8008a78:	4013      	ands	r3, r2
 8008a7a:	0019      	movs	r1, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	691a      	ldr	r2, [r3, #16]
 8008a80:	4b67      	ldr	r3, [pc, #412]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008a82:	430a      	orrs	r2, r1
 8008a84:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008a86:	4b66      	ldr	r3, [pc, #408]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	0adb      	lsrs	r3, r3, #11
 8008a8c:	2207      	movs	r2, #7
 8008a8e:	4013      	ands	r3, r2
 8008a90:	4a68      	ldr	r2, [pc, #416]	@ (8008c34 <HAL_RCC_OscConfig+0x340>)
 8008a92:	40da      	lsrs	r2, r3
 8008a94:	4b68      	ldr	r3, [pc, #416]	@ (8008c38 <HAL_RCC_OscConfig+0x344>)
 8008a96:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008a98:	4b68      	ldr	r3, [pc, #416]	@ (8008c3c <HAL_RCC_OscConfig+0x348>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f7fd f935 	bl	8005d0c <HAL_InitTick>
 8008aa2:	1e03      	subs	r3, r0, #0
 8008aa4:	d051      	beq.n	8008b4a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e221      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d030      	beq.n	8008b14 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008ab2:	4b5b      	ldr	r3, [pc, #364]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a5e      	ldr	r2, [pc, #376]	@ (8008c30 <HAL_RCC_OscConfig+0x33c>)
 8008ab8:	4013      	ands	r3, r2
 8008aba:	0019      	movs	r1, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	691a      	ldr	r2, [r3, #16]
 8008ac0:	4b57      	ldr	r3, [pc, #348]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008ac6:	4b56      	ldr	r3, [pc, #344]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	4b55      	ldr	r3, [pc, #340]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008acc:	2180      	movs	r1, #128	@ 0x80
 8008ace:	0049      	lsls	r1, r1, #1
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad4:	f7fd f976 	bl	8005dc4 <HAL_GetTick>
 8008ad8:	0003      	movs	r3, r0
 8008ada:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008adc:	e008      	b.n	8008af0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ade:	f7fd f971 	bl	8005dc4 <HAL_GetTick>
 8008ae2:	0002      	movs	r2, r0
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d901      	bls.n	8008af0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e1fe      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008af0:	4b4b      	ldr	r3, [pc, #300]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	2380      	movs	r3, #128	@ 0x80
 8008af6:	00db      	lsls	r3, r3, #3
 8008af8:	4013      	ands	r3, r2
 8008afa:	d0f0      	beq.n	8008ade <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008afc:	4b48      	ldr	r3, [pc, #288]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	4a4a      	ldr	r2, [pc, #296]	@ (8008c2c <HAL_RCC_OscConfig+0x338>)
 8008b02:	4013      	ands	r3, r2
 8008b04:	0019      	movs	r1, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	021a      	lsls	r2, r3, #8
 8008b0c:	4b44      	ldr	r3, [pc, #272]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	605a      	str	r2, [r3, #4]
 8008b12:	e01b      	b.n	8008b4c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008b14:	4b42      	ldr	r3, [pc, #264]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	4b41      	ldr	r3, [pc, #260]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008b1a:	4949      	ldr	r1, [pc, #292]	@ (8008c40 <HAL_RCC_OscConfig+0x34c>)
 8008b1c:	400a      	ands	r2, r1
 8008b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b20:	f7fd f950 	bl	8005dc4 <HAL_GetTick>
 8008b24:	0003      	movs	r3, r0
 8008b26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008b28:	e008      	b.n	8008b3c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b2a:	f7fd f94b 	bl	8005dc4 <HAL_GetTick>
 8008b2e:	0002      	movs	r2, r0
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d901      	bls.n	8008b3c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e1d8      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008b3c:	4b38      	ldr	r3, [pc, #224]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	2380      	movs	r3, #128	@ 0x80
 8008b42:	00db      	lsls	r3, r3, #3
 8008b44:	4013      	ands	r3, r2
 8008b46:	d1f0      	bne.n	8008b2a <HAL_RCC_OscConfig+0x236>
 8008b48:	e000      	b.n	8008b4c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b4a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2208      	movs	r2, #8
 8008b52:	4013      	ands	r3, r2
 8008b54:	d047      	beq.n	8008be6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008b56:	4b32      	ldr	r3, [pc, #200]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	2238      	movs	r2, #56	@ 0x38
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	2b18      	cmp	r3, #24
 8008b60:	d10a      	bne.n	8008b78 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008b62:	4b2f      	ldr	r3, [pc, #188]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b66:	2202      	movs	r2, #2
 8008b68:	4013      	ands	r3, r2
 8008b6a:	d03c      	beq.n	8008be6 <HAL_RCC_OscConfig+0x2f2>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d138      	bne.n	8008be6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e1ba      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d019      	beq.n	8008bb4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008b80:	4b27      	ldr	r3, [pc, #156]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008b82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008b84:	4b26      	ldr	r3, [pc, #152]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008b86:	2101      	movs	r1, #1
 8008b88:	430a      	orrs	r2, r1
 8008b8a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b8c:	f7fd f91a 	bl	8005dc4 <HAL_GetTick>
 8008b90:	0003      	movs	r3, r0
 8008b92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b94:	e008      	b.n	8008ba8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b96:	f7fd f915 	bl	8005dc4 <HAL_GetTick>
 8008b9a:	0002      	movs	r2, r0
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d901      	bls.n	8008ba8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e1a2      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bac:	2202      	movs	r2, #2
 8008bae:	4013      	ands	r3, r2
 8008bb0:	d0f1      	beq.n	8008b96 <HAL_RCC_OscConfig+0x2a2>
 8008bb2:	e018      	b.n	8008be6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008bb6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008bb8:	4b19      	ldr	r3, [pc, #100]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008bba:	2101      	movs	r1, #1
 8008bbc:	438a      	bics	r2, r1
 8008bbe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bc0:	f7fd f900 	bl	8005dc4 <HAL_GetTick>
 8008bc4:	0003      	movs	r3, r0
 8008bc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008bc8:	e008      	b.n	8008bdc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bca:	f7fd f8fb 	bl	8005dc4 <HAL_GetTick>
 8008bce:	0002      	movs	r2, r0
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d901      	bls.n	8008bdc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e188      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008bdc:	4b10      	ldr	r3, [pc, #64]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008be0:	2202      	movs	r2, #2
 8008be2:	4013      	ands	r3, r2
 8008be4:	d1f1      	bne.n	8008bca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2204      	movs	r2, #4
 8008bec:	4013      	ands	r3, r2
 8008bee:	d100      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x2fe>
 8008bf0:	e0c6      	b.n	8008d80 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bf2:	231f      	movs	r3, #31
 8008bf4:	18fb      	adds	r3, r7, r3
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008bfa:	4b09      	ldr	r3, [pc, #36]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	2238      	movs	r2, #56	@ 0x38
 8008c00:	4013      	ands	r3, r2
 8008c02:	2b20      	cmp	r3, #32
 8008c04:	d11e      	bne.n	8008c44 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008c06:	4b06      	ldr	r3, [pc, #24]	@ (8008c20 <HAL_RCC_OscConfig+0x32c>)
 8008c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	d100      	bne.n	8008c12 <HAL_RCC_OscConfig+0x31e>
 8008c10:	e0b6      	b.n	8008d80 <HAL_RCC_OscConfig+0x48c>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d000      	beq.n	8008c1c <HAL_RCC_OscConfig+0x328>
 8008c1a:	e0b1      	b.n	8008d80 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e166      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
 8008c20:	40021000 	.word	0x40021000
 8008c24:	fffeffff 	.word	0xfffeffff
 8008c28:	fffbffff 	.word	0xfffbffff
 8008c2c:	ffff80ff 	.word	0xffff80ff
 8008c30:	ffffc7ff 	.word	0xffffc7ff
 8008c34:	00f42400 	.word	0x00f42400
 8008c38:	20000010 	.word	0x20000010
 8008c3c:	20000014 	.word	0x20000014
 8008c40:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008c44:	4bac      	ldr	r3, [pc, #688]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008c46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c48:	2380      	movs	r3, #128	@ 0x80
 8008c4a:	055b      	lsls	r3, r3, #21
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	d101      	bne.n	8008c54 <HAL_RCC_OscConfig+0x360>
 8008c50:	2301      	movs	r3, #1
 8008c52:	e000      	b.n	8008c56 <HAL_RCC_OscConfig+0x362>
 8008c54:	2300      	movs	r3, #0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d011      	beq.n	8008c7e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008c5a:	4ba7      	ldr	r3, [pc, #668]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008c5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c5e:	4ba6      	ldr	r3, [pc, #664]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008c60:	2180      	movs	r1, #128	@ 0x80
 8008c62:	0549      	lsls	r1, r1, #21
 8008c64:	430a      	orrs	r2, r1
 8008c66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008c68:	4ba3      	ldr	r3, [pc, #652]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008c6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c6c:	2380      	movs	r3, #128	@ 0x80
 8008c6e:	055b      	lsls	r3, r3, #21
 8008c70:	4013      	ands	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008c76:	231f      	movs	r3, #31
 8008c78:	18fb      	adds	r3, r7, r3
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c7e:	4b9f      	ldr	r3, [pc, #636]	@ (8008efc <HAL_RCC_OscConfig+0x608>)
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	2380      	movs	r3, #128	@ 0x80
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	4013      	ands	r3, r2
 8008c88:	d11a      	bne.n	8008cc0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c8a:	4b9c      	ldr	r3, [pc, #624]	@ (8008efc <HAL_RCC_OscConfig+0x608>)
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	4b9b      	ldr	r3, [pc, #620]	@ (8008efc <HAL_RCC_OscConfig+0x608>)
 8008c90:	2180      	movs	r1, #128	@ 0x80
 8008c92:	0049      	lsls	r1, r1, #1
 8008c94:	430a      	orrs	r2, r1
 8008c96:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008c98:	f7fd f894 	bl	8005dc4 <HAL_GetTick>
 8008c9c:	0003      	movs	r3, r0
 8008c9e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ca0:	e008      	b.n	8008cb4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ca2:	f7fd f88f 	bl	8005dc4 <HAL_GetTick>
 8008ca6:	0002      	movs	r2, r0
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d901      	bls.n	8008cb4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e11c      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008cb4:	4b91      	ldr	r3, [pc, #580]	@ (8008efc <HAL_RCC_OscConfig+0x608>)
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	2380      	movs	r3, #128	@ 0x80
 8008cba:	005b      	lsls	r3, r3, #1
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	d0f0      	beq.n	8008ca2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d106      	bne.n	8008cd6 <HAL_RCC_OscConfig+0x3e2>
 8008cc8:	4b8b      	ldr	r3, [pc, #556]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008cca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ccc:	4b8a      	ldr	r3, [pc, #552]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008cce:	2101      	movs	r1, #1
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008cd4:	e01c      	b.n	8008d10 <HAL_RCC_OscConfig+0x41c>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	2b05      	cmp	r3, #5
 8008cdc:	d10c      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x404>
 8008cde:	4b86      	ldr	r3, [pc, #536]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008ce0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ce2:	4b85      	ldr	r3, [pc, #532]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008ce4:	2104      	movs	r1, #4
 8008ce6:	430a      	orrs	r2, r1
 8008ce8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008cea:	4b83      	ldr	r3, [pc, #524]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008cec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008cee:	4b82      	ldr	r3, [pc, #520]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008cf6:	e00b      	b.n	8008d10 <HAL_RCC_OscConfig+0x41c>
 8008cf8:	4b7f      	ldr	r3, [pc, #508]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008cfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008cfc:	4b7e      	ldr	r3, [pc, #504]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008cfe:	2101      	movs	r1, #1
 8008d00:	438a      	bics	r2, r1
 8008d02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008d04:	4b7c      	ldr	r3, [pc, #496]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008d06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d08:	4b7b      	ldr	r3, [pc, #492]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008d0a:	2104      	movs	r1, #4
 8008d0c:	438a      	bics	r2, r1
 8008d0e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d014      	beq.n	8008d42 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d18:	f7fd f854 	bl	8005dc4 <HAL_GetTick>
 8008d1c:	0003      	movs	r3, r0
 8008d1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d20:	e009      	b.n	8008d36 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d22:	f7fd f84f 	bl	8005dc4 <HAL_GetTick>
 8008d26:	0002      	movs	r2, r0
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	4a74      	ldr	r2, [pc, #464]	@ (8008f00 <HAL_RCC_OscConfig+0x60c>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d901      	bls.n	8008d36 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e0db      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d36:	4b70      	ldr	r3, [pc, #448]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	4013      	ands	r3, r2
 8008d3e:	d0f0      	beq.n	8008d22 <HAL_RCC_OscConfig+0x42e>
 8008d40:	e013      	b.n	8008d6a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d42:	f7fd f83f 	bl	8005dc4 <HAL_GetTick>
 8008d46:	0003      	movs	r3, r0
 8008d48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008d4a:	e009      	b.n	8008d60 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d4c:	f7fd f83a 	bl	8005dc4 <HAL_GetTick>
 8008d50:	0002      	movs	r2, r0
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	4a6a      	ldr	r2, [pc, #424]	@ (8008f00 <HAL_RCC_OscConfig+0x60c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d901      	bls.n	8008d60 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	e0c6      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008d60:	4b65      	ldr	r3, [pc, #404]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d64:	2202      	movs	r2, #2
 8008d66:	4013      	ands	r3, r2
 8008d68:	d1f0      	bne.n	8008d4c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008d6a:	231f      	movs	r3, #31
 8008d6c:	18fb      	adds	r3, r7, r3
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d105      	bne.n	8008d80 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008d74:	4b60      	ldr	r3, [pc, #384]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008d76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d78:	4b5f      	ldr	r3, [pc, #380]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008d7a:	4962      	ldr	r1, [pc, #392]	@ (8008f04 <HAL_RCC_OscConfig+0x610>)
 8008d7c:	400a      	ands	r2, r1
 8008d7e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d100      	bne.n	8008d8a <HAL_RCC_OscConfig+0x496>
 8008d88:	e0b0      	b.n	8008eec <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d8a:	4b5b      	ldr	r3, [pc, #364]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	2238      	movs	r2, #56	@ 0x38
 8008d90:	4013      	ands	r3, r2
 8008d92:	2b10      	cmp	r3, #16
 8008d94:	d100      	bne.n	8008d98 <HAL_RCC_OscConfig+0x4a4>
 8008d96:	e078      	b.n	8008e8a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	69db      	ldr	r3, [r3, #28]
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d153      	bne.n	8008e48 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008da0:	4b55      	ldr	r3, [pc, #340]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	4b54      	ldr	r3, [pc, #336]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008da6:	4958      	ldr	r1, [pc, #352]	@ (8008f08 <HAL_RCC_OscConfig+0x614>)
 8008da8:	400a      	ands	r2, r1
 8008daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dac:	f7fd f80a 	bl	8005dc4 <HAL_GetTick>
 8008db0:	0003      	movs	r3, r0
 8008db2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008db4:	e008      	b.n	8008dc8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008db6:	f7fd f805 	bl	8005dc4 <HAL_GetTick>
 8008dba:	0002      	movs	r2, r0
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d901      	bls.n	8008dc8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e092      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008dc8:	4b4b      	ldr	r3, [pc, #300]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	2380      	movs	r3, #128	@ 0x80
 8008dce:	049b      	lsls	r3, r3, #18
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	d1f0      	bne.n	8008db6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008dd4:	4b48      	ldr	r3, [pc, #288]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8008f0c <HAL_RCC_OscConfig+0x618>)
 8008dda:	4013      	ands	r3, r2
 8008ddc:	0019      	movs	r1, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a1a      	ldr	r2, [r3, #32]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de6:	431a      	orrs	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dec:	021b      	lsls	r3, r3, #8
 8008dee:	431a      	orrs	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df4:	431a      	orrs	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dfa:	431a      	orrs	r2, r3
 8008dfc:	4b3e      	ldr	r3, [pc, #248]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e02:	4b3d      	ldr	r3, [pc, #244]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	4b3c      	ldr	r3, [pc, #240]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008e08:	2180      	movs	r1, #128	@ 0x80
 8008e0a:	0449      	lsls	r1, r1, #17
 8008e0c:	430a      	orrs	r2, r1
 8008e0e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008e10:	4b39      	ldr	r3, [pc, #228]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	4b38      	ldr	r3, [pc, #224]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008e16:	2180      	movs	r1, #128	@ 0x80
 8008e18:	0549      	lsls	r1, r1, #21
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e1e:	f7fc ffd1 	bl	8005dc4 <HAL_GetTick>
 8008e22:	0003      	movs	r3, r0
 8008e24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e26:	e008      	b.n	8008e3a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e28:	f7fc ffcc 	bl	8005dc4 <HAL_GetTick>
 8008e2c:	0002      	movs	r2, r0
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d901      	bls.n	8008e3a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e059      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	2380      	movs	r3, #128	@ 0x80
 8008e40:	049b      	lsls	r3, r3, #18
 8008e42:	4013      	ands	r3, r2
 8008e44:	d0f0      	beq.n	8008e28 <HAL_RCC_OscConfig+0x534>
 8008e46:	e051      	b.n	8008eec <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e48:	4b2b      	ldr	r3, [pc, #172]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008e4e:	492e      	ldr	r1, [pc, #184]	@ (8008f08 <HAL_RCC_OscConfig+0x614>)
 8008e50:	400a      	ands	r2, r1
 8008e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e54:	f7fc ffb6 	bl	8005dc4 <HAL_GetTick>
 8008e58:	0003      	movs	r3, r0
 8008e5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e5c:	e008      	b.n	8008e70 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e5e:	f7fc ffb1 	bl	8005dc4 <HAL_GetTick>
 8008e62:	0002      	movs	r2, r0
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d901      	bls.n	8008e70 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e03e      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e70:	4b21      	ldr	r3, [pc, #132]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	2380      	movs	r3, #128	@ 0x80
 8008e76:	049b      	lsls	r3, r3, #18
 8008e78:	4013      	ands	r3, r2
 8008e7a:	d1f0      	bne.n	8008e5e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8008e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008e7e:	68da      	ldr	r2, [r3, #12]
 8008e80:	4b1d      	ldr	r3, [pc, #116]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008e82:	4923      	ldr	r1, [pc, #140]	@ (8008f10 <HAL_RCC_OscConfig+0x61c>)
 8008e84:	400a      	ands	r2, r1
 8008e86:	60da      	str	r2, [r3, #12]
 8008e88:	e030      	b.n	8008eec <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d101      	bne.n	8008e96 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e02b      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008e96:	4b18      	ldr	r3, [pc, #96]	@ (8008ef8 <HAL_RCC_OscConfig+0x604>)
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	2203      	movs	r2, #3
 8008ea0:	401a      	ands	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d11e      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2270      	movs	r2, #112	@ 0x70
 8008eae:	401a      	ands	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d117      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	23fe      	movs	r3, #254	@ 0xfe
 8008ebc:	01db      	lsls	r3, r3, #7
 8008ebe:	401a      	ands	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d10e      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	23f8      	movs	r3, #248	@ 0xf8
 8008ece:	039b      	lsls	r3, r3, #14
 8008ed0:	401a      	ands	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d106      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	0f5b      	lsrs	r3, r3, #29
 8008ede:	075a      	lsls	r2, r3, #29
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d001      	beq.n	8008eec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e000      	b.n	8008eee <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	0018      	movs	r0, r3
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	b008      	add	sp, #32
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	46c0      	nop			@ (mov r8, r8)
 8008ef8:	40021000 	.word	0x40021000
 8008efc:	40007000 	.word	0x40007000
 8008f00:	00001388 	.word	0x00001388
 8008f04:	efffffff 	.word	0xefffffff
 8008f08:	feffffff 	.word	0xfeffffff
 8008f0c:	1fc1808c 	.word	0x1fc1808c
 8008f10:	effefffc 	.word	0xeffefffc

08008f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e0e9      	b.n	80090fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f28:	4b76      	ldr	r3, [pc, #472]	@ (8009104 <HAL_RCC_ClockConfig+0x1f0>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2207      	movs	r2, #7
 8008f2e:	4013      	ands	r3, r2
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d91e      	bls.n	8008f74 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f36:	4b73      	ldr	r3, [pc, #460]	@ (8009104 <HAL_RCC_ClockConfig+0x1f0>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2207      	movs	r2, #7
 8008f3c:	4393      	bics	r3, r2
 8008f3e:	0019      	movs	r1, r3
 8008f40:	4b70      	ldr	r3, [pc, #448]	@ (8009104 <HAL_RCC_ClockConfig+0x1f0>)
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008f48:	f7fc ff3c 	bl	8005dc4 <HAL_GetTick>
 8008f4c:	0003      	movs	r3, r0
 8008f4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008f50:	e009      	b.n	8008f66 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f52:	f7fc ff37 	bl	8005dc4 <HAL_GetTick>
 8008f56:	0002      	movs	r2, r0
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	4a6a      	ldr	r2, [pc, #424]	@ (8009108 <HAL_RCC_ClockConfig+0x1f4>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d901      	bls.n	8008f66 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e0ca      	b.n	80090fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008f66:	4b67      	ldr	r3, [pc, #412]	@ (8009104 <HAL_RCC_ClockConfig+0x1f0>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2207      	movs	r2, #7
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d1ee      	bne.n	8008f52 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2202      	movs	r2, #2
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	d015      	beq.n	8008faa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2204      	movs	r2, #4
 8008f84:	4013      	ands	r3, r2
 8008f86:	d006      	beq.n	8008f96 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008f88:	4b60      	ldr	r3, [pc, #384]	@ (800910c <HAL_RCC_ClockConfig+0x1f8>)
 8008f8a:	689a      	ldr	r2, [r3, #8]
 8008f8c:	4b5f      	ldr	r3, [pc, #380]	@ (800910c <HAL_RCC_ClockConfig+0x1f8>)
 8008f8e:	21e0      	movs	r1, #224	@ 0xe0
 8008f90:	01c9      	lsls	r1, r1, #7
 8008f92:	430a      	orrs	r2, r1
 8008f94:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f96:	4b5d      	ldr	r3, [pc, #372]	@ (800910c <HAL_RCC_ClockConfig+0x1f8>)
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	4a5d      	ldr	r2, [pc, #372]	@ (8009110 <HAL_RCC_ClockConfig+0x1fc>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	0019      	movs	r1, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689a      	ldr	r2, [r3, #8]
 8008fa4:	4b59      	ldr	r3, [pc, #356]	@ (800910c <HAL_RCC_ClockConfig+0x1f8>)
 8008fa6:	430a      	orrs	r2, r1
 8008fa8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	d057      	beq.n	8009064 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d107      	bne.n	8008fcc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008fbc:	4b53      	ldr	r3, [pc, #332]	@ (800910c <HAL_RCC_ClockConfig+0x1f8>)
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	2380      	movs	r3, #128	@ 0x80
 8008fc2:	029b      	lsls	r3, r3, #10
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	d12b      	bne.n	8009020 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e097      	b.n	80090fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d107      	bne.n	8008fe4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fd4:	4b4d      	ldr	r3, [pc, #308]	@ (800910c <HAL_RCC_ClockConfig+0x1f8>)
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	2380      	movs	r3, #128	@ 0x80
 8008fda:	049b      	lsls	r3, r3, #18
 8008fdc:	4013      	ands	r3, r2
 8008fde:	d11f      	bne.n	8009020 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e08b      	b.n	80090fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d107      	bne.n	8008ffc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008fec:	4b47      	ldr	r3, [pc, #284]	@ (800910c <HAL_RCC_ClockConfig+0x1f8>)
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	2380      	movs	r3, #128	@ 0x80
 8008ff2:	00db      	lsls	r3, r3, #3
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	d113      	bne.n	8009020 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e07f      	b.n	80090fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	2b03      	cmp	r3, #3
 8009002:	d106      	bne.n	8009012 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009004:	4b41      	ldr	r3, [pc, #260]	@ (800910c <HAL_RCC_ClockConfig+0x1f8>)
 8009006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009008:	2202      	movs	r2, #2
 800900a:	4013      	ands	r3, r2
 800900c:	d108      	bne.n	8009020 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e074      	b.n	80090fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009012:	4b3e      	ldr	r3, [pc, #248]	@ (800910c <HAL_RCC_ClockConfig+0x1f8>)
 8009014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009016:	2202      	movs	r2, #2
 8009018:	4013      	ands	r3, r2
 800901a:	d101      	bne.n	8009020 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e06d      	b.n	80090fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009020:	4b3a      	ldr	r3, [pc, #232]	@ (800910c <HAL_RCC_ClockConfig+0x1f8>)
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	2207      	movs	r2, #7
 8009026:	4393      	bics	r3, r2
 8009028:	0019      	movs	r1, r3
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	4b37      	ldr	r3, [pc, #220]	@ (800910c <HAL_RCC_ClockConfig+0x1f8>)
 8009030:	430a      	orrs	r2, r1
 8009032:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009034:	f7fc fec6 	bl	8005dc4 <HAL_GetTick>
 8009038:	0003      	movs	r3, r0
 800903a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800903c:	e009      	b.n	8009052 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800903e:	f7fc fec1 	bl	8005dc4 <HAL_GetTick>
 8009042:	0002      	movs	r2, r0
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	4a2f      	ldr	r2, [pc, #188]	@ (8009108 <HAL_RCC_ClockConfig+0x1f4>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d901      	bls.n	8009052 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800904e:	2303      	movs	r3, #3
 8009050:	e054      	b.n	80090fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009052:	4b2e      	ldr	r3, [pc, #184]	@ (800910c <HAL_RCC_ClockConfig+0x1f8>)
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	2238      	movs	r2, #56	@ 0x38
 8009058:	401a      	ands	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	00db      	lsls	r3, r3, #3
 8009060:	429a      	cmp	r2, r3
 8009062:	d1ec      	bne.n	800903e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009064:	4b27      	ldr	r3, [pc, #156]	@ (8009104 <HAL_RCC_ClockConfig+0x1f0>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2207      	movs	r2, #7
 800906a:	4013      	ands	r3, r2
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	429a      	cmp	r2, r3
 8009070:	d21e      	bcs.n	80090b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009072:	4b24      	ldr	r3, [pc, #144]	@ (8009104 <HAL_RCC_ClockConfig+0x1f0>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2207      	movs	r2, #7
 8009078:	4393      	bics	r3, r2
 800907a:	0019      	movs	r1, r3
 800907c:	4b21      	ldr	r3, [pc, #132]	@ (8009104 <HAL_RCC_ClockConfig+0x1f0>)
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	430a      	orrs	r2, r1
 8009082:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009084:	f7fc fe9e 	bl	8005dc4 <HAL_GetTick>
 8009088:	0003      	movs	r3, r0
 800908a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800908c:	e009      	b.n	80090a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800908e:	f7fc fe99 	bl	8005dc4 <HAL_GetTick>
 8009092:	0002      	movs	r2, r0
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	4a1b      	ldr	r2, [pc, #108]	@ (8009108 <HAL_RCC_ClockConfig+0x1f4>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d901      	bls.n	80090a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	e02c      	b.n	80090fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80090a2:	4b18      	ldr	r3, [pc, #96]	@ (8009104 <HAL_RCC_ClockConfig+0x1f0>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2207      	movs	r2, #7
 80090a8:	4013      	ands	r3, r2
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d1ee      	bne.n	800908e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2204      	movs	r2, #4
 80090b6:	4013      	ands	r3, r2
 80090b8:	d009      	beq.n	80090ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80090ba:	4b14      	ldr	r3, [pc, #80]	@ (800910c <HAL_RCC_ClockConfig+0x1f8>)
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	4a15      	ldr	r2, [pc, #84]	@ (8009114 <HAL_RCC_ClockConfig+0x200>)
 80090c0:	4013      	ands	r3, r2
 80090c2:	0019      	movs	r1, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68da      	ldr	r2, [r3, #12]
 80090c8:	4b10      	ldr	r3, [pc, #64]	@ (800910c <HAL_RCC_ClockConfig+0x1f8>)
 80090ca:	430a      	orrs	r2, r1
 80090cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80090ce:	f000 f829 	bl	8009124 <HAL_RCC_GetSysClockFreq>
 80090d2:	0001      	movs	r1, r0
 80090d4:	4b0d      	ldr	r3, [pc, #52]	@ (800910c <HAL_RCC_ClockConfig+0x1f8>)
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	0a1b      	lsrs	r3, r3, #8
 80090da:	220f      	movs	r2, #15
 80090dc:	401a      	ands	r2, r3
 80090de:	4b0e      	ldr	r3, [pc, #56]	@ (8009118 <HAL_RCC_ClockConfig+0x204>)
 80090e0:	0092      	lsls	r2, r2, #2
 80090e2:	58d3      	ldr	r3, [r2, r3]
 80090e4:	221f      	movs	r2, #31
 80090e6:	4013      	ands	r3, r2
 80090e8:	000a      	movs	r2, r1
 80090ea:	40da      	lsrs	r2, r3
 80090ec:	4b0b      	ldr	r3, [pc, #44]	@ (800911c <HAL_RCC_ClockConfig+0x208>)
 80090ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80090f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009120 <HAL_RCC_ClockConfig+0x20c>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	0018      	movs	r0, r3
 80090f6:	f7fc fe09 	bl	8005d0c <HAL_InitTick>
 80090fa:	0003      	movs	r3, r0
}
 80090fc:	0018      	movs	r0, r3
 80090fe:	46bd      	mov	sp, r7
 8009100:	b004      	add	sp, #16
 8009102:	bd80      	pop	{r7, pc}
 8009104:	40022000 	.word	0x40022000
 8009108:	00001388 	.word	0x00001388
 800910c:	40021000 	.word	0x40021000
 8009110:	fffff0ff 	.word	0xfffff0ff
 8009114:	ffff8fff 	.word	0xffff8fff
 8009118:	0800ec0c 	.word	0x0800ec0c
 800911c:	20000010 	.word	0x20000010
 8009120:	20000014 	.word	0x20000014

08009124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800912a:	4b3c      	ldr	r3, [pc, #240]	@ (800921c <HAL_RCC_GetSysClockFreq+0xf8>)
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	2238      	movs	r2, #56	@ 0x38
 8009130:	4013      	ands	r3, r2
 8009132:	d10f      	bne.n	8009154 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009134:	4b39      	ldr	r3, [pc, #228]	@ (800921c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	0adb      	lsrs	r3, r3, #11
 800913a:	2207      	movs	r2, #7
 800913c:	4013      	ands	r3, r2
 800913e:	2201      	movs	r2, #1
 8009140:	409a      	lsls	r2, r3
 8009142:	0013      	movs	r3, r2
 8009144:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	4835      	ldr	r0, [pc, #212]	@ (8009220 <HAL_RCC_GetSysClockFreq+0xfc>)
 800914a:	f7f6 fff5 	bl	8000138 <__udivsi3>
 800914e:	0003      	movs	r3, r0
 8009150:	613b      	str	r3, [r7, #16]
 8009152:	e05d      	b.n	8009210 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009154:	4b31      	ldr	r3, [pc, #196]	@ (800921c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	2238      	movs	r2, #56	@ 0x38
 800915a:	4013      	ands	r3, r2
 800915c:	2b08      	cmp	r3, #8
 800915e:	d102      	bne.n	8009166 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009160:	4b30      	ldr	r3, [pc, #192]	@ (8009224 <HAL_RCC_GetSysClockFreq+0x100>)
 8009162:	613b      	str	r3, [r7, #16]
 8009164:	e054      	b.n	8009210 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009166:	4b2d      	ldr	r3, [pc, #180]	@ (800921c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	2238      	movs	r2, #56	@ 0x38
 800916c:	4013      	ands	r3, r2
 800916e:	2b10      	cmp	r3, #16
 8009170:	d138      	bne.n	80091e4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009172:	4b2a      	ldr	r3, [pc, #168]	@ (800921c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	2203      	movs	r2, #3
 8009178:	4013      	ands	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800917c:	4b27      	ldr	r3, [pc, #156]	@ (800921c <HAL_RCC_GetSysClockFreq+0xf8>)
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	091b      	lsrs	r3, r3, #4
 8009182:	2207      	movs	r2, #7
 8009184:	4013      	ands	r3, r2
 8009186:	3301      	adds	r3, #1
 8009188:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2b03      	cmp	r3, #3
 800918e:	d10d      	bne.n	80091ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009190:	68b9      	ldr	r1, [r7, #8]
 8009192:	4824      	ldr	r0, [pc, #144]	@ (8009224 <HAL_RCC_GetSysClockFreq+0x100>)
 8009194:	f7f6 ffd0 	bl	8000138 <__udivsi3>
 8009198:	0003      	movs	r3, r0
 800919a:	0019      	movs	r1, r3
 800919c:	4b1f      	ldr	r3, [pc, #124]	@ (800921c <HAL_RCC_GetSysClockFreq+0xf8>)
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	0a1b      	lsrs	r3, r3, #8
 80091a2:	227f      	movs	r2, #127	@ 0x7f
 80091a4:	4013      	ands	r3, r2
 80091a6:	434b      	muls	r3, r1
 80091a8:	617b      	str	r3, [r7, #20]
        break;
 80091aa:	e00d      	b.n	80091c8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80091ac:	68b9      	ldr	r1, [r7, #8]
 80091ae:	481c      	ldr	r0, [pc, #112]	@ (8009220 <HAL_RCC_GetSysClockFreq+0xfc>)
 80091b0:	f7f6 ffc2 	bl	8000138 <__udivsi3>
 80091b4:	0003      	movs	r3, r0
 80091b6:	0019      	movs	r1, r3
 80091b8:	4b18      	ldr	r3, [pc, #96]	@ (800921c <HAL_RCC_GetSysClockFreq+0xf8>)
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	0a1b      	lsrs	r3, r3, #8
 80091be:	227f      	movs	r2, #127	@ 0x7f
 80091c0:	4013      	ands	r3, r2
 80091c2:	434b      	muls	r3, r1
 80091c4:	617b      	str	r3, [r7, #20]
        break;
 80091c6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80091c8:	4b14      	ldr	r3, [pc, #80]	@ (800921c <HAL_RCC_GetSysClockFreq+0xf8>)
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	0f5b      	lsrs	r3, r3, #29
 80091ce:	2207      	movs	r2, #7
 80091d0:	4013      	ands	r3, r2
 80091d2:	3301      	adds	r3, #1
 80091d4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80091d6:	6879      	ldr	r1, [r7, #4]
 80091d8:	6978      	ldr	r0, [r7, #20]
 80091da:	f7f6 ffad 	bl	8000138 <__udivsi3>
 80091de:	0003      	movs	r3, r0
 80091e0:	613b      	str	r3, [r7, #16]
 80091e2:	e015      	b.n	8009210 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80091e4:	4b0d      	ldr	r3, [pc, #52]	@ (800921c <HAL_RCC_GetSysClockFreq+0xf8>)
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	2238      	movs	r2, #56	@ 0x38
 80091ea:	4013      	ands	r3, r2
 80091ec:	2b20      	cmp	r3, #32
 80091ee:	d103      	bne.n	80091f8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80091f0:	2380      	movs	r3, #128	@ 0x80
 80091f2:	021b      	lsls	r3, r3, #8
 80091f4:	613b      	str	r3, [r7, #16]
 80091f6:	e00b      	b.n	8009210 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80091f8:	4b08      	ldr	r3, [pc, #32]	@ (800921c <HAL_RCC_GetSysClockFreq+0xf8>)
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	2238      	movs	r2, #56	@ 0x38
 80091fe:	4013      	ands	r3, r2
 8009200:	2b18      	cmp	r3, #24
 8009202:	d103      	bne.n	800920c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8009204:	23fa      	movs	r3, #250	@ 0xfa
 8009206:	01db      	lsls	r3, r3, #7
 8009208:	613b      	str	r3, [r7, #16]
 800920a:	e001      	b.n	8009210 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009210:	693b      	ldr	r3, [r7, #16]
}
 8009212:	0018      	movs	r0, r3
 8009214:	46bd      	mov	sp, r7
 8009216:	b006      	add	sp, #24
 8009218:	bd80      	pop	{r7, pc}
 800921a:	46c0      	nop			@ (mov r8, r8)
 800921c:	40021000 	.word	0x40021000
 8009220:	00f42400 	.word	0x00f42400
 8009224:	007a1200 	.word	0x007a1200

08009228 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800922c:	4b02      	ldr	r3, [pc, #8]	@ (8009238 <HAL_RCC_GetHCLKFreq+0x10>)
 800922e:	681b      	ldr	r3, [r3, #0]
}
 8009230:	0018      	movs	r0, r3
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	46c0      	nop			@ (mov r8, r8)
 8009238:	20000010 	.word	0x20000010

0800923c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800923c:	b5b0      	push	{r4, r5, r7, lr}
 800923e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009240:	f7ff fff2 	bl	8009228 <HAL_RCC_GetHCLKFreq>
 8009244:	0004      	movs	r4, r0
 8009246:	f7ff fb49 	bl	80088dc <LL_RCC_GetAPB1Prescaler>
 800924a:	0003      	movs	r3, r0
 800924c:	0b1a      	lsrs	r2, r3, #12
 800924e:	4b05      	ldr	r3, [pc, #20]	@ (8009264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009250:	0092      	lsls	r2, r2, #2
 8009252:	58d3      	ldr	r3, [r2, r3]
 8009254:	221f      	movs	r2, #31
 8009256:	4013      	ands	r3, r2
 8009258:	40dc      	lsrs	r4, r3
 800925a:	0023      	movs	r3, r4
}
 800925c:	0018      	movs	r0, r3
 800925e:	46bd      	mov	sp, r7
 8009260:	bdb0      	pop	{r4, r5, r7, pc}
 8009262:	46c0      	nop			@ (mov r8, r8)
 8009264:	0800ec4c 	.word	0x0800ec4c

08009268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8009270:	2313      	movs	r3, #19
 8009272:	18fb      	adds	r3, r7, r3
 8009274:	2200      	movs	r2, #0
 8009276:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009278:	2312      	movs	r3, #18
 800927a:	18fb      	adds	r3, r7, r3
 800927c:	2200      	movs	r2, #0
 800927e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	2380      	movs	r3, #128	@ 0x80
 8009286:	029b      	lsls	r3, r3, #10
 8009288:	4013      	ands	r3, r2
 800928a:	d100      	bne.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800928c:	e0a3      	b.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800928e:	2011      	movs	r0, #17
 8009290:	183b      	adds	r3, r7, r0
 8009292:	2200      	movs	r2, #0
 8009294:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009296:	4b86      	ldr	r3, [pc, #536]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009298:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800929a:	2380      	movs	r3, #128	@ 0x80
 800929c:	055b      	lsls	r3, r3, #21
 800929e:	4013      	ands	r3, r2
 80092a0:	d110      	bne.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092a2:	4b83      	ldr	r3, [pc, #524]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80092a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092a6:	4b82      	ldr	r3, [pc, #520]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80092a8:	2180      	movs	r1, #128	@ 0x80
 80092aa:	0549      	lsls	r1, r1, #21
 80092ac:	430a      	orrs	r2, r1
 80092ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80092b0:	4b7f      	ldr	r3, [pc, #508]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80092b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092b4:	2380      	movs	r3, #128	@ 0x80
 80092b6:	055b      	lsls	r3, r3, #21
 80092b8:	4013      	ands	r3, r2
 80092ba:	60bb      	str	r3, [r7, #8]
 80092bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092be:	183b      	adds	r3, r7, r0
 80092c0:	2201      	movs	r2, #1
 80092c2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092c4:	4b7b      	ldr	r3, [pc, #492]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	4b7a      	ldr	r3, [pc, #488]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80092ca:	2180      	movs	r1, #128	@ 0x80
 80092cc:	0049      	lsls	r1, r1, #1
 80092ce:	430a      	orrs	r2, r1
 80092d0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092d2:	f7fc fd77 	bl	8005dc4 <HAL_GetTick>
 80092d6:	0003      	movs	r3, r0
 80092d8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092da:	e00b      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092dc:	f7fc fd72 	bl	8005dc4 <HAL_GetTick>
 80092e0:	0002      	movs	r2, r0
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d904      	bls.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80092ea:	2313      	movs	r3, #19
 80092ec:	18fb      	adds	r3, r7, r3
 80092ee:	2203      	movs	r2, #3
 80092f0:	701a      	strb	r2, [r3, #0]
        break;
 80092f2:	e005      	b.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092f4:	4b6f      	ldr	r3, [pc, #444]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	2380      	movs	r3, #128	@ 0x80
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	4013      	ands	r3, r2
 80092fe:	d0ed      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8009300:	2313      	movs	r3, #19
 8009302:	18fb      	adds	r3, r7, r3
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d154      	bne.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800930a:	4b69      	ldr	r3, [pc, #420]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800930c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800930e:	23c0      	movs	r3, #192	@ 0xc0
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4013      	ands	r3, r2
 8009314:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d019      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	429a      	cmp	r2, r3
 8009324:	d014      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009326:	4b62      	ldr	r3, [pc, #392]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800932a:	4a63      	ldr	r2, [pc, #396]	@ (80094b8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800932c:	4013      	ands	r3, r2
 800932e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009330:	4b5f      	ldr	r3, [pc, #380]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009332:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009334:	4b5e      	ldr	r3, [pc, #376]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009336:	2180      	movs	r1, #128	@ 0x80
 8009338:	0249      	lsls	r1, r1, #9
 800933a:	430a      	orrs	r2, r1
 800933c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800933e:	4b5c      	ldr	r3, [pc, #368]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009340:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009342:	4b5b      	ldr	r3, [pc, #364]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009344:	495d      	ldr	r1, [pc, #372]	@ (80094bc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8009346:	400a      	ands	r2, r1
 8009348:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800934a:	4b59      	ldr	r3, [pc, #356]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	2201      	movs	r2, #1
 8009354:	4013      	ands	r3, r2
 8009356:	d016      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009358:	f7fc fd34 	bl	8005dc4 <HAL_GetTick>
 800935c:	0003      	movs	r3, r0
 800935e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009360:	e00c      	b.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009362:	f7fc fd2f 	bl	8005dc4 <HAL_GetTick>
 8009366:	0002      	movs	r2, r0
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	4a54      	ldr	r2, [pc, #336]	@ (80094c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d904      	bls.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8009372:	2313      	movs	r3, #19
 8009374:	18fb      	adds	r3, r7, r3
 8009376:	2203      	movs	r2, #3
 8009378:	701a      	strb	r2, [r3, #0]
            break;
 800937a:	e004      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800937c:	4b4c      	ldr	r3, [pc, #304]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800937e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009380:	2202      	movs	r2, #2
 8009382:	4013      	ands	r3, r2
 8009384:	d0ed      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8009386:	2313      	movs	r3, #19
 8009388:	18fb      	adds	r3, r7, r3
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10a      	bne.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009390:	4b47      	ldr	r3, [pc, #284]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009394:	4a48      	ldr	r2, [pc, #288]	@ (80094b8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8009396:	4013      	ands	r3, r2
 8009398:	0019      	movs	r1, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	699a      	ldr	r2, [r3, #24]
 800939e:	4b44      	ldr	r3, [pc, #272]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80093a0:	430a      	orrs	r2, r1
 80093a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80093a4:	e00c      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093a6:	2312      	movs	r3, #18
 80093a8:	18fb      	adds	r3, r7, r3
 80093aa:	2213      	movs	r2, #19
 80093ac:	18ba      	adds	r2, r7, r2
 80093ae:	7812      	ldrb	r2, [r2, #0]
 80093b0:	701a      	strb	r2, [r3, #0]
 80093b2:	e005      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b4:	2312      	movs	r3, #18
 80093b6:	18fb      	adds	r3, r7, r3
 80093b8:	2213      	movs	r2, #19
 80093ba:	18ba      	adds	r2, r7, r2
 80093bc:	7812      	ldrb	r2, [r2, #0]
 80093be:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80093c0:	2311      	movs	r3, #17
 80093c2:	18fb      	adds	r3, r7, r3
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d105      	bne.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093ca:	4b39      	ldr	r3, [pc, #228]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80093cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093ce:	4b38      	ldr	r3, [pc, #224]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80093d0:	493c      	ldr	r1, [pc, #240]	@ (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80093d2:	400a      	ands	r2, r1
 80093d4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2201      	movs	r2, #1
 80093dc:	4013      	ands	r3, r2
 80093de:	d009      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80093e0:	4b33      	ldr	r3, [pc, #204]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80093e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093e4:	2203      	movs	r2, #3
 80093e6:	4393      	bics	r3, r2
 80093e8:	0019      	movs	r1, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	4b30      	ldr	r3, [pc, #192]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80093f0:	430a      	orrs	r2, r1
 80093f2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2202      	movs	r2, #2
 80093fa:	4013      	ands	r3, r2
 80093fc:	d009      	beq.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80093fe:	4b2c      	ldr	r3, [pc, #176]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009402:	220c      	movs	r2, #12
 8009404:	4393      	bics	r3, r2
 8009406:	0019      	movs	r1, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	689a      	ldr	r2, [r3, #8]
 800940c:	4b28      	ldr	r3, [pc, #160]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800940e:	430a      	orrs	r2, r1
 8009410:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2220      	movs	r2, #32
 8009418:	4013      	ands	r3, r2
 800941a:	d009      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800941c:	4b24      	ldr	r3, [pc, #144]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800941e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009420:	4a29      	ldr	r2, [pc, #164]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009422:	4013      	ands	r3, r2
 8009424:	0019      	movs	r1, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68da      	ldr	r2, [r3, #12]
 800942a:	4b21      	ldr	r3, [pc, #132]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800942c:	430a      	orrs	r2, r1
 800942e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	2380      	movs	r3, #128	@ 0x80
 8009436:	01db      	lsls	r3, r3, #7
 8009438:	4013      	ands	r3, r2
 800943a:	d015      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800943c:	4b1c      	ldr	r3, [pc, #112]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800943e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	0899      	lsrs	r1, r3, #2
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	695a      	ldr	r2, [r3, #20]
 8009448:	4b19      	ldr	r3, [pc, #100]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800944a:	430a      	orrs	r2, r1
 800944c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	695a      	ldr	r2, [r3, #20]
 8009452:	2380      	movs	r3, #128	@ 0x80
 8009454:	05db      	lsls	r3, r3, #23
 8009456:	429a      	cmp	r2, r3
 8009458:	d106      	bne.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800945a:	4b15      	ldr	r3, [pc, #84]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	4b14      	ldr	r3, [pc, #80]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009460:	2180      	movs	r1, #128	@ 0x80
 8009462:	0249      	lsls	r1, r1, #9
 8009464:	430a      	orrs	r2, r1
 8009466:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	2380      	movs	r3, #128	@ 0x80
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	4013      	ands	r3, r2
 8009472:	d016      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8009474:	4b0e      	ldr	r3, [pc, #56]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009478:	4a14      	ldr	r2, [pc, #80]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800947a:	4013      	ands	r3, r2
 800947c:	0019      	movs	r1, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	691a      	ldr	r2, [r3, #16]
 8009482:	4b0b      	ldr	r3, [pc, #44]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009484:	430a      	orrs	r2, r1
 8009486:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	691a      	ldr	r2, [r3, #16]
 800948c:	2380      	movs	r3, #128	@ 0x80
 800948e:	01db      	lsls	r3, r3, #7
 8009490:	429a      	cmp	r2, r3
 8009492:	d106      	bne.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009494:	4b06      	ldr	r3, [pc, #24]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8009496:	68da      	ldr	r2, [r3, #12]
 8009498:	4b05      	ldr	r3, [pc, #20]	@ (80094b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800949a:	2180      	movs	r1, #128	@ 0x80
 800949c:	0249      	lsls	r1, r1, #9
 800949e:	430a      	orrs	r2, r1
 80094a0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80094a2:	2312      	movs	r3, #18
 80094a4:	18fb      	adds	r3, r7, r3
 80094a6:	781b      	ldrb	r3, [r3, #0]
}
 80094a8:	0018      	movs	r0, r3
 80094aa:	46bd      	mov	sp, r7
 80094ac:	b006      	add	sp, #24
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	40021000 	.word	0x40021000
 80094b4:	40007000 	.word	0x40007000
 80094b8:	fffffcff 	.word	0xfffffcff
 80094bc:	fffeffff 	.word	0xfffeffff
 80094c0:	00001388 	.word	0x00001388
 80094c4:	efffffff 	.word	0xefffffff
 80094c8:	ffffcfff 	.word	0xffffcfff
 80094cc:	ffff3fff 	.word	0xffff3fff

080094d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d101      	bne.n	80094e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e0a8      	b.n	8009634 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d109      	bne.n	80094fe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	685a      	ldr	r2, [r3, #4]
 80094ee:	2382      	movs	r3, #130	@ 0x82
 80094f0:	005b      	lsls	r3, r3, #1
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d009      	beq.n	800950a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	61da      	str	r2, [r3, #28]
 80094fc:	e005      	b.n	800950a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	225d      	movs	r2, #93	@ 0x5d
 8009514:	5c9b      	ldrb	r3, [r3, r2]
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	d107      	bne.n	800952c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	225c      	movs	r2, #92	@ 0x5c
 8009520:	2100      	movs	r1, #0
 8009522:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	0018      	movs	r0, r3
 8009528:	f7fc f8b0 	bl	800568c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	225d      	movs	r2, #93	@ 0x5d
 8009530:	2102      	movs	r1, #2
 8009532:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2140      	movs	r1, #64	@ 0x40
 8009540:	438a      	bics	r2, r1
 8009542:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68da      	ldr	r2, [r3, #12]
 8009548:	23e0      	movs	r3, #224	@ 0xe0
 800954a:	00db      	lsls	r3, r3, #3
 800954c:	429a      	cmp	r2, r3
 800954e:	d902      	bls.n	8009556 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009550:	2300      	movs	r3, #0
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	e002      	b.n	800955c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009556:	2380      	movs	r3, #128	@ 0x80
 8009558:	015b      	lsls	r3, r3, #5
 800955a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	68da      	ldr	r2, [r3, #12]
 8009560:	23f0      	movs	r3, #240	@ 0xf0
 8009562:	011b      	lsls	r3, r3, #4
 8009564:	429a      	cmp	r2, r3
 8009566:	d008      	beq.n	800957a <HAL_SPI_Init+0xaa>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68da      	ldr	r2, [r3, #12]
 800956c:	23e0      	movs	r3, #224	@ 0xe0
 800956e:	00db      	lsls	r3, r3, #3
 8009570:	429a      	cmp	r2, r3
 8009572:	d002      	beq.n	800957a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685a      	ldr	r2, [r3, #4]
 800957e:	2382      	movs	r3, #130	@ 0x82
 8009580:	005b      	lsls	r3, r3, #1
 8009582:	401a      	ands	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6899      	ldr	r1, [r3, #8]
 8009588:	2384      	movs	r3, #132	@ 0x84
 800958a:	021b      	lsls	r3, r3, #8
 800958c:	400b      	ands	r3, r1
 800958e:	431a      	orrs	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	2102      	movs	r1, #2
 8009596:	400b      	ands	r3, r1
 8009598:	431a      	orrs	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	2101      	movs	r1, #1
 80095a0:	400b      	ands	r3, r1
 80095a2:	431a      	orrs	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6999      	ldr	r1, [r3, #24]
 80095a8:	2380      	movs	r3, #128	@ 0x80
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	400b      	ands	r3, r1
 80095ae:	431a      	orrs	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	2138      	movs	r1, #56	@ 0x38
 80095b6:	400b      	ands	r3, r1
 80095b8:	431a      	orrs	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	2180      	movs	r1, #128	@ 0x80
 80095c0:	400b      	ands	r3, r1
 80095c2:	431a      	orrs	r2, r3
 80095c4:	0011      	movs	r1, r2
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095ca:	2380      	movs	r3, #128	@ 0x80
 80095cc:	019b      	lsls	r3, r3, #6
 80095ce:	401a      	ands	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	430a      	orrs	r2, r1
 80095d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	0c1b      	lsrs	r3, r3, #16
 80095de:	2204      	movs	r2, #4
 80095e0:	401a      	ands	r2, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e6:	2110      	movs	r1, #16
 80095e8:	400b      	ands	r3, r1
 80095ea:	431a      	orrs	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095f0:	2108      	movs	r1, #8
 80095f2:	400b      	ands	r3, r1
 80095f4:	431a      	orrs	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	68d9      	ldr	r1, [r3, #12]
 80095fa:	23f0      	movs	r3, #240	@ 0xf0
 80095fc:	011b      	lsls	r3, r3, #4
 80095fe:	400b      	ands	r3, r1
 8009600:	431a      	orrs	r2, r3
 8009602:	0011      	movs	r1, r2
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	2380      	movs	r3, #128	@ 0x80
 8009608:	015b      	lsls	r3, r3, #5
 800960a:	401a      	ands	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	430a      	orrs	r2, r1
 8009612:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	69da      	ldr	r2, [r3, #28]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4907      	ldr	r1, [pc, #28]	@ (800963c <HAL_SPI_Init+0x16c>)
 8009620:	400a      	ands	r2, r1
 8009622:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	225d      	movs	r2, #93	@ 0x5d
 800962e:	2101      	movs	r1, #1
 8009630:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	0018      	movs	r0, r3
 8009636:	46bd      	mov	sp, r7
 8009638:	b004      	add	sp, #16
 800963a:	bd80      	pop	{r7, pc}
 800963c:	fffff7ff 	.word	0xfffff7ff

08009640 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009640:	b590      	push	{r4, r7, lr}
 8009642:	b089      	sub	sp, #36	@ 0x24
 8009644:	af02      	add	r7, sp, #8
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	603b      	str	r3, [r7, #0]
 800964c:	1dbb      	adds	r3, r7, #6
 800964e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009650:	2117      	movs	r1, #23
 8009652:	187b      	adds	r3, r7, r1
 8009654:	2200      	movs	r2, #0
 8009656:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	225d      	movs	r2, #93	@ 0x5d
 800965c:	5c9b      	ldrb	r3, [r3, r2]
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b01      	cmp	r3, #1
 8009662:	d003      	beq.n	800966c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8009664:	187b      	adds	r3, r7, r1
 8009666:	2202      	movs	r2, #2
 8009668:	701a      	strb	r2, [r3, #0]
    goto error;
 800966a:	e12b      	b.n	80098c4 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	685a      	ldr	r2, [r3, #4]
 8009670:	2382      	movs	r3, #130	@ 0x82
 8009672:	005b      	lsls	r3, r3, #1
 8009674:	429a      	cmp	r2, r3
 8009676:	d113      	bne.n	80096a0 <HAL_SPI_Receive+0x60>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10f      	bne.n	80096a0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	225d      	movs	r2, #93	@ 0x5d
 8009684:	2104      	movs	r1, #4
 8009686:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009688:	1dbb      	adds	r3, r7, #6
 800968a:	881c      	ldrh	r4, [r3, #0]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	68b9      	ldr	r1, [r7, #8]
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	0023      	movs	r3, r4
 8009698:	f000 f924 	bl	80098e4 <HAL_SPI_TransmitReceive>
 800969c:	0003      	movs	r3, r0
 800969e:	e118      	b.n	80098d2 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	225c      	movs	r2, #92	@ 0x5c
 80096a4:	5c9b      	ldrb	r3, [r3, r2]
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d101      	bne.n	80096ae <HAL_SPI_Receive+0x6e>
 80096aa:	2302      	movs	r3, #2
 80096ac:	e111      	b.n	80098d2 <HAL_SPI_Receive+0x292>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	225c      	movs	r2, #92	@ 0x5c
 80096b2:	2101      	movs	r1, #1
 80096b4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096b6:	f7fc fb85 	bl	8005dc4 <HAL_GetTick>
 80096ba:	0003      	movs	r3, r0
 80096bc:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d003      	beq.n	80096cc <HAL_SPI_Receive+0x8c>
 80096c4:	1dbb      	adds	r3, r7, #6
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d104      	bne.n	80096d6 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80096cc:	2317      	movs	r3, #23
 80096ce:	18fb      	adds	r3, r7, r3
 80096d0:	2201      	movs	r2, #1
 80096d2:	701a      	strb	r2, [r3, #0]
    goto error;
 80096d4:	e0f6      	b.n	80098c4 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	225d      	movs	r2, #93	@ 0x5d
 80096da:	2104      	movs	r1, #4
 80096dc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	1dba      	adds	r2, r7, #6
 80096ee:	2144      	movs	r1, #68	@ 0x44
 80096f0:	8812      	ldrh	r2, [r2, #0]
 80096f2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	1dba      	adds	r2, r7, #6
 80096f8:	2146      	movs	r1, #70	@ 0x46
 80096fa:	8812      	ldrh	r2, [r2, #0]
 80096fc:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	68da      	ldr	r2, [r3, #12]
 8009720:	23e0      	movs	r3, #224	@ 0xe0
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	429a      	cmp	r2, r3
 8009726:	d908      	bls.n	800973a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	496a      	ldr	r1, [pc, #424]	@ (80098dc <HAL_SPI_Receive+0x29c>)
 8009734:	400a      	ands	r2, r1
 8009736:	605a      	str	r2, [r3, #4]
 8009738:	e008      	b.n	800974c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2180      	movs	r1, #128	@ 0x80
 8009746:	0149      	lsls	r1, r1, #5
 8009748:	430a      	orrs	r2, r1
 800974a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	689a      	ldr	r2, [r3, #8]
 8009750:	2380      	movs	r3, #128	@ 0x80
 8009752:	021b      	lsls	r3, r3, #8
 8009754:	429a      	cmp	r2, r3
 8009756:	d10f      	bne.n	8009778 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2140      	movs	r1, #64	@ 0x40
 8009764:	438a      	bics	r2, r1
 8009766:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	495b      	ldr	r1, [pc, #364]	@ (80098e0 <HAL_SPI_Receive+0x2a0>)
 8009774:	400a      	ands	r2, r1
 8009776:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2240      	movs	r2, #64	@ 0x40
 8009780:	4013      	ands	r3, r2
 8009782:	2b40      	cmp	r3, #64	@ 0x40
 8009784:	d007      	beq.n	8009796 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2140      	movs	r1, #64	@ 0x40
 8009792:	430a      	orrs	r2, r1
 8009794:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	68da      	ldr	r2, [r3, #12]
 800979a:	23e0      	movs	r3, #224	@ 0xe0
 800979c:	00db      	lsls	r3, r3, #3
 800979e:	429a      	cmp	r2, r3
 80097a0:	d900      	bls.n	80097a4 <HAL_SPI_Receive+0x164>
 80097a2:	e071      	b.n	8009888 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80097a4:	e035      	b.n	8009812 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	2201      	movs	r2, #1
 80097ae:	4013      	ands	r3, r2
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d117      	bne.n	80097e4 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	330c      	adds	r3, #12
 80097ba:	001a      	movs	r2, r3
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097c0:	7812      	ldrb	r2, [r2, #0]
 80097c2:	b2d2      	uxtb	r2, r2
 80097c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ca:	1c5a      	adds	r2, r3, #1
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2246      	movs	r2, #70	@ 0x46
 80097d4:	5a9b      	ldrh	r3, [r3, r2]
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	3b01      	subs	r3, #1
 80097da:	b299      	uxth	r1, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2246      	movs	r2, #70	@ 0x46
 80097e0:	5299      	strh	r1, [r3, r2]
 80097e2:	e016      	b.n	8009812 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097e4:	f7fc faee 	bl	8005dc4 <HAL_GetTick>
 80097e8:	0002      	movs	r2, r0
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d802      	bhi.n	80097fa <HAL_SPI_Receive+0x1ba>
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	3301      	adds	r3, #1
 80097f8:	d102      	bne.n	8009800 <HAL_SPI_Receive+0x1c0>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d108      	bne.n	8009812 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8009800:	2317      	movs	r3, #23
 8009802:	18fb      	adds	r3, r7, r3
 8009804:	2203      	movs	r2, #3
 8009806:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	225d      	movs	r2, #93	@ 0x5d
 800980c:	2101      	movs	r1, #1
 800980e:	5499      	strb	r1, [r3, r2]
          goto error;
 8009810:	e058      	b.n	80098c4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2246      	movs	r2, #70	@ 0x46
 8009816:	5a9b      	ldrh	r3, [r3, r2]
 8009818:	b29b      	uxth	r3, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1c3      	bne.n	80097a6 <HAL_SPI_Receive+0x166>
 800981e:	e039      	b.n	8009894 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	2201      	movs	r2, #1
 8009828:	4013      	ands	r3, r2
 800982a:	2b01      	cmp	r3, #1
 800982c:	d115      	bne.n	800985a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68da      	ldr	r2, [r3, #12]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009838:	b292      	uxth	r2, r2
 800983a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009840:	1c9a      	adds	r2, r3, #2
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2246      	movs	r2, #70	@ 0x46
 800984a:	5a9b      	ldrh	r3, [r3, r2]
 800984c:	b29b      	uxth	r3, r3
 800984e:	3b01      	subs	r3, #1
 8009850:	b299      	uxth	r1, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2246      	movs	r2, #70	@ 0x46
 8009856:	5299      	strh	r1, [r3, r2]
 8009858:	e016      	b.n	8009888 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800985a:	f7fc fab3 	bl	8005dc4 <HAL_GetTick>
 800985e:	0002      	movs	r2, r0
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	429a      	cmp	r2, r3
 8009868:	d802      	bhi.n	8009870 <HAL_SPI_Receive+0x230>
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	3301      	adds	r3, #1
 800986e:	d102      	bne.n	8009876 <HAL_SPI_Receive+0x236>
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d108      	bne.n	8009888 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8009876:	2317      	movs	r3, #23
 8009878:	18fb      	adds	r3, r7, r3
 800987a:	2203      	movs	r2, #3
 800987c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	225d      	movs	r2, #93	@ 0x5d
 8009882:	2101      	movs	r1, #1
 8009884:	5499      	strb	r1, [r3, r2]
          goto error;
 8009886:	e01d      	b.n	80098c4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2246      	movs	r2, #70	@ 0x46
 800988c:	5a9b      	ldrh	r3, [r3, r2]
 800988e:	b29b      	uxth	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1c5      	bne.n	8009820 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	0018      	movs	r0, r3
 800989c:	f000 fb34 	bl	8009f08 <SPI_EndRxTransaction>
 80098a0:	1e03      	subs	r3, r0, #0
 80098a2:	d002      	beq.n	80098aa <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2220      	movs	r2, #32
 80098a8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d004      	beq.n	80098bc <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80098b2:	2317      	movs	r3, #23
 80098b4:	18fb      	adds	r3, r7, r3
 80098b6:	2201      	movs	r2, #1
 80098b8:	701a      	strb	r2, [r3, #0]
 80098ba:	e003      	b.n	80098c4 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	225d      	movs	r2, #93	@ 0x5d
 80098c0:	2101      	movs	r1, #1
 80098c2:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	225c      	movs	r2, #92	@ 0x5c
 80098c8:	2100      	movs	r1, #0
 80098ca:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80098cc:	2317      	movs	r3, #23
 80098ce:	18fb      	adds	r3, r7, r3
 80098d0:	781b      	ldrb	r3, [r3, #0]
}
 80098d2:	0018      	movs	r0, r3
 80098d4:	46bd      	mov	sp, r7
 80098d6:	b007      	add	sp, #28
 80098d8:	bd90      	pop	{r4, r7, pc}
 80098da:	46c0      	nop			@ (mov r8, r8)
 80098dc:	ffffefff 	.word	0xffffefff
 80098e0:	ffffbfff 	.word	0xffffbfff

080098e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b08a      	sub	sp, #40	@ 0x28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	001a      	movs	r2, r3
 80098f2:	1cbb      	adds	r3, r7, #2
 80098f4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80098f6:	2301      	movs	r3, #1
 80098f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80098fa:	2323      	movs	r3, #35	@ 0x23
 80098fc:	18fb      	adds	r3, r7, r3
 80098fe:	2200      	movs	r2, #0
 8009900:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	225c      	movs	r2, #92	@ 0x5c
 8009906:	5c9b      	ldrb	r3, [r3, r2]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d101      	bne.n	8009910 <HAL_SPI_TransmitReceive+0x2c>
 800990c:	2302      	movs	r3, #2
 800990e:	e1c4      	b.n	8009c9a <HAL_SPI_TransmitReceive+0x3b6>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	225c      	movs	r2, #92	@ 0x5c
 8009914:	2101      	movs	r1, #1
 8009916:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009918:	f7fc fa54 	bl	8005dc4 <HAL_GetTick>
 800991c:	0003      	movs	r3, r0
 800991e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009920:	201b      	movs	r0, #27
 8009922:	183b      	adds	r3, r7, r0
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	215d      	movs	r1, #93	@ 0x5d
 8009928:	5c52      	ldrb	r2, [r2, r1]
 800992a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009932:	2312      	movs	r3, #18
 8009934:	18fb      	adds	r3, r7, r3
 8009936:	1cba      	adds	r2, r7, #2
 8009938:	8812      	ldrh	r2, [r2, #0]
 800993a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800993c:	183b      	adds	r3, r7, r0
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d011      	beq.n	8009968 <HAL_SPI_TransmitReceive+0x84>
 8009944:	697a      	ldr	r2, [r7, #20]
 8009946:	2382      	movs	r3, #130	@ 0x82
 8009948:	005b      	lsls	r3, r3, #1
 800994a:	429a      	cmp	r2, r3
 800994c:	d107      	bne.n	800995e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d103      	bne.n	800995e <HAL_SPI_TransmitReceive+0x7a>
 8009956:	183b      	adds	r3, r7, r0
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	2b04      	cmp	r3, #4
 800995c:	d004      	beq.n	8009968 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800995e:	2323      	movs	r3, #35	@ 0x23
 8009960:	18fb      	adds	r3, r7, r3
 8009962:	2202      	movs	r2, #2
 8009964:	701a      	strb	r2, [r3, #0]
    goto error;
 8009966:	e191      	b.n	8009c8c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d006      	beq.n	800997c <HAL_SPI_TransmitReceive+0x98>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d003      	beq.n	800997c <HAL_SPI_TransmitReceive+0x98>
 8009974:	1cbb      	adds	r3, r7, #2
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d104      	bne.n	8009986 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800997c:	2323      	movs	r3, #35	@ 0x23
 800997e:	18fb      	adds	r3, r7, r3
 8009980:	2201      	movs	r2, #1
 8009982:	701a      	strb	r2, [r3, #0]
    goto error;
 8009984:	e182      	b.n	8009c8c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	225d      	movs	r2, #93	@ 0x5d
 800998a:	5c9b      	ldrb	r3, [r3, r2]
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b04      	cmp	r3, #4
 8009990:	d003      	beq.n	800999a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	225d      	movs	r2, #93	@ 0x5d
 8009996:	2105      	movs	r1, #5
 8009998:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	1cba      	adds	r2, r7, #2
 80099aa:	2146      	movs	r1, #70	@ 0x46
 80099ac:	8812      	ldrh	r2, [r2, #0]
 80099ae:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	1cba      	adds	r2, r7, #2
 80099b4:	2144      	movs	r1, #68	@ 0x44
 80099b6:	8812      	ldrh	r2, [r2, #0]
 80099b8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	1cba      	adds	r2, r7, #2
 80099c4:	8812      	ldrh	r2, [r2, #0]
 80099c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	1cba      	adds	r2, r7, #2
 80099cc:	8812      	ldrh	r2, [r2, #0]
 80099ce:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	68da      	ldr	r2, [r3, #12]
 80099e0:	23e0      	movs	r3, #224	@ 0xe0
 80099e2:	00db      	lsls	r3, r3, #3
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d908      	bls.n	80099fa <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	49ac      	ldr	r1, [pc, #688]	@ (8009ca4 <HAL_SPI_TransmitReceive+0x3c0>)
 80099f4:	400a      	ands	r2, r1
 80099f6:	605a      	str	r2, [r3, #4]
 80099f8:	e008      	b.n	8009a0c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2180      	movs	r1, #128	@ 0x80
 8009a06:	0149      	lsls	r1, r1, #5
 8009a08:	430a      	orrs	r2, r1
 8009a0a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2240      	movs	r2, #64	@ 0x40
 8009a14:	4013      	ands	r3, r2
 8009a16:	2b40      	cmp	r3, #64	@ 0x40
 8009a18:	d007      	beq.n	8009a2a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2140      	movs	r1, #64	@ 0x40
 8009a26:	430a      	orrs	r2, r1
 8009a28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	68da      	ldr	r2, [r3, #12]
 8009a2e:	23e0      	movs	r3, #224	@ 0xe0
 8009a30:	00db      	lsls	r3, r3, #3
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d800      	bhi.n	8009a38 <HAL_SPI_TransmitReceive+0x154>
 8009a36:	e083      	b.n	8009b40 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d005      	beq.n	8009a4c <HAL_SPI_TransmitReceive+0x168>
 8009a40:	2312      	movs	r3, #18
 8009a42:	18fb      	adds	r3, r7, r3
 8009a44:	881b      	ldrh	r3, [r3, #0]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d000      	beq.n	8009a4c <HAL_SPI_TransmitReceive+0x168>
 8009a4a:	e06d      	b.n	8009b28 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a50:	881a      	ldrh	r2, [r3, #0]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a5c:	1c9a      	adds	r2, r3, #2
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a70:	e05a      	b.n	8009b28 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	2202      	movs	r2, #2
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d11b      	bne.n	8009ab8 <HAL_SPI_TransmitReceive+0x1d4>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d016      	beq.n	8009ab8 <HAL_SPI_TransmitReceive+0x1d4>
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d113      	bne.n	8009ab8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a94:	881a      	ldrh	r2, [r3, #0]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aa0:	1c9a      	adds	r2, r3, #2
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	3b01      	subs	r3, #1
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d11c      	bne.n	8009b00 <HAL_SPI_TransmitReceive+0x21c>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2246      	movs	r2, #70	@ 0x46
 8009aca:	5a9b      	ldrh	r3, [r3, r2]
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d016      	beq.n	8009b00 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	68da      	ldr	r2, [r3, #12]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009adc:	b292      	uxth	r2, r2
 8009ade:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ae4:	1c9a      	adds	r2, r3, #2
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2246      	movs	r2, #70	@ 0x46
 8009aee:	5a9b      	ldrh	r3, [r3, r2]
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	3b01      	subs	r3, #1
 8009af4:	b299      	uxth	r1, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2246      	movs	r2, #70	@ 0x46
 8009afa:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009afc:	2301      	movs	r3, #1
 8009afe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b00:	f7fc f960 	bl	8005dc4 <HAL_GetTick>
 8009b04:	0002      	movs	r2, r0
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d80b      	bhi.n	8009b28 <HAL_SPI_TransmitReceive+0x244>
 8009b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b12:	3301      	adds	r3, #1
 8009b14:	d008      	beq.n	8009b28 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8009b16:	2323      	movs	r3, #35	@ 0x23
 8009b18:	18fb      	adds	r3, r7, r3
 8009b1a:	2203      	movs	r2, #3
 8009b1c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	225d      	movs	r2, #93	@ 0x5d
 8009b22:	2101      	movs	r1, #1
 8009b24:	5499      	strb	r1, [r3, r2]
        goto error;
 8009b26:	e0b1      	b.n	8009c8c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d19f      	bne.n	8009a72 <HAL_SPI_TransmitReceive+0x18e>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2246      	movs	r2, #70	@ 0x46
 8009b36:	5a9b      	ldrh	r3, [r3, r2]
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d199      	bne.n	8009a72 <HAL_SPI_TransmitReceive+0x18e>
 8009b3e:	e089      	b.n	8009c54 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d005      	beq.n	8009b54 <HAL_SPI_TransmitReceive+0x270>
 8009b48:	2312      	movs	r3, #18
 8009b4a:	18fb      	adds	r3, r7, r3
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d000      	beq.n	8009b54 <HAL_SPI_TransmitReceive+0x270>
 8009b52:	e074      	b.n	8009c3e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	330c      	adds	r3, #12
 8009b5e:	7812      	ldrb	r2, [r2, #0]
 8009b60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b66:	1c5a      	adds	r2, r3, #1
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	3b01      	subs	r3, #1
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b7a:	e060      	b.n	8009c3e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	2202      	movs	r2, #2
 8009b84:	4013      	ands	r3, r2
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d11c      	bne.n	8009bc4 <HAL_SPI_TransmitReceive+0x2e0>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d017      	beq.n	8009bc4 <HAL_SPI_TransmitReceive+0x2e0>
 8009b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d114      	bne.n	8009bc4 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	330c      	adds	r3, #12
 8009ba4:	7812      	ldrb	r2, [r2, #0]
 8009ba6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bac:	1c5a      	adds	r2, r3, #1
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	4013      	ands	r3, r2
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d11e      	bne.n	8009c10 <HAL_SPI_TransmitReceive+0x32c>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2246      	movs	r2, #70	@ 0x46
 8009bd6:	5a9b      	ldrh	r3, [r3, r2]
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d018      	beq.n	8009c10 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	330c      	adds	r3, #12
 8009be4:	001a      	movs	r2, r3
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bea:	7812      	ldrb	r2, [r2, #0]
 8009bec:	b2d2      	uxtb	r2, r2
 8009bee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bf4:	1c5a      	adds	r2, r3, #1
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2246      	movs	r2, #70	@ 0x46
 8009bfe:	5a9b      	ldrh	r3, [r3, r2]
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	3b01      	subs	r3, #1
 8009c04:	b299      	uxth	r1, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2246      	movs	r2, #70	@ 0x46
 8009c0a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c10:	f7fc f8d8 	bl	8005dc4 <HAL_GetTick>
 8009c14:	0002      	movs	r2, r0
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d802      	bhi.n	8009c26 <HAL_SPI_TransmitReceive+0x342>
 8009c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c22:	3301      	adds	r3, #1
 8009c24:	d102      	bne.n	8009c2c <HAL_SPI_TransmitReceive+0x348>
 8009c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d108      	bne.n	8009c3e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8009c2c:	2323      	movs	r3, #35	@ 0x23
 8009c2e:	18fb      	adds	r3, r7, r3
 8009c30:	2203      	movs	r2, #3
 8009c32:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	225d      	movs	r2, #93	@ 0x5d
 8009c38:	2101      	movs	r1, #1
 8009c3a:	5499      	strb	r1, [r3, r2]
        goto error;
 8009c3c:	e026      	b.n	8009c8c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d199      	bne.n	8009b7c <HAL_SPI_TransmitReceive+0x298>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2246      	movs	r2, #70	@ 0x46
 8009c4c:	5a9b      	ldrh	r3, [r3, r2]
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d193      	bne.n	8009b7c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c54:	69fa      	ldr	r2, [r7, #28]
 8009c56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	0018      	movs	r0, r3
 8009c5c:	f000 f9b2 	bl	8009fc4 <SPI_EndRxTxTransaction>
 8009c60:	1e03      	subs	r3, r0, #0
 8009c62:	d006      	beq.n	8009c72 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8009c64:	2323      	movs	r3, #35	@ 0x23
 8009c66:	18fb      	adds	r3, r7, r3
 8009c68:	2201      	movs	r2, #1
 8009c6a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2220      	movs	r2, #32
 8009c70:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d004      	beq.n	8009c84 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8009c7a:	2323      	movs	r3, #35	@ 0x23
 8009c7c:	18fb      	adds	r3, r7, r3
 8009c7e:	2201      	movs	r2, #1
 8009c80:	701a      	strb	r2, [r3, #0]
 8009c82:	e003      	b.n	8009c8c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	225d      	movs	r2, #93	@ 0x5d
 8009c88:	2101      	movs	r1, #1
 8009c8a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	225c      	movs	r2, #92	@ 0x5c
 8009c90:	2100      	movs	r1, #0
 8009c92:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009c94:	2323      	movs	r3, #35	@ 0x23
 8009c96:	18fb      	adds	r3, r7, r3
 8009c98:	781b      	ldrb	r3, [r3, #0]
}
 8009c9a:	0018      	movs	r0, r3
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	b00a      	add	sp, #40	@ 0x28
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	46c0      	nop			@ (mov r8, r8)
 8009ca4:	ffffefff 	.word	0xffffefff

08009ca8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b088      	sub	sp, #32
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	603b      	str	r3, [r7, #0]
 8009cb4:	1dfb      	adds	r3, r7, #7
 8009cb6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009cb8:	f7fc f884 	bl	8005dc4 <HAL_GetTick>
 8009cbc:	0002      	movs	r2, r0
 8009cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc0:	1a9b      	subs	r3, r3, r2
 8009cc2:	683a      	ldr	r2, [r7, #0]
 8009cc4:	18d3      	adds	r3, r2, r3
 8009cc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009cc8:	f7fc f87c 	bl	8005dc4 <HAL_GetTick>
 8009ccc:	0003      	movs	r3, r0
 8009cce:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8009dbc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	015b      	lsls	r3, r3, #5
 8009cd6:	0d1b      	lsrs	r3, r3, #20
 8009cd8:	69fa      	ldr	r2, [r7, #28]
 8009cda:	4353      	muls	r3, r2
 8009cdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009cde:	e058      	b.n	8009d92 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	d055      	beq.n	8009d92 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009ce6:	f7fc f86d 	bl	8005dc4 <HAL_GetTick>
 8009cea:	0002      	movs	r2, r0
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	69fa      	ldr	r2, [r7, #28]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d902      	bls.n	8009cfc <SPI_WaitFlagStateUntilTimeout+0x54>
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d142      	bne.n	8009d82 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	21e0      	movs	r1, #224	@ 0xe0
 8009d08:	438a      	bics	r2, r1
 8009d0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	685a      	ldr	r2, [r3, #4]
 8009d10:	2382      	movs	r3, #130	@ 0x82
 8009d12:	005b      	lsls	r3, r3, #1
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d113      	bne.n	8009d40 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	689a      	ldr	r2, [r3, #8]
 8009d1c:	2380      	movs	r3, #128	@ 0x80
 8009d1e:	021b      	lsls	r3, r3, #8
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d005      	beq.n	8009d30 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	689a      	ldr	r2, [r3, #8]
 8009d28:	2380      	movs	r3, #128	@ 0x80
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d107      	bne.n	8009d40 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2140      	movs	r1, #64	@ 0x40
 8009d3c:	438a      	bics	r2, r1
 8009d3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d44:	2380      	movs	r3, #128	@ 0x80
 8009d46:	019b      	lsls	r3, r3, #6
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d110      	bne.n	8009d6e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	491a      	ldr	r1, [pc, #104]	@ (8009dc0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009d58:	400a      	ands	r2, r1
 8009d5a:	601a      	str	r2, [r3, #0]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2180      	movs	r1, #128	@ 0x80
 8009d68:	0189      	lsls	r1, r1, #6
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	225d      	movs	r2, #93	@ 0x5d
 8009d72:	2101      	movs	r1, #1
 8009d74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	225c      	movs	r2, #92	@ 0x5c
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	e017      	b.n	8009db2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	425a      	negs	r2, r3
 8009da2:	4153      	adcs	r3, r2
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	001a      	movs	r2, r3
 8009da8:	1dfb      	adds	r3, r7, #7
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d197      	bne.n	8009ce0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	0018      	movs	r0, r3
 8009db4:	46bd      	mov	sp, r7
 8009db6:	b008      	add	sp, #32
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	46c0      	nop			@ (mov r8, r8)
 8009dbc:	20000010 	.word	0x20000010
 8009dc0:	ffffdfff 	.word	0xffffdfff

08009dc4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b08a      	sub	sp, #40	@ 0x28
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
 8009dd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009dd2:	2317      	movs	r3, #23
 8009dd4:	18fb      	adds	r3, r7, r3
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009dda:	f7fb fff3 	bl	8005dc4 <HAL_GetTick>
 8009dde:	0002      	movs	r2, r0
 8009de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de2:	1a9b      	subs	r3, r3, r2
 8009de4:	683a      	ldr	r2, [r7, #0]
 8009de6:	18d3      	adds	r3, r2, r3
 8009de8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009dea:	f7fb ffeb 	bl	8005dc4 <HAL_GetTick>
 8009dee:	0003      	movs	r3, r0
 8009df0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	330c      	adds	r3, #12
 8009df8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009dfa:	4b41      	ldr	r3, [pc, #260]	@ (8009f00 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	0013      	movs	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	189b      	adds	r3, r3, r2
 8009e04:	00da      	lsls	r2, r3, #3
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	0d1b      	lsrs	r3, r3, #20
 8009e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e0c:	4353      	muls	r3, r2
 8009e0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009e10:	e068      	b.n	8009ee4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	23c0      	movs	r3, #192	@ 0xc0
 8009e16:	00db      	lsls	r3, r3, #3
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d10a      	bne.n	8009e32 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d107      	bne.n	8009e32 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	b2da      	uxtb	r2, r3
 8009e28:	2117      	movs	r1, #23
 8009e2a:	187b      	adds	r3, r7, r1
 8009e2c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009e2e:	187b      	adds	r3, r7, r1
 8009e30:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	3301      	adds	r3, #1
 8009e36:	d055      	beq.n	8009ee4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e38:	f7fb ffc4 	bl	8005dc4 <HAL_GetTick>
 8009e3c:	0002      	movs	r2, r0
 8009e3e:	6a3b      	ldr	r3, [r7, #32]
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d902      	bls.n	8009e4e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8009e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d142      	bne.n	8009ed4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	685a      	ldr	r2, [r3, #4]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	21e0      	movs	r1, #224	@ 0xe0
 8009e5a:	438a      	bics	r2, r1
 8009e5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	2382      	movs	r3, #130	@ 0x82
 8009e64:	005b      	lsls	r3, r3, #1
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d113      	bne.n	8009e92 <SPI_WaitFifoStateUntilTimeout+0xce>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	689a      	ldr	r2, [r3, #8]
 8009e6e:	2380      	movs	r3, #128	@ 0x80
 8009e70:	021b      	lsls	r3, r3, #8
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d005      	beq.n	8009e82 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	689a      	ldr	r2, [r3, #8]
 8009e7a:	2380      	movs	r3, #128	@ 0x80
 8009e7c:	00db      	lsls	r3, r3, #3
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d107      	bne.n	8009e92 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2140      	movs	r1, #64	@ 0x40
 8009e8e:	438a      	bics	r2, r1
 8009e90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009e96:	2380      	movs	r3, #128	@ 0x80
 8009e98:	019b      	lsls	r3, r3, #6
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d110      	bne.n	8009ec0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4916      	ldr	r1, [pc, #88]	@ (8009f04 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8009eaa:	400a      	ands	r2, r1
 8009eac:	601a      	str	r2, [r3, #0]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2180      	movs	r1, #128	@ 0x80
 8009eba:	0189      	lsls	r1, r1, #6
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	225d      	movs	r2, #93	@ 0x5d
 8009ec4:	2101      	movs	r1, #1
 8009ec6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	225c      	movs	r2, #92	@ 0x5c
 8009ecc:	2100      	movs	r1, #0
 8009ece:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	e010      	b.n	8009ef6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d101      	bne.n	8009ede <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8009eda:	2300      	movs	r3, #0
 8009edc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	4013      	ands	r3, r2
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d18e      	bne.n	8009e12 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	0018      	movs	r0, r3
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	b00a      	add	sp, #40	@ 0x28
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	46c0      	nop			@ (mov r8, r8)
 8009f00:	20000010 	.word	0x20000010
 8009f04:	ffffdfff 	.word	0xffffdfff

08009f08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af02      	add	r7, sp, #8
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	2382      	movs	r3, #130	@ 0x82
 8009f1a:	005b      	lsls	r3, r3, #1
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d113      	bne.n	8009f48 <SPI_EndRxTransaction+0x40>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	689a      	ldr	r2, [r3, #8]
 8009f24:	2380      	movs	r3, #128	@ 0x80
 8009f26:	021b      	lsls	r3, r3, #8
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d005      	beq.n	8009f38 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	689a      	ldr	r2, [r3, #8]
 8009f30:	2380      	movs	r3, #128	@ 0x80
 8009f32:	00db      	lsls	r3, r3, #3
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d107      	bne.n	8009f48 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2140      	movs	r1, #64	@ 0x40
 8009f44:	438a      	bics	r2, r1
 8009f46:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	9300      	str	r3, [sp, #0]
 8009f50:	0013      	movs	r3, r2
 8009f52:	2200      	movs	r2, #0
 8009f54:	2180      	movs	r1, #128	@ 0x80
 8009f56:	f7ff fea7 	bl	8009ca8 <SPI_WaitFlagStateUntilTimeout>
 8009f5a:	1e03      	subs	r3, r0, #0
 8009f5c:	d007      	beq.n	8009f6e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f62:	2220      	movs	r2, #32
 8009f64:	431a      	orrs	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	e026      	b.n	8009fbc <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	2382      	movs	r3, #130	@ 0x82
 8009f74:	005b      	lsls	r3, r3, #1
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d11f      	bne.n	8009fba <SPI_EndRxTransaction+0xb2>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	689a      	ldr	r2, [r3, #8]
 8009f7e:	2380      	movs	r3, #128	@ 0x80
 8009f80:	021b      	lsls	r3, r3, #8
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d005      	beq.n	8009f92 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	689a      	ldr	r2, [r3, #8]
 8009f8a:	2380      	movs	r3, #128	@ 0x80
 8009f8c:	00db      	lsls	r3, r3, #3
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d113      	bne.n	8009fba <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	23c0      	movs	r3, #192	@ 0xc0
 8009f96:	00d9      	lsls	r1, r3, #3
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	0013      	movs	r3, r2
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f7ff ff0f 	bl	8009dc4 <SPI_WaitFifoStateUntilTimeout>
 8009fa6:	1e03      	subs	r3, r0, #0
 8009fa8:	d007      	beq.n	8009fba <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fae:	2220      	movs	r2, #32
 8009fb0:	431a      	orrs	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	e000      	b.n	8009fbc <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	0018      	movs	r0, r3
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	b004      	add	sp, #16
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b086      	sub	sp, #24
 8009fc8:	af02      	add	r7, sp, #8
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	23c0      	movs	r3, #192	@ 0xc0
 8009fd4:	0159      	lsls	r1, r3, #5
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	0013      	movs	r3, r2
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f7ff fef0 	bl	8009dc4 <SPI_WaitFifoStateUntilTimeout>
 8009fe4:	1e03      	subs	r3, r0, #0
 8009fe6:	d007      	beq.n	8009ff8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fec:	2220      	movs	r2, #32
 8009fee:	431a      	orrs	r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	e027      	b.n	800a048 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	0013      	movs	r3, r2
 800a002:	2200      	movs	r2, #0
 800a004:	2180      	movs	r1, #128	@ 0x80
 800a006:	f7ff fe4f 	bl	8009ca8 <SPI_WaitFlagStateUntilTimeout>
 800a00a:	1e03      	subs	r3, r0, #0
 800a00c:	d007      	beq.n	800a01e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a012:	2220      	movs	r2, #32
 800a014:	431a      	orrs	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e014      	b.n	800a048 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a01e:	68ba      	ldr	r2, [r7, #8]
 800a020:	23c0      	movs	r3, #192	@ 0xc0
 800a022:	00d9      	lsls	r1, r3, #3
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	0013      	movs	r3, r2
 800a02c:	2200      	movs	r2, #0
 800a02e:	f7ff fec9 	bl	8009dc4 <SPI_WaitFifoStateUntilTimeout>
 800a032:	1e03      	subs	r3, r0, #0
 800a034:	d007      	beq.n	800a046 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a03a:	2220      	movs	r2, #32
 800a03c:	431a      	orrs	r2, r3
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a042:	2303      	movs	r3, #3
 800a044:	e000      	b.n	800a048 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	0018      	movs	r0, r3
 800a04a:	46bd      	mov	sp, r7
 800a04c:	b004      	add	sp, #16
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e04a      	b.n	800a0f8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	223d      	movs	r2, #61	@ 0x3d
 800a066:	5c9b      	ldrb	r3, [r3, r2]
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d107      	bne.n	800a07e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	223c      	movs	r2, #60	@ 0x3c
 800a072:	2100      	movs	r1, #0
 800a074:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	0018      	movs	r0, r3
 800a07a:	f7fb fb69 	bl	8005750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	223d      	movs	r2, #61	@ 0x3d
 800a082:	2102      	movs	r1, #2
 800a084:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	3304      	adds	r3, #4
 800a08e:	0019      	movs	r1, r3
 800a090:	0010      	movs	r0, r2
 800a092:	f000 f9b3 	bl	800a3fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2248      	movs	r2, #72	@ 0x48
 800a09a:	2101      	movs	r1, #1
 800a09c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	223e      	movs	r2, #62	@ 0x3e
 800a0a2:	2101      	movs	r1, #1
 800a0a4:	5499      	strb	r1, [r3, r2]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	223f      	movs	r2, #63	@ 0x3f
 800a0aa:	2101      	movs	r1, #1
 800a0ac:	5499      	strb	r1, [r3, r2]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2240      	movs	r2, #64	@ 0x40
 800a0b2:	2101      	movs	r1, #1
 800a0b4:	5499      	strb	r1, [r3, r2]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2241      	movs	r2, #65	@ 0x41
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	5499      	strb	r1, [r3, r2]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2242      	movs	r2, #66	@ 0x42
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	5499      	strb	r1, [r3, r2]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2243      	movs	r2, #67	@ 0x43
 800a0ca:	2101      	movs	r1, #1
 800a0cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2244      	movs	r2, #68	@ 0x44
 800a0d2:	2101      	movs	r1, #1
 800a0d4:	5499      	strb	r1, [r3, r2]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2245      	movs	r2, #69	@ 0x45
 800a0da:	2101      	movs	r1, #1
 800a0dc:	5499      	strb	r1, [r3, r2]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2246      	movs	r2, #70	@ 0x46
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	5499      	strb	r1, [r3, r2]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2247      	movs	r2, #71	@ 0x47
 800a0ea:	2101      	movs	r1, #1
 800a0ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	223d      	movs	r2, #61	@ 0x3d
 800a0f2:	2101      	movs	r1, #1
 800a0f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	0018      	movs	r0, r3
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	b002      	add	sp, #8
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	223d      	movs	r2, #61	@ 0x3d
 800a10c:	5c9b      	ldrb	r3, [r3, r2]
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b01      	cmp	r3, #1
 800a112:	d001      	beq.n	800a118 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	e03c      	b.n	800a192 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	223d      	movs	r2, #61	@ 0x3d
 800a11c:	2102      	movs	r1, #2
 800a11e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68da      	ldr	r2, [r3, #12]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2101      	movs	r1, #1
 800a12c:	430a      	orrs	r2, r1
 800a12e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a19      	ldr	r2, [pc, #100]	@ (800a19c <HAL_TIM_Base_Start_IT+0x9c>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d009      	beq.n	800a14e <HAL_TIM_Base_Start_IT+0x4e>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a18      	ldr	r2, [pc, #96]	@ (800a1a0 <HAL_TIM_Base_Start_IT+0xa0>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d004      	beq.n	800a14e <HAL_TIM_Base_Start_IT+0x4e>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a16      	ldr	r2, [pc, #88]	@ (800a1a4 <HAL_TIM_Base_Start_IT+0xa4>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d116      	bne.n	800a17c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	4a14      	ldr	r2, [pc, #80]	@ (800a1a8 <HAL_TIM_Base_Start_IT+0xa8>)
 800a156:	4013      	ands	r3, r2
 800a158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2b06      	cmp	r3, #6
 800a15e:	d016      	beq.n	800a18e <HAL_TIM_Base_Start_IT+0x8e>
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	2380      	movs	r3, #128	@ 0x80
 800a164:	025b      	lsls	r3, r3, #9
 800a166:	429a      	cmp	r2, r3
 800a168:	d011      	beq.n	800a18e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2101      	movs	r1, #1
 800a176:	430a      	orrs	r2, r1
 800a178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a17a:	e008      	b.n	800a18e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2101      	movs	r1, #1
 800a188:	430a      	orrs	r2, r1
 800a18a:	601a      	str	r2, [r3, #0]
 800a18c:	e000      	b.n	800a190 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a18e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	0018      	movs	r0, r3
 800a194:	46bd      	mov	sp, r7
 800a196:	b004      	add	sp, #16
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	46c0      	nop			@ (mov r8, r8)
 800a19c:	40012c00 	.word	0x40012c00
 800a1a0:	40000400 	.word	0x40000400
 800a1a4:	40014000 	.word	0x40014000
 800a1a8:	00010007 	.word	0x00010007

0800a1ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	2202      	movs	r2, #2
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	d021      	beq.n	800a210 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	d01d      	beq.n	800a210 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2203      	movs	r2, #3
 800a1da:	4252      	negs	r2, r2
 800a1dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	2203      	movs	r2, #3
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	d004      	beq.n	800a1fa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	0018      	movs	r0, r3
 800a1f4:	f000 f8ea 	bl	800a3cc <HAL_TIM_IC_CaptureCallback>
 800a1f8:	e007      	b.n	800a20a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	f000 f8dd 	bl	800a3bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	0018      	movs	r0, r3
 800a206:	f000 f8e9 	bl	800a3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	2204      	movs	r2, #4
 800a214:	4013      	ands	r3, r2
 800a216:	d022      	beq.n	800a25e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2204      	movs	r2, #4
 800a21c:	4013      	ands	r3, r2
 800a21e:	d01e      	beq.n	800a25e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2205      	movs	r2, #5
 800a226:	4252      	negs	r2, r2
 800a228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2202      	movs	r2, #2
 800a22e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699a      	ldr	r2, [r3, #24]
 800a236:	23c0      	movs	r3, #192	@ 0xc0
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4013      	ands	r3, r2
 800a23c:	d004      	beq.n	800a248 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	0018      	movs	r0, r3
 800a242:	f000 f8c3 	bl	800a3cc <HAL_TIM_IC_CaptureCallback>
 800a246:	e007      	b.n	800a258 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	0018      	movs	r0, r3
 800a24c:	f000 f8b6 	bl	800a3bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	0018      	movs	r0, r3
 800a254:	f000 f8c2 	bl	800a3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	2208      	movs	r2, #8
 800a262:	4013      	ands	r3, r2
 800a264:	d021      	beq.n	800a2aa <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2208      	movs	r2, #8
 800a26a:	4013      	ands	r3, r2
 800a26c:	d01d      	beq.n	800a2aa <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2209      	movs	r2, #9
 800a274:	4252      	negs	r2, r2
 800a276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2204      	movs	r2, #4
 800a27c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	69db      	ldr	r3, [r3, #28]
 800a284:	2203      	movs	r2, #3
 800a286:	4013      	ands	r3, r2
 800a288:	d004      	beq.n	800a294 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	0018      	movs	r0, r3
 800a28e:	f000 f89d 	bl	800a3cc <HAL_TIM_IC_CaptureCallback>
 800a292:	e007      	b.n	800a2a4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	0018      	movs	r0, r3
 800a298:	f000 f890 	bl	800a3bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	0018      	movs	r0, r3
 800a2a0:	f000 f89c 	bl	800a3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	2210      	movs	r2, #16
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	d022      	beq.n	800a2f8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2210      	movs	r2, #16
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	d01e      	beq.n	800a2f8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2211      	movs	r2, #17
 800a2c0:	4252      	negs	r2, r2
 800a2c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2208      	movs	r2, #8
 800a2c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	69da      	ldr	r2, [r3, #28]
 800a2d0:	23c0      	movs	r3, #192	@ 0xc0
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	d004      	beq.n	800a2e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	0018      	movs	r0, r3
 800a2dc:	f000 f876 	bl	800a3cc <HAL_TIM_IC_CaptureCallback>
 800a2e0:	e007      	b.n	800a2f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	0018      	movs	r0, r3
 800a2e6:	f000 f869 	bl	800a3bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	0018      	movs	r0, r3
 800a2ee:	f000 f875 	bl	800a3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	d00c      	beq.n	800a31a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2201      	movs	r2, #1
 800a304:	4013      	ands	r3, r2
 800a306:	d008      	beq.n	800a31a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2202      	movs	r2, #2
 800a30e:	4252      	negs	r2, r2
 800a310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	0018      	movs	r0, r3
 800a316:	f7f9 fca1 	bl	8003c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2280      	movs	r2, #128	@ 0x80
 800a31e:	4013      	ands	r3, r2
 800a320:	d104      	bne.n	800a32c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	2380      	movs	r3, #128	@ 0x80
 800a326:	019b      	lsls	r3, r3, #6
 800a328:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a32a:	d00b      	beq.n	800a344 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2280      	movs	r2, #128	@ 0x80
 800a330:	4013      	ands	r3, r2
 800a332:	d007      	beq.n	800a344 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a1e      	ldr	r2, [pc, #120]	@ (800a3b4 <HAL_TIM_IRQHandler+0x208>)
 800a33a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	0018      	movs	r0, r3
 800a340:	f000 f8e8 	bl	800a514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	2380      	movs	r3, #128	@ 0x80
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	4013      	ands	r3, r2
 800a34c:	d00b      	beq.n	800a366 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2280      	movs	r2, #128	@ 0x80
 800a352:	4013      	ands	r3, r2
 800a354:	d007      	beq.n	800a366 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a17      	ldr	r2, [pc, #92]	@ (800a3b8 <HAL_TIM_IRQHandler+0x20c>)
 800a35c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	0018      	movs	r0, r3
 800a362:	f000 f8df 	bl	800a524 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	2240      	movs	r2, #64	@ 0x40
 800a36a:	4013      	ands	r3, r2
 800a36c:	d00c      	beq.n	800a388 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2240      	movs	r2, #64	@ 0x40
 800a372:	4013      	ands	r3, r2
 800a374:	d008      	beq.n	800a388 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2241      	movs	r2, #65	@ 0x41
 800a37c:	4252      	negs	r2, r2
 800a37e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	0018      	movs	r0, r3
 800a384:	f000 f832 	bl	800a3ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	2220      	movs	r2, #32
 800a38c:	4013      	ands	r3, r2
 800a38e:	d00c      	beq.n	800a3aa <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2220      	movs	r2, #32
 800a394:	4013      	ands	r3, r2
 800a396:	d008      	beq.n	800a3aa <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2221      	movs	r2, #33	@ 0x21
 800a39e:	4252      	negs	r2, r2
 800a3a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	0018      	movs	r0, r3
 800a3a6:	f000 f8ad 	bl	800a504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3aa:	46c0      	nop			@ (mov r8, r8)
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	b004      	add	sp, #16
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	46c0      	nop			@ (mov r8, r8)
 800a3b4:	ffffdf7f 	.word	0xffffdf7f
 800a3b8:	fffffeff 	.word	0xfffffeff

0800a3bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3c4:	46c0      	nop			@ (mov r8, r8)
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	b002      	add	sp, #8
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3d4:	46c0      	nop			@ (mov r8, r8)
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	b002      	add	sp, #8
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3e4:	46c0      	nop			@ (mov r8, r8)
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	b002      	add	sp, #8
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3f4:	46c0      	nop			@ (mov r8, r8)
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	b002      	add	sp, #8
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a36      	ldr	r2, [pc, #216]	@ (800a4e8 <TIM_Base_SetConfig+0xec>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d003      	beq.n	800a41c <TIM_Base_SetConfig+0x20>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a35      	ldr	r2, [pc, #212]	@ (800a4ec <TIM_Base_SetConfig+0xf0>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d108      	bne.n	800a42e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2270      	movs	r2, #112	@ 0x70
 800a420:	4393      	bics	r3, r2
 800a422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a2d      	ldr	r2, [pc, #180]	@ (800a4e8 <TIM_Base_SetConfig+0xec>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d013      	beq.n	800a45e <TIM_Base_SetConfig+0x62>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a2c      	ldr	r2, [pc, #176]	@ (800a4ec <TIM_Base_SetConfig+0xf0>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d00f      	beq.n	800a45e <TIM_Base_SetConfig+0x62>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a2b      	ldr	r2, [pc, #172]	@ (800a4f0 <TIM_Base_SetConfig+0xf4>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d00b      	beq.n	800a45e <TIM_Base_SetConfig+0x62>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a2a      	ldr	r2, [pc, #168]	@ (800a4f4 <TIM_Base_SetConfig+0xf8>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d007      	beq.n	800a45e <TIM_Base_SetConfig+0x62>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	4a29      	ldr	r2, [pc, #164]	@ (800a4f8 <TIM_Base_SetConfig+0xfc>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d003      	beq.n	800a45e <TIM_Base_SetConfig+0x62>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a28      	ldr	r2, [pc, #160]	@ (800a4fc <TIM_Base_SetConfig+0x100>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d108      	bne.n	800a470 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	4a27      	ldr	r2, [pc, #156]	@ (800a500 <TIM_Base_SetConfig+0x104>)
 800a462:	4013      	ands	r3, r2
 800a464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2280      	movs	r2, #128	@ 0x80
 800a474:	4393      	bics	r3, r2
 800a476:	001a      	movs	r2, r3
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	689a      	ldr	r2, [r3, #8]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a13      	ldr	r2, [pc, #76]	@ (800a4e8 <TIM_Base_SetConfig+0xec>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d00b      	beq.n	800a4b6 <TIM_Base_SetConfig+0xba>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a14      	ldr	r2, [pc, #80]	@ (800a4f4 <TIM_Base_SetConfig+0xf8>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d007      	beq.n	800a4b6 <TIM_Base_SetConfig+0xba>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a13      	ldr	r2, [pc, #76]	@ (800a4f8 <TIM_Base_SetConfig+0xfc>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d003      	beq.n	800a4b6 <TIM_Base_SetConfig+0xba>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a12      	ldr	r2, [pc, #72]	@ (800a4fc <TIM_Base_SetConfig+0x100>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d103      	bne.n	800a4be <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	691a      	ldr	r2, [r3, #16]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	691b      	ldr	r3, [r3, #16]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d106      	bne.n	800a4de <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	4393      	bics	r3, r2
 800a4d8:	001a      	movs	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	611a      	str	r2, [r3, #16]
  }
}
 800a4de:	46c0      	nop			@ (mov r8, r8)
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	b004      	add	sp, #16
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	46c0      	nop			@ (mov r8, r8)
 800a4e8:	40012c00 	.word	0x40012c00
 800a4ec:	40000400 	.word	0x40000400
 800a4f0:	40002000 	.word	0x40002000
 800a4f4:	40014000 	.word	0x40014000
 800a4f8:	40014400 	.word	0x40014400
 800a4fc:	40014800 	.word	0x40014800
 800a500:	fffffcff 	.word	0xfffffcff

0800a504 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a50c:	46c0      	nop			@ (mov r8, r8)
 800a50e:	46bd      	mov	sp, r7
 800a510:	b002      	add	sp, #8
 800a512:	bd80      	pop	{r7, pc}

0800a514 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a51c:	46c0      	nop			@ (mov r8, r8)
 800a51e:	46bd      	mov	sp, r7
 800a520:	b002      	add	sp, #8
 800a522:	bd80      	pop	{r7, pc}

0800a524 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a52c:	46c0      	nop			@ (mov r8, r8)
 800a52e:	46bd      	mov	sp, r7
 800a530:	b002      	add	sp, #8
 800a532:	bd80      	pop	{r7, pc}

0800a534 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d101      	bne.n	800a546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e046      	b.n	800a5d4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2288      	movs	r2, #136	@ 0x88
 800a54a:	589b      	ldr	r3, [r3, r2]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d107      	bne.n	800a560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2284      	movs	r2, #132	@ 0x84
 800a554:	2100      	movs	r1, #0
 800a556:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	0018      	movs	r0, r3
 800a55c:	f7fb f920 	bl	80057a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2288      	movs	r2, #136	@ 0x88
 800a564:	2124      	movs	r1, #36	@ 0x24
 800a566:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2101      	movs	r1, #1
 800a574:	438a      	bics	r2, r1
 800a576:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d003      	beq.n	800a588 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	0018      	movs	r0, r3
 800a584:	f000 fe0c 	bl	800b1a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	0018      	movs	r0, r3
 800a58c:	f000 fc64 	bl	800ae58 <UART_SetConfig>
 800a590:	0003      	movs	r3, r0
 800a592:	2b01      	cmp	r3, #1
 800a594:	d101      	bne.n	800a59a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e01c      	b.n	800a5d4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	490d      	ldr	r1, [pc, #52]	@ (800a5dc <HAL_UART_Init+0xa8>)
 800a5a6:	400a      	ands	r2, r1
 800a5a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	689a      	ldr	r2, [r3, #8]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	212a      	movs	r1, #42	@ 0x2a
 800a5b6:	438a      	bics	r2, r1
 800a5b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2101      	movs	r1, #1
 800a5c6:	430a      	orrs	r2, r1
 800a5c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	0018      	movs	r0, r3
 800a5ce:	f000 fe9b 	bl	800b308 <UART_CheckIdleState>
 800a5d2:	0003      	movs	r3, r0
}
 800a5d4:	0018      	movs	r0, r3
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	b002      	add	sp, #8
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	ffffb7ff 	.word	0xffffb7ff

0800a5e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	1dbb      	adds	r3, r7, #6
 800a5ec:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2288      	movs	r2, #136	@ 0x88
 800a5f2:	589b      	ldr	r3, [r3, r2]
 800a5f4:	2b20      	cmp	r3, #32
 800a5f6:	d000      	beq.n	800a5fa <HAL_UART_Transmit_DMA+0x1a>
 800a5f8:	e079      	b.n	800a6ee <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d003      	beq.n	800a608 <HAL_UART_Transmit_DMA+0x28>
 800a600:	1dbb      	adds	r3, r7, #6
 800a602:	881b      	ldrh	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d101      	bne.n	800a60c <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e071      	b.n	800a6f0 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	689a      	ldr	r2, [r3, #8]
 800a610:	2380      	movs	r3, #128	@ 0x80
 800a612:	015b      	lsls	r3, r3, #5
 800a614:	429a      	cmp	r2, r3
 800a616:	d109      	bne.n	800a62c <HAL_UART_Transmit_DMA+0x4c>
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	691b      	ldr	r3, [r3, #16]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d105      	bne.n	800a62c <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2201      	movs	r2, #1
 800a624:	4013      	ands	r3, r2
 800a626:	d001      	beq.n	800a62c <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	e061      	b.n	800a6f0 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	1dba      	adds	r2, r7, #6
 800a636:	2154      	movs	r1, #84	@ 0x54
 800a638:	8812      	ldrh	r2, [r2, #0]
 800a63a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	1dba      	adds	r2, r7, #6
 800a640:	2156      	movs	r1, #86	@ 0x56
 800a642:	8812      	ldrh	r2, [r2, #0]
 800a644:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2290      	movs	r2, #144	@ 0x90
 800a64a:	2100      	movs	r1, #0
 800a64c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2288      	movs	r2, #136	@ 0x88
 800a652:	2121      	movs	r1, #33	@ 0x21
 800a654:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d028      	beq.n	800a6b0 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a662:	4a25      	ldr	r2, [pc, #148]	@ (800a6f8 <HAL_UART_Transmit_DMA+0x118>)
 800a664:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a66a:	4a24      	ldr	r2, [pc, #144]	@ (800a6fc <HAL_UART_Transmit_DMA+0x11c>)
 800a66c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a672:	4a23      	ldr	r2, [pc, #140]	@ (800a700 <HAL_UART_Transmit_DMA+0x120>)
 800a674:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a67a:	2200      	movs	r2, #0
 800a67c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a686:	0019      	movs	r1, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	3328      	adds	r3, #40	@ 0x28
 800a68e:	001a      	movs	r2, r3
 800a690:	1dbb      	adds	r3, r7, #6
 800a692:	881b      	ldrh	r3, [r3, #0]
 800a694:	f7fc fb10 	bl	8006cb8 <HAL_DMA_Start_IT>
 800a698:	1e03      	subs	r3, r0, #0
 800a69a:	d009      	beq.n	800a6b0 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2290      	movs	r2, #144	@ 0x90
 800a6a0:	2110      	movs	r1, #16
 800a6a2:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2288      	movs	r2, #136	@ 0x88
 800a6a8:	2120      	movs	r1, #32
 800a6aa:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e01f      	b.n	800a6f0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2240      	movs	r2, #64	@ 0x40
 800a6b6:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a6bc:	613b      	str	r3, [r7, #16]
  return(result);
 800a6be:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a6c0:	61fb      	str	r3, [r7, #28]
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	f383 8810 	msr	PRIMASK, r3
}
 800a6cc:	46c0      	nop			@ (mov r8, r8)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	689a      	ldr	r2, [r3, #8]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	2180      	movs	r1, #128	@ 0x80
 800a6da:	430a      	orrs	r2, r1
 800a6dc:	609a      	str	r2, [r3, #8]
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	f383 8810 	msr	PRIMASK, r3
}
 800a6e8:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	e000      	b.n	800a6f0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800a6ee:	2302      	movs	r3, #2
  }
}
 800a6f0:	0018      	movs	r0, r3
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	b008      	add	sp, #32
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	0800b7d5 	.word	0x0800b7d5
 800a6fc:	0800b86d 	.word	0x0800b86d
 800a700:	0800b9ff 	.word	0x0800b9ff

0800a704 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b088      	sub	sp, #32
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	1dbb      	adds	r3, r7, #6
 800a710:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	228c      	movs	r2, #140	@ 0x8c
 800a716:	589b      	ldr	r3, [r3, r2]
 800a718:	2b20      	cmp	r3, #32
 800a71a:	d145      	bne.n	800a7a8 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <HAL_UART_Receive_DMA+0x26>
 800a722:	1dbb      	adds	r3, r7, #6
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d101      	bne.n	800a72e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e03d      	b.n	800a7aa <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	689a      	ldr	r2, [r3, #8]
 800a732:	2380      	movs	r3, #128	@ 0x80
 800a734:	015b      	lsls	r3, r3, #5
 800a736:	429a      	cmp	r2, r3
 800a738:	d109      	bne.n	800a74e <HAL_UART_Receive_DMA+0x4a>
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d105      	bne.n	800a74e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	2201      	movs	r2, #1
 800a746:	4013      	ands	r3, r2
 800a748:	d001      	beq.n	800a74e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e02d      	b.n	800a7aa <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	685a      	ldr	r2, [r3, #4]
 800a75a:	2380      	movs	r3, #128	@ 0x80
 800a75c:	041b      	lsls	r3, r3, #16
 800a75e:	4013      	ands	r3, r2
 800a760:	d019      	beq.n	800a796 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a762:	f3ef 8310 	mrs	r3, PRIMASK
 800a766:	613b      	str	r3, [r7, #16]
  return(result);
 800a768:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a76a:	61fb      	str	r3, [r7, #28]
 800a76c:	2301      	movs	r3, #1
 800a76e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	f383 8810 	msr	PRIMASK, r3
}
 800a776:	46c0      	nop			@ (mov r8, r8)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2180      	movs	r1, #128	@ 0x80
 800a784:	04c9      	lsls	r1, r1, #19
 800a786:	430a      	orrs	r2, r1
 800a788:	601a      	str	r2, [r3, #0]
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	f383 8810 	msr	PRIMASK, r3
}
 800a794:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a796:	1dbb      	adds	r3, r7, #6
 800a798:	881a      	ldrh	r2, [r3, #0]
 800a79a:	68b9      	ldr	r1, [r7, #8]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	0018      	movs	r0, r3
 800a7a0:	f000 fecc 	bl	800b53c <UART_Start_Receive_DMA>
 800a7a4:	0003      	movs	r3, r0
 800a7a6:	e000      	b.n	800a7aa <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800a7a8:	2302      	movs	r3, #2
  }
}
 800a7aa:	0018      	movs	r0, r3
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	b008      	add	sp, #32
 800a7b0:	bd80      	pop	{r7, pc}
	...

0800a7b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a7b4:	b5b0      	push	{r4, r5, r7, lr}
 800a7b6:	b0aa      	sub	sp, #168	@ 0xa8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	69db      	ldr	r3, [r3, #28]
 800a7c2:	22a4      	movs	r2, #164	@ 0xa4
 800a7c4:	18b9      	adds	r1, r7, r2
 800a7c6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	20a0      	movs	r0, #160	@ 0xa0
 800a7d0:	1839      	adds	r1, r7, r0
 800a7d2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	249c      	movs	r4, #156	@ 0x9c
 800a7dc:	1939      	adds	r1, r7, r4
 800a7de:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a7e0:	0011      	movs	r1, r2
 800a7e2:	18bb      	adds	r3, r7, r2
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4aa2      	ldr	r2, [pc, #648]	@ (800aa70 <HAL_UART_IRQHandler+0x2bc>)
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	2298      	movs	r2, #152	@ 0x98
 800a7ec:	18bd      	adds	r5, r7, r2
 800a7ee:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800a7f0:	18bb      	adds	r3, r7, r2
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d11a      	bne.n	800a82e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a7f8:	187b      	adds	r3, r7, r1
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2220      	movs	r2, #32
 800a7fe:	4013      	ands	r3, r2
 800a800:	d015      	beq.n	800a82e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a802:	183b      	adds	r3, r7, r0
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2220      	movs	r2, #32
 800a808:	4013      	ands	r3, r2
 800a80a:	d105      	bne.n	800a818 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a80c:	193b      	adds	r3, r7, r4
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	2380      	movs	r3, #128	@ 0x80
 800a812:	055b      	lsls	r3, r3, #21
 800a814:	4013      	ands	r3, r2
 800a816:	d00a      	beq.n	800a82e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d100      	bne.n	800a822 <HAL_UART_IRQHandler+0x6e>
 800a820:	e2dc      	b.n	800addc <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	0010      	movs	r0, r2
 800a82a:	4798      	blx	r3
      }
      return;
 800a82c:	e2d6      	b.n	800addc <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a82e:	2398      	movs	r3, #152	@ 0x98
 800a830:	18fb      	adds	r3, r7, r3
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d100      	bne.n	800a83a <HAL_UART_IRQHandler+0x86>
 800a838:	e122      	b.n	800aa80 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a83a:	239c      	movs	r3, #156	@ 0x9c
 800a83c:	18fb      	adds	r3, r7, r3
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a8c      	ldr	r2, [pc, #560]	@ (800aa74 <HAL_UART_IRQHandler+0x2c0>)
 800a842:	4013      	ands	r3, r2
 800a844:	d106      	bne.n	800a854 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a846:	23a0      	movs	r3, #160	@ 0xa0
 800a848:	18fb      	adds	r3, r7, r3
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a8a      	ldr	r2, [pc, #552]	@ (800aa78 <HAL_UART_IRQHandler+0x2c4>)
 800a84e:	4013      	ands	r3, r2
 800a850:	d100      	bne.n	800a854 <HAL_UART_IRQHandler+0xa0>
 800a852:	e115      	b.n	800aa80 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a854:	23a4      	movs	r3, #164	@ 0xa4
 800a856:	18fb      	adds	r3, r7, r3
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2201      	movs	r2, #1
 800a85c:	4013      	ands	r3, r2
 800a85e:	d012      	beq.n	800a886 <HAL_UART_IRQHandler+0xd2>
 800a860:	23a0      	movs	r3, #160	@ 0xa0
 800a862:	18fb      	adds	r3, r7, r3
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	2380      	movs	r3, #128	@ 0x80
 800a868:	005b      	lsls	r3, r3, #1
 800a86a:	4013      	ands	r3, r2
 800a86c:	d00b      	beq.n	800a886 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2201      	movs	r2, #1
 800a874:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2290      	movs	r2, #144	@ 0x90
 800a87a:	589b      	ldr	r3, [r3, r2]
 800a87c:	2201      	movs	r2, #1
 800a87e:	431a      	orrs	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2190      	movs	r1, #144	@ 0x90
 800a884:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a886:	23a4      	movs	r3, #164	@ 0xa4
 800a888:	18fb      	adds	r3, r7, r3
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2202      	movs	r2, #2
 800a88e:	4013      	ands	r3, r2
 800a890:	d011      	beq.n	800a8b6 <HAL_UART_IRQHandler+0x102>
 800a892:	239c      	movs	r3, #156	@ 0x9c
 800a894:	18fb      	adds	r3, r7, r3
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2201      	movs	r2, #1
 800a89a:	4013      	ands	r3, r2
 800a89c:	d00b      	beq.n	800a8b6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2290      	movs	r2, #144	@ 0x90
 800a8aa:	589b      	ldr	r3, [r3, r2]
 800a8ac:	2204      	movs	r2, #4
 800a8ae:	431a      	orrs	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2190      	movs	r1, #144	@ 0x90
 800a8b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8b6:	23a4      	movs	r3, #164	@ 0xa4
 800a8b8:	18fb      	adds	r3, r7, r3
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2204      	movs	r2, #4
 800a8be:	4013      	ands	r3, r2
 800a8c0:	d011      	beq.n	800a8e6 <HAL_UART_IRQHandler+0x132>
 800a8c2:	239c      	movs	r3, #156	@ 0x9c
 800a8c4:	18fb      	adds	r3, r7, r3
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	4013      	ands	r3, r2
 800a8cc:	d00b      	beq.n	800a8e6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2204      	movs	r2, #4
 800a8d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2290      	movs	r2, #144	@ 0x90
 800a8da:	589b      	ldr	r3, [r3, r2]
 800a8dc:	2202      	movs	r2, #2
 800a8de:	431a      	orrs	r2, r3
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2190      	movs	r1, #144	@ 0x90
 800a8e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a8e6:	23a4      	movs	r3, #164	@ 0xa4
 800a8e8:	18fb      	adds	r3, r7, r3
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2208      	movs	r2, #8
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	d017      	beq.n	800a922 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a8f2:	23a0      	movs	r3, #160	@ 0xa0
 800a8f4:	18fb      	adds	r3, r7, r3
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2220      	movs	r2, #32
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	d105      	bne.n	800a90a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a8fe:	239c      	movs	r3, #156	@ 0x9c
 800a900:	18fb      	adds	r3, r7, r3
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a5b      	ldr	r2, [pc, #364]	@ (800aa74 <HAL_UART_IRQHandler+0x2c0>)
 800a906:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a908:	d00b      	beq.n	800a922 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2208      	movs	r2, #8
 800a910:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2290      	movs	r2, #144	@ 0x90
 800a916:	589b      	ldr	r3, [r3, r2]
 800a918:	2208      	movs	r2, #8
 800a91a:	431a      	orrs	r2, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2190      	movs	r1, #144	@ 0x90
 800a920:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a922:	23a4      	movs	r3, #164	@ 0xa4
 800a924:	18fb      	adds	r3, r7, r3
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	2380      	movs	r3, #128	@ 0x80
 800a92a:	011b      	lsls	r3, r3, #4
 800a92c:	4013      	ands	r3, r2
 800a92e:	d013      	beq.n	800a958 <HAL_UART_IRQHandler+0x1a4>
 800a930:	23a0      	movs	r3, #160	@ 0xa0
 800a932:	18fb      	adds	r3, r7, r3
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	2380      	movs	r3, #128	@ 0x80
 800a938:	04db      	lsls	r3, r3, #19
 800a93a:	4013      	ands	r3, r2
 800a93c:	d00c      	beq.n	800a958 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2280      	movs	r2, #128	@ 0x80
 800a944:	0112      	lsls	r2, r2, #4
 800a946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2290      	movs	r2, #144	@ 0x90
 800a94c:	589b      	ldr	r3, [r3, r2]
 800a94e:	2220      	movs	r2, #32
 800a950:	431a      	orrs	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2190      	movs	r1, #144	@ 0x90
 800a956:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2290      	movs	r2, #144	@ 0x90
 800a95c:	589b      	ldr	r3, [r3, r2]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d100      	bne.n	800a964 <HAL_UART_IRQHandler+0x1b0>
 800a962:	e23d      	b.n	800ade0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a964:	23a4      	movs	r3, #164	@ 0xa4
 800a966:	18fb      	adds	r3, r7, r3
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2220      	movs	r2, #32
 800a96c:	4013      	ands	r3, r2
 800a96e:	d015      	beq.n	800a99c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a970:	23a0      	movs	r3, #160	@ 0xa0
 800a972:	18fb      	adds	r3, r7, r3
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2220      	movs	r2, #32
 800a978:	4013      	ands	r3, r2
 800a97a:	d106      	bne.n	800a98a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a97c:	239c      	movs	r3, #156	@ 0x9c
 800a97e:	18fb      	adds	r3, r7, r3
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	2380      	movs	r3, #128	@ 0x80
 800a984:	055b      	lsls	r3, r3, #21
 800a986:	4013      	ands	r3, r2
 800a988:	d008      	beq.n	800a99c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d004      	beq.n	800a99c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	0010      	movs	r0, r2
 800a99a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2290      	movs	r2, #144	@ 0x90
 800a9a0:	589b      	ldr	r3, [r3, r2]
 800a9a2:	2194      	movs	r1, #148	@ 0x94
 800a9a4:	187a      	adds	r2, r7, r1
 800a9a6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	2240      	movs	r2, #64	@ 0x40
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	2b40      	cmp	r3, #64	@ 0x40
 800a9b4:	d004      	beq.n	800a9c0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a9b6:	187b      	adds	r3, r7, r1
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2228      	movs	r2, #40	@ 0x28
 800a9bc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a9be:	d04c      	beq.n	800aa5a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	0018      	movs	r0, r3
 800a9c4:	f000 fea0 	bl	800b708 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	2240      	movs	r2, #64	@ 0x40
 800a9d0:	4013      	ands	r3, r2
 800a9d2:	2b40      	cmp	r3, #64	@ 0x40
 800a9d4:	d13c      	bne.n	800aa50 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9d6:	f3ef 8310 	mrs	r3, PRIMASK
 800a9da:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800a9dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9de:	2090      	movs	r0, #144	@ 0x90
 800a9e0:	183a      	adds	r2, r7, r0
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9ea:	f383 8810 	msr	PRIMASK, r3
}
 800a9ee:	46c0      	nop			@ (mov r8, r8)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	689a      	ldr	r2, [r3, #8]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2140      	movs	r1, #64	@ 0x40
 800a9fc:	438a      	bics	r2, r1
 800a9fe:	609a      	str	r2, [r3, #8]
 800aa00:	183b      	adds	r3, r7, r0
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa08:	f383 8810 	msr	PRIMASK, r3
}
 800aa0c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2280      	movs	r2, #128	@ 0x80
 800aa12:	589b      	ldr	r3, [r3, r2]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d016      	beq.n	800aa46 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2280      	movs	r2, #128	@ 0x80
 800aa1c:	589b      	ldr	r3, [r3, r2]
 800aa1e:	4a17      	ldr	r2, [pc, #92]	@ (800aa7c <HAL_UART_IRQHandler+0x2c8>)
 800aa20:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2280      	movs	r2, #128	@ 0x80
 800aa26:	589b      	ldr	r3, [r3, r2]
 800aa28:	0018      	movs	r0, r3
 800aa2a:	f7fc fa2d 	bl	8006e88 <HAL_DMA_Abort_IT>
 800aa2e:	1e03      	subs	r3, r0, #0
 800aa30:	d01c      	beq.n	800aa6c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2280      	movs	r2, #128	@ 0x80
 800aa36:	589b      	ldr	r3, [r3, r2]
 800aa38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	2180      	movs	r1, #128	@ 0x80
 800aa3e:	5852      	ldr	r2, [r2, r1]
 800aa40:	0010      	movs	r0, r2
 800aa42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa44:	e012      	b.n	800aa6c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	0018      	movs	r0, r3
 800aa4a:	f000 f9f1 	bl	800ae30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa4e:	e00d      	b.n	800aa6c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	0018      	movs	r0, r3
 800aa54:	f000 f9ec 	bl	800ae30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa58:	e008      	b.n	800aa6c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	0018      	movs	r0, r3
 800aa5e:	f000 f9e7 	bl	800ae30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2290      	movs	r2, #144	@ 0x90
 800aa66:	2100      	movs	r1, #0
 800aa68:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800aa6a:	e1b9      	b.n	800ade0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa6c:	46c0      	nop			@ (mov r8, r8)
    return;
 800aa6e:	e1b7      	b.n	800ade0 <HAL_UART_IRQHandler+0x62c>
 800aa70:	0000080f 	.word	0x0000080f
 800aa74:	10000001 	.word	0x10000001
 800aa78:	04000120 	.word	0x04000120
 800aa7c:	0800ba85 	.word	0x0800ba85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d000      	beq.n	800aa8a <HAL_UART_IRQHandler+0x2d6>
 800aa88:	e13e      	b.n	800ad08 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aa8a:	23a4      	movs	r3, #164	@ 0xa4
 800aa8c:	18fb      	adds	r3, r7, r3
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2210      	movs	r2, #16
 800aa92:	4013      	ands	r3, r2
 800aa94:	d100      	bne.n	800aa98 <HAL_UART_IRQHandler+0x2e4>
 800aa96:	e137      	b.n	800ad08 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aa98:	23a0      	movs	r3, #160	@ 0xa0
 800aa9a:	18fb      	adds	r3, r7, r3
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2210      	movs	r2, #16
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	d100      	bne.n	800aaa6 <HAL_UART_IRQHandler+0x2f2>
 800aaa4:	e130      	b.n	800ad08 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2210      	movs	r2, #16
 800aaac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	2240      	movs	r2, #64	@ 0x40
 800aab6:	4013      	ands	r3, r2
 800aab8:	2b40      	cmp	r3, #64	@ 0x40
 800aaba:	d000      	beq.n	800aabe <HAL_UART_IRQHandler+0x30a>
 800aabc:	e0a4      	b.n	800ac08 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2280      	movs	r2, #128	@ 0x80
 800aac2:	589b      	ldr	r3, [r3, r2]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	685a      	ldr	r2, [r3, #4]
 800aac8:	217e      	movs	r1, #126	@ 0x7e
 800aaca:	187b      	adds	r3, r7, r1
 800aacc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800aace:	187b      	adds	r3, r7, r1
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d100      	bne.n	800aad8 <HAL_UART_IRQHandler+0x324>
 800aad6:	e185      	b.n	800ade4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	225c      	movs	r2, #92	@ 0x5c
 800aadc:	5a9b      	ldrh	r3, [r3, r2]
 800aade:	187a      	adds	r2, r7, r1
 800aae0:	8812      	ldrh	r2, [r2, #0]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d300      	bcc.n	800aae8 <HAL_UART_IRQHandler+0x334>
 800aae6:	e17d      	b.n	800ade4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	187a      	adds	r2, r7, r1
 800aaec:	215e      	movs	r1, #94	@ 0x5e
 800aaee:	8812      	ldrh	r2, [r2, #0]
 800aaf0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2280      	movs	r2, #128	@ 0x80
 800aaf6:	589b      	ldr	r3, [r3, r2]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2220      	movs	r2, #32
 800aafe:	4013      	ands	r3, r2
 800ab00:	d170      	bne.n	800abe4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab02:	f3ef 8310 	mrs	r3, PRIMASK
 800ab06:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800ab08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab0a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab12:	f383 8810 	msr	PRIMASK, r3
}
 800ab16:	46c0      	nop			@ (mov r8, r8)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	49b4      	ldr	r1, [pc, #720]	@ (800adf4 <HAL_UART_IRQHandler+0x640>)
 800ab24:	400a      	ands	r2, r1
 800ab26:	601a      	str	r2, [r3, #0]
 800ab28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ab2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2e:	f383 8810 	msr	PRIMASK, r3
}
 800ab32:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab34:	f3ef 8310 	mrs	r3, PRIMASK
 800ab38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800ab3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab3c:	677b      	str	r3, [r7, #116]	@ 0x74
 800ab3e:	2301      	movs	r3, #1
 800ab40:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab44:	f383 8810 	msr	PRIMASK, r3
}
 800ab48:	46c0      	nop			@ (mov r8, r8)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	689a      	ldr	r2, [r3, #8]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2101      	movs	r1, #1
 800ab56:	438a      	bics	r2, r1
 800ab58:	609a      	str	r2, [r3, #8]
 800ab5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ab5c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab60:	f383 8810 	msr	PRIMASK, r3
}
 800ab64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab66:	f3ef 8310 	mrs	r3, PRIMASK
 800ab6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800ab6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab6e:	673b      	str	r3, [r7, #112]	@ 0x70
 800ab70:	2301      	movs	r3, #1
 800ab72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab76:	f383 8810 	msr	PRIMASK, r3
}
 800ab7a:	46c0      	nop			@ (mov r8, r8)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	689a      	ldr	r2, [r3, #8]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2140      	movs	r1, #64	@ 0x40
 800ab88:	438a      	bics	r2, r1
 800ab8a:	609a      	str	r2, [r3, #8]
 800ab8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab8e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab92:	f383 8810 	msr	PRIMASK, r3
}
 800ab96:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	228c      	movs	r2, #140	@ 0x8c
 800ab9c:	2120      	movs	r1, #32
 800ab9e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aba6:	f3ef 8310 	mrs	r3, PRIMASK
 800abaa:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800abac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800abb0:	2301      	movs	r3, #1
 800abb2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800abb6:	f383 8810 	msr	PRIMASK, r3
}
 800abba:	46c0      	nop			@ (mov r8, r8)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2110      	movs	r1, #16
 800abc8:	438a      	bics	r2, r1
 800abca:	601a      	str	r2, [r3, #0]
 800abcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800abd2:	f383 8810 	msr	PRIMASK, r3
}
 800abd6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2280      	movs	r2, #128	@ 0x80
 800abdc:	589b      	ldr	r3, [r3, r2]
 800abde:	0018      	movs	r0, r3
 800abe0:	f7fc f8f0 	bl	8006dc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2202      	movs	r2, #2
 800abe8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	225c      	movs	r2, #92	@ 0x5c
 800abee:	5a9a      	ldrh	r2, [r3, r2]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	215e      	movs	r1, #94	@ 0x5e
 800abf4:	5a5b      	ldrh	r3, [r3, r1]
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	0011      	movs	r1, r2
 800ac00:	0018      	movs	r0, r3
 800ac02:	f000 f91d 	bl	800ae40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac06:	e0ed      	b.n	800ade4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	225c      	movs	r2, #92	@ 0x5c
 800ac0c:	5a99      	ldrh	r1, [r3, r2]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	225e      	movs	r2, #94	@ 0x5e
 800ac12:	5a9b      	ldrh	r3, [r3, r2]
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	208e      	movs	r0, #142	@ 0x8e
 800ac18:	183b      	adds	r3, r7, r0
 800ac1a:	1a8a      	subs	r2, r1, r2
 800ac1c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	225e      	movs	r2, #94	@ 0x5e
 800ac22:	5a9b      	ldrh	r3, [r3, r2]
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d100      	bne.n	800ac2c <HAL_UART_IRQHandler+0x478>
 800ac2a:	e0dd      	b.n	800ade8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800ac2c:	183b      	adds	r3, r7, r0
 800ac2e:	881b      	ldrh	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d100      	bne.n	800ac36 <HAL_UART_IRQHandler+0x482>
 800ac34:	e0d8      	b.n	800ade8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac36:	f3ef 8310 	mrs	r3, PRIMASK
 800ac3a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac3e:	2488      	movs	r4, #136	@ 0x88
 800ac40:	193a      	adds	r2, r7, r4
 800ac42:	6013      	str	r3, [r2, #0]
 800ac44:	2301      	movs	r3, #1
 800ac46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	f383 8810 	msr	PRIMASK, r3
}
 800ac4e:	46c0      	nop			@ (mov r8, r8)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4967      	ldr	r1, [pc, #412]	@ (800adf8 <HAL_UART_IRQHandler+0x644>)
 800ac5c:	400a      	ands	r2, r1
 800ac5e:	601a      	str	r2, [r3, #0]
 800ac60:	193b      	adds	r3, r7, r4
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	f383 8810 	msr	PRIMASK, r3
}
 800ac6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac6e:	f3ef 8310 	mrs	r3, PRIMASK
 800ac72:	61bb      	str	r3, [r7, #24]
  return(result);
 800ac74:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac76:	2484      	movs	r4, #132	@ 0x84
 800ac78:	193a      	adds	r2, r7, r4
 800ac7a:	6013      	str	r3, [r2, #0]
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	f383 8810 	msr	PRIMASK, r3
}
 800ac86:	46c0      	nop			@ (mov r8, r8)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	689a      	ldr	r2, [r3, #8]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	495a      	ldr	r1, [pc, #360]	@ (800adfc <HAL_UART_IRQHandler+0x648>)
 800ac94:	400a      	ands	r2, r1
 800ac96:	609a      	str	r2, [r3, #8]
 800ac98:	193b      	adds	r3, r7, r4
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac9e:	6a3b      	ldr	r3, [r7, #32]
 800aca0:	f383 8810 	msr	PRIMASK, r3
}
 800aca4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	228c      	movs	r2, #140	@ 0x8c
 800acaa:	2120      	movs	r1, #32
 800acac:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acba:	f3ef 8310 	mrs	r3, PRIMASK
 800acbe:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800acc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acc2:	2480      	movs	r4, #128	@ 0x80
 800acc4:	193a      	adds	r2, r7, r4
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	2301      	movs	r3, #1
 800acca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800accc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acce:	f383 8810 	msr	PRIMASK, r3
}
 800acd2:	46c0      	nop			@ (mov r8, r8)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2110      	movs	r1, #16
 800ace0:	438a      	bics	r2, r1
 800ace2:	601a      	str	r2, [r3, #0]
 800ace4:	193b      	adds	r3, r7, r4
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acec:	f383 8810 	msr	PRIMASK, r3
}
 800acf0:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2202      	movs	r2, #2
 800acf6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800acf8:	183b      	adds	r3, r7, r0
 800acfa:	881a      	ldrh	r2, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	0011      	movs	r1, r2
 800ad00:	0018      	movs	r0, r3
 800ad02:	f000 f89d 	bl	800ae40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad06:	e06f      	b.n	800ade8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ad08:	23a4      	movs	r3, #164	@ 0xa4
 800ad0a:	18fb      	adds	r3, r7, r3
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	2380      	movs	r3, #128	@ 0x80
 800ad10:	035b      	lsls	r3, r3, #13
 800ad12:	4013      	ands	r3, r2
 800ad14:	d010      	beq.n	800ad38 <HAL_UART_IRQHandler+0x584>
 800ad16:	239c      	movs	r3, #156	@ 0x9c
 800ad18:	18fb      	adds	r3, r7, r3
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	2380      	movs	r3, #128	@ 0x80
 800ad1e:	03db      	lsls	r3, r3, #15
 800ad20:	4013      	ands	r3, r2
 800ad22:	d009      	beq.n	800ad38 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2280      	movs	r2, #128	@ 0x80
 800ad2a:	0352      	lsls	r2, r2, #13
 800ad2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	0018      	movs	r0, r3
 800ad32:	f000 feea 	bl	800bb0a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad36:	e05a      	b.n	800adee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ad38:	23a4      	movs	r3, #164	@ 0xa4
 800ad3a:	18fb      	adds	r3, r7, r3
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2280      	movs	r2, #128	@ 0x80
 800ad40:	4013      	ands	r3, r2
 800ad42:	d016      	beq.n	800ad72 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ad44:	23a0      	movs	r3, #160	@ 0xa0
 800ad46:	18fb      	adds	r3, r7, r3
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2280      	movs	r2, #128	@ 0x80
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	d106      	bne.n	800ad5e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ad50:	239c      	movs	r3, #156	@ 0x9c
 800ad52:	18fb      	adds	r3, r7, r3
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	2380      	movs	r3, #128	@ 0x80
 800ad58:	041b      	lsls	r3, r3, #16
 800ad5a:	4013      	ands	r3, r2
 800ad5c:	d009      	beq.n	800ad72 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d042      	beq.n	800adec <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	0010      	movs	r0, r2
 800ad6e:	4798      	blx	r3
    }
    return;
 800ad70:	e03c      	b.n	800adec <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ad72:	23a4      	movs	r3, #164	@ 0xa4
 800ad74:	18fb      	adds	r3, r7, r3
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2240      	movs	r2, #64	@ 0x40
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	d00a      	beq.n	800ad94 <HAL_UART_IRQHandler+0x5e0>
 800ad7e:	23a0      	movs	r3, #160	@ 0xa0
 800ad80:	18fb      	adds	r3, r7, r3
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2240      	movs	r2, #64	@ 0x40
 800ad86:	4013      	ands	r3, r2
 800ad88:	d004      	beq.n	800ad94 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	0018      	movs	r0, r3
 800ad8e:	f000 fe90 	bl	800bab2 <UART_EndTransmit_IT>
    return;
 800ad92:	e02c      	b.n	800adee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ad94:	23a4      	movs	r3, #164	@ 0xa4
 800ad96:	18fb      	adds	r3, r7, r3
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	2380      	movs	r3, #128	@ 0x80
 800ad9c:	041b      	lsls	r3, r3, #16
 800ad9e:	4013      	ands	r3, r2
 800ada0:	d00b      	beq.n	800adba <HAL_UART_IRQHandler+0x606>
 800ada2:	23a0      	movs	r3, #160	@ 0xa0
 800ada4:	18fb      	adds	r3, r7, r3
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	2380      	movs	r3, #128	@ 0x80
 800adaa:	05db      	lsls	r3, r3, #23
 800adac:	4013      	ands	r3, r2
 800adae:	d004      	beq.n	800adba <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	0018      	movs	r0, r3
 800adb4:	f000 feb9 	bl	800bb2a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800adb8:	e019      	b.n	800adee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800adba:	23a4      	movs	r3, #164	@ 0xa4
 800adbc:	18fb      	adds	r3, r7, r3
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	2380      	movs	r3, #128	@ 0x80
 800adc2:	045b      	lsls	r3, r3, #17
 800adc4:	4013      	ands	r3, r2
 800adc6:	d012      	beq.n	800adee <HAL_UART_IRQHandler+0x63a>
 800adc8:	23a0      	movs	r3, #160	@ 0xa0
 800adca:	18fb      	adds	r3, r7, r3
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	da0d      	bge.n	800adee <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	0018      	movs	r0, r3
 800add6:	f000 fea0 	bl	800bb1a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800adda:	e008      	b.n	800adee <HAL_UART_IRQHandler+0x63a>
      return;
 800addc:	46c0      	nop			@ (mov r8, r8)
 800adde:	e006      	b.n	800adee <HAL_UART_IRQHandler+0x63a>
    return;
 800ade0:	46c0      	nop			@ (mov r8, r8)
 800ade2:	e004      	b.n	800adee <HAL_UART_IRQHandler+0x63a>
      return;
 800ade4:	46c0      	nop			@ (mov r8, r8)
 800ade6:	e002      	b.n	800adee <HAL_UART_IRQHandler+0x63a>
      return;
 800ade8:	46c0      	nop			@ (mov r8, r8)
 800adea:	e000      	b.n	800adee <HAL_UART_IRQHandler+0x63a>
    return;
 800adec:	46c0      	nop			@ (mov r8, r8)
  }
}
 800adee:	46bd      	mov	sp, r7
 800adf0:	b02a      	add	sp, #168	@ 0xa8
 800adf2:	bdb0      	pop	{r4, r5, r7, pc}
 800adf4:	fffffeff 	.word	0xfffffeff
 800adf8:	fffffedf 	.word	0xfffffedf
 800adfc:	effffffe 	.word	0xeffffffe

0800ae00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ae08:	46c0      	nop			@ (mov r8, r8)
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	b002      	add	sp, #8
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ae18:	46c0      	nop			@ (mov r8, r8)
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	b002      	add	sp, #8
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ae28:	46c0      	nop			@ (mov r8, r8)
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	b002      	add	sp, #8
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ae38:	46c0      	nop			@ (mov r8, r8)
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	b002      	add	sp, #8
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	000a      	movs	r2, r1
 800ae4a:	1cbb      	adds	r3, r7, #2
 800ae4c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ae4e:	46c0      	nop			@ (mov r8, r8)
 800ae50:	46bd      	mov	sp, r7
 800ae52:	b002      	add	sp, #8
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b088      	sub	sp, #32
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae60:	231a      	movs	r3, #26
 800ae62:	18fb      	adds	r3, r7, r3
 800ae64:	2200      	movs	r2, #0
 800ae66:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689a      	ldr	r2, [r3, #8]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	691b      	ldr	r3, [r3, #16]
 800ae70:	431a      	orrs	r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	695b      	ldr	r3, [r3, #20]
 800ae76:	431a      	orrs	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	69db      	ldr	r3, [r3, #28]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4abc      	ldr	r2, [pc, #752]	@ (800b178 <UART_SetConfig+0x320>)
 800ae88:	4013      	ands	r3, r2
 800ae8a:	0019      	movs	r1, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	69fa      	ldr	r2, [r7, #28]
 800ae92:	430a      	orrs	r2, r1
 800ae94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	4ab7      	ldr	r2, [pc, #732]	@ (800b17c <UART_SetConfig+0x324>)
 800ae9e:	4013      	ands	r3, r2
 800aea0:	0019      	movs	r1, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	68da      	ldr	r2, [r3, #12]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	430a      	orrs	r2, r1
 800aeac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	699b      	ldr	r3, [r3, #24]
 800aeb2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6a1b      	ldr	r3, [r3, #32]
 800aeb8:	69fa      	ldr	r2, [r7, #28]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	4aae      	ldr	r2, [pc, #696]	@ (800b180 <UART_SetConfig+0x328>)
 800aec6:	4013      	ands	r3, r2
 800aec8:	0019      	movs	r1, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	69fa      	ldr	r2, [r7, #28]
 800aed0:	430a      	orrs	r2, r1
 800aed2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeda:	220f      	movs	r2, #15
 800aedc:	4393      	bics	r3, r2
 800aede:	0019      	movs	r1, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	430a      	orrs	r2, r1
 800aeea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4aa4      	ldr	r2, [pc, #656]	@ (800b184 <UART_SetConfig+0x32c>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d127      	bne.n	800af46 <UART_SetConfig+0xee>
 800aef6:	4ba4      	ldr	r3, [pc, #656]	@ (800b188 <UART_SetConfig+0x330>)
 800aef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aefa:	2203      	movs	r2, #3
 800aefc:	4013      	ands	r3, r2
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d017      	beq.n	800af32 <UART_SetConfig+0xda>
 800af02:	d81b      	bhi.n	800af3c <UART_SetConfig+0xe4>
 800af04:	2b02      	cmp	r3, #2
 800af06:	d00a      	beq.n	800af1e <UART_SetConfig+0xc6>
 800af08:	d818      	bhi.n	800af3c <UART_SetConfig+0xe4>
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d002      	beq.n	800af14 <UART_SetConfig+0xbc>
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d00a      	beq.n	800af28 <UART_SetConfig+0xd0>
 800af12:	e013      	b.n	800af3c <UART_SetConfig+0xe4>
 800af14:	231b      	movs	r3, #27
 800af16:	18fb      	adds	r3, r7, r3
 800af18:	2200      	movs	r2, #0
 800af1a:	701a      	strb	r2, [r3, #0]
 800af1c:	e058      	b.n	800afd0 <UART_SetConfig+0x178>
 800af1e:	231b      	movs	r3, #27
 800af20:	18fb      	adds	r3, r7, r3
 800af22:	2202      	movs	r2, #2
 800af24:	701a      	strb	r2, [r3, #0]
 800af26:	e053      	b.n	800afd0 <UART_SetConfig+0x178>
 800af28:	231b      	movs	r3, #27
 800af2a:	18fb      	adds	r3, r7, r3
 800af2c:	2204      	movs	r2, #4
 800af2e:	701a      	strb	r2, [r3, #0]
 800af30:	e04e      	b.n	800afd0 <UART_SetConfig+0x178>
 800af32:	231b      	movs	r3, #27
 800af34:	18fb      	adds	r3, r7, r3
 800af36:	2208      	movs	r2, #8
 800af38:	701a      	strb	r2, [r3, #0]
 800af3a:	e049      	b.n	800afd0 <UART_SetConfig+0x178>
 800af3c:	231b      	movs	r3, #27
 800af3e:	18fb      	adds	r3, r7, r3
 800af40:	2210      	movs	r2, #16
 800af42:	701a      	strb	r2, [r3, #0]
 800af44:	e044      	b.n	800afd0 <UART_SetConfig+0x178>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a90      	ldr	r2, [pc, #576]	@ (800b18c <UART_SetConfig+0x334>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d127      	bne.n	800afa0 <UART_SetConfig+0x148>
 800af50:	4b8d      	ldr	r3, [pc, #564]	@ (800b188 <UART_SetConfig+0x330>)
 800af52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af54:	220c      	movs	r2, #12
 800af56:	4013      	ands	r3, r2
 800af58:	2b0c      	cmp	r3, #12
 800af5a:	d017      	beq.n	800af8c <UART_SetConfig+0x134>
 800af5c:	d81b      	bhi.n	800af96 <UART_SetConfig+0x13e>
 800af5e:	2b08      	cmp	r3, #8
 800af60:	d00a      	beq.n	800af78 <UART_SetConfig+0x120>
 800af62:	d818      	bhi.n	800af96 <UART_SetConfig+0x13e>
 800af64:	2b00      	cmp	r3, #0
 800af66:	d002      	beq.n	800af6e <UART_SetConfig+0x116>
 800af68:	2b04      	cmp	r3, #4
 800af6a:	d00a      	beq.n	800af82 <UART_SetConfig+0x12a>
 800af6c:	e013      	b.n	800af96 <UART_SetConfig+0x13e>
 800af6e:	231b      	movs	r3, #27
 800af70:	18fb      	adds	r3, r7, r3
 800af72:	2200      	movs	r2, #0
 800af74:	701a      	strb	r2, [r3, #0]
 800af76:	e02b      	b.n	800afd0 <UART_SetConfig+0x178>
 800af78:	231b      	movs	r3, #27
 800af7a:	18fb      	adds	r3, r7, r3
 800af7c:	2202      	movs	r2, #2
 800af7e:	701a      	strb	r2, [r3, #0]
 800af80:	e026      	b.n	800afd0 <UART_SetConfig+0x178>
 800af82:	231b      	movs	r3, #27
 800af84:	18fb      	adds	r3, r7, r3
 800af86:	2204      	movs	r2, #4
 800af88:	701a      	strb	r2, [r3, #0]
 800af8a:	e021      	b.n	800afd0 <UART_SetConfig+0x178>
 800af8c:	231b      	movs	r3, #27
 800af8e:	18fb      	adds	r3, r7, r3
 800af90:	2208      	movs	r2, #8
 800af92:	701a      	strb	r2, [r3, #0]
 800af94:	e01c      	b.n	800afd0 <UART_SetConfig+0x178>
 800af96:	231b      	movs	r3, #27
 800af98:	18fb      	adds	r3, r7, r3
 800af9a:	2210      	movs	r2, #16
 800af9c:	701a      	strb	r2, [r3, #0]
 800af9e:	e017      	b.n	800afd0 <UART_SetConfig+0x178>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a7a      	ldr	r2, [pc, #488]	@ (800b190 <UART_SetConfig+0x338>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d104      	bne.n	800afb4 <UART_SetConfig+0x15c>
 800afaa:	231b      	movs	r3, #27
 800afac:	18fb      	adds	r3, r7, r3
 800afae:	2200      	movs	r2, #0
 800afb0:	701a      	strb	r2, [r3, #0]
 800afb2:	e00d      	b.n	800afd0 <UART_SetConfig+0x178>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a76      	ldr	r2, [pc, #472]	@ (800b194 <UART_SetConfig+0x33c>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d104      	bne.n	800afc8 <UART_SetConfig+0x170>
 800afbe:	231b      	movs	r3, #27
 800afc0:	18fb      	adds	r3, r7, r3
 800afc2:	2200      	movs	r2, #0
 800afc4:	701a      	strb	r2, [r3, #0]
 800afc6:	e003      	b.n	800afd0 <UART_SetConfig+0x178>
 800afc8:	231b      	movs	r3, #27
 800afca:	18fb      	adds	r3, r7, r3
 800afcc:	2210      	movs	r2, #16
 800afce:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	69da      	ldr	r2, [r3, #28]
 800afd4:	2380      	movs	r3, #128	@ 0x80
 800afd6:	021b      	lsls	r3, r3, #8
 800afd8:	429a      	cmp	r2, r3
 800afda:	d000      	beq.n	800afde <UART_SetConfig+0x186>
 800afdc:	e065      	b.n	800b0aa <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800afde:	231b      	movs	r3, #27
 800afe0:	18fb      	adds	r3, r7, r3
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	2b08      	cmp	r3, #8
 800afe6:	d015      	beq.n	800b014 <UART_SetConfig+0x1bc>
 800afe8:	dc18      	bgt.n	800b01c <UART_SetConfig+0x1c4>
 800afea:	2b04      	cmp	r3, #4
 800afec:	d00d      	beq.n	800b00a <UART_SetConfig+0x1b2>
 800afee:	dc15      	bgt.n	800b01c <UART_SetConfig+0x1c4>
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d002      	beq.n	800affa <UART_SetConfig+0x1a2>
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d005      	beq.n	800b004 <UART_SetConfig+0x1ac>
 800aff8:	e010      	b.n	800b01c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800affa:	f7fe f91f 	bl	800923c <HAL_RCC_GetPCLK1Freq>
 800affe:	0003      	movs	r3, r0
 800b000:	617b      	str	r3, [r7, #20]
        break;
 800b002:	e012      	b.n	800b02a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b004:	4b64      	ldr	r3, [pc, #400]	@ (800b198 <UART_SetConfig+0x340>)
 800b006:	617b      	str	r3, [r7, #20]
        break;
 800b008:	e00f      	b.n	800b02a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b00a:	f7fe f88b 	bl	8009124 <HAL_RCC_GetSysClockFreq>
 800b00e:	0003      	movs	r3, r0
 800b010:	617b      	str	r3, [r7, #20]
        break;
 800b012:	e00a      	b.n	800b02a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b014:	2380      	movs	r3, #128	@ 0x80
 800b016:	021b      	lsls	r3, r3, #8
 800b018:	617b      	str	r3, [r7, #20]
        break;
 800b01a:	e006      	b.n	800b02a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800b01c:	2300      	movs	r3, #0
 800b01e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b020:	231a      	movs	r3, #26
 800b022:	18fb      	adds	r3, r7, r3
 800b024:	2201      	movs	r2, #1
 800b026:	701a      	strb	r2, [r3, #0]
        break;
 800b028:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d100      	bne.n	800b032 <UART_SetConfig+0x1da>
 800b030:	e08d      	b.n	800b14e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b036:	4b59      	ldr	r3, [pc, #356]	@ (800b19c <UART_SetConfig+0x344>)
 800b038:	0052      	lsls	r2, r2, #1
 800b03a:	5ad3      	ldrh	r3, [r2, r3]
 800b03c:	0019      	movs	r1, r3
 800b03e:	6978      	ldr	r0, [r7, #20]
 800b040:	f7f5 f87a 	bl	8000138 <__udivsi3>
 800b044:	0003      	movs	r3, r0
 800b046:	005a      	lsls	r2, r3, #1
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	085b      	lsrs	r3, r3, #1
 800b04e:	18d2      	adds	r2, r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	0019      	movs	r1, r3
 800b056:	0010      	movs	r0, r2
 800b058:	f7f5 f86e 	bl	8000138 <__udivsi3>
 800b05c:	0003      	movs	r3, r0
 800b05e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	2b0f      	cmp	r3, #15
 800b064:	d91c      	bls.n	800b0a0 <UART_SetConfig+0x248>
 800b066:	693a      	ldr	r2, [r7, #16]
 800b068:	2380      	movs	r3, #128	@ 0x80
 800b06a:	025b      	lsls	r3, r3, #9
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d217      	bcs.n	800b0a0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	b29a      	uxth	r2, r3
 800b074:	200e      	movs	r0, #14
 800b076:	183b      	adds	r3, r7, r0
 800b078:	210f      	movs	r1, #15
 800b07a:	438a      	bics	r2, r1
 800b07c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	085b      	lsrs	r3, r3, #1
 800b082:	b29b      	uxth	r3, r3
 800b084:	2207      	movs	r2, #7
 800b086:	4013      	ands	r3, r2
 800b088:	b299      	uxth	r1, r3
 800b08a:	183b      	adds	r3, r7, r0
 800b08c:	183a      	adds	r2, r7, r0
 800b08e:	8812      	ldrh	r2, [r2, #0]
 800b090:	430a      	orrs	r2, r1
 800b092:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	183a      	adds	r2, r7, r0
 800b09a:	8812      	ldrh	r2, [r2, #0]
 800b09c:	60da      	str	r2, [r3, #12]
 800b09e:	e056      	b.n	800b14e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800b0a0:	231a      	movs	r3, #26
 800b0a2:	18fb      	adds	r3, r7, r3
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	701a      	strb	r2, [r3, #0]
 800b0a8:	e051      	b.n	800b14e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b0aa:	231b      	movs	r3, #27
 800b0ac:	18fb      	adds	r3, r7, r3
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	2b08      	cmp	r3, #8
 800b0b2:	d015      	beq.n	800b0e0 <UART_SetConfig+0x288>
 800b0b4:	dc18      	bgt.n	800b0e8 <UART_SetConfig+0x290>
 800b0b6:	2b04      	cmp	r3, #4
 800b0b8:	d00d      	beq.n	800b0d6 <UART_SetConfig+0x27e>
 800b0ba:	dc15      	bgt.n	800b0e8 <UART_SetConfig+0x290>
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d002      	beq.n	800b0c6 <UART_SetConfig+0x26e>
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d005      	beq.n	800b0d0 <UART_SetConfig+0x278>
 800b0c4:	e010      	b.n	800b0e8 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0c6:	f7fe f8b9 	bl	800923c <HAL_RCC_GetPCLK1Freq>
 800b0ca:	0003      	movs	r3, r0
 800b0cc:	617b      	str	r3, [r7, #20]
        break;
 800b0ce:	e012      	b.n	800b0f6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0d0:	4b31      	ldr	r3, [pc, #196]	@ (800b198 <UART_SetConfig+0x340>)
 800b0d2:	617b      	str	r3, [r7, #20]
        break;
 800b0d4:	e00f      	b.n	800b0f6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0d6:	f7fe f825 	bl	8009124 <HAL_RCC_GetSysClockFreq>
 800b0da:	0003      	movs	r3, r0
 800b0dc:	617b      	str	r3, [r7, #20]
        break;
 800b0de:	e00a      	b.n	800b0f6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0e0:	2380      	movs	r3, #128	@ 0x80
 800b0e2:	021b      	lsls	r3, r3, #8
 800b0e4:	617b      	str	r3, [r7, #20]
        break;
 800b0e6:	e006      	b.n	800b0f6 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b0ec:	231a      	movs	r3, #26
 800b0ee:	18fb      	adds	r3, r7, r3
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	701a      	strb	r2, [r3, #0]
        break;
 800b0f4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d028      	beq.n	800b14e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b100:	4b26      	ldr	r3, [pc, #152]	@ (800b19c <UART_SetConfig+0x344>)
 800b102:	0052      	lsls	r2, r2, #1
 800b104:	5ad3      	ldrh	r3, [r2, r3]
 800b106:	0019      	movs	r1, r3
 800b108:	6978      	ldr	r0, [r7, #20]
 800b10a:	f7f5 f815 	bl	8000138 <__udivsi3>
 800b10e:	0003      	movs	r3, r0
 800b110:	001a      	movs	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	085b      	lsrs	r3, r3, #1
 800b118:	18d2      	adds	r2, r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	0019      	movs	r1, r3
 800b120:	0010      	movs	r0, r2
 800b122:	f7f5 f809 	bl	8000138 <__udivsi3>
 800b126:	0003      	movs	r3, r0
 800b128:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	2b0f      	cmp	r3, #15
 800b12e:	d90a      	bls.n	800b146 <UART_SetConfig+0x2ee>
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	2380      	movs	r3, #128	@ 0x80
 800b134:	025b      	lsls	r3, r3, #9
 800b136:	429a      	cmp	r2, r3
 800b138:	d205      	bcs.n	800b146 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	60da      	str	r2, [r3, #12]
 800b144:	e003      	b.n	800b14e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800b146:	231a      	movs	r3, #26
 800b148:	18fb      	adds	r3, r7, r3
 800b14a:	2201      	movs	r2, #1
 800b14c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	226a      	movs	r2, #106	@ 0x6a
 800b152:	2101      	movs	r1, #1
 800b154:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2268      	movs	r2, #104	@ 0x68
 800b15a:	2101      	movs	r1, #1
 800b15c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b16a:	231a      	movs	r3, #26
 800b16c:	18fb      	adds	r3, r7, r3
 800b16e:	781b      	ldrb	r3, [r3, #0]
}
 800b170:	0018      	movs	r0, r3
 800b172:	46bd      	mov	sp, r7
 800b174:	b008      	add	sp, #32
 800b176:	bd80      	pop	{r7, pc}
 800b178:	cfff69f3 	.word	0xcfff69f3
 800b17c:	ffffcfff 	.word	0xffffcfff
 800b180:	11fff4ff 	.word	0x11fff4ff
 800b184:	40013800 	.word	0x40013800
 800b188:	40021000 	.word	0x40021000
 800b18c:	40004400 	.word	0x40004400
 800b190:	40004800 	.word	0x40004800
 800b194:	40004c00 	.word	0x40004c00
 800b198:	00f42400 	.word	0x00f42400
 800b19c:	0800ec88 	.word	0x0800ec88

0800b1a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ac:	2208      	movs	r2, #8
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	d00b      	beq.n	800b1ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	4a4a      	ldr	r2, [pc, #296]	@ (800b2e4 <UART_AdvFeatureConfig+0x144>)
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	0019      	movs	r1, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	430a      	orrs	r2, r1
 800b1c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	d00b      	beq.n	800b1ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	4a43      	ldr	r2, [pc, #268]	@ (800b2e8 <UART_AdvFeatureConfig+0x148>)
 800b1dc:	4013      	ands	r3, r2
 800b1de:	0019      	movs	r1, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	430a      	orrs	r2, r1
 800b1ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1f0:	2202      	movs	r2, #2
 800b1f2:	4013      	ands	r3, r2
 800b1f4:	d00b      	beq.n	800b20e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	4a3b      	ldr	r2, [pc, #236]	@ (800b2ec <UART_AdvFeatureConfig+0x14c>)
 800b1fe:	4013      	ands	r3, r2
 800b200:	0019      	movs	r1, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	430a      	orrs	r2, r1
 800b20c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b212:	2204      	movs	r2, #4
 800b214:	4013      	ands	r3, r2
 800b216:	d00b      	beq.n	800b230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	4a34      	ldr	r2, [pc, #208]	@ (800b2f0 <UART_AdvFeatureConfig+0x150>)
 800b220:	4013      	ands	r3, r2
 800b222:	0019      	movs	r1, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	430a      	orrs	r2, r1
 800b22e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b234:	2210      	movs	r2, #16
 800b236:	4013      	ands	r3, r2
 800b238:	d00b      	beq.n	800b252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	4a2c      	ldr	r2, [pc, #176]	@ (800b2f4 <UART_AdvFeatureConfig+0x154>)
 800b242:	4013      	ands	r3, r2
 800b244:	0019      	movs	r1, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	430a      	orrs	r2, r1
 800b250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b256:	2220      	movs	r2, #32
 800b258:	4013      	ands	r3, r2
 800b25a:	d00b      	beq.n	800b274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	4a25      	ldr	r2, [pc, #148]	@ (800b2f8 <UART_AdvFeatureConfig+0x158>)
 800b264:	4013      	ands	r3, r2
 800b266:	0019      	movs	r1, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	430a      	orrs	r2, r1
 800b272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b278:	2240      	movs	r2, #64	@ 0x40
 800b27a:	4013      	ands	r3, r2
 800b27c:	d01d      	beq.n	800b2ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	4a1d      	ldr	r2, [pc, #116]	@ (800b2fc <UART_AdvFeatureConfig+0x15c>)
 800b286:	4013      	ands	r3, r2
 800b288:	0019      	movs	r1, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	430a      	orrs	r2, r1
 800b294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b29a:	2380      	movs	r3, #128	@ 0x80
 800b29c:	035b      	lsls	r3, r3, #13
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d10b      	bne.n	800b2ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	4a15      	ldr	r2, [pc, #84]	@ (800b300 <UART_AdvFeatureConfig+0x160>)
 800b2aa:	4013      	ands	r3, r2
 800b2ac:	0019      	movs	r1, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	430a      	orrs	r2, r1
 800b2b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2be:	2280      	movs	r2, #128	@ 0x80
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	d00b      	beq.n	800b2dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	4a0e      	ldr	r2, [pc, #56]	@ (800b304 <UART_AdvFeatureConfig+0x164>)
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	0019      	movs	r1, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	430a      	orrs	r2, r1
 800b2da:	605a      	str	r2, [r3, #4]
  }
}
 800b2dc:	46c0      	nop			@ (mov r8, r8)
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	b002      	add	sp, #8
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	ffff7fff 	.word	0xffff7fff
 800b2e8:	fffdffff 	.word	0xfffdffff
 800b2ec:	fffeffff 	.word	0xfffeffff
 800b2f0:	fffbffff 	.word	0xfffbffff
 800b2f4:	ffffefff 	.word	0xffffefff
 800b2f8:	ffffdfff 	.word	0xffffdfff
 800b2fc:	ffefffff 	.word	0xffefffff
 800b300:	ff9fffff 	.word	0xff9fffff
 800b304:	fff7ffff 	.word	0xfff7ffff

0800b308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b092      	sub	sp, #72	@ 0x48
 800b30c:	af02      	add	r7, sp, #8
 800b30e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2290      	movs	r2, #144	@ 0x90
 800b314:	2100      	movs	r1, #0
 800b316:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b318:	f7fa fd54 	bl	8005dc4 <HAL_GetTick>
 800b31c:	0003      	movs	r3, r0
 800b31e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2208      	movs	r2, #8
 800b328:	4013      	ands	r3, r2
 800b32a:	2b08      	cmp	r3, #8
 800b32c:	d12d      	bne.n	800b38a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b32e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b330:	2280      	movs	r2, #128	@ 0x80
 800b332:	0391      	lsls	r1, r2, #14
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	4a47      	ldr	r2, [pc, #284]	@ (800b454 <UART_CheckIdleState+0x14c>)
 800b338:	9200      	str	r2, [sp, #0]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f000 f88e 	bl	800b45c <UART_WaitOnFlagUntilTimeout>
 800b340:	1e03      	subs	r3, r0, #0
 800b342:	d022      	beq.n	800b38a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b344:	f3ef 8310 	mrs	r3, PRIMASK
 800b348:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800b34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b34c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b34e:	2301      	movs	r3, #1
 800b350:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b354:	f383 8810 	msr	PRIMASK, r3
}
 800b358:	46c0      	nop			@ (mov r8, r8)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	2180      	movs	r1, #128	@ 0x80
 800b366:	438a      	bics	r2, r1
 800b368:	601a      	str	r2, [r3, #0]
 800b36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b370:	f383 8810 	msr	PRIMASK, r3
}
 800b374:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2288      	movs	r2, #136	@ 0x88
 800b37a:	2120      	movs	r1, #32
 800b37c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2284      	movs	r2, #132	@ 0x84
 800b382:	2100      	movs	r1, #0
 800b384:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b386:	2303      	movs	r3, #3
 800b388:	e060      	b.n	800b44c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2204      	movs	r2, #4
 800b392:	4013      	ands	r3, r2
 800b394:	2b04      	cmp	r3, #4
 800b396:	d146      	bne.n	800b426 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b39a:	2280      	movs	r2, #128	@ 0x80
 800b39c:	03d1      	lsls	r1, r2, #15
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	4a2c      	ldr	r2, [pc, #176]	@ (800b454 <UART_CheckIdleState+0x14c>)
 800b3a2:	9200      	str	r2, [sp, #0]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f000 f859 	bl	800b45c <UART_WaitOnFlagUntilTimeout>
 800b3aa:	1e03      	subs	r3, r0, #0
 800b3ac:	d03b      	beq.n	800b426 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3ae:	f3ef 8310 	mrs	r3, PRIMASK
 800b3b2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	f383 8810 	msr	PRIMASK, r3
}
 800b3c2:	46c0      	nop			@ (mov r8, r8)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4922      	ldr	r1, [pc, #136]	@ (800b458 <UART_CheckIdleState+0x150>)
 800b3d0:	400a      	ands	r2, r1
 800b3d2:	601a      	str	r2, [r3, #0]
 800b3d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	f383 8810 	msr	PRIMASK, r3
}
 800b3de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3e0:	f3ef 8310 	mrs	r3, PRIMASK
 800b3e4:	61bb      	str	r3, [r7, #24]
  return(result);
 800b3e6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	f383 8810 	msr	PRIMASK, r3
}
 800b3f4:	46c0      	nop			@ (mov r8, r8)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	689a      	ldr	r2, [r3, #8]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2101      	movs	r1, #1
 800b402:	438a      	bics	r2, r1
 800b404:	609a      	str	r2, [r3, #8]
 800b406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b408:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b40a:	6a3b      	ldr	r3, [r7, #32]
 800b40c:	f383 8810 	msr	PRIMASK, r3
}
 800b410:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	228c      	movs	r2, #140	@ 0x8c
 800b416:	2120      	movs	r1, #32
 800b418:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2284      	movs	r2, #132	@ 0x84
 800b41e:	2100      	movs	r1, #0
 800b420:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b422:	2303      	movs	r3, #3
 800b424:	e012      	b.n	800b44c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2288      	movs	r2, #136	@ 0x88
 800b42a:	2120      	movs	r1, #32
 800b42c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	228c      	movs	r2, #140	@ 0x8c
 800b432:	2120      	movs	r1, #32
 800b434:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2284      	movs	r2, #132	@ 0x84
 800b446:	2100      	movs	r1, #0
 800b448:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	0018      	movs	r0, r3
 800b44e:	46bd      	mov	sp, r7
 800b450:	b010      	add	sp, #64	@ 0x40
 800b452:	bd80      	pop	{r7, pc}
 800b454:	01ffffff 	.word	0x01ffffff
 800b458:	fffffedf 	.word	0xfffffedf

0800b45c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	603b      	str	r3, [r7, #0]
 800b468:	1dfb      	adds	r3, r7, #7
 800b46a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b46c:	e051      	b.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b46e:	69bb      	ldr	r3, [r7, #24]
 800b470:	3301      	adds	r3, #1
 800b472:	d04e      	beq.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b474:	f7fa fca6 	bl	8005dc4 <HAL_GetTick>
 800b478:	0002      	movs	r2, r0
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	69ba      	ldr	r2, [r7, #24]
 800b480:	429a      	cmp	r2, r3
 800b482:	d302      	bcc.n	800b48a <UART_WaitOnFlagUntilTimeout+0x2e>
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d101      	bne.n	800b48e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800b48a:	2303      	movs	r3, #3
 800b48c:	e051      	b.n	800b532 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2204      	movs	r2, #4
 800b496:	4013      	ands	r3, r2
 800b498:	d03b      	beq.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb6>
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	2b80      	cmp	r3, #128	@ 0x80
 800b49e:	d038      	beq.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb6>
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	2b40      	cmp	r3, #64	@ 0x40
 800b4a4:	d035      	beq.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	69db      	ldr	r3, [r3, #28]
 800b4ac:	2208      	movs	r2, #8
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	2b08      	cmp	r3, #8
 800b4b2:	d111      	bne.n	800b4d8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2208      	movs	r2, #8
 800b4ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	0018      	movs	r0, r3
 800b4c0:	f000 f922 	bl	800b708 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2290      	movs	r2, #144	@ 0x90
 800b4c8:	2108      	movs	r1, #8
 800b4ca:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2284      	movs	r2, #132	@ 0x84
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e02c      	b.n	800b532 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	69da      	ldr	r2, [r3, #28]
 800b4de:	2380      	movs	r3, #128	@ 0x80
 800b4e0:	011b      	lsls	r3, r3, #4
 800b4e2:	401a      	ands	r2, r3
 800b4e4:	2380      	movs	r3, #128	@ 0x80
 800b4e6:	011b      	lsls	r3, r3, #4
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d112      	bne.n	800b512 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2280      	movs	r2, #128	@ 0x80
 800b4f2:	0112      	lsls	r2, r2, #4
 800b4f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	0018      	movs	r0, r3
 800b4fa:	f000 f905 	bl	800b708 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2290      	movs	r2, #144	@ 0x90
 800b502:	2120      	movs	r1, #32
 800b504:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2284      	movs	r2, #132	@ 0x84
 800b50a:	2100      	movs	r1, #0
 800b50c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b50e:	2303      	movs	r3, #3
 800b510:	e00f      	b.n	800b532 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	69db      	ldr	r3, [r3, #28]
 800b518:	68ba      	ldr	r2, [r7, #8]
 800b51a:	4013      	ands	r3, r2
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	425a      	negs	r2, r3
 800b522:	4153      	adcs	r3, r2
 800b524:	b2db      	uxtb	r3, r3
 800b526:	001a      	movs	r2, r3
 800b528:	1dfb      	adds	r3, r7, #7
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d09e      	beq.n	800b46e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	0018      	movs	r0, r3
 800b534:	46bd      	mov	sp, r7
 800b536:	b004      	add	sp, #16
 800b538:	bd80      	pop	{r7, pc}
	...

0800b53c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b090      	sub	sp, #64	@ 0x40
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	1dbb      	adds	r3, r7, #6
 800b548:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	1dba      	adds	r2, r7, #6
 800b554:	215c      	movs	r1, #92	@ 0x5c
 800b556:	8812      	ldrh	r2, [r2, #0]
 800b558:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2290      	movs	r2, #144	@ 0x90
 800b55e:	2100      	movs	r1, #0
 800b560:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	228c      	movs	r2, #140	@ 0x8c
 800b566:	2122      	movs	r1, #34	@ 0x22
 800b568:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2280      	movs	r2, #128	@ 0x80
 800b56e:	589b      	ldr	r3, [r3, r2]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d02d      	beq.n	800b5d0 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2280      	movs	r2, #128	@ 0x80
 800b578:	589b      	ldr	r3, [r3, r2]
 800b57a:	4a40      	ldr	r2, [pc, #256]	@ (800b67c <UART_Start_Receive_DMA+0x140>)
 800b57c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2280      	movs	r2, #128	@ 0x80
 800b582:	589b      	ldr	r3, [r3, r2]
 800b584:	4a3e      	ldr	r2, [pc, #248]	@ (800b680 <UART_Start_Receive_DMA+0x144>)
 800b586:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2280      	movs	r2, #128	@ 0x80
 800b58c:	589b      	ldr	r3, [r3, r2]
 800b58e:	4a3d      	ldr	r2, [pc, #244]	@ (800b684 <UART_Start_Receive_DMA+0x148>)
 800b590:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2280      	movs	r2, #128	@ 0x80
 800b596:	589b      	ldr	r3, [r3, r2]
 800b598:	2200      	movs	r2, #0
 800b59a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2280      	movs	r2, #128	@ 0x80
 800b5a0:	5898      	ldr	r0, [r3, r2]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	3324      	adds	r3, #36	@ 0x24
 800b5a8:	0019      	movs	r1, r3
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5ae:	001a      	movs	r2, r3
 800b5b0:	1dbb      	adds	r3, r7, #6
 800b5b2:	881b      	ldrh	r3, [r3, #0]
 800b5b4:	f7fb fb80 	bl	8006cb8 <HAL_DMA_Start_IT>
 800b5b8:	1e03      	subs	r3, r0, #0
 800b5ba:	d009      	beq.n	800b5d0 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2290      	movs	r2, #144	@ 0x90
 800b5c0:	2110      	movs	r1, #16
 800b5c2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	228c      	movs	r2, #140	@ 0x8c
 800b5c8:	2120      	movs	r1, #32
 800b5ca:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e050      	b.n	800b672 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d019      	beq.n	800b60c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5d8:	f3ef 8310 	mrs	r3, PRIMASK
 800b5dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800b5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5e8:	f383 8810 	msr	PRIMASK, r3
}
 800b5ec:	46c0      	nop			@ (mov r8, r8)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2180      	movs	r1, #128	@ 0x80
 800b5fa:	0049      	lsls	r1, r1, #1
 800b5fc:	430a      	orrs	r2, r1
 800b5fe:	601a      	str	r2, [r3, #0]
 800b600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b602:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b606:	f383 8810 	msr	PRIMASK, r3
}
 800b60a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b60c:	f3ef 8310 	mrs	r3, PRIMASK
 800b610:	613b      	str	r3, [r7, #16]
  return(result);
 800b612:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b614:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b616:	2301      	movs	r3, #1
 800b618:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f383 8810 	msr	PRIMASK, r3
}
 800b620:	46c0      	nop			@ (mov r8, r8)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	689a      	ldr	r2, [r3, #8]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2101      	movs	r1, #1
 800b62e:	430a      	orrs	r2, r1
 800b630:	609a      	str	r2, [r3, #8]
 800b632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b634:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	f383 8810 	msr	PRIMASK, r3
}
 800b63c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b63e:	f3ef 8310 	mrs	r3, PRIMASK
 800b642:	61fb      	str	r3, [r7, #28]
  return(result);
 800b644:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b646:	637b      	str	r3, [r7, #52]	@ 0x34
 800b648:	2301      	movs	r3, #1
 800b64a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b64c:	6a3b      	ldr	r3, [r7, #32]
 800b64e:	f383 8810 	msr	PRIMASK, r3
}
 800b652:	46c0      	nop			@ (mov r8, r8)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	689a      	ldr	r2, [r3, #8]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2140      	movs	r1, #64	@ 0x40
 800b660:	430a      	orrs	r2, r1
 800b662:	609a      	str	r2, [r3, #8]
 800b664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b666:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66a:	f383 8810 	msr	PRIMASK, r3
}
 800b66e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	0018      	movs	r0, r3
 800b674:	46bd      	mov	sp, r7
 800b676:	b010      	add	sp, #64	@ 0x40
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	46c0      	nop			@ (mov r8, r8)
 800b67c:	0800b88d 	.word	0x0800b88d
 800b680:	0800b9bd 	.word	0x0800b9bd
 800b684:	0800b9ff 	.word	0x0800b9ff

0800b688 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b08a      	sub	sp, #40	@ 0x28
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b690:	f3ef 8310 	mrs	r3, PRIMASK
 800b694:	60bb      	str	r3, [r7, #8]
  return(result);
 800b696:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b698:	627b      	str	r3, [r7, #36]	@ 0x24
 800b69a:	2301      	movs	r3, #1
 800b69c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f383 8810 	msr	PRIMASK, r3
}
 800b6a4:	46c0      	nop			@ (mov r8, r8)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	21c0      	movs	r1, #192	@ 0xc0
 800b6b2:	438a      	bics	r2, r1
 800b6b4:	601a      	str	r2, [r3, #0]
 800b6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	f383 8810 	msr	PRIMASK, r3
}
 800b6c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6c2:	f3ef 8310 	mrs	r3, PRIMASK
 800b6c6:	617b      	str	r3, [r7, #20]
  return(result);
 800b6c8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b6ca:	623b      	str	r3, [r7, #32]
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	f383 8810 	msr	PRIMASK, r3
}
 800b6d6:	46c0      	nop			@ (mov r8, r8)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	689a      	ldr	r2, [r3, #8]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4908      	ldr	r1, [pc, #32]	@ (800b704 <UART_EndTxTransfer+0x7c>)
 800b6e4:	400a      	ands	r2, r1
 800b6e6:	609a      	str	r2, [r3, #8]
 800b6e8:	6a3b      	ldr	r3, [r7, #32]
 800b6ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	f383 8810 	msr	PRIMASK, r3
}
 800b6f2:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2288      	movs	r2, #136	@ 0x88
 800b6f8:	2120      	movs	r1, #32
 800b6fa:	5099      	str	r1, [r3, r2]
}
 800b6fc:	46c0      	nop			@ (mov r8, r8)
 800b6fe:	46bd      	mov	sp, r7
 800b700:	b00a      	add	sp, #40	@ 0x28
 800b702:	bd80      	pop	{r7, pc}
 800b704:	ff7fffff 	.word	0xff7fffff

0800b708 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b08e      	sub	sp, #56	@ 0x38
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b710:	f3ef 8310 	mrs	r3, PRIMASK
 800b714:	617b      	str	r3, [r7, #20]
  return(result);
 800b716:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b718:	637b      	str	r3, [r7, #52]	@ 0x34
 800b71a:	2301      	movs	r3, #1
 800b71c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	f383 8810 	msr	PRIMASK, r3
}
 800b724:	46c0      	nop			@ (mov r8, r8)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4926      	ldr	r1, [pc, #152]	@ (800b7cc <UART_EndRxTransfer+0xc4>)
 800b732:	400a      	ands	r2, r1
 800b734:	601a      	str	r2, [r3, #0]
 800b736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b738:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	f383 8810 	msr	PRIMASK, r3
}
 800b740:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b742:	f3ef 8310 	mrs	r3, PRIMASK
 800b746:	623b      	str	r3, [r7, #32]
  return(result);
 800b748:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b74a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b74c:	2301      	movs	r3, #1
 800b74e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b752:	f383 8810 	msr	PRIMASK, r3
}
 800b756:	46c0      	nop			@ (mov r8, r8)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	689a      	ldr	r2, [r3, #8]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	491b      	ldr	r1, [pc, #108]	@ (800b7d0 <UART_EndRxTransfer+0xc8>)
 800b764:	400a      	ands	r2, r1
 800b766:	609a      	str	r2, [r3, #8]
 800b768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b76a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b76e:	f383 8810 	msr	PRIMASK, r3
}
 800b772:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d118      	bne.n	800b7ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b77c:	f3ef 8310 	mrs	r3, PRIMASK
 800b780:	60bb      	str	r3, [r7, #8]
  return(result);
 800b782:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b786:	2301      	movs	r3, #1
 800b788:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f383 8810 	msr	PRIMASK, r3
}
 800b790:	46c0      	nop			@ (mov r8, r8)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2110      	movs	r1, #16
 800b79e:	438a      	bics	r2, r1
 800b7a0:	601a      	str	r2, [r3, #0]
 800b7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	f383 8810 	msr	PRIMASK, r3
}
 800b7ac:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	228c      	movs	r2, #140	@ 0x8c
 800b7b2:	2120      	movs	r1, #32
 800b7b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b7c2:	46c0      	nop			@ (mov r8, r8)
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	b00e      	add	sp, #56	@ 0x38
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	46c0      	nop			@ (mov r8, r8)
 800b7cc:	fffffedf 	.word	0xfffffedf
 800b7d0:	effffffe 	.word	0xeffffffe

0800b7d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b08c      	sub	sp, #48	@ 0x30
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2220      	movs	r2, #32
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	d135      	bne.n	800b85a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800b7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7f0:	2256      	movs	r2, #86	@ 0x56
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7f6:	f3ef 8310 	mrs	r3, PRIMASK
 800b7fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7fc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b7fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b800:	2301      	movs	r3, #1
 800b802:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	f383 8810 	msr	PRIMASK, r3
}
 800b80a:	46c0      	nop			@ (mov r8, r8)
 800b80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	689a      	ldr	r2, [r3, #8]
 800b812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	2180      	movs	r1, #128	@ 0x80
 800b818:	438a      	bics	r2, r1
 800b81a:	609a      	str	r2, [r3, #8]
 800b81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	f383 8810 	msr	PRIMASK, r3
}
 800b826:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b828:	f3ef 8310 	mrs	r3, PRIMASK
 800b82c:	61bb      	str	r3, [r7, #24]
  return(result);
 800b82e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b830:	627b      	str	r3, [r7, #36]	@ 0x24
 800b832:	2301      	movs	r3, #1
 800b834:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	f383 8810 	msr	PRIMASK, r3
}
 800b83c:	46c0      	nop			@ (mov r8, r8)
 800b83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2140      	movs	r1, #64	@ 0x40
 800b84a:	430a      	orrs	r2, r1
 800b84c:	601a      	str	r2, [r3, #0]
 800b84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b850:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b852:	6a3b      	ldr	r3, [r7, #32]
 800b854:	f383 8810 	msr	PRIMASK, r3
}
 800b858:	e004      	b.n	800b864 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800b85a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b85c:	0018      	movs	r0, r3
 800b85e:	f7f8 f9d1 	bl	8003c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b862:	46c0      	nop			@ (mov r8, r8)
 800b864:	46c0      	nop			@ (mov r8, r8)
 800b866:	46bd      	mov	sp, r7
 800b868:	b00c      	add	sp, #48	@ 0x30
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b878:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	0018      	movs	r0, r3
 800b87e:	f7ff fabf 	bl	800ae00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b882:	46c0      	nop			@ (mov r8, r8)
 800b884:	46bd      	mov	sp, r7
 800b886:	b004      	add	sp, #16
 800b888:	bd80      	pop	{r7, pc}
	...

0800b88c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b094      	sub	sp, #80	@ 0x50
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b898:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	2220      	movs	r2, #32
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	d16f      	bne.n	800b986 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800b8a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8a8:	225e      	movs	r2, #94	@ 0x5e
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8ae:	f3ef 8310 	mrs	r3, PRIMASK
 800b8b2:	61bb      	str	r3, [r7, #24]
  return(result);
 800b8b4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	f383 8810 	msr	PRIMASK, r3
}
 800b8c2:	46c0      	nop			@ (mov r8, r8)
 800b8c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	493a      	ldr	r1, [pc, #232]	@ (800b9b8 <UART_DMAReceiveCplt+0x12c>)
 800b8d0:	400a      	ands	r2, r1
 800b8d2:	601a      	str	r2, [r3, #0]
 800b8d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8d8:	6a3b      	ldr	r3, [r7, #32]
 800b8da:	f383 8810 	msr	PRIMASK, r3
}
 800b8de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8e0:	f3ef 8310 	mrs	r3, PRIMASK
 800b8e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800b8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f0:	f383 8810 	msr	PRIMASK, r3
}
 800b8f4:	46c0      	nop			@ (mov r8, r8)
 800b8f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	689a      	ldr	r2, [r3, #8]
 800b8fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2101      	movs	r1, #1
 800b902:	438a      	bics	r2, r1
 800b904:	609a      	str	r2, [r3, #8]
 800b906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b90c:	f383 8810 	msr	PRIMASK, r3
}
 800b910:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b912:	f3ef 8310 	mrs	r3, PRIMASK
 800b916:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800b918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b91a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b91c:	2301      	movs	r3, #1
 800b91e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b922:	f383 8810 	msr	PRIMASK, r3
}
 800b926:	46c0      	nop			@ (mov r8, r8)
 800b928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	689a      	ldr	r2, [r3, #8]
 800b92e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2140      	movs	r1, #64	@ 0x40
 800b934:	438a      	bics	r2, r1
 800b936:	609a      	str	r2, [r3, #8]
 800b938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b93a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b93e:	f383 8810 	msr	PRIMASK, r3
}
 800b942:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b946:	228c      	movs	r2, #140	@ 0x8c
 800b948:	2120      	movs	r1, #32
 800b94a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b94c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b94e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b950:	2b01      	cmp	r3, #1
 800b952:	d118      	bne.n	800b986 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b954:	f3ef 8310 	mrs	r3, PRIMASK
 800b958:	60fb      	str	r3, [r7, #12]
  return(result);
 800b95a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b95c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b95e:	2301      	movs	r3, #1
 800b960:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	f383 8810 	msr	PRIMASK, r3
}
 800b968:	46c0      	nop			@ (mov r8, r8)
 800b96a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2110      	movs	r1, #16
 800b976:	438a      	bics	r2, r1
 800b978:	601a      	str	r2, [r3, #0]
 800b97a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b97c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	f383 8810 	msr	PRIMASK, r3
}
 800b984:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b988:	2200      	movs	r2, #0
 800b98a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b98c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b98e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b990:	2b01      	cmp	r3, #1
 800b992:	d108      	bne.n	800b9a6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b996:	225c      	movs	r2, #92	@ 0x5c
 800b998:	5a9a      	ldrh	r2, [r3, r2]
 800b99a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b99c:	0011      	movs	r1, r2
 800b99e:	0018      	movs	r0, r3
 800b9a0:	f7ff fa4e 	bl	800ae40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b9a4:	e003      	b.n	800b9ae <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800b9a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9a8:	0018      	movs	r0, r3
 800b9aa:	f7ff fa31 	bl	800ae10 <HAL_UART_RxCpltCallback>
}
 800b9ae:	46c0      	nop			@ (mov r8, r8)
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	b014      	add	sp, #80	@ 0x50
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	46c0      	nop			@ (mov r8, r8)
 800b9b8:	fffffeff 	.word	0xfffffeff

0800b9bc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9c8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d10a      	bne.n	800b9ee <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	225c      	movs	r2, #92	@ 0x5c
 800b9dc:	5a9b      	ldrh	r3, [r3, r2]
 800b9de:	085b      	lsrs	r3, r3, #1
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	0011      	movs	r1, r2
 800b9e6:	0018      	movs	r0, r3
 800b9e8:	f7ff fa2a 	bl	800ae40 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b9ec:	e003      	b.n	800b9f6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	0018      	movs	r0, r3
 800b9f2:	f7ff fa15 	bl	800ae20 <HAL_UART_RxHalfCpltCallback>
}
 800b9f6:	46c0      	nop			@ (mov r8, r8)
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	b004      	add	sp, #16
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b086      	sub	sp, #24
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba0a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	2288      	movs	r2, #136	@ 0x88
 800ba10:	589b      	ldr	r3, [r3, r2]
 800ba12:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	228c      	movs	r2, #140	@ 0x8c
 800ba18:	589b      	ldr	r3, [r3, r2]
 800ba1a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	2280      	movs	r2, #128	@ 0x80
 800ba24:	4013      	ands	r3, r2
 800ba26:	2b80      	cmp	r3, #128	@ 0x80
 800ba28:	d10a      	bne.n	800ba40 <UART_DMAError+0x42>
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	2b21      	cmp	r3, #33	@ 0x21
 800ba2e:	d107      	bne.n	800ba40 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	2256      	movs	r2, #86	@ 0x56
 800ba34:	2100      	movs	r1, #0
 800ba36:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	0018      	movs	r0, r3
 800ba3c:	f7ff fe24 	bl	800b688 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	2240      	movs	r2, #64	@ 0x40
 800ba48:	4013      	ands	r3, r2
 800ba4a:	2b40      	cmp	r3, #64	@ 0x40
 800ba4c:	d10a      	bne.n	800ba64 <UART_DMAError+0x66>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2b22      	cmp	r3, #34	@ 0x22
 800ba52:	d107      	bne.n	800ba64 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	225e      	movs	r2, #94	@ 0x5e
 800ba58:	2100      	movs	r1, #0
 800ba5a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	0018      	movs	r0, r3
 800ba60:	f7ff fe52 	bl	800b708 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	2290      	movs	r2, #144	@ 0x90
 800ba68:	589b      	ldr	r3, [r3, r2]
 800ba6a:	2210      	movs	r2, #16
 800ba6c:	431a      	orrs	r2, r3
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	2190      	movs	r1, #144	@ 0x90
 800ba72:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	0018      	movs	r0, r3
 800ba78:	f7ff f9da 	bl	800ae30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba7c:	46c0      	nop			@ (mov r8, r8)
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	b006      	add	sp, #24
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	225e      	movs	r2, #94	@ 0x5e
 800ba96:	2100      	movs	r1, #0
 800ba98:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2256      	movs	r2, #86	@ 0x56
 800ba9e:	2100      	movs	r1, #0
 800baa0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	0018      	movs	r0, r3
 800baa6:	f7ff f9c3 	bl	800ae30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800baaa:	46c0      	nop			@ (mov r8, r8)
 800baac:	46bd      	mov	sp, r7
 800baae:	b004      	add	sp, #16
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b086      	sub	sp, #24
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800baba:	f3ef 8310 	mrs	r3, PRIMASK
 800babe:	60bb      	str	r3, [r7, #8]
  return(result);
 800bac0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bac2:	617b      	str	r3, [r7, #20]
 800bac4:	2301      	movs	r3, #1
 800bac6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f383 8810 	msr	PRIMASK, r3
}
 800bace:	46c0      	nop			@ (mov r8, r8)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2140      	movs	r1, #64	@ 0x40
 800badc:	438a      	bics	r2, r1
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	f383 8810 	msr	PRIMASK, r3
}
 800baea:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2288      	movs	r2, #136	@ 0x88
 800baf0:	2120      	movs	r1, #32
 800baf2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	0018      	movs	r0, r3
 800bafe:	f7f8 f881 	bl	8003c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb02:	46c0      	nop			@ (mov r8, r8)
 800bb04:	46bd      	mov	sp, r7
 800bb06:	b006      	add	sp, #24
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b082      	sub	sp, #8
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bb12:	46c0      	nop			@ (mov r8, r8)
 800bb14:	46bd      	mov	sp, r7
 800bb16:	b002      	add	sp, #8
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b082      	sub	sp, #8
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bb22:	46c0      	nop			@ (mov r8, r8)
 800bb24:	46bd      	mov	sp, r7
 800bb26:	b002      	add	sp, #8
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b082      	sub	sp, #8
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bb32:	46c0      	nop			@ (mov r8, r8)
 800bb34:	46bd      	mov	sp, r7
 800bb36:	b002      	add	sp, #8
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <__cvt>:
 800bb3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb3c:	001f      	movs	r7, r3
 800bb3e:	2300      	movs	r3, #0
 800bb40:	0016      	movs	r6, r2
 800bb42:	b08b      	sub	sp, #44	@ 0x2c
 800bb44:	429f      	cmp	r7, r3
 800bb46:	da04      	bge.n	800bb52 <__cvt+0x18>
 800bb48:	2180      	movs	r1, #128	@ 0x80
 800bb4a:	0609      	lsls	r1, r1, #24
 800bb4c:	187b      	adds	r3, r7, r1
 800bb4e:	001f      	movs	r7, r3
 800bb50:	232d      	movs	r3, #45	@ 0x2d
 800bb52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bb54:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800bb56:	7013      	strb	r3, [r2, #0]
 800bb58:	2320      	movs	r3, #32
 800bb5a:	2203      	movs	r2, #3
 800bb5c:	439d      	bics	r5, r3
 800bb5e:	2d46      	cmp	r5, #70	@ 0x46
 800bb60:	d007      	beq.n	800bb72 <__cvt+0x38>
 800bb62:	002b      	movs	r3, r5
 800bb64:	3b45      	subs	r3, #69	@ 0x45
 800bb66:	4259      	negs	r1, r3
 800bb68:	414b      	adcs	r3, r1
 800bb6a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800bb6c:	3a01      	subs	r2, #1
 800bb6e:	18cb      	adds	r3, r1, r3
 800bb70:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb72:	ab09      	add	r3, sp, #36	@ 0x24
 800bb74:	9304      	str	r3, [sp, #16]
 800bb76:	ab08      	add	r3, sp, #32
 800bb78:	9303      	str	r3, [sp, #12]
 800bb7a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bb7c:	9200      	str	r2, [sp, #0]
 800bb7e:	9302      	str	r3, [sp, #8]
 800bb80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb82:	0032      	movs	r2, r6
 800bb84:	9301      	str	r3, [sp, #4]
 800bb86:	003b      	movs	r3, r7
 800bb88:	f000 fe9e 	bl	800c8c8 <_dtoa_r>
 800bb8c:	0004      	movs	r4, r0
 800bb8e:	2d47      	cmp	r5, #71	@ 0x47
 800bb90:	d11b      	bne.n	800bbca <__cvt+0x90>
 800bb92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bb94:	07db      	lsls	r3, r3, #31
 800bb96:	d511      	bpl.n	800bbbc <__cvt+0x82>
 800bb98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb9a:	18c3      	adds	r3, r0, r3
 800bb9c:	9307      	str	r3, [sp, #28]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	2300      	movs	r3, #0
 800bba2:	0030      	movs	r0, r6
 800bba4:	0039      	movs	r1, r7
 800bba6:	f7f4 fc4d 	bl	8000444 <__aeabi_dcmpeq>
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d001      	beq.n	800bbb2 <__cvt+0x78>
 800bbae:	9b07      	ldr	r3, [sp, #28]
 800bbb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbb2:	2230      	movs	r2, #48	@ 0x30
 800bbb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbb6:	9907      	ldr	r1, [sp, #28]
 800bbb8:	428b      	cmp	r3, r1
 800bbba:	d320      	bcc.n	800bbfe <__cvt+0xc4>
 800bbbc:	0020      	movs	r0, r4
 800bbbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbc0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bbc2:	1b1b      	subs	r3, r3, r4
 800bbc4:	6013      	str	r3, [r2, #0]
 800bbc6:	b00b      	add	sp, #44	@ 0x2c
 800bbc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bbcc:	18c3      	adds	r3, r0, r3
 800bbce:	9307      	str	r3, [sp, #28]
 800bbd0:	2d46      	cmp	r5, #70	@ 0x46
 800bbd2:	d1e4      	bne.n	800bb9e <__cvt+0x64>
 800bbd4:	7803      	ldrb	r3, [r0, #0]
 800bbd6:	2b30      	cmp	r3, #48	@ 0x30
 800bbd8:	d10c      	bne.n	800bbf4 <__cvt+0xba>
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2300      	movs	r3, #0
 800bbde:	0030      	movs	r0, r6
 800bbe0:	0039      	movs	r1, r7
 800bbe2:	f7f4 fc2f 	bl	8000444 <__aeabi_dcmpeq>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d104      	bne.n	800bbf4 <__cvt+0xba>
 800bbea:	2301      	movs	r3, #1
 800bbec:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800bbee:	1a9b      	subs	r3, r3, r2
 800bbf0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bbf2:	6013      	str	r3, [r2, #0]
 800bbf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bbf6:	9a07      	ldr	r2, [sp, #28]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	18d3      	adds	r3, r2, r3
 800bbfc:	e7ce      	b.n	800bb9c <__cvt+0x62>
 800bbfe:	1c59      	adds	r1, r3, #1
 800bc00:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc02:	701a      	strb	r2, [r3, #0]
 800bc04:	e7d6      	b.n	800bbb4 <__cvt+0x7a>

0800bc06 <__exponent>:
 800bc06:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc08:	232b      	movs	r3, #43	@ 0x2b
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	0005      	movs	r5, r0
 800bc0e:	1e0c      	subs	r4, r1, #0
 800bc10:	7002      	strb	r2, [r0, #0]
 800bc12:	da01      	bge.n	800bc18 <__exponent+0x12>
 800bc14:	424c      	negs	r4, r1
 800bc16:	3302      	adds	r3, #2
 800bc18:	706b      	strb	r3, [r5, #1]
 800bc1a:	2c09      	cmp	r4, #9
 800bc1c:	dd2c      	ble.n	800bc78 <__exponent+0x72>
 800bc1e:	ab02      	add	r3, sp, #8
 800bc20:	1dde      	adds	r6, r3, #7
 800bc22:	0020      	movs	r0, r4
 800bc24:	210a      	movs	r1, #10
 800bc26:	f7f4 fbf7 	bl	8000418 <__aeabi_idivmod>
 800bc2a:	0037      	movs	r7, r6
 800bc2c:	3130      	adds	r1, #48	@ 0x30
 800bc2e:	3e01      	subs	r6, #1
 800bc30:	0020      	movs	r0, r4
 800bc32:	7031      	strb	r1, [r6, #0]
 800bc34:	210a      	movs	r1, #10
 800bc36:	9401      	str	r4, [sp, #4]
 800bc38:	f7f4 fb08 	bl	800024c <__divsi3>
 800bc3c:	9b01      	ldr	r3, [sp, #4]
 800bc3e:	0004      	movs	r4, r0
 800bc40:	2b63      	cmp	r3, #99	@ 0x63
 800bc42:	dcee      	bgt.n	800bc22 <__exponent+0x1c>
 800bc44:	1eba      	subs	r2, r7, #2
 800bc46:	1ca8      	adds	r0, r5, #2
 800bc48:	0001      	movs	r1, r0
 800bc4a:	0013      	movs	r3, r2
 800bc4c:	3430      	adds	r4, #48	@ 0x30
 800bc4e:	7014      	strb	r4, [r2, #0]
 800bc50:	ac02      	add	r4, sp, #8
 800bc52:	3407      	adds	r4, #7
 800bc54:	429c      	cmp	r4, r3
 800bc56:	d80a      	bhi.n	800bc6e <__exponent+0x68>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	4294      	cmp	r4, r2
 800bc5c:	d303      	bcc.n	800bc66 <__exponent+0x60>
 800bc5e:	3309      	adds	r3, #9
 800bc60:	aa02      	add	r2, sp, #8
 800bc62:	189b      	adds	r3, r3, r2
 800bc64:	1bdb      	subs	r3, r3, r7
 800bc66:	18c0      	adds	r0, r0, r3
 800bc68:	1b40      	subs	r0, r0, r5
 800bc6a:	b005      	add	sp, #20
 800bc6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc6e:	781c      	ldrb	r4, [r3, #0]
 800bc70:	3301      	adds	r3, #1
 800bc72:	700c      	strb	r4, [r1, #0]
 800bc74:	3101      	adds	r1, #1
 800bc76:	e7eb      	b.n	800bc50 <__exponent+0x4a>
 800bc78:	2330      	movs	r3, #48	@ 0x30
 800bc7a:	18e4      	adds	r4, r4, r3
 800bc7c:	70ab      	strb	r3, [r5, #2]
 800bc7e:	1d28      	adds	r0, r5, #4
 800bc80:	70ec      	strb	r4, [r5, #3]
 800bc82:	e7f1      	b.n	800bc68 <__exponent+0x62>

0800bc84 <_printf_float>:
 800bc84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc86:	b097      	sub	sp, #92	@ 0x5c
 800bc88:	000d      	movs	r5, r1
 800bc8a:	920a      	str	r2, [sp, #40]	@ 0x28
 800bc8c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800bc8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc90:	9009      	str	r0, [sp, #36]	@ 0x24
 800bc92:	f000 fd01 	bl	800c698 <_localeconv_r>
 800bc96:	6803      	ldr	r3, [r0, #0]
 800bc98:	0018      	movs	r0, r3
 800bc9a:	930d      	str	r3, [sp, #52]	@ 0x34
 800bc9c:	f7f4 fa30 	bl	8000100 <strlen>
 800bca0:	2300      	movs	r3, #0
 800bca2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bca4:	9314      	str	r3, [sp, #80]	@ 0x50
 800bca6:	7e2b      	ldrb	r3, [r5, #24]
 800bca8:	2207      	movs	r2, #7
 800bcaa:	930c      	str	r3, [sp, #48]	@ 0x30
 800bcac:	682b      	ldr	r3, [r5, #0]
 800bcae:	930e      	str	r3, [sp, #56]	@ 0x38
 800bcb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bcb2:	6823      	ldr	r3, [r4, #0]
 800bcb4:	05c9      	lsls	r1, r1, #23
 800bcb6:	d545      	bpl.n	800bd44 <_printf_float+0xc0>
 800bcb8:	189b      	adds	r3, r3, r2
 800bcba:	4393      	bics	r3, r2
 800bcbc:	001a      	movs	r2, r3
 800bcbe:	3208      	adds	r2, #8
 800bcc0:	6022      	str	r2, [r4, #0]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	681e      	ldr	r6, [r3, #0]
 800bcc6:	685f      	ldr	r7, [r3, #4]
 800bcc8:	007b      	lsls	r3, r7, #1
 800bcca:	085b      	lsrs	r3, r3, #1
 800bccc:	9311      	str	r3, [sp, #68]	@ 0x44
 800bcce:	9610      	str	r6, [sp, #64]	@ 0x40
 800bcd0:	64ae      	str	r6, [r5, #72]	@ 0x48
 800bcd2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800bcd4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800bcd6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800bcd8:	4ba7      	ldr	r3, [pc, #668]	@ (800bf78 <_printf_float+0x2f4>)
 800bcda:	4252      	negs	r2, r2
 800bcdc:	f7f7 fb56 	bl	800338c <__aeabi_dcmpun>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d131      	bne.n	800bd48 <_printf_float+0xc4>
 800bce4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800bce6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800bce8:	2201      	movs	r2, #1
 800bcea:	4ba3      	ldr	r3, [pc, #652]	@ (800bf78 <_printf_float+0x2f4>)
 800bcec:	4252      	negs	r2, r2
 800bcee:	f7f4 fbb9 	bl	8000464 <__aeabi_dcmple>
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d128      	bne.n	800bd48 <_printf_float+0xc4>
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	0030      	movs	r0, r6
 800bcfc:	0039      	movs	r1, r7
 800bcfe:	f7f4 fba7 	bl	8000450 <__aeabi_dcmplt>
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d003      	beq.n	800bd0e <_printf_float+0x8a>
 800bd06:	002b      	movs	r3, r5
 800bd08:	222d      	movs	r2, #45	@ 0x2d
 800bd0a:	3343      	adds	r3, #67	@ 0x43
 800bd0c:	701a      	strb	r2, [r3, #0]
 800bd0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd10:	4f9a      	ldr	r7, [pc, #616]	@ (800bf7c <_printf_float+0x2f8>)
 800bd12:	2b47      	cmp	r3, #71	@ 0x47
 800bd14:	d800      	bhi.n	800bd18 <_printf_float+0x94>
 800bd16:	4f9a      	ldr	r7, [pc, #616]	@ (800bf80 <_printf_float+0x2fc>)
 800bd18:	2303      	movs	r3, #3
 800bd1a:	2400      	movs	r4, #0
 800bd1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd1e:	612b      	str	r3, [r5, #16]
 800bd20:	3301      	adds	r3, #1
 800bd22:	439a      	bics	r2, r3
 800bd24:	602a      	str	r2, [r5, #0]
 800bd26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd28:	0029      	movs	r1, r5
 800bd2a:	9300      	str	r3, [sp, #0]
 800bd2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd30:	aa15      	add	r2, sp, #84	@ 0x54
 800bd32:	f000 f9e5 	bl	800c100 <_printf_common>
 800bd36:	3001      	adds	r0, #1
 800bd38:	d000      	beq.n	800bd3c <_printf_float+0xb8>
 800bd3a:	e09e      	b.n	800be7a <_printf_float+0x1f6>
 800bd3c:	2001      	movs	r0, #1
 800bd3e:	4240      	negs	r0, r0
 800bd40:	b017      	add	sp, #92	@ 0x5c
 800bd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd44:	3307      	adds	r3, #7
 800bd46:	e7b8      	b.n	800bcba <_printf_float+0x36>
 800bd48:	0032      	movs	r2, r6
 800bd4a:	003b      	movs	r3, r7
 800bd4c:	0030      	movs	r0, r6
 800bd4e:	0039      	movs	r1, r7
 800bd50:	f7f7 fb1c 	bl	800338c <__aeabi_dcmpun>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d00b      	beq.n	800bd70 <_printf_float+0xec>
 800bd58:	2f00      	cmp	r7, #0
 800bd5a:	da03      	bge.n	800bd64 <_printf_float+0xe0>
 800bd5c:	002b      	movs	r3, r5
 800bd5e:	222d      	movs	r2, #45	@ 0x2d
 800bd60:	3343      	adds	r3, #67	@ 0x43
 800bd62:	701a      	strb	r2, [r3, #0]
 800bd64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd66:	4f87      	ldr	r7, [pc, #540]	@ (800bf84 <_printf_float+0x300>)
 800bd68:	2b47      	cmp	r3, #71	@ 0x47
 800bd6a:	d8d5      	bhi.n	800bd18 <_printf_float+0x94>
 800bd6c:	4f86      	ldr	r7, [pc, #536]	@ (800bf88 <_printf_float+0x304>)
 800bd6e:	e7d3      	b.n	800bd18 <_printf_float+0x94>
 800bd70:	2220      	movs	r2, #32
 800bd72:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800bd74:	686b      	ldr	r3, [r5, #4]
 800bd76:	4394      	bics	r4, r2
 800bd78:	1c5a      	adds	r2, r3, #1
 800bd7a:	d146      	bne.n	800be0a <_printf_float+0x186>
 800bd7c:	3307      	adds	r3, #7
 800bd7e:	606b      	str	r3, [r5, #4]
 800bd80:	2380      	movs	r3, #128	@ 0x80
 800bd82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd84:	00db      	lsls	r3, r3, #3
 800bd86:	4313      	orrs	r3, r2
 800bd88:	2200      	movs	r2, #0
 800bd8a:	602b      	str	r3, [r5, #0]
 800bd8c:	9206      	str	r2, [sp, #24]
 800bd8e:	aa14      	add	r2, sp, #80	@ 0x50
 800bd90:	9205      	str	r2, [sp, #20]
 800bd92:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bd94:	a90a      	add	r1, sp, #40	@ 0x28
 800bd96:	9204      	str	r2, [sp, #16]
 800bd98:	aa13      	add	r2, sp, #76	@ 0x4c
 800bd9a:	9203      	str	r2, [sp, #12]
 800bd9c:	2223      	movs	r2, #35	@ 0x23
 800bd9e:	1852      	adds	r2, r2, r1
 800bda0:	9202      	str	r2, [sp, #8]
 800bda2:	9301      	str	r3, [sp, #4]
 800bda4:	686b      	ldr	r3, [r5, #4]
 800bda6:	0032      	movs	r2, r6
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdac:	003b      	movs	r3, r7
 800bdae:	f7ff fec4 	bl	800bb3a <__cvt>
 800bdb2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bdb4:	0007      	movs	r7, r0
 800bdb6:	2c47      	cmp	r4, #71	@ 0x47
 800bdb8:	d12d      	bne.n	800be16 <_printf_float+0x192>
 800bdba:	1cd3      	adds	r3, r2, #3
 800bdbc:	db02      	blt.n	800bdc4 <_printf_float+0x140>
 800bdbe:	686b      	ldr	r3, [r5, #4]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	dd47      	ble.n	800be54 <_printf_float+0x1d0>
 800bdc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bdc6:	3b02      	subs	r3, #2
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	930c      	str	r3, [sp, #48]	@ 0x30
 800bdcc:	0028      	movs	r0, r5
 800bdce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bdd0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bdd2:	3901      	subs	r1, #1
 800bdd4:	3050      	adds	r0, #80	@ 0x50
 800bdd6:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bdd8:	f7ff ff15 	bl	800bc06 <__exponent>
 800bddc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bdde:	0004      	movs	r4, r0
 800bde0:	1813      	adds	r3, r2, r0
 800bde2:	612b      	str	r3, [r5, #16]
 800bde4:	2a01      	cmp	r2, #1
 800bde6:	dc02      	bgt.n	800bdee <_printf_float+0x16a>
 800bde8:	682a      	ldr	r2, [r5, #0]
 800bdea:	07d2      	lsls	r2, r2, #31
 800bdec:	d501      	bpl.n	800bdf2 <_printf_float+0x16e>
 800bdee:	3301      	adds	r3, #1
 800bdf0:	612b      	str	r3, [r5, #16]
 800bdf2:	2323      	movs	r3, #35	@ 0x23
 800bdf4:	aa0a      	add	r2, sp, #40	@ 0x28
 800bdf6:	189b      	adds	r3, r3, r2
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d100      	bne.n	800be00 <_printf_float+0x17c>
 800bdfe:	e792      	b.n	800bd26 <_printf_float+0xa2>
 800be00:	002b      	movs	r3, r5
 800be02:	222d      	movs	r2, #45	@ 0x2d
 800be04:	3343      	adds	r3, #67	@ 0x43
 800be06:	701a      	strb	r2, [r3, #0]
 800be08:	e78d      	b.n	800bd26 <_printf_float+0xa2>
 800be0a:	2c47      	cmp	r4, #71	@ 0x47
 800be0c:	d1b8      	bne.n	800bd80 <_printf_float+0xfc>
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1b6      	bne.n	800bd80 <_printf_float+0xfc>
 800be12:	3301      	adds	r3, #1
 800be14:	e7b3      	b.n	800bd7e <_printf_float+0xfa>
 800be16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be18:	2b65      	cmp	r3, #101	@ 0x65
 800be1a:	d9d7      	bls.n	800bdcc <_printf_float+0x148>
 800be1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be1e:	2b66      	cmp	r3, #102	@ 0x66
 800be20:	d11a      	bne.n	800be58 <_printf_float+0x1d4>
 800be22:	686b      	ldr	r3, [r5, #4]
 800be24:	2a00      	cmp	r2, #0
 800be26:	dd09      	ble.n	800be3c <_printf_float+0x1b8>
 800be28:	612a      	str	r2, [r5, #16]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d102      	bne.n	800be34 <_printf_float+0x1b0>
 800be2e:	6829      	ldr	r1, [r5, #0]
 800be30:	07c9      	lsls	r1, r1, #31
 800be32:	d50b      	bpl.n	800be4c <_printf_float+0x1c8>
 800be34:	3301      	adds	r3, #1
 800be36:	189b      	adds	r3, r3, r2
 800be38:	612b      	str	r3, [r5, #16]
 800be3a:	e007      	b.n	800be4c <_printf_float+0x1c8>
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d103      	bne.n	800be48 <_printf_float+0x1c4>
 800be40:	2201      	movs	r2, #1
 800be42:	6829      	ldr	r1, [r5, #0]
 800be44:	4211      	tst	r1, r2
 800be46:	d000      	beq.n	800be4a <_printf_float+0x1c6>
 800be48:	1c9a      	adds	r2, r3, #2
 800be4a:	612a      	str	r2, [r5, #16]
 800be4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800be4e:	2400      	movs	r4, #0
 800be50:	65ab      	str	r3, [r5, #88]	@ 0x58
 800be52:	e7ce      	b.n	800bdf2 <_printf_float+0x16e>
 800be54:	2367      	movs	r3, #103	@ 0x67
 800be56:	930c      	str	r3, [sp, #48]	@ 0x30
 800be58:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800be5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be5c:	4299      	cmp	r1, r3
 800be5e:	db06      	blt.n	800be6e <_printf_float+0x1ea>
 800be60:	682b      	ldr	r3, [r5, #0]
 800be62:	6129      	str	r1, [r5, #16]
 800be64:	07db      	lsls	r3, r3, #31
 800be66:	d5f1      	bpl.n	800be4c <_printf_float+0x1c8>
 800be68:	3101      	adds	r1, #1
 800be6a:	6129      	str	r1, [r5, #16]
 800be6c:	e7ee      	b.n	800be4c <_printf_float+0x1c8>
 800be6e:	2201      	movs	r2, #1
 800be70:	2900      	cmp	r1, #0
 800be72:	dce0      	bgt.n	800be36 <_printf_float+0x1b2>
 800be74:	1892      	adds	r2, r2, r2
 800be76:	1a52      	subs	r2, r2, r1
 800be78:	e7dd      	b.n	800be36 <_printf_float+0x1b2>
 800be7a:	682a      	ldr	r2, [r5, #0]
 800be7c:	0553      	lsls	r3, r2, #21
 800be7e:	d408      	bmi.n	800be92 <_printf_float+0x20e>
 800be80:	692b      	ldr	r3, [r5, #16]
 800be82:	003a      	movs	r2, r7
 800be84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be88:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800be8a:	47a0      	blx	r4
 800be8c:	3001      	adds	r0, #1
 800be8e:	d129      	bne.n	800bee4 <_printf_float+0x260>
 800be90:	e754      	b.n	800bd3c <_printf_float+0xb8>
 800be92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be94:	2b65      	cmp	r3, #101	@ 0x65
 800be96:	d800      	bhi.n	800be9a <_printf_float+0x216>
 800be98:	e0db      	b.n	800c052 <_printf_float+0x3ce>
 800be9a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800be9c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800be9e:	2200      	movs	r2, #0
 800bea0:	2300      	movs	r3, #0
 800bea2:	f7f4 facf 	bl	8000444 <__aeabi_dcmpeq>
 800bea6:	2800      	cmp	r0, #0
 800bea8:	d033      	beq.n	800bf12 <_printf_float+0x28e>
 800beaa:	2301      	movs	r3, #1
 800beac:	4a37      	ldr	r2, [pc, #220]	@ (800bf8c <_printf_float+0x308>)
 800beae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800beb0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800beb2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800beb4:	47a0      	blx	r4
 800beb6:	3001      	adds	r0, #1
 800beb8:	d100      	bne.n	800bebc <_printf_float+0x238>
 800beba:	e73f      	b.n	800bd3c <_printf_float+0xb8>
 800bebc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800bebe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bec0:	42b3      	cmp	r3, r6
 800bec2:	db02      	blt.n	800beca <_printf_float+0x246>
 800bec4:	682b      	ldr	r3, [r5, #0]
 800bec6:	07db      	lsls	r3, r3, #31
 800bec8:	d50c      	bpl.n	800bee4 <_printf_float+0x260>
 800beca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800becc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bece:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bed0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bed2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bed4:	47a0      	blx	r4
 800bed6:	2400      	movs	r4, #0
 800bed8:	3001      	adds	r0, #1
 800beda:	d100      	bne.n	800bede <_printf_float+0x25a>
 800bedc:	e72e      	b.n	800bd3c <_printf_float+0xb8>
 800bede:	1e73      	subs	r3, r6, #1
 800bee0:	42a3      	cmp	r3, r4
 800bee2:	dc0a      	bgt.n	800befa <_printf_float+0x276>
 800bee4:	682b      	ldr	r3, [r5, #0]
 800bee6:	079b      	lsls	r3, r3, #30
 800bee8:	d500      	bpl.n	800beec <_printf_float+0x268>
 800beea:	e106      	b.n	800c0fa <_printf_float+0x476>
 800beec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800beee:	68e8      	ldr	r0, [r5, #12]
 800bef0:	4298      	cmp	r0, r3
 800bef2:	db00      	blt.n	800bef6 <_printf_float+0x272>
 800bef4:	e724      	b.n	800bd40 <_printf_float+0xbc>
 800bef6:	0018      	movs	r0, r3
 800bef8:	e722      	b.n	800bd40 <_printf_float+0xbc>
 800befa:	002a      	movs	r2, r5
 800befc:	2301      	movs	r3, #1
 800befe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bf00:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf02:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bf04:	321a      	adds	r2, #26
 800bf06:	47b8      	blx	r7
 800bf08:	3001      	adds	r0, #1
 800bf0a:	d100      	bne.n	800bf0e <_printf_float+0x28a>
 800bf0c:	e716      	b.n	800bd3c <_printf_float+0xb8>
 800bf0e:	3401      	adds	r4, #1
 800bf10:	e7e5      	b.n	800bede <_printf_float+0x25a>
 800bf12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	dc3b      	bgt.n	800bf90 <_printf_float+0x30c>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	4a1c      	ldr	r2, [pc, #112]	@ (800bf8c <_printf_float+0x308>)
 800bf1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bf1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf20:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bf22:	47a0      	blx	r4
 800bf24:	3001      	adds	r0, #1
 800bf26:	d100      	bne.n	800bf2a <_printf_float+0x2a6>
 800bf28:	e708      	b.n	800bd3c <_printf_float+0xb8>
 800bf2a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800bf2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bf2e:	4333      	orrs	r3, r6
 800bf30:	d102      	bne.n	800bf38 <_printf_float+0x2b4>
 800bf32:	682b      	ldr	r3, [r5, #0]
 800bf34:	07db      	lsls	r3, r3, #31
 800bf36:	d5d5      	bpl.n	800bee4 <_printf_float+0x260>
 800bf38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf3a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bf3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf40:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bf42:	47a0      	blx	r4
 800bf44:	2300      	movs	r3, #0
 800bf46:	3001      	adds	r0, #1
 800bf48:	d100      	bne.n	800bf4c <_printf_float+0x2c8>
 800bf4a:	e6f7      	b.n	800bd3c <_printf_float+0xb8>
 800bf4c:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf4e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bf50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bf52:	425b      	negs	r3, r3
 800bf54:	4293      	cmp	r3, r2
 800bf56:	dc01      	bgt.n	800bf5c <_printf_float+0x2d8>
 800bf58:	0033      	movs	r3, r6
 800bf5a:	e792      	b.n	800be82 <_printf_float+0x1fe>
 800bf5c:	002a      	movs	r2, r5
 800bf5e:	2301      	movs	r3, #1
 800bf60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bf62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf64:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bf66:	321a      	adds	r2, #26
 800bf68:	47a0      	blx	r4
 800bf6a:	3001      	adds	r0, #1
 800bf6c:	d100      	bne.n	800bf70 <_printf_float+0x2ec>
 800bf6e:	e6e5      	b.n	800bd3c <_printf_float+0xb8>
 800bf70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf72:	3301      	adds	r3, #1
 800bf74:	e7ea      	b.n	800bf4c <_printf_float+0x2c8>
 800bf76:	46c0      	nop			@ (mov r8, r8)
 800bf78:	7fefffff 	.word	0x7fefffff
 800bf7c:	0800eca4 	.word	0x0800eca4
 800bf80:	0800eca0 	.word	0x0800eca0
 800bf84:	0800ecac 	.word	0x0800ecac
 800bf88:	0800eca8 	.word	0x0800eca8
 800bf8c:	0800ecb0 	.word	0x0800ecb0
 800bf90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bf92:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800bf94:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf96:	429e      	cmp	r6, r3
 800bf98:	dd00      	ble.n	800bf9c <_printf_float+0x318>
 800bf9a:	001e      	movs	r6, r3
 800bf9c:	2e00      	cmp	r6, #0
 800bf9e:	dc31      	bgt.n	800c004 <_printf_float+0x380>
 800bfa0:	43f3      	mvns	r3, r6
 800bfa2:	2400      	movs	r4, #0
 800bfa4:	17db      	asrs	r3, r3, #31
 800bfa6:	4033      	ands	r3, r6
 800bfa8:	930e      	str	r3, [sp, #56]	@ 0x38
 800bfaa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800bfac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfae:	1af3      	subs	r3, r6, r3
 800bfb0:	42a3      	cmp	r3, r4
 800bfb2:	dc30      	bgt.n	800c016 <_printf_float+0x392>
 800bfb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bfb6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	dc38      	bgt.n	800c02e <_printf_float+0x3aa>
 800bfbc:	682b      	ldr	r3, [r5, #0]
 800bfbe:	07db      	lsls	r3, r3, #31
 800bfc0:	d435      	bmi.n	800c02e <_printf_float+0x3aa>
 800bfc2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800bfc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bfc6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bfc8:	1b9b      	subs	r3, r3, r6
 800bfca:	1b14      	subs	r4, r2, r4
 800bfcc:	429c      	cmp	r4, r3
 800bfce:	dd00      	ble.n	800bfd2 <_printf_float+0x34e>
 800bfd0:	001c      	movs	r4, r3
 800bfd2:	2c00      	cmp	r4, #0
 800bfd4:	dc34      	bgt.n	800c040 <_printf_float+0x3bc>
 800bfd6:	43e3      	mvns	r3, r4
 800bfd8:	2600      	movs	r6, #0
 800bfda:	17db      	asrs	r3, r3, #31
 800bfdc:	401c      	ands	r4, r3
 800bfde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bfe0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	1b1b      	subs	r3, r3, r4
 800bfe6:	42b3      	cmp	r3, r6
 800bfe8:	dc00      	bgt.n	800bfec <_printf_float+0x368>
 800bfea:	e77b      	b.n	800bee4 <_printf_float+0x260>
 800bfec:	002a      	movs	r2, r5
 800bfee:	2301      	movs	r3, #1
 800bff0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bff4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bff6:	321a      	adds	r2, #26
 800bff8:	47b8      	blx	r7
 800bffa:	3001      	adds	r0, #1
 800bffc:	d100      	bne.n	800c000 <_printf_float+0x37c>
 800bffe:	e69d      	b.n	800bd3c <_printf_float+0xb8>
 800c000:	3601      	adds	r6, #1
 800c002:	e7ec      	b.n	800bfde <_printf_float+0x35a>
 800c004:	0033      	movs	r3, r6
 800c006:	003a      	movs	r2, r7
 800c008:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c00a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c00c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c00e:	47a0      	blx	r4
 800c010:	3001      	adds	r0, #1
 800c012:	d1c5      	bne.n	800bfa0 <_printf_float+0x31c>
 800c014:	e692      	b.n	800bd3c <_printf_float+0xb8>
 800c016:	002a      	movs	r2, r5
 800c018:	2301      	movs	r3, #1
 800c01a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c01c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c01e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c020:	321a      	adds	r2, #26
 800c022:	47b0      	blx	r6
 800c024:	3001      	adds	r0, #1
 800c026:	d100      	bne.n	800c02a <_printf_float+0x3a6>
 800c028:	e688      	b.n	800bd3c <_printf_float+0xb8>
 800c02a:	3401      	adds	r4, #1
 800c02c:	e7bd      	b.n	800bfaa <_printf_float+0x326>
 800c02e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c030:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c032:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c034:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c036:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c038:	47a0      	blx	r4
 800c03a:	3001      	adds	r0, #1
 800c03c:	d1c1      	bne.n	800bfc2 <_printf_float+0x33e>
 800c03e:	e67d      	b.n	800bd3c <_printf_float+0xb8>
 800c040:	19ba      	adds	r2, r7, r6
 800c042:	0023      	movs	r3, r4
 800c044:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c048:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c04a:	47b0      	blx	r6
 800c04c:	3001      	adds	r0, #1
 800c04e:	d1c2      	bne.n	800bfd6 <_printf_float+0x352>
 800c050:	e674      	b.n	800bd3c <_printf_float+0xb8>
 800c052:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c054:	930c      	str	r3, [sp, #48]	@ 0x30
 800c056:	2b01      	cmp	r3, #1
 800c058:	dc02      	bgt.n	800c060 <_printf_float+0x3dc>
 800c05a:	2301      	movs	r3, #1
 800c05c:	421a      	tst	r2, r3
 800c05e:	d039      	beq.n	800c0d4 <_printf_float+0x450>
 800c060:	2301      	movs	r3, #1
 800c062:	003a      	movs	r2, r7
 800c064:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c066:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c068:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c06a:	47b0      	blx	r6
 800c06c:	3001      	adds	r0, #1
 800c06e:	d100      	bne.n	800c072 <_printf_float+0x3ee>
 800c070:	e664      	b.n	800bd3c <_printf_float+0xb8>
 800c072:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c074:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c076:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c078:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c07a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c07c:	47b0      	blx	r6
 800c07e:	3001      	adds	r0, #1
 800c080:	d100      	bne.n	800c084 <_printf_float+0x400>
 800c082:	e65b      	b.n	800bd3c <_printf_float+0xb8>
 800c084:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800c086:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800c088:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c08a:	2200      	movs	r2, #0
 800c08c:	3b01      	subs	r3, #1
 800c08e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c090:	2300      	movs	r3, #0
 800c092:	f7f4 f9d7 	bl	8000444 <__aeabi_dcmpeq>
 800c096:	2800      	cmp	r0, #0
 800c098:	d11a      	bne.n	800c0d0 <_printf_float+0x44c>
 800c09a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c09c:	1c7a      	adds	r2, r7, #1
 800c09e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0a2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c0a4:	47b0      	blx	r6
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	d10e      	bne.n	800c0c8 <_printf_float+0x444>
 800c0aa:	e647      	b.n	800bd3c <_printf_float+0xb8>
 800c0ac:	002a      	movs	r2, r5
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0b4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c0b6:	321a      	adds	r2, #26
 800c0b8:	47b8      	blx	r7
 800c0ba:	3001      	adds	r0, #1
 800c0bc:	d100      	bne.n	800c0c0 <_printf_float+0x43c>
 800c0be:	e63d      	b.n	800bd3c <_printf_float+0xb8>
 800c0c0:	3601      	adds	r6, #1
 800c0c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0c4:	429e      	cmp	r6, r3
 800c0c6:	dbf1      	blt.n	800c0ac <_printf_float+0x428>
 800c0c8:	002a      	movs	r2, r5
 800c0ca:	0023      	movs	r3, r4
 800c0cc:	3250      	adds	r2, #80	@ 0x50
 800c0ce:	e6d9      	b.n	800be84 <_printf_float+0x200>
 800c0d0:	2600      	movs	r6, #0
 800c0d2:	e7f6      	b.n	800c0c2 <_printf_float+0x43e>
 800c0d4:	003a      	movs	r2, r7
 800c0d6:	e7e2      	b.n	800c09e <_printf_float+0x41a>
 800c0d8:	002a      	movs	r2, r5
 800c0da:	2301      	movs	r3, #1
 800c0dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0e0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c0e2:	3219      	adds	r2, #25
 800c0e4:	47b0      	blx	r6
 800c0e6:	3001      	adds	r0, #1
 800c0e8:	d100      	bne.n	800c0ec <_printf_float+0x468>
 800c0ea:	e627      	b.n	800bd3c <_printf_float+0xb8>
 800c0ec:	3401      	adds	r4, #1
 800c0ee:	68eb      	ldr	r3, [r5, #12]
 800c0f0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c0f2:	1a9b      	subs	r3, r3, r2
 800c0f4:	42a3      	cmp	r3, r4
 800c0f6:	dcef      	bgt.n	800c0d8 <_printf_float+0x454>
 800c0f8:	e6f8      	b.n	800beec <_printf_float+0x268>
 800c0fa:	2400      	movs	r4, #0
 800c0fc:	e7f7      	b.n	800c0ee <_printf_float+0x46a>
 800c0fe:	46c0      	nop			@ (mov r8, r8)

0800c100 <_printf_common>:
 800c100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c102:	0016      	movs	r6, r2
 800c104:	9301      	str	r3, [sp, #4]
 800c106:	688a      	ldr	r2, [r1, #8]
 800c108:	690b      	ldr	r3, [r1, #16]
 800c10a:	000c      	movs	r4, r1
 800c10c:	9000      	str	r0, [sp, #0]
 800c10e:	4293      	cmp	r3, r2
 800c110:	da00      	bge.n	800c114 <_printf_common+0x14>
 800c112:	0013      	movs	r3, r2
 800c114:	0022      	movs	r2, r4
 800c116:	6033      	str	r3, [r6, #0]
 800c118:	3243      	adds	r2, #67	@ 0x43
 800c11a:	7812      	ldrb	r2, [r2, #0]
 800c11c:	2a00      	cmp	r2, #0
 800c11e:	d001      	beq.n	800c124 <_printf_common+0x24>
 800c120:	3301      	adds	r3, #1
 800c122:	6033      	str	r3, [r6, #0]
 800c124:	6823      	ldr	r3, [r4, #0]
 800c126:	069b      	lsls	r3, r3, #26
 800c128:	d502      	bpl.n	800c130 <_printf_common+0x30>
 800c12a:	6833      	ldr	r3, [r6, #0]
 800c12c:	3302      	adds	r3, #2
 800c12e:	6033      	str	r3, [r6, #0]
 800c130:	6822      	ldr	r2, [r4, #0]
 800c132:	2306      	movs	r3, #6
 800c134:	0015      	movs	r5, r2
 800c136:	401d      	ands	r5, r3
 800c138:	421a      	tst	r2, r3
 800c13a:	d027      	beq.n	800c18c <_printf_common+0x8c>
 800c13c:	0023      	movs	r3, r4
 800c13e:	3343      	adds	r3, #67	@ 0x43
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	1e5a      	subs	r2, r3, #1
 800c144:	4193      	sbcs	r3, r2
 800c146:	6822      	ldr	r2, [r4, #0]
 800c148:	0692      	lsls	r2, r2, #26
 800c14a:	d430      	bmi.n	800c1ae <_printf_common+0xae>
 800c14c:	0022      	movs	r2, r4
 800c14e:	9901      	ldr	r1, [sp, #4]
 800c150:	9800      	ldr	r0, [sp, #0]
 800c152:	9d08      	ldr	r5, [sp, #32]
 800c154:	3243      	adds	r2, #67	@ 0x43
 800c156:	47a8      	blx	r5
 800c158:	3001      	adds	r0, #1
 800c15a:	d025      	beq.n	800c1a8 <_printf_common+0xa8>
 800c15c:	2206      	movs	r2, #6
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	2500      	movs	r5, #0
 800c162:	4013      	ands	r3, r2
 800c164:	2b04      	cmp	r3, #4
 800c166:	d105      	bne.n	800c174 <_printf_common+0x74>
 800c168:	6833      	ldr	r3, [r6, #0]
 800c16a:	68e5      	ldr	r5, [r4, #12]
 800c16c:	1aed      	subs	r5, r5, r3
 800c16e:	43eb      	mvns	r3, r5
 800c170:	17db      	asrs	r3, r3, #31
 800c172:	401d      	ands	r5, r3
 800c174:	68a3      	ldr	r3, [r4, #8]
 800c176:	6922      	ldr	r2, [r4, #16]
 800c178:	4293      	cmp	r3, r2
 800c17a:	dd01      	ble.n	800c180 <_printf_common+0x80>
 800c17c:	1a9b      	subs	r3, r3, r2
 800c17e:	18ed      	adds	r5, r5, r3
 800c180:	2600      	movs	r6, #0
 800c182:	42b5      	cmp	r5, r6
 800c184:	d120      	bne.n	800c1c8 <_printf_common+0xc8>
 800c186:	2000      	movs	r0, #0
 800c188:	e010      	b.n	800c1ac <_printf_common+0xac>
 800c18a:	3501      	adds	r5, #1
 800c18c:	68e3      	ldr	r3, [r4, #12]
 800c18e:	6832      	ldr	r2, [r6, #0]
 800c190:	1a9b      	subs	r3, r3, r2
 800c192:	42ab      	cmp	r3, r5
 800c194:	ddd2      	ble.n	800c13c <_printf_common+0x3c>
 800c196:	0022      	movs	r2, r4
 800c198:	2301      	movs	r3, #1
 800c19a:	9901      	ldr	r1, [sp, #4]
 800c19c:	9800      	ldr	r0, [sp, #0]
 800c19e:	9f08      	ldr	r7, [sp, #32]
 800c1a0:	3219      	adds	r2, #25
 800c1a2:	47b8      	blx	r7
 800c1a4:	3001      	adds	r0, #1
 800c1a6:	d1f0      	bne.n	800c18a <_printf_common+0x8a>
 800c1a8:	2001      	movs	r0, #1
 800c1aa:	4240      	negs	r0, r0
 800c1ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c1ae:	2030      	movs	r0, #48	@ 0x30
 800c1b0:	18e1      	adds	r1, r4, r3
 800c1b2:	3143      	adds	r1, #67	@ 0x43
 800c1b4:	7008      	strb	r0, [r1, #0]
 800c1b6:	0021      	movs	r1, r4
 800c1b8:	1c5a      	adds	r2, r3, #1
 800c1ba:	3145      	adds	r1, #69	@ 0x45
 800c1bc:	7809      	ldrb	r1, [r1, #0]
 800c1be:	18a2      	adds	r2, r4, r2
 800c1c0:	3243      	adds	r2, #67	@ 0x43
 800c1c2:	3302      	adds	r3, #2
 800c1c4:	7011      	strb	r1, [r2, #0]
 800c1c6:	e7c1      	b.n	800c14c <_printf_common+0x4c>
 800c1c8:	0022      	movs	r2, r4
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	9901      	ldr	r1, [sp, #4]
 800c1ce:	9800      	ldr	r0, [sp, #0]
 800c1d0:	9f08      	ldr	r7, [sp, #32]
 800c1d2:	321a      	adds	r2, #26
 800c1d4:	47b8      	blx	r7
 800c1d6:	3001      	adds	r0, #1
 800c1d8:	d0e6      	beq.n	800c1a8 <_printf_common+0xa8>
 800c1da:	3601      	adds	r6, #1
 800c1dc:	e7d1      	b.n	800c182 <_printf_common+0x82>
	...

0800c1e0 <_printf_i>:
 800c1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1e2:	b08b      	sub	sp, #44	@ 0x2c
 800c1e4:	9206      	str	r2, [sp, #24]
 800c1e6:	000a      	movs	r2, r1
 800c1e8:	3243      	adds	r2, #67	@ 0x43
 800c1ea:	9307      	str	r3, [sp, #28]
 800c1ec:	9005      	str	r0, [sp, #20]
 800c1ee:	9203      	str	r2, [sp, #12]
 800c1f0:	7e0a      	ldrb	r2, [r1, #24]
 800c1f2:	000c      	movs	r4, r1
 800c1f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c1f6:	2a78      	cmp	r2, #120	@ 0x78
 800c1f8:	d809      	bhi.n	800c20e <_printf_i+0x2e>
 800c1fa:	2a62      	cmp	r2, #98	@ 0x62
 800c1fc:	d80b      	bhi.n	800c216 <_printf_i+0x36>
 800c1fe:	2a00      	cmp	r2, #0
 800c200:	d100      	bne.n	800c204 <_printf_i+0x24>
 800c202:	e0ba      	b.n	800c37a <_printf_i+0x19a>
 800c204:	497a      	ldr	r1, [pc, #488]	@ (800c3f0 <_printf_i+0x210>)
 800c206:	9104      	str	r1, [sp, #16]
 800c208:	2a58      	cmp	r2, #88	@ 0x58
 800c20a:	d100      	bne.n	800c20e <_printf_i+0x2e>
 800c20c:	e08e      	b.n	800c32c <_printf_i+0x14c>
 800c20e:	0025      	movs	r5, r4
 800c210:	3542      	adds	r5, #66	@ 0x42
 800c212:	702a      	strb	r2, [r5, #0]
 800c214:	e022      	b.n	800c25c <_printf_i+0x7c>
 800c216:	0010      	movs	r0, r2
 800c218:	3863      	subs	r0, #99	@ 0x63
 800c21a:	2815      	cmp	r0, #21
 800c21c:	d8f7      	bhi.n	800c20e <_printf_i+0x2e>
 800c21e:	f7f3 ff81 	bl	8000124 <__gnu_thumb1_case_shi>
 800c222:	0016      	.short	0x0016
 800c224:	fff6001f 	.word	0xfff6001f
 800c228:	fff6fff6 	.word	0xfff6fff6
 800c22c:	001ffff6 	.word	0x001ffff6
 800c230:	fff6fff6 	.word	0xfff6fff6
 800c234:	fff6fff6 	.word	0xfff6fff6
 800c238:	0036009f 	.word	0x0036009f
 800c23c:	fff6007e 	.word	0xfff6007e
 800c240:	00b0fff6 	.word	0x00b0fff6
 800c244:	0036fff6 	.word	0x0036fff6
 800c248:	fff6fff6 	.word	0xfff6fff6
 800c24c:	0082      	.short	0x0082
 800c24e:	0025      	movs	r5, r4
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	3542      	adds	r5, #66	@ 0x42
 800c254:	1d11      	adds	r1, r2, #4
 800c256:	6019      	str	r1, [r3, #0]
 800c258:	6813      	ldr	r3, [r2, #0]
 800c25a:	702b      	strb	r3, [r5, #0]
 800c25c:	2301      	movs	r3, #1
 800c25e:	e09e      	b.n	800c39e <_printf_i+0x1be>
 800c260:	6818      	ldr	r0, [r3, #0]
 800c262:	6809      	ldr	r1, [r1, #0]
 800c264:	1d02      	adds	r2, r0, #4
 800c266:	060d      	lsls	r5, r1, #24
 800c268:	d50b      	bpl.n	800c282 <_printf_i+0xa2>
 800c26a:	6806      	ldr	r6, [r0, #0]
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	2e00      	cmp	r6, #0
 800c270:	da03      	bge.n	800c27a <_printf_i+0x9a>
 800c272:	232d      	movs	r3, #45	@ 0x2d
 800c274:	9a03      	ldr	r2, [sp, #12]
 800c276:	4276      	negs	r6, r6
 800c278:	7013      	strb	r3, [r2, #0]
 800c27a:	4b5d      	ldr	r3, [pc, #372]	@ (800c3f0 <_printf_i+0x210>)
 800c27c:	270a      	movs	r7, #10
 800c27e:	9304      	str	r3, [sp, #16]
 800c280:	e018      	b.n	800c2b4 <_printf_i+0xd4>
 800c282:	6806      	ldr	r6, [r0, #0]
 800c284:	601a      	str	r2, [r3, #0]
 800c286:	0649      	lsls	r1, r1, #25
 800c288:	d5f1      	bpl.n	800c26e <_printf_i+0x8e>
 800c28a:	b236      	sxth	r6, r6
 800c28c:	e7ef      	b.n	800c26e <_printf_i+0x8e>
 800c28e:	6808      	ldr	r0, [r1, #0]
 800c290:	6819      	ldr	r1, [r3, #0]
 800c292:	c940      	ldmia	r1!, {r6}
 800c294:	0605      	lsls	r5, r0, #24
 800c296:	d402      	bmi.n	800c29e <_printf_i+0xbe>
 800c298:	0640      	lsls	r0, r0, #25
 800c29a:	d500      	bpl.n	800c29e <_printf_i+0xbe>
 800c29c:	b2b6      	uxth	r6, r6
 800c29e:	6019      	str	r1, [r3, #0]
 800c2a0:	4b53      	ldr	r3, [pc, #332]	@ (800c3f0 <_printf_i+0x210>)
 800c2a2:	270a      	movs	r7, #10
 800c2a4:	9304      	str	r3, [sp, #16]
 800c2a6:	2a6f      	cmp	r2, #111	@ 0x6f
 800c2a8:	d100      	bne.n	800c2ac <_printf_i+0xcc>
 800c2aa:	3f02      	subs	r7, #2
 800c2ac:	0023      	movs	r3, r4
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	3343      	adds	r3, #67	@ 0x43
 800c2b2:	701a      	strb	r2, [r3, #0]
 800c2b4:	6863      	ldr	r3, [r4, #4]
 800c2b6:	60a3      	str	r3, [r4, #8]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	db06      	blt.n	800c2ca <_printf_i+0xea>
 800c2bc:	2104      	movs	r1, #4
 800c2be:	6822      	ldr	r2, [r4, #0]
 800c2c0:	9d03      	ldr	r5, [sp, #12]
 800c2c2:	438a      	bics	r2, r1
 800c2c4:	6022      	str	r2, [r4, #0]
 800c2c6:	4333      	orrs	r3, r6
 800c2c8:	d00c      	beq.n	800c2e4 <_printf_i+0x104>
 800c2ca:	9d03      	ldr	r5, [sp, #12]
 800c2cc:	0030      	movs	r0, r6
 800c2ce:	0039      	movs	r1, r7
 800c2d0:	f7f3 ffb8 	bl	8000244 <__aeabi_uidivmod>
 800c2d4:	9b04      	ldr	r3, [sp, #16]
 800c2d6:	3d01      	subs	r5, #1
 800c2d8:	5c5b      	ldrb	r3, [r3, r1]
 800c2da:	702b      	strb	r3, [r5, #0]
 800c2dc:	0033      	movs	r3, r6
 800c2de:	0006      	movs	r6, r0
 800c2e0:	429f      	cmp	r7, r3
 800c2e2:	d9f3      	bls.n	800c2cc <_printf_i+0xec>
 800c2e4:	2f08      	cmp	r7, #8
 800c2e6:	d109      	bne.n	800c2fc <_printf_i+0x11c>
 800c2e8:	6823      	ldr	r3, [r4, #0]
 800c2ea:	07db      	lsls	r3, r3, #31
 800c2ec:	d506      	bpl.n	800c2fc <_printf_i+0x11c>
 800c2ee:	6862      	ldr	r2, [r4, #4]
 800c2f0:	6923      	ldr	r3, [r4, #16]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	dc02      	bgt.n	800c2fc <_printf_i+0x11c>
 800c2f6:	2330      	movs	r3, #48	@ 0x30
 800c2f8:	3d01      	subs	r5, #1
 800c2fa:	702b      	strb	r3, [r5, #0]
 800c2fc:	9b03      	ldr	r3, [sp, #12]
 800c2fe:	1b5b      	subs	r3, r3, r5
 800c300:	6123      	str	r3, [r4, #16]
 800c302:	9b07      	ldr	r3, [sp, #28]
 800c304:	0021      	movs	r1, r4
 800c306:	9300      	str	r3, [sp, #0]
 800c308:	9805      	ldr	r0, [sp, #20]
 800c30a:	9b06      	ldr	r3, [sp, #24]
 800c30c:	aa09      	add	r2, sp, #36	@ 0x24
 800c30e:	f7ff fef7 	bl	800c100 <_printf_common>
 800c312:	3001      	adds	r0, #1
 800c314:	d148      	bne.n	800c3a8 <_printf_i+0x1c8>
 800c316:	2001      	movs	r0, #1
 800c318:	4240      	negs	r0, r0
 800c31a:	b00b      	add	sp, #44	@ 0x2c
 800c31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c31e:	2220      	movs	r2, #32
 800c320:	6809      	ldr	r1, [r1, #0]
 800c322:	430a      	orrs	r2, r1
 800c324:	6022      	str	r2, [r4, #0]
 800c326:	2278      	movs	r2, #120	@ 0x78
 800c328:	4932      	ldr	r1, [pc, #200]	@ (800c3f4 <_printf_i+0x214>)
 800c32a:	9104      	str	r1, [sp, #16]
 800c32c:	0021      	movs	r1, r4
 800c32e:	3145      	adds	r1, #69	@ 0x45
 800c330:	700a      	strb	r2, [r1, #0]
 800c332:	6819      	ldr	r1, [r3, #0]
 800c334:	6822      	ldr	r2, [r4, #0]
 800c336:	c940      	ldmia	r1!, {r6}
 800c338:	0610      	lsls	r0, r2, #24
 800c33a:	d402      	bmi.n	800c342 <_printf_i+0x162>
 800c33c:	0650      	lsls	r0, r2, #25
 800c33e:	d500      	bpl.n	800c342 <_printf_i+0x162>
 800c340:	b2b6      	uxth	r6, r6
 800c342:	6019      	str	r1, [r3, #0]
 800c344:	07d3      	lsls	r3, r2, #31
 800c346:	d502      	bpl.n	800c34e <_printf_i+0x16e>
 800c348:	2320      	movs	r3, #32
 800c34a:	4313      	orrs	r3, r2
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	2e00      	cmp	r6, #0
 800c350:	d001      	beq.n	800c356 <_printf_i+0x176>
 800c352:	2710      	movs	r7, #16
 800c354:	e7aa      	b.n	800c2ac <_printf_i+0xcc>
 800c356:	2220      	movs	r2, #32
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	4393      	bics	r3, r2
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	e7f8      	b.n	800c352 <_printf_i+0x172>
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	680d      	ldr	r5, [r1, #0]
 800c364:	1d10      	adds	r0, r2, #4
 800c366:	6949      	ldr	r1, [r1, #20]
 800c368:	6018      	str	r0, [r3, #0]
 800c36a:	6813      	ldr	r3, [r2, #0]
 800c36c:	062e      	lsls	r6, r5, #24
 800c36e:	d501      	bpl.n	800c374 <_printf_i+0x194>
 800c370:	6019      	str	r1, [r3, #0]
 800c372:	e002      	b.n	800c37a <_printf_i+0x19a>
 800c374:	066d      	lsls	r5, r5, #25
 800c376:	d5fb      	bpl.n	800c370 <_printf_i+0x190>
 800c378:	8019      	strh	r1, [r3, #0]
 800c37a:	2300      	movs	r3, #0
 800c37c:	9d03      	ldr	r5, [sp, #12]
 800c37e:	6123      	str	r3, [r4, #16]
 800c380:	e7bf      	b.n	800c302 <_printf_i+0x122>
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	1d11      	adds	r1, r2, #4
 800c386:	6019      	str	r1, [r3, #0]
 800c388:	6815      	ldr	r5, [r2, #0]
 800c38a:	2100      	movs	r1, #0
 800c38c:	0028      	movs	r0, r5
 800c38e:	6862      	ldr	r2, [r4, #4]
 800c390:	f000 fa09 	bl	800c7a6 <memchr>
 800c394:	2800      	cmp	r0, #0
 800c396:	d001      	beq.n	800c39c <_printf_i+0x1bc>
 800c398:	1b40      	subs	r0, r0, r5
 800c39a:	6060      	str	r0, [r4, #4]
 800c39c:	6863      	ldr	r3, [r4, #4]
 800c39e:	6123      	str	r3, [r4, #16]
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	9a03      	ldr	r2, [sp, #12]
 800c3a4:	7013      	strb	r3, [r2, #0]
 800c3a6:	e7ac      	b.n	800c302 <_printf_i+0x122>
 800c3a8:	002a      	movs	r2, r5
 800c3aa:	6923      	ldr	r3, [r4, #16]
 800c3ac:	9906      	ldr	r1, [sp, #24]
 800c3ae:	9805      	ldr	r0, [sp, #20]
 800c3b0:	9d07      	ldr	r5, [sp, #28]
 800c3b2:	47a8      	blx	r5
 800c3b4:	3001      	adds	r0, #1
 800c3b6:	d0ae      	beq.n	800c316 <_printf_i+0x136>
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	079b      	lsls	r3, r3, #30
 800c3bc:	d415      	bmi.n	800c3ea <_printf_i+0x20a>
 800c3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3c0:	68e0      	ldr	r0, [r4, #12]
 800c3c2:	4298      	cmp	r0, r3
 800c3c4:	daa9      	bge.n	800c31a <_printf_i+0x13a>
 800c3c6:	0018      	movs	r0, r3
 800c3c8:	e7a7      	b.n	800c31a <_printf_i+0x13a>
 800c3ca:	0022      	movs	r2, r4
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	9906      	ldr	r1, [sp, #24]
 800c3d0:	9805      	ldr	r0, [sp, #20]
 800c3d2:	9e07      	ldr	r6, [sp, #28]
 800c3d4:	3219      	adds	r2, #25
 800c3d6:	47b0      	blx	r6
 800c3d8:	3001      	adds	r0, #1
 800c3da:	d09c      	beq.n	800c316 <_printf_i+0x136>
 800c3dc:	3501      	adds	r5, #1
 800c3de:	68e3      	ldr	r3, [r4, #12]
 800c3e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3e2:	1a9b      	subs	r3, r3, r2
 800c3e4:	42ab      	cmp	r3, r5
 800c3e6:	dcf0      	bgt.n	800c3ca <_printf_i+0x1ea>
 800c3e8:	e7e9      	b.n	800c3be <_printf_i+0x1de>
 800c3ea:	2500      	movs	r5, #0
 800c3ec:	e7f7      	b.n	800c3de <_printf_i+0x1fe>
 800c3ee:	46c0      	nop			@ (mov r8, r8)
 800c3f0:	0800ecb2 	.word	0x0800ecb2
 800c3f4:	0800ecc3 	.word	0x0800ecc3

0800c3f8 <std>:
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	b510      	push	{r4, lr}
 800c3fc:	0004      	movs	r4, r0
 800c3fe:	6003      	str	r3, [r0, #0]
 800c400:	6043      	str	r3, [r0, #4]
 800c402:	6083      	str	r3, [r0, #8]
 800c404:	8181      	strh	r1, [r0, #12]
 800c406:	6643      	str	r3, [r0, #100]	@ 0x64
 800c408:	81c2      	strh	r2, [r0, #14]
 800c40a:	6103      	str	r3, [r0, #16]
 800c40c:	6143      	str	r3, [r0, #20]
 800c40e:	6183      	str	r3, [r0, #24]
 800c410:	0019      	movs	r1, r3
 800c412:	2208      	movs	r2, #8
 800c414:	305c      	adds	r0, #92	@ 0x5c
 800c416:	f000 f921 	bl	800c65c <memset>
 800c41a:	4b0b      	ldr	r3, [pc, #44]	@ (800c448 <std+0x50>)
 800c41c:	6224      	str	r4, [r4, #32]
 800c41e:	6263      	str	r3, [r4, #36]	@ 0x24
 800c420:	4b0a      	ldr	r3, [pc, #40]	@ (800c44c <std+0x54>)
 800c422:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c424:	4b0a      	ldr	r3, [pc, #40]	@ (800c450 <std+0x58>)
 800c426:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c428:	4b0a      	ldr	r3, [pc, #40]	@ (800c454 <std+0x5c>)
 800c42a:	6323      	str	r3, [r4, #48]	@ 0x30
 800c42c:	4b0a      	ldr	r3, [pc, #40]	@ (800c458 <std+0x60>)
 800c42e:	429c      	cmp	r4, r3
 800c430:	d005      	beq.n	800c43e <std+0x46>
 800c432:	4b0a      	ldr	r3, [pc, #40]	@ (800c45c <std+0x64>)
 800c434:	429c      	cmp	r4, r3
 800c436:	d002      	beq.n	800c43e <std+0x46>
 800c438:	4b09      	ldr	r3, [pc, #36]	@ (800c460 <std+0x68>)
 800c43a:	429c      	cmp	r4, r3
 800c43c:	d103      	bne.n	800c446 <std+0x4e>
 800c43e:	0020      	movs	r0, r4
 800c440:	3058      	adds	r0, #88	@ 0x58
 800c442:	f000 f9a5 	bl	800c790 <__retarget_lock_init_recursive>
 800c446:	bd10      	pop	{r4, pc}
 800c448:	0800c5c5 	.word	0x0800c5c5
 800c44c:	0800c5ed 	.word	0x0800c5ed
 800c450:	0800c625 	.word	0x0800c625
 800c454:	0800c651 	.word	0x0800c651
 800c458:	20000610 	.word	0x20000610
 800c45c:	20000678 	.word	0x20000678
 800c460:	200006e0 	.word	0x200006e0

0800c464 <stdio_exit_handler>:
 800c464:	b510      	push	{r4, lr}
 800c466:	4a03      	ldr	r2, [pc, #12]	@ (800c474 <stdio_exit_handler+0x10>)
 800c468:	4903      	ldr	r1, [pc, #12]	@ (800c478 <stdio_exit_handler+0x14>)
 800c46a:	4804      	ldr	r0, [pc, #16]	@ (800c47c <stdio_exit_handler+0x18>)
 800c46c:	f000 f86c 	bl	800c548 <_fwalk_sglue>
 800c470:	bd10      	pop	{r4, pc}
 800c472:	46c0      	nop			@ (mov r8, r8)
 800c474:	2000001c 	.word	0x2000001c
 800c478:	0800e1b5 	.word	0x0800e1b5
 800c47c:	2000002c 	.word	0x2000002c

0800c480 <cleanup_stdio>:
 800c480:	6841      	ldr	r1, [r0, #4]
 800c482:	4b0b      	ldr	r3, [pc, #44]	@ (800c4b0 <cleanup_stdio+0x30>)
 800c484:	b510      	push	{r4, lr}
 800c486:	0004      	movs	r4, r0
 800c488:	4299      	cmp	r1, r3
 800c48a:	d001      	beq.n	800c490 <cleanup_stdio+0x10>
 800c48c:	f001 fe92 	bl	800e1b4 <_fflush_r>
 800c490:	68a1      	ldr	r1, [r4, #8]
 800c492:	4b08      	ldr	r3, [pc, #32]	@ (800c4b4 <cleanup_stdio+0x34>)
 800c494:	4299      	cmp	r1, r3
 800c496:	d002      	beq.n	800c49e <cleanup_stdio+0x1e>
 800c498:	0020      	movs	r0, r4
 800c49a:	f001 fe8b 	bl	800e1b4 <_fflush_r>
 800c49e:	68e1      	ldr	r1, [r4, #12]
 800c4a0:	4b05      	ldr	r3, [pc, #20]	@ (800c4b8 <cleanup_stdio+0x38>)
 800c4a2:	4299      	cmp	r1, r3
 800c4a4:	d002      	beq.n	800c4ac <cleanup_stdio+0x2c>
 800c4a6:	0020      	movs	r0, r4
 800c4a8:	f001 fe84 	bl	800e1b4 <_fflush_r>
 800c4ac:	bd10      	pop	{r4, pc}
 800c4ae:	46c0      	nop			@ (mov r8, r8)
 800c4b0:	20000610 	.word	0x20000610
 800c4b4:	20000678 	.word	0x20000678
 800c4b8:	200006e0 	.word	0x200006e0

0800c4bc <global_stdio_init.part.0>:
 800c4bc:	b510      	push	{r4, lr}
 800c4be:	4b09      	ldr	r3, [pc, #36]	@ (800c4e4 <global_stdio_init.part.0+0x28>)
 800c4c0:	4a09      	ldr	r2, [pc, #36]	@ (800c4e8 <global_stdio_init.part.0+0x2c>)
 800c4c2:	2104      	movs	r1, #4
 800c4c4:	601a      	str	r2, [r3, #0]
 800c4c6:	4809      	ldr	r0, [pc, #36]	@ (800c4ec <global_stdio_init.part.0+0x30>)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f7ff ff95 	bl	800c3f8 <std>
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	2109      	movs	r1, #9
 800c4d2:	4807      	ldr	r0, [pc, #28]	@ (800c4f0 <global_stdio_init.part.0+0x34>)
 800c4d4:	f7ff ff90 	bl	800c3f8 <std>
 800c4d8:	2202      	movs	r2, #2
 800c4da:	2112      	movs	r1, #18
 800c4dc:	4805      	ldr	r0, [pc, #20]	@ (800c4f4 <global_stdio_init.part.0+0x38>)
 800c4de:	f7ff ff8b 	bl	800c3f8 <std>
 800c4e2:	bd10      	pop	{r4, pc}
 800c4e4:	20000748 	.word	0x20000748
 800c4e8:	0800c465 	.word	0x0800c465
 800c4ec:	20000610 	.word	0x20000610
 800c4f0:	20000678 	.word	0x20000678
 800c4f4:	200006e0 	.word	0x200006e0

0800c4f8 <__sfp_lock_acquire>:
 800c4f8:	b510      	push	{r4, lr}
 800c4fa:	4802      	ldr	r0, [pc, #8]	@ (800c504 <__sfp_lock_acquire+0xc>)
 800c4fc:	f000 f949 	bl	800c792 <__retarget_lock_acquire_recursive>
 800c500:	bd10      	pop	{r4, pc}
 800c502:	46c0      	nop			@ (mov r8, r8)
 800c504:	20000751 	.word	0x20000751

0800c508 <__sfp_lock_release>:
 800c508:	b510      	push	{r4, lr}
 800c50a:	4802      	ldr	r0, [pc, #8]	@ (800c514 <__sfp_lock_release+0xc>)
 800c50c:	f000 f942 	bl	800c794 <__retarget_lock_release_recursive>
 800c510:	bd10      	pop	{r4, pc}
 800c512:	46c0      	nop			@ (mov r8, r8)
 800c514:	20000751 	.word	0x20000751

0800c518 <__sinit>:
 800c518:	b510      	push	{r4, lr}
 800c51a:	0004      	movs	r4, r0
 800c51c:	f7ff ffec 	bl	800c4f8 <__sfp_lock_acquire>
 800c520:	6a23      	ldr	r3, [r4, #32]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d002      	beq.n	800c52c <__sinit+0x14>
 800c526:	f7ff ffef 	bl	800c508 <__sfp_lock_release>
 800c52a:	bd10      	pop	{r4, pc}
 800c52c:	4b04      	ldr	r3, [pc, #16]	@ (800c540 <__sinit+0x28>)
 800c52e:	6223      	str	r3, [r4, #32]
 800c530:	4b04      	ldr	r3, [pc, #16]	@ (800c544 <__sinit+0x2c>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1f6      	bne.n	800c526 <__sinit+0xe>
 800c538:	f7ff ffc0 	bl	800c4bc <global_stdio_init.part.0>
 800c53c:	e7f3      	b.n	800c526 <__sinit+0xe>
 800c53e:	46c0      	nop			@ (mov r8, r8)
 800c540:	0800c481 	.word	0x0800c481
 800c544:	20000748 	.word	0x20000748

0800c548 <_fwalk_sglue>:
 800c548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c54a:	0014      	movs	r4, r2
 800c54c:	2600      	movs	r6, #0
 800c54e:	9000      	str	r0, [sp, #0]
 800c550:	9101      	str	r1, [sp, #4]
 800c552:	68a5      	ldr	r5, [r4, #8]
 800c554:	6867      	ldr	r7, [r4, #4]
 800c556:	3f01      	subs	r7, #1
 800c558:	d504      	bpl.n	800c564 <_fwalk_sglue+0x1c>
 800c55a:	6824      	ldr	r4, [r4, #0]
 800c55c:	2c00      	cmp	r4, #0
 800c55e:	d1f8      	bne.n	800c552 <_fwalk_sglue+0xa>
 800c560:	0030      	movs	r0, r6
 800c562:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c564:	89ab      	ldrh	r3, [r5, #12]
 800c566:	2b01      	cmp	r3, #1
 800c568:	d908      	bls.n	800c57c <_fwalk_sglue+0x34>
 800c56a:	220e      	movs	r2, #14
 800c56c:	5eab      	ldrsh	r3, [r5, r2]
 800c56e:	3301      	adds	r3, #1
 800c570:	d004      	beq.n	800c57c <_fwalk_sglue+0x34>
 800c572:	0029      	movs	r1, r5
 800c574:	9800      	ldr	r0, [sp, #0]
 800c576:	9b01      	ldr	r3, [sp, #4]
 800c578:	4798      	blx	r3
 800c57a:	4306      	orrs	r6, r0
 800c57c:	3568      	adds	r5, #104	@ 0x68
 800c57e:	e7ea      	b.n	800c556 <_fwalk_sglue+0xe>

0800c580 <siprintf>:
 800c580:	b40e      	push	{r1, r2, r3}
 800c582:	b510      	push	{r4, lr}
 800c584:	2400      	movs	r4, #0
 800c586:	490c      	ldr	r1, [pc, #48]	@ (800c5b8 <siprintf+0x38>)
 800c588:	b09d      	sub	sp, #116	@ 0x74
 800c58a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c58c:	9002      	str	r0, [sp, #8]
 800c58e:	9006      	str	r0, [sp, #24]
 800c590:	9107      	str	r1, [sp, #28]
 800c592:	9104      	str	r1, [sp, #16]
 800c594:	4809      	ldr	r0, [pc, #36]	@ (800c5bc <siprintf+0x3c>)
 800c596:	490a      	ldr	r1, [pc, #40]	@ (800c5c0 <siprintf+0x40>)
 800c598:	cb04      	ldmia	r3!, {r2}
 800c59a:	9105      	str	r1, [sp, #20]
 800c59c:	6800      	ldr	r0, [r0, #0]
 800c59e:	a902      	add	r1, sp, #8
 800c5a0:	9301      	str	r3, [sp, #4]
 800c5a2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c5a4:	f001 fc82 	bl	800deac <_svfiprintf_r>
 800c5a8:	9b02      	ldr	r3, [sp, #8]
 800c5aa:	701c      	strb	r4, [r3, #0]
 800c5ac:	b01d      	add	sp, #116	@ 0x74
 800c5ae:	bc10      	pop	{r4}
 800c5b0:	bc08      	pop	{r3}
 800c5b2:	b003      	add	sp, #12
 800c5b4:	4718      	bx	r3
 800c5b6:	46c0      	nop			@ (mov r8, r8)
 800c5b8:	7fffffff 	.word	0x7fffffff
 800c5bc:	20000028 	.word	0x20000028
 800c5c0:	ffff0208 	.word	0xffff0208

0800c5c4 <__sread>:
 800c5c4:	b570      	push	{r4, r5, r6, lr}
 800c5c6:	000c      	movs	r4, r1
 800c5c8:	250e      	movs	r5, #14
 800c5ca:	5f49      	ldrsh	r1, [r1, r5]
 800c5cc:	f000 f88e 	bl	800c6ec <_read_r>
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	db03      	blt.n	800c5dc <__sread+0x18>
 800c5d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c5d6:	181b      	adds	r3, r3, r0
 800c5d8:	6563      	str	r3, [r4, #84]	@ 0x54
 800c5da:	bd70      	pop	{r4, r5, r6, pc}
 800c5dc:	89a3      	ldrh	r3, [r4, #12]
 800c5de:	4a02      	ldr	r2, [pc, #8]	@ (800c5e8 <__sread+0x24>)
 800c5e0:	4013      	ands	r3, r2
 800c5e2:	81a3      	strh	r3, [r4, #12]
 800c5e4:	e7f9      	b.n	800c5da <__sread+0x16>
 800c5e6:	46c0      	nop			@ (mov r8, r8)
 800c5e8:	ffffefff 	.word	0xffffefff

0800c5ec <__swrite>:
 800c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ee:	001f      	movs	r7, r3
 800c5f0:	898b      	ldrh	r3, [r1, #12]
 800c5f2:	0005      	movs	r5, r0
 800c5f4:	000c      	movs	r4, r1
 800c5f6:	0016      	movs	r6, r2
 800c5f8:	05db      	lsls	r3, r3, #23
 800c5fa:	d505      	bpl.n	800c608 <__swrite+0x1c>
 800c5fc:	230e      	movs	r3, #14
 800c5fe:	5ec9      	ldrsh	r1, [r1, r3]
 800c600:	2200      	movs	r2, #0
 800c602:	2302      	movs	r3, #2
 800c604:	f000 f85e 	bl	800c6c4 <_lseek_r>
 800c608:	89a3      	ldrh	r3, [r4, #12]
 800c60a:	4a05      	ldr	r2, [pc, #20]	@ (800c620 <__swrite+0x34>)
 800c60c:	0028      	movs	r0, r5
 800c60e:	4013      	ands	r3, r2
 800c610:	81a3      	strh	r3, [r4, #12]
 800c612:	0032      	movs	r2, r6
 800c614:	230e      	movs	r3, #14
 800c616:	5ee1      	ldrsh	r1, [r4, r3]
 800c618:	003b      	movs	r3, r7
 800c61a:	f000 f87b 	bl	800c714 <_write_r>
 800c61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c620:	ffffefff 	.word	0xffffefff

0800c624 <__sseek>:
 800c624:	b570      	push	{r4, r5, r6, lr}
 800c626:	000c      	movs	r4, r1
 800c628:	250e      	movs	r5, #14
 800c62a:	5f49      	ldrsh	r1, [r1, r5]
 800c62c:	f000 f84a 	bl	800c6c4 <_lseek_r>
 800c630:	89a3      	ldrh	r3, [r4, #12]
 800c632:	1c42      	adds	r2, r0, #1
 800c634:	d103      	bne.n	800c63e <__sseek+0x1a>
 800c636:	4a05      	ldr	r2, [pc, #20]	@ (800c64c <__sseek+0x28>)
 800c638:	4013      	ands	r3, r2
 800c63a:	81a3      	strh	r3, [r4, #12]
 800c63c:	bd70      	pop	{r4, r5, r6, pc}
 800c63e:	2280      	movs	r2, #128	@ 0x80
 800c640:	0152      	lsls	r2, r2, #5
 800c642:	4313      	orrs	r3, r2
 800c644:	81a3      	strh	r3, [r4, #12]
 800c646:	6560      	str	r0, [r4, #84]	@ 0x54
 800c648:	e7f8      	b.n	800c63c <__sseek+0x18>
 800c64a:	46c0      	nop			@ (mov r8, r8)
 800c64c:	ffffefff 	.word	0xffffefff

0800c650 <__sclose>:
 800c650:	b510      	push	{r4, lr}
 800c652:	230e      	movs	r3, #14
 800c654:	5ec9      	ldrsh	r1, [r1, r3]
 800c656:	f000 f823 	bl	800c6a0 <_close_r>
 800c65a:	bd10      	pop	{r4, pc}

0800c65c <memset>:
 800c65c:	0003      	movs	r3, r0
 800c65e:	1882      	adds	r2, r0, r2
 800c660:	4293      	cmp	r3, r2
 800c662:	d100      	bne.n	800c666 <memset+0xa>
 800c664:	4770      	bx	lr
 800c666:	7019      	strb	r1, [r3, #0]
 800c668:	3301      	adds	r3, #1
 800c66a:	e7f9      	b.n	800c660 <memset+0x4>

0800c66c <strstr>:
 800c66c:	780a      	ldrb	r2, [r1, #0]
 800c66e:	b530      	push	{r4, r5, lr}
 800c670:	2a00      	cmp	r2, #0
 800c672:	d10c      	bne.n	800c68e <strstr+0x22>
 800c674:	bd30      	pop	{r4, r5, pc}
 800c676:	429a      	cmp	r2, r3
 800c678:	d108      	bne.n	800c68c <strstr+0x20>
 800c67a:	2301      	movs	r3, #1
 800c67c:	5ccc      	ldrb	r4, [r1, r3]
 800c67e:	2c00      	cmp	r4, #0
 800c680:	d0f8      	beq.n	800c674 <strstr+0x8>
 800c682:	5cc5      	ldrb	r5, [r0, r3]
 800c684:	42a5      	cmp	r5, r4
 800c686:	d101      	bne.n	800c68c <strstr+0x20>
 800c688:	3301      	adds	r3, #1
 800c68a:	e7f7      	b.n	800c67c <strstr+0x10>
 800c68c:	3001      	adds	r0, #1
 800c68e:	7803      	ldrb	r3, [r0, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1f0      	bne.n	800c676 <strstr+0xa>
 800c694:	0018      	movs	r0, r3
 800c696:	e7ed      	b.n	800c674 <strstr+0x8>

0800c698 <_localeconv_r>:
 800c698:	4800      	ldr	r0, [pc, #0]	@ (800c69c <_localeconv_r+0x4>)
 800c69a:	4770      	bx	lr
 800c69c:	20000168 	.word	0x20000168

0800c6a0 <_close_r>:
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	b570      	push	{r4, r5, r6, lr}
 800c6a4:	4d06      	ldr	r5, [pc, #24]	@ (800c6c0 <_close_r+0x20>)
 800c6a6:	0004      	movs	r4, r0
 800c6a8:	0008      	movs	r0, r1
 800c6aa:	602b      	str	r3, [r5, #0]
 800c6ac:	f7f9 fa0c 	bl	8005ac8 <_close>
 800c6b0:	1c43      	adds	r3, r0, #1
 800c6b2:	d103      	bne.n	800c6bc <_close_r+0x1c>
 800c6b4:	682b      	ldr	r3, [r5, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d000      	beq.n	800c6bc <_close_r+0x1c>
 800c6ba:	6023      	str	r3, [r4, #0]
 800c6bc:	bd70      	pop	{r4, r5, r6, pc}
 800c6be:	46c0      	nop			@ (mov r8, r8)
 800c6c0:	2000074c 	.word	0x2000074c

0800c6c4 <_lseek_r>:
 800c6c4:	b570      	push	{r4, r5, r6, lr}
 800c6c6:	0004      	movs	r4, r0
 800c6c8:	0008      	movs	r0, r1
 800c6ca:	0011      	movs	r1, r2
 800c6cc:	001a      	movs	r2, r3
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	4d05      	ldr	r5, [pc, #20]	@ (800c6e8 <_lseek_r+0x24>)
 800c6d2:	602b      	str	r3, [r5, #0]
 800c6d4:	f7f9 fa19 	bl	8005b0a <_lseek>
 800c6d8:	1c43      	adds	r3, r0, #1
 800c6da:	d103      	bne.n	800c6e4 <_lseek_r+0x20>
 800c6dc:	682b      	ldr	r3, [r5, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d000      	beq.n	800c6e4 <_lseek_r+0x20>
 800c6e2:	6023      	str	r3, [r4, #0]
 800c6e4:	bd70      	pop	{r4, r5, r6, pc}
 800c6e6:	46c0      	nop			@ (mov r8, r8)
 800c6e8:	2000074c 	.word	0x2000074c

0800c6ec <_read_r>:
 800c6ec:	b570      	push	{r4, r5, r6, lr}
 800c6ee:	0004      	movs	r4, r0
 800c6f0:	0008      	movs	r0, r1
 800c6f2:	0011      	movs	r1, r2
 800c6f4:	001a      	movs	r2, r3
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	4d05      	ldr	r5, [pc, #20]	@ (800c710 <_read_r+0x24>)
 800c6fa:	602b      	str	r3, [r5, #0]
 800c6fc:	f7f9 f9ab 	bl	8005a56 <_read>
 800c700:	1c43      	adds	r3, r0, #1
 800c702:	d103      	bne.n	800c70c <_read_r+0x20>
 800c704:	682b      	ldr	r3, [r5, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d000      	beq.n	800c70c <_read_r+0x20>
 800c70a:	6023      	str	r3, [r4, #0]
 800c70c:	bd70      	pop	{r4, r5, r6, pc}
 800c70e:	46c0      	nop			@ (mov r8, r8)
 800c710:	2000074c 	.word	0x2000074c

0800c714 <_write_r>:
 800c714:	b570      	push	{r4, r5, r6, lr}
 800c716:	0004      	movs	r4, r0
 800c718:	0008      	movs	r0, r1
 800c71a:	0011      	movs	r1, r2
 800c71c:	001a      	movs	r2, r3
 800c71e:	2300      	movs	r3, #0
 800c720:	4d05      	ldr	r5, [pc, #20]	@ (800c738 <_write_r+0x24>)
 800c722:	602b      	str	r3, [r5, #0]
 800c724:	f7f9 f9b4 	bl	8005a90 <_write>
 800c728:	1c43      	adds	r3, r0, #1
 800c72a:	d103      	bne.n	800c734 <_write_r+0x20>
 800c72c:	682b      	ldr	r3, [r5, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d000      	beq.n	800c734 <_write_r+0x20>
 800c732:	6023      	str	r3, [r4, #0]
 800c734:	bd70      	pop	{r4, r5, r6, pc}
 800c736:	46c0      	nop			@ (mov r8, r8)
 800c738:	2000074c 	.word	0x2000074c

0800c73c <__errno>:
 800c73c:	4b01      	ldr	r3, [pc, #4]	@ (800c744 <__errno+0x8>)
 800c73e:	6818      	ldr	r0, [r3, #0]
 800c740:	4770      	bx	lr
 800c742:	46c0      	nop			@ (mov r8, r8)
 800c744:	20000028 	.word	0x20000028

0800c748 <__libc_init_array>:
 800c748:	b570      	push	{r4, r5, r6, lr}
 800c74a:	2600      	movs	r6, #0
 800c74c:	4c0c      	ldr	r4, [pc, #48]	@ (800c780 <__libc_init_array+0x38>)
 800c74e:	4d0d      	ldr	r5, [pc, #52]	@ (800c784 <__libc_init_array+0x3c>)
 800c750:	1b64      	subs	r4, r4, r5
 800c752:	10a4      	asrs	r4, r4, #2
 800c754:	42a6      	cmp	r6, r4
 800c756:	d109      	bne.n	800c76c <__libc_init_array+0x24>
 800c758:	2600      	movs	r6, #0
 800c75a:	f002 f8fb 	bl	800e954 <_init>
 800c75e:	4c0a      	ldr	r4, [pc, #40]	@ (800c788 <__libc_init_array+0x40>)
 800c760:	4d0a      	ldr	r5, [pc, #40]	@ (800c78c <__libc_init_array+0x44>)
 800c762:	1b64      	subs	r4, r4, r5
 800c764:	10a4      	asrs	r4, r4, #2
 800c766:	42a6      	cmp	r6, r4
 800c768:	d105      	bne.n	800c776 <__libc_init_array+0x2e>
 800c76a:	bd70      	pop	{r4, r5, r6, pc}
 800c76c:	00b3      	lsls	r3, r6, #2
 800c76e:	58eb      	ldr	r3, [r5, r3]
 800c770:	4798      	blx	r3
 800c772:	3601      	adds	r6, #1
 800c774:	e7ee      	b.n	800c754 <__libc_init_array+0xc>
 800c776:	00b3      	lsls	r3, r6, #2
 800c778:	58eb      	ldr	r3, [r5, r3]
 800c77a:	4798      	blx	r3
 800c77c:	3601      	adds	r6, #1
 800c77e:	e7f2      	b.n	800c766 <__libc_init_array+0x1e>
 800c780:	0800f014 	.word	0x0800f014
 800c784:	0800f014 	.word	0x0800f014
 800c788:	0800f018 	.word	0x0800f018
 800c78c:	0800f014 	.word	0x0800f014

0800c790 <__retarget_lock_init_recursive>:
 800c790:	4770      	bx	lr

0800c792 <__retarget_lock_acquire_recursive>:
 800c792:	4770      	bx	lr

0800c794 <__retarget_lock_release_recursive>:
 800c794:	4770      	bx	lr

0800c796 <strcpy>:
 800c796:	0003      	movs	r3, r0
 800c798:	780a      	ldrb	r2, [r1, #0]
 800c79a:	3101      	adds	r1, #1
 800c79c:	701a      	strb	r2, [r3, #0]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	2a00      	cmp	r2, #0
 800c7a2:	d1f9      	bne.n	800c798 <strcpy+0x2>
 800c7a4:	4770      	bx	lr

0800c7a6 <memchr>:
 800c7a6:	b2c9      	uxtb	r1, r1
 800c7a8:	1882      	adds	r2, r0, r2
 800c7aa:	4290      	cmp	r0, r2
 800c7ac:	d101      	bne.n	800c7b2 <memchr+0xc>
 800c7ae:	2000      	movs	r0, #0
 800c7b0:	4770      	bx	lr
 800c7b2:	7803      	ldrb	r3, [r0, #0]
 800c7b4:	428b      	cmp	r3, r1
 800c7b6:	d0fb      	beq.n	800c7b0 <memchr+0xa>
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	e7f6      	b.n	800c7aa <memchr+0x4>

0800c7bc <quorem>:
 800c7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7be:	6903      	ldr	r3, [r0, #16]
 800c7c0:	690c      	ldr	r4, [r1, #16]
 800c7c2:	b089      	sub	sp, #36	@ 0x24
 800c7c4:	9003      	str	r0, [sp, #12]
 800c7c6:	9106      	str	r1, [sp, #24]
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	42a3      	cmp	r3, r4
 800c7cc:	db63      	blt.n	800c896 <quorem+0xda>
 800c7ce:	000b      	movs	r3, r1
 800c7d0:	3c01      	subs	r4, #1
 800c7d2:	3314      	adds	r3, #20
 800c7d4:	00a5      	lsls	r5, r4, #2
 800c7d6:	9304      	str	r3, [sp, #16]
 800c7d8:	195b      	adds	r3, r3, r5
 800c7da:	9305      	str	r3, [sp, #20]
 800c7dc:	9b03      	ldr	r3, [sp, #12]
 800c7de:	3314      	adds	r3, #20
 800c7e0:	9301      	str	r3, [sp, #4]
 800c7e2:	195d      	adds	r5, r3, r5
 800c7e4:	9b05      	ldr	r3, [sp, #20]
 800c7e6:	682f      	ldr	r7, [r5, #0]
 800c7e8:	681e      	ldr	r6, [r3, #0]
 800c7ea:	0038      	movs	r0, r7
 800c7ec:	3601      	adds	r6, #1
 800c7ee:	0031      	movs	r1, r6
 800c7f0:	f7f3 fca2 	bl	8000138 <__udivsi3>
 800c7f4:	9002      	str	r0, [sp, #8]
 800c7f6:	42b7      	cmp	r7, r6
 800c7f8:	d327      	bcc.n	800c84a <quorem+0x8e>
 800c7fa:	9b04      	ldr	r3, [sp, #16]
 800c7fc:	2700      	movs	r7, #0
 800c7fe:	469c      	mov	ip, r3
 800c800:	9e01      	ldr	r6, [sp, #4]
 800c802:	9707      	str	r7, [sp, #28]
 800c804:	4662      	mov	r2, ip
 800c806:	ca08      	ldmia	r2!, {r3}
 800c808:	6830      	ldr	r0, [r6, #0]
 800c80a:	4694      	mov	ip, r2
 800c80c:	9a02      	ldr	r2, [sp, #8]
 800c80e:	b299      	uxth	r1, r3
 800c810:	4351      	muls	r1, r2
 800c812:	0c1b      	lsrs	r3, r3, #16
 800c814:	4353      	muls	r3, r2
 800c816:	19c9      	adds	r1, r1, r7
 800c818:	0c0a      	lsrs	r2, r1, #16
 800c81a:	189b      	adds	r3, r3, r2
 800c81c:	b289      	uxth	r1, r1
 800c81e:	b282      	uxth	r2, r0
 800c820:	1a52      	subs	r2, r2, r1
 800c822:	9907      	ldr	r1, [sp, #28]
 800c824:	0c1f      	lsrs	r7, r3, #16
 800c826:	1852      	adds	r2, r2, r1
 800c828:	0c00      	lsrs	r0, r0, #16
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	1411      	asrs	r1, r2, #16
 800c82e:	1ac3      	subs	r3, r0, r3
 800c830:	185b      	adds	r3, r3, r1
 800c832:	1419      	asrs	r1, r3, #16
 800c834:	b292      	uxth	r2, r2
 800c836:	041b      	lsls	r3, r3, #16
 800c838:	431a      	orrs	r2, r3
 800c83a:	9b05      	ldr	r3, [sp, #20]
 800c83c:	9107      	str	r1, [sp, #28]
 800c83e:	c604      	stmia	r6!, {r2}
 800c840:	4563      	cmp	r3, ip
 800c842:	d2df      	bcs.n	800c804 <quorem+0x48>
 800c844:	682b      	ldr	r3, [r5, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d02b      	beq.n	800c8a2 <quorem+0xe6>
 800c84a:	9906      	ldr	r1, [sp, #24]
 800c84c:	9803      	ldr	r0, [sp, #12]
 800c84e:	f001 f9b7 	bl	800dbc0 <__mcmp>
 800c852:	2800      	cmp	r0, #0
 800c854:	db1e      	blt.n	800c894 <quorem+0xd8>
 800c856:	2600      	movs	r6, #0
 800c858:	9d01      	ldr	r5, [sp, #4]
 800c85a:	9904      	ldr	r1, [sp, #16]
 800c85c:	c901      	ldmia	r1!, {r0}
 800c85e:	682b      	ldr	r3, [r5, #0]
 800c860:	b287      	uxth	r7, r0
 800c862:	b29a      	uxth	r2, r3
 800c864:	1bd2      	subs	r2, r2, r7
 800c866:	1992      	adds	r2, r2, r6
 800c868:	0c00      	lsrs	r0, r0, #16
 800c86a:	0c1b      	lsrs	r3, r3, #16
 800c86c:	1a1b      	subs	r3, r3, r0
 800c86e:	1410      	asrs	r0, r2, #16
 800c870:	181b      	adds	r3, r3, r0
 800c872:	141e      	asrs	r6, r3, #16
 800c874:	b292      	uxth	r2, r2
 800c876:	041b      	lsls	r3, r3, #16
 800c878:	431a      	orrs	r2, r3
 800c87a:	9b05      	ldr	r3, [sp, #20]
 800c87c:	c504      	stmia	r5!, {r2}
 800c87e:	428b      	cmp	r3, r1
 800c880:	d2ec      	bcs.n	800c85c <quorem+0xa0>
 800c882:	9a01      	ldr	r2, [sp, #4]
 800c884:	00a3      	lsls	r3, r4, #2
 800c886:	18d3      	adds	r3, r2, r3
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	2a00      	cmp	r2, #0
 800c88c:	d014      	beq.n	800c8b8 <quorem+0xfc>
 800c88e:	9b02      	ldr	r3, [sp, #8]
 800c890:	3301      	adds	r3, #1
 800c892:	9302      	str	r3, [sp, #8]
 800c894:	9802      	ldr	r0, [sp, #8]
 800c896:	b009      	add	sp, #36	@ 0x24
 800c898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c89a:	682b      	ldr	r3, [r5, #0]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d104      	bne.n	800c8aa <quorem+0xee>
 800c8a0:	3c01      	subs	r4, #1
 800c8a2:	9b01      	ldr	r3, [sp, #4]
 800c8a4:	3d04      	subs	r5, #4
 800c8a6:	42ab      	cmp	r3, r5
 800c8a8:	d3f7      	bcc.n	800c89a <quorem+0xde>
 800c8aa:	9b03      	ldr	r3, [sp, #12]
 800c8ac:	611c      	str	r4, [r3, #16]
 800c8ae:	e7cc      	b.n	800c84a <quorem+0x8e>
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	2a00      	cmp	r2, #0
 800c8b4:	d104      	bne.n	800c8c0 <quorem+0x104>
 800c8b6:	3c01      	subs	r4, #1
 800c8b8:	9a01      	ldr	r2, [sp, #4]
 800c8ba:	3b04      	subs	r3, #4
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d3f7      	bcc.n	800c8b0 <quorem+0xf4>
 800c8c0:	9b03      	ldr	r3, [sp, #12]
 800c8c2:	611c      	str	r4, [r3, #16]
 800c8c4:	e7e3      	b.n	800c88e <quorem+0xd2>
	...

0800c8c8 <_dtoa_r>:
 800c8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ca:	0014      	movs	r4, r2
 800c8cc:	001d      	movs	r5, r3
 800c8ce:	69c6      	ldr	r6, [r0, #28]
 800c8d0:	b09d      	sub	sp, #116	@ 0x74
 800c8d2:	940a      	str	r4, [sp, #40]	@ 0x28
 800c8d4:	950b      	str	r5, [sp, #44]	@ 0x2c
 800c8d6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800c8d8:	9003      	str	r0, [sp, #12]
 800c8da:	2e00      	cmp	r6, #0
 800c8dc:	d10f      	bne.n	800c8fe <_dtoa_r+0x36>
 800c8de:	2010      	movs	r0, #16
 800c8e0:	f000 fe2c 	bl	800d53c <malloc>
 800c8e4:	9b03      	ldr	r3, [sp, #12]
 800c8e6:	1e02      	subs	r2, r0, #0
 800c8e8:	61d8      	str	r0, [r3, #28]
 800c8ea:	d104      	bne.n	800c8f6 <_dtoa_r+0x2e>
 800c8ec:	21ef      	movs	r1, #239	@ 0xef
 800c8ee:	4bc7      	ldr	r3, [pc, #796]	@ (800cc0c <_dtoa_r+0x344>)
 800c8f0:	48c7      	ldr	r0, [pc, #796]	@ (800cc10 <_dtoa_r+0x348>)
 800c8f2:	f001 fcb9 	bl	800e268 <__assert_func>
 800c8f6:	6046      	str	r6, [r0, #4]
 800c8f8:	6086      	str	r6, [r0, #8]
 800c8fa:	6006      	str	r6, [r0, #0]
 800c8fc:	60c6      	str	r6, [r0, #12]
 800c8fe:	9b03      	ldr	r3, [sp, #12]
 800c900:	69db      	ldr	r3, [r3, #28]
 800c902:	6819      	ldr	r1, [r3, #0]
 800c904:	2900      	cmp	r1, #0
 800c906:	d00b      	beq.n	800c920 <_dtoa_r+0x58>
 800c908:	685a      	ldr	r2, [r3, #4]
 800c90a:	2301      	movs	r3, #1
 800c90c:	4093      	lsls	r3, r2
 800c90e:	604a      	str	r2, [r1, #4]
 800c910:	608b      	str	r3, [r1, #8]
 800c912:	9803      	ldr	r0, [sp, #12]
 800c914:	f000 ff12 	bl	800d73c <_Bfree>
 800c918:	2200      	movs	r2, #0
 800c91a:	9b03      	ldr	r3, [sp, #12]
 800c91c:	69db      	ldr	r3, [r3, #28]
 800c91e:	601a      	str	r2, [r3, #0]
 800c920:	2d00      	cmp	r5, #0
 800c922:	da1e      	bge.n	800c962 <_dtoa_r+0x9a>
 800c924:	2301      	movs	r3, #1
 800c926:	603b      	str	r3, [r7, #0]
 800c928:	006b      	lsls	r3, r5, #1
 800c92a:	085b      	lsrs	r3, r3, #1
 800c92c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c92e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c930:	4bb8      	ldr	r3, [pc, #736]	@ (800cc14 <_dtoa_r+0x34c>)
 800c932:	4ab8      	ldr	r2, [pc, #736]	@ (800cc14 <_dtoa_r+0x34c>)
 800c934:	403b      	ands	r3, r7
 800c936:	4293      	cmp	r3, r2
 800c938:	d116      	bne.n	800c968 <_dtoa_r+0xa0>
 800c93a:	4bb7      	ldr	r3, [pc, #732]	@ (800cc18 <_dtoa_r+0x350>)
 800c93c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c93e:	6013      	str	r3, [r2, #0]
 800c940:	033b      	lsls	r3, r7, #12
 800c942:	0b1b      	lsrs	r3, r3, #12
 800c944:	4323      	orrs	r3, r4
 800c946:	d101      	bne.n	800c94c <_dtoa_r+0x84>
 800c948:	f000 fd80 	bl	800d44c <_dtoa_r+0xb84>
 800c94c:	4bb3      	ldr	r3, [pc, #716]	@ (800cc1c <_dtoa_r+0x354>)
 800c94e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c950:	9308      	str	r3, [sp, #32]
 800c952:	2a00      	cmp	r2, #0
 800c954:	d002      	beq.n	800c95c <_dtoa_r+0x94>
 800c956:	4bb2      	ldr	r3, [pc, #712]	@ (800cc20 <_dtoa_r+0x358>)
 800c958:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c95a:	6013      	str	r3, [r2, #0]
 800c95c:	9808      	ldr	r0, [sp, #32]
 800c95e:	b01d      	add	sp, #116	@ 0x74
 800c960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c962:	2300      	movs	r3, #0
 800c964:	603b      	str	r3, [r7, #0]
 800c966:	e7e2      	b.n	800c92e <_dtoa_r+0x66>
 800c968:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c96a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c96c:	9212      	str	r2, [sp, #72]	@ 0x48
 800c96e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c970:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c972:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c974:	2200      	movs	r2, #0
 800c976:	2300      	movs	r3, #0
 800c978:	f7f3 fd64 	bl	8000444 <__aeabi_dcmpeq>
 800c97c:	1e06      	subs	r6, r0, #0
 800c97e:	d00b      	beq.n	800c998 <_dtoa_r+0xd0>
 800c980:	2301      	movs	r3, #1
 800c982:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c984:	6013      	str	r3, [r2, #0]
 800c986:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d002      	beq.n	800c992 <_dtoa_r+0xca>
 800c98c:	4ba5      	ldr	r3, [pc, #660]	@ (800cc24 <_dtoa_r+0x35c>)
 800c98e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c990:	6013      	str	r3, [r2, #0]
 800c992:	4ba5      	ldr	r3, [pc, #660]	@ (800cc28 <_dtoa_r+0x360>)
 800c994:	9308      	str	r3, [sp, #32]
 800c996:	e7e1      	b.n	800c95c <_dtoa_r+0x94>
 800c998:	ab1a      	add	r3, sp, #104	@ 0x68
 800c99a:	9301      	str	r3, [sp, #4]
 800c99c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c99e:	9300      	str	r3, [sp, #0]
 800c9a0:	9803      	ldr	r0, [sp, #12]
 800c9a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c9a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c9a6:	f001 f9c1 	bl	800dd2c <__d2b>
 800c9aa:	007a      	lsls	r2, r7, #1
 800c9ac:	9005      	str	r0, [sp, #20]
 800c9ae:	0d52      	lsrs	r2, r2, #21
 800c9b0:	d100      	bne.n	800c9b4 <_dtoa_r+0xec>
 800c9b2:	e07b      	b.n	800caac <_dtoa_r+0x1e4>
 800c9b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c9b6:	9618      	str	r6, [sp, #96]	@ 0x60
 800c9b8:	0319      	lsls	r1, r3, #12
 800c9ba:	4b9c      	ldr	r3, [pc, #624]	@ (800cc2c <_dtoa_r+0x364>)
 800c9bc:	0b09      	lsrs	r1, r1, #12
 800c9be:	430b      	orrs	r3, r1
 800c9c0:	499b      	ldr	r1, [pc, #620]	@ (800cc30 <_dtoa_r+0x368>)
 800c9c2:	1857      	adds	r7, r2, r1
 800c9c4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c9c6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c9c8:	0019      	movs	r1, r3
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	4b99      	ldr	r3, [pc, #612]	@ (800cc34 <_dtoa_r+0x36c>)
 800c9ce:	f7f6 f8d3 	bl	8002b78 <__aeabi_dsub>
 800c9d2:	4a99      	ldr	r2, [pc, #612]	@ (800cc38 <_dtoa_r+0x370>)
 800c9d4:	4b99      	ldr	r3, [pc, #612]	@ (800cc3c <_dtoa_r+0x374>)
 800c9d6:	f7f5 fde9 	bl	80025ac <__aeabi_dmul>
 800c9da:	4a99      	ldr	r2, [pc, #612]	@ (800cc40 <_dtoa_r+0x378>)
 800c9dc:	4b99      	ldr	r3, [pc, #612]	@ (800cc44 <_dtoa_r+0x37c>)
 800c9de:	f7f4 fde5 	bl	80015ac <__aeabi_dadd>
 800c9e2:	0004      	movs	r4, r0
 800c9e4:	0038      	movs	r0, r7
 800c9e6:	000d      	movs	r5, r1
 800c9e8:	f7f6 fd2e 	bl	8003448 <__aeabi_i2d>
 800c9ec:	4a96      	ldr	r2, [pc, #600]	@ (800cc48 <_dtoa_r+0x380>)
 800c9ee:	4b97      	ldr	r3, [pc, #604]	@ (800cc4c <_dtoa_r+0x384>)
 800c9f0:	f7f5 fddc 	bl	80025ac <__aeabi_dmul>
 800c9f4:	0002      	movs	r2, r0
 800c9f6:	000b      	movs	r3, r1
 800c9f8:	0020      	movs	r0, r4
 800c9fa:	0029      	movs	r1, r5
 800c9fc:	f7f4 fdd6 	bl	80015ac <__aeabi_dadd>
 800ca00:	0004      	movs	r4, r0
 800ca02:	000d      	movs	r5, r1
 800ca04:	f7f6 fce4 	bl	80033d0 <__aeabi_d2iz>
 800ca08:	2200      	movs	r2, #0
 800ca0a:	9004      	str	r0, [sp, #16]
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	0020      	movs	r0, r4
 800ca10:	0029      	movs	r1, r5
 800ca12:	f7f3 fd1d 	bl	8000450 <__aeabi_dcmplt>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d00b      	beq.n	800ca32 <_dtoa_r+0x16a>
 800ca1a:	9804      	ldr	r0, [sp, #16]
 800ca1c:	f7f6 fd14 	bl	8003448 <__aeabi_i2d>
 800ca20:	002b      	movs	r3, r5
 800ca22:	0022      	movs	r2, r4
 800ca24:	f7f3 fd0e 	bl	8000444 <__aeabi_dcmpeq>
 800ca28:	4243      	negs	r3, r0
 800ca2a:	4158      	adcs	r0, r3
 800ca2c:	9b04      	ldr	r3, [sp, #16]
 800ca2e:	1a1b      	subs	r3, r3, r0
 800ca30:	9304      	str	r3, [sp, #16]
 800ca32:	2301      	movs	r3, #1
 800ca34:	9315      	str	r3, [sp, #84]	@ 0x54
 800ca36:	9b04      	ldr	r3, [sp, #16]
 800ca38:	2b16      	cmp	r3, #22
 800ca3a:	d810      	bhi.n	800ca5e <_dtoa_r+0x196>
 800ca3c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ca3e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ca40:	9a04      	ldr	r2, [sp, #16]
 800ca42:	4b83      	ldr	r3, [pc, #524]	@ (800cc50 <_dtoa_r+0x388>)
 800ca44:	00d2      	lsls	r2, r2, #3
 800ca46:	189b      	adds	r3, r3, r2
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	f7f3 fd00 	bl	8000450 <__aeabi_dcmplt>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d047      	beq.n	800cae4 <_dtoa_r+0x21c>
 800ca54:	9b04      	ldr	r3, [sp, #16]
 800ca56:	3b01      	subs	r3, #1
 800ca58:	9304      	str	r3, [sp, #16]
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ca5e:	2200      	movs	r2, #0
 800ca60:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ca62:	9206      	str	r2, [sp, #24]
 800ca64:	1bdb      	subs	r3, r3, r7
 800ca66:	1e5a      	subs	r2, r3, #1
 800ca68:	d53e      	bpl.n	800cae8 <_dtoa_r+0x220>
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	1ad3      	subs	r3, r2, r3
 800ca6e:	9306      	str	r3, [sp, #24]
 800ca70:	2300      	movs	r3, #0
 800ca72:	930d      	str	r3, [sp, #52]	@ 0x34
 800ca74:	9b04      	ldr	r3, [sp, #16]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	db38      	blt.n	800caec <_dtoa_r+0x224>
 800ca7a:	9a04      	ldr	r2, [sp, #16]
 800ca7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca7e:	4694      	mov	ip, r2
 800ca80:	4463      	add	r3, ip
 800ca82:	930d      	str	r3, [sp, #52]	@ 0x34
 800ca84:	2300      	movs	r3, #0
 800ca86:	9214      	str	r2, [sp, #80]	@ 0x50
 800ca88:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca8a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ca8c:	2401      	movs	r4, #1
 800ca8e:	2b09      	cmp	r3, #9
 800ca90:	d862      	bhi.n	800cb58 <_dtoa_r+0x290>
 800ca92:	2b05      	cmp	r3, #5
 800ca94:	dd02      	ble.n	800ca9c <_dtoa_r+0x1d4>
 800ca96:	2400      	movs	r4, #0
 800ca98:	3b04      	subs	r3, #4
 800ca9a:	9322      	str	r3, [sp, #136]	@ 0x88
 800ca9c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ca9e:	1e98      	subs	r0, r3, #2
 800caa0:	2803      	cmp	r0, #3
 800caa2:	d863      	bhi.n	800cb6c <_dtoa_r+0x2a4>
 800caa4:	f7f3 fb34 	bl	8000110 <__gnu_thumb1_case_uqi>
 800caa8:	2b385654 	.word	0x2b385654
 800caac:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800caae:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800cab0:	18f6      	adds	r6, r6, r3
 800cab2:	4b68      	ldr	r3, [pc, #416]	@ (800cc54 <_dtoa_r+0x38c>)
 800cab4:	18f2      	adds	r2, r6, r3
 800cab6:	2a20      	cmp	r2, #32
 800cab8:	dd0f      	ble.n	800cada <_dtoa_r+0x212>
 800caba:	2340      	movs	r3, #64	@ 0x40
 800cabc:	1a9b      	subs	r3, r3, r2
 800cabe:	409f      	lsls	r7, r3
 800cac0:	4b65      	ldr	r3, [pc, #404]	@ (800cc58 <_dtoa_r+0x390>)
 800cac2:	0038      	movs	r0, r7
 800cac4:	18f3      	adds	r3, r6, r3
 800cac6:	40dc      	lsrs	r4, r3
 800cac8:	4320      	orrs	r0, r4
 800caca:	f7f6 fceb 	bl	80034a4 <__aeabi_ui2d>
 800cace:	2201      	movs	r2, #1
 800cad0:	4b62      	ldr	r3, [pc, #392]	@ (800cc5c <_dtoa_r+0x394>)
 800cad2:	1e77      	subs	r7, r6, #1
 800cad4:	18cb      	adds	r3, r1, r3
 800cad6:	9218      	str	r2, [sp, #96]	@ 0x60
 800cad8:	e776      	b.n	800c9c8 <_dtoa_r+0x100>
 800cada:	2320      	movs	r3, #32
 800cadc:	0020      	movs	r0, r4
 800cade:	1a9b      	subs	r3, r3, r2
 800cae0:	4098      	lsls	r0, r3
 800cae2:	e7f2      	b.n	800caca <_dtoa_r+0x202>
 800cae4:	9015      	str	r0, [sp, #84]	@ 0x54
 800cae6:	e7ba      	b.n	800ca5e <_dtoa_r+0x196>
 800cae8:	920d      	str	r2, [sp, #52]	@ 0x34
 800caea:	e7c3      	b.n	800ca74 <_dtoa_r+0x1ac>
 800caec:	9b06      	ldr	r3, [sp, #24]
 800caee:	9a04      	ldr	r2, [sp, #16]
 800caf0:	1a9b      	subs	r3, r3, r2
 800caf2:	9306      	str	r3, [sp, #24]
 800caf4:	4253      	negs	r3, r2
 800caf6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800caf8:	2300      	movs	r3, #0
 800cafa:	9314      	str	r3, [sp, #80]	@ 0x50
 800cafc:	e7c5      	b.n	800ca8a <_dtoa_r+0x1c2>
 800cafe:	2301      	movs	r3, #1
 800cb00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cb02:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb04:	4694      	mov	ip, r2
 800cb06:	9b04      	ldr	r3, [sp, #16]
 800cb08:	4463      	add	r3, ip
 800cb0a:	930e      	str	r3, [sp, #56]	@ 0x38
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	dc08      	bgt.n	800cb26 <_dtoa_r+0x25e>
 800cb14:	2301      	movs	r3, #1
 800cb16:	e006      	b.n	800cb26 <_dtoa_r+0x25e>
 800cb18:	2301      	movs	r3, #1
 800cb1a:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	dd28      	ble.n	800cb74 <_dtoa_r+0x2ac>
 800cb22:	930e      	str	r3, [sp, #56]	@ 0x38
 800cb24:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb26:	9a03      	ldr	r2, [sp, #12]
 800cb28:	2100      	movs	r1, #0
 800cb2a:	69d0      	ldr	r0, [r2, #28]
 800cb2c:	2204      	movs	r2, #4
 800cb2e:	0015      	movs	r5, r2
 800cb30:	3514      	adds	r5, #20
 800cb32:	429d      	cmp	r5, r3
 800cb34:	d923      	bls.n	800cb7e <_dtoa_r+0x2b6>
 800cb36:	6041      	str	r1, [r0, #4]
 800cb38:	9803      	ldr	r0, [sp, #12]
 800cb3a:	f000 fdbb 	bl	800d6b4 <_Balloc>
 800cb3e:	9008      	str	r0, [sp, #32]
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d11f      	bne.n	800cb84 <_dtoa_r+0x2bc>
 800cb44:	21b0      	movs	r1, #176	@ 0xb0
 800cb46:	4b46      	ldr	r3, [pc, #280]	@ (800cc60 <_dtoa_r+0x398>)
 800cb48:	4831      	ldr	r0, [pc, #196]	@ (800cc10 <_dtoa_r+0x348>)
 800cb4a:	9a08      	ldr	r2, [sp, #32]
 800cb4c:	31ff      	adds	r1, #255	@ 0xff
 800cb4e:	e6d0      	b.n	800c8f2 <_dtoa_r+0x2a>
 800cb50:	2300      	movs	r3, #0
 800cb52:	e7e2      	b.n	800cb1a <_dtoa_r+0x252>
 800cb54:	2300      	movs	r3, #0
 800cb56:	e7d3      	b.n	800cb00 <_dtoa_r+0x238>
 800cb58:	2300      	movs	r3, #0
 800cb5a:	9410      	str	r4, [sp, #64]	@ 0x40
 800cb5c:	9322      	str	r3, [sp, #136]	@ 0x88
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	2200      	movs	r2, #0
 800cb62:	930e      	str	r3, [sp, #56]	@ 0x38
 800cb64:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb66:	3313      	adds	r3, #19
 800cb68:	9223      	str	r2, [sp, #140]	@ 0x8c
 800cb6a:	e7dc      	b.n	800cb26 <_dtoa_r+0x25e>
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cb70:	3b02      	subs	r3, #2
 800cb72:	e7f5      	b.n	800cb60 <_dtoa_r+0x298>
 800cb74:	2301      	movs	r3, #1
 800cb76:	001a      	movs	r2, r3
 800cb78:	930e      	str	r3, [sp, #56]	@ 0x38
 800cb7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb7c:	e7f4      	b.n	800cb68 <_dtoa_r+0x2a0>
 800cb7e:	3101      	adds	r1, #1
 800cb80:	0052      	lsls	r2, r2, #1
 800cb82:	e7d4      	b.n	800cb2e <_dtoa_r+0x266>
 800cb84:	9b03      	ldr	r3, [sp, #12]
 800cb86:	9a08      	ldr	r2, [sp, #32]
 800cb88:	69db      	ldr	r3, [r3, #28]
 800cb8a:	601a      	str	r2, [r3, #0]
 800cb8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb8e:	2b0e      	cmp	r3, #14
 800cb90:	d900      	bls.n	800cb94 <_dtoa_r+0x2cc>
 800cb92:	e0d6      	b.n	800cd42 <_dtoa_r+0x47a>
 800cb94:	2c00      	cmp	r4, #0
 800cb96:	d100      	bne.n	800cb9a <_dtoa_r+0x2d2>
 800cb98:	e0d3      	b.n	800cd42 <_dtoa_r+0x47a>
 800cb9a:	9b04      	ldr	r3, [sp, #16]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	dd63      	ble.n	800cc68 <_dtoa_r+0x3a0>
 800cba0:	210f      	movs	r1, #15
 800cba2:	9a04      	ldr	r2, [sp, #16]
 800cba4:	4b2a      	ldr	r3, [pc, #168]	@ (800cc50 <_dtoa_r+0x388>)
 800cba6:	400a      	ands	r2, r1
 800cba8:	00d2      	lsls	r2, r2, #3
 800cbaa:	189b      	adds	r3, r3, r2
 800cbac:	681e      	ldr	r6, [r3, #0]
 800cbae:	685f      	ldr	r7, [r3, #4]
 800cbb0:	9b04      	ldr	r3, [sp, #16]
 800cbb2:	2402      	movs	r4, #2
 800cbb4:	111d      	asrs	r5, r3, #4
 800cbb6:	05db      	lsls	r3, r3, #23
 800cbb8:	d50a      	bpl.n	800cbd0 <_dtoa_r+0x308>
 800cbba:	4b2a      	ldr	r3, [pc, #168]	@ (800cc64 <_dtoa_r+0x39c>)
 800cbbc:	400d      	ands	r5, r1
 800cbbe:	6a1a      	ldr	r2, [r3, #32]
 800cbc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbc2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800cbc4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cbc6:	f7f5 f8b7 	bl	8001d38 <__aeabi_ddiv>
 800cbca:	900a      	str	r0, [sp, #40]	@ 0x28
 800cbcc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cbce:	3401      	adds	r4, #1
 800cbd0:	4b24      	ldr	r3, [pc, #144]	@ (800cc64 <_dtoa_r+0x39c>)
 800cbd2:	930c      	str	r3, [sp, #48]	@ 0x30
 800cbd4:	2d00      	cmp	r5, #0
 800cbd6:	d108      	bne.n	800cbea <_dtoa_r+0x322>
 800cbd8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cbda:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cbdc:	0032      	movs	r2, r6
 800cbde:	003b      	movs	r3, r7
 800cbe0:	f7f5 f8aa 	bl	8001d38 <__aeabi_ddiv>
 800cbe4:	900a      	str	r0, [sp, #40]	@ 0x28
 800cbe6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cbe8:	e059      	b.n	800cc9e <_dtoa_r+0x3d6>
 800cbea:	2301      	movs	r3, #1
 800cbec:	421d      	tst	r5, r3
 800cbee:	d009      	beq.n	800cc04 <_dtoa_r+0x33c>
 800cbf0:	18e4      	adds	r4, r4, r3
 800cbf2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cbf4:	0030      	movs	r0, r6
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	0039      	movs	r1, r7
 800cbfc:	f7f5 fcd6 	bl	80025ac <__aeabi_dmul>
 800cc00:	0006      	movs	r6, r0
 800cc02:	000f      	movs	r7, r1
 800cc04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cc06:	106d      	asrs	r5, r5, #1
 800cc08:	3308      	adds	r3, #8
 800cc0a:	e7e2      	b.n	800cbd2 <_dtoa_r+0x30a>
 800cc0c:	0800ece1 	.word	0x0800ece1
 800cc10:	0800ecf8 	.word	0x0800ecf8
 800cc14:	7ff00000 	.word	0x7ff00000
 800cc18:	0000270f 	.word	0x0000270f
 800cc1c:	0800ecdd 	.word	0x0800ecdd
 800cc20:	0800ece0 	.word	0x0800ece0
 800cc24:	0800ecb1 	.word	0x0800ecb1
 800cc28:	0800ecb0 	.word	0x0800ecb0
 800cc2c:	3ff00000 	.word	0x3ff00000
 800cc30:	fffffc01 	.word	0xfffffc01
 800cc34:	3ff80000 	.word	0x3ff80000
 800cc38:	636f4361 	.word	0x636f4361
 800cc3c:	3fd287a7 	.word	0x3fd287a7
 800cc40:	8b60c8b3 	.word	0x8b60c8b3
 800cc44:	3fc68a28 	.word	0x3fc68a28
 800cc48:	509f79fb 	.word	0x509f79fb
 800cc4c:	3fd34413 	.word	0x3fd34413
 800cc50:	0800ee48 	.word	0x0800ee48
 800cc54:	00000432 	.word	0x00000432
 800cc58:	00000412 	.word	0x00000412
 800cc5c:	fe100000 	.word	0xfe100000
 800cc60:	0800ed50 	.word	0x0800ed50
 800cc64:	0800ee20 	.word	0x0800ee20
 800cc68:	9b04      	ldr	r3, [sp, #16]
 800cc6a:	2402      	movs	r4, #2
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d016      	beq.n	800cc9e <_dtoa_r+0x3d6>
 800cc70:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800cc72:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800cc74:	220f      	movs	r2, #15
 800cc76:	425d      	negs	r5, r3
 800cc78:	402a      	ands	r2, r5
 800cc7a:	4bd5      	ldr	r3, [pc, #852]	@ (800cfd0 <_dtoa_r+0x708>)
 800cc7c:	00d2      	lsls	r2, r2, #3
 800cc7e:	189b      	adds	r3, r3, r2
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	f7f5 fc92 	bl	80025ac <__aeabi_dmul>
 800cc88:	2701      	movs	r7, #1
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cc8e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cc90:	4ed0      	ldr	r6, [pc, #832]	@ (800cfd4 <_dtoa_r+0x70c>)
 800cc92:	112d      	asrs	r5, r5, #4
 800cc94:	2d00      	cmp	r5, #0
 800cc96:	d000      	beq.n	800cc9a <_dtoa_r+0x3d2>
 800cc98:	e095      	b.n	800cdc6 <_dtoa_r+0x4fe>
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1a2      	bne.n	800cbe4 <_dtoa_r+0x31c>
 800cc9e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cca0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800cca2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d100      	bne.n	800ccaa <_dtoa_r+0x3e2>
 800cca8:	e098      	b.n	800cddc <_dtoa_r+0x514>
 800ccaa:	2200      	movs	r2, #0
 800ccac:	0030      	movs	r0, r6
 800ccae:	0039      	movs	r1, r7
 800ccb0:	4bc9      	ldr	r3, [pc, #804]	@ (800cfd8 <_dtoa_r+0x710>)
 800ccb2:	f7f3 fbcd 	bl	8000450 <__aeabi_dcmplt>
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	d100      	bne.n	800ccbc <_dtoa_r+0x3f4>
 800ccba:	e08f      	b.n	800cddc <_dtoa_r+0x514>
 800ccbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d100      	bne.n	800ccc4 <_dtoa_r+0x3fc>
 800ccc2:	e08b      	b.n	800cddc <_dtoa_r+0x514>
 800ccc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	dd37      	ble.n	800cd3a <_dtoa_r+0x472>
 800ccca:	9b04      	ldr	r3, [sp, #16]
 800cccc:	2200      	movs	r2, #0
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	930c      	str	r3, [sp, #48]	@ 0x30
 800ccd2:	0030      	movs	r0, r6
 800ccd4:	4bc1      	ldr	r3, [pc, #772]	@ (800cfdc <_dtoa_r+0x714>)
 800ccd6:	0039      	movs	r1, r7
 800ccd8:	f7f5 fc68 	bl	80025ac <__aeabi_dmul>
 800ccdc:	900a      	str	r0, [sp, #40]	@ 0x28
 800ccde:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cce2:	3401      	adds	r4, #1
 800cce4:	0020      	movs	r0, r4
 800cce6:	9311      	str	r3, [sp, #68]	@ 0x44
 800cce8:	f7f6 fbae 	bl	8003448 <__aeabi_i2d>
 800ccec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ccee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccf0:	f7f5 fc5c 	bl	80025ac <__aeabi_dmul>
 800ccf4:	4bba      	ldr	r3, [pc, #744]	@ (800cfe0 <_dtoa_r+0x718>)
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f7f4 fc58 	bl	80015ac <__aeabi_dadd>
 800ccfc:	4bb9      	ldr	r3, [pc, #740]	@ (800cfe4 <_dtoa_r+0x71c>)
 800ccfe:	0006      	movs	r6, r0
 800cd00:	18cf      	adds	r7, r1, r3
 800cd02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d16d      	bne.n	800cde4 <_dtoa_r+0x51c>
 800cd08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cd0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	4bb6      	ldr	r3, [pc, #728]	@ (800cfe8 <_dtoa_r+0x720>)
 800cd10:	f7f5 ff32 	bl	8002b78 <__aeabi_dsub>
 800cd14:	0032      	movs	r2, r6
 800cd16:	003b      	movs	r3, r7
 800cd18:	0004      	movs	r4, r0
 800cd1a:	000d      	movs	r5, r1
 800cd1c:	f7f3 fbac 	bl	8000478 <__aeabi_dcmpgt>
 800cd20:	2800      	cmp	r0, #0
 800cd22:	d000      	beq.n	800cd26 <_dtoa_r+0x45e>
 800cd24:	e2b6      	b.n	800d294 <_dtoa_r+0x9cc>
 800cd26:	2180      	movs	r1, #128	@ 0x80
 800cd28:	0609      	lsls	r1, r1, #24
 800cd2a:	187b      	adds	r3, r7, r1
 800cd2c:	0032      	movs	r2, r6
 800cd2e:	0020      	movs	r0, r4
 800cd30:	0029      	movs	r1, r5
 800cd32:	f7f3 fb8d 	bl	8000450 <__aeabi_dcmplt>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d128      	bne.n	800cd8c <_dtoa_r+0x4c4>
 800cd3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cd3c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800cd3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd40:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cd42:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	da00      	bge.n	800cd4a <_dtoa_r+0x482>
 800cd48:	e174      	b.n	800d034 <_dtoa_r+0x76c>
 800cd4a:	9a04      	ldr	r2, [sp, #16]
 800cd4c:	2a0e      	cmp	r2, #14
 800cd4e:	dd00      	ble.n	800cd52 <_dtoa_r+0x48a>
 800cd50:	e170      	b.n	800d034 <_dtoa_r+0x76c>
 800cd52:	4b9f      	ldr	r3, [pc, #636]	@ (800cfd0 <_dtoa_r+0x708>)
 800cd54:	00d2      	lsls	r2, r2, #3
 800cd56:	189b      	adds	r3, r3, r2
 800cd58:	685c      	ldr	r4, [r3, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	9306      	str	r3, [sp, #24]
 800cd5e:	9407      	str	r4, [sp, #28]
 800cd60:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	db00      	blt.n	800cd68 <_dtoa_r+0x4a0>
 800cd66:	e0e7      	b.n	800cf38 <_dtoa_r+0x670>
 800cd68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	dd00      	ble.n	800cd70 <_dtoa_r+0x4a8>
 800cd6e:	e0e3      	b.n	800cf38 <_dtoa_r+0x670>
 800cd70:	d10c      	bne.n	800cd8c <_dtoa_r+0x4c4>
 800cd72:	9806      	ldr	r0, [sp, #24]
 800cd74:	9907      	ldr	r1, [sp, #28]
 800cd76:	2200      	movs	r2, #0
 800cd78:	4b9b      	ldr	r3, [pc, #620]	@ (800cfe8 <_dtoa_r+0x720>)
 800cd7a:	f7f5 fc17 	bl	80025ac <__aeabi_dmul>
 800cd7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd82:	f7f3 fb83 	bl	800048c <__aeabi_dcmpge>
 800cd86:	2800      	cmp	r0, #0
 800cd88:	d100      	bne.n	800cd8c <_dtoa_r+0x4c4>
 800cd8a:	e286      	b.n	800d29a <_dtoa_r+0x9d2>
 800cd8c:	2600      	movs	r6, #0
 800cd8e:	0037      	movs	r7, r6
 800cd90:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cd92:	9c08      	ldr	r4, [sp, #32]
 800cd94:	43db      	mvns	r3, r3
 800cd96:	930c      	str	r3, [sp, #48]	@ 0x30
 800cd98:	9704      	str	r7, [sp, #16]
 800cd9a:	2700      	movs	r7, #0
 800cd9c:	0031      	movs	r1, r6
 800cd9e:	9803      	ldr	r0, [sp, #12]
 800cda0:	f000 fccc 	bl	800d73c <_Bfree>
 800cda4:	9b04      	ldr	r3, [sp, #16]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d100      	bne.n	800cdac <_dtoa_r+0x4e4>
 800cdaa:	e0bb      	b.n	800cf24 <_dtoa_r+0x65c>
 800cdac:	2f00      	cmp	r7, #0
 800cdae:	d005      	beq.n	800cdbc <_dtoa_r+0x4f4>
 800cdb0:	429f      	cmp	r7, r3
 800cdb2:	d003      	beq.n	800cdbc <_dtoa_r+0x4f4>
 800cdb4:	0039      	movs	r1, r7
 800cdb6:	9803      	ldr	r0, [sp, #12]
 800cdb8:	f000 fcc0 	bl	800d73c <_Bfree>
 800cdbc:	9904      	ldr	r1, [sp, #16]
 800cdbe:	9803      	ldr	r0, [sp, #12]
 800cdc0:	f000 fcbc 	bl	800d73c <_Bfree>
 800cdc4:	e0ae      	b.n	800cf24 <_dtoa_r+0x65c>
 800cdc6:	423d      	tst	r5, r7
 800cdc8:	d005      	beq.n	800cdd6 <_dtoa_r+0x50e>
 800cdca:	6832      	ldr	r2, [r6, #0]
 800cdcc:	6873      	ldr	r3, [r6, #4]
 800cdce:	f7f5 fbed 	bl	80025ac <__aeabi_dmul>
 800cdd2:	003b      	movs	r3, r7
 800cdd4:	3401      	adds	r4, #1
 800cdd6:	106d      	asrs	r5, r5, #1
 800cdd8:	3608      	adds	r6, #8
 800cdda:	e75b      	b.n	800cc94 <_dtoa_r+0x3cc>
 800cddc:	9b04      	ldr	r3, [sp, #16]
 800cdde:	930c      	str	r3, [sp, #48]	@ 0x30
 800cde0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cde2:	e77f      	b.n	800cce4 <_dtoa_r+0x41c>
 800cde4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cde6:	4b7a      	ldr	r3, [pc, #488]	@ (800cfd0 <_dtoa_r+0x708>)
 800cde8:	3a01      	subs	r2, #1
 800cdea:	00d2      	lsls	r2, r2, #3
 800cdec:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800cdee:	189b      	adds	r3, r3, r2
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	2900      	cmp	r1, #0
 800cdf6:	d04c      	beq.n	800ce92 <_dtoa_r+0x5ca>
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	497c      	ldr	r1, [pc, #496]	@ (800cfec <_dtoa_r+0x724>)
 800cdfc:	f7f4 ff9c 	bl	8001d38 <__aeabi_ddiv>
 800ce00:	0032      	movs	r2, r6
 800ce02:	003b      	movs	r3, r7
 800ce04:	f7f5 feb8 	bl	8002b78 <__aeabi_dsub>
 800ce08:	9a08      	ldr	r2, [sp, #32]
 800ce0a:	0006      	movs	r6, r0
 800ce0c:	4694      	mov	ip, r2
 800ce0e:	000f      	movs	r7, r1
 800ce10:	9b08      	ldr	r3, [sp, #32]
 800ce12:	9316      	str	r3, [sp, #88]	@ 0x58
 800ce14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ce16:	4463      	add	r3, ip
 800ce18:	9311      	str	r3, [sp, #68]	@ 0x44
 800ce1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ce1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce1e:	f7f6 fad7 	bl	80033d0 <__aeabi_d2iz>
 800ce22:	0005      	movs	r5, r0
 800ce24:	f7f6 fb10 	bl	8003448 <__aeabi_i2d>
 800ce28:	0002      	movs	r2, r0
 800ce2a:	000b      	movs	r3, r1
 800ce2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ce2e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce30:	f7f5 fea2 	bl	8002b78 <__aeabi_dsub>
 800ce34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ce36:	3530      	adds	r5, #48	@ 0x30
 800ce38:	1c5c      	adds	r4, r3, #1
 800ce3a:	701d      	strb	r5, [r3, #0]
 800ce3c:	0032      	movs	r2, r6
 800ce3e:	003b      	movs	r3, r7
 800ce40:	900a      	str	r0, [sp, #40]	@ 0x28
 800ce42:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ce44:	f7f3 fb04 	bl	8000450 <__aeabi_dcmplt>
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d16b      	bne.n	800cf24 <_dtoa_r+0x65c>
 800ce4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce50:	2000      	movs	r0, #0
 800ce52:	4961      	ldr	r1, [pc, #388]	@ (800cfd8 <_dtoa_r+0x710>)
 800ce54:	f7f5 fe90 	bl	8002b78 <__aeabi_dsub>
 800ce58:	0032      	movs	r2, r6
 800ce5a:	003b      	movs	r3, r7
 800ce5c:	f7f3 faf8 	bl	8000450 <__aeabi_dcmplt>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	d000      	beq.n	800ce66 <_dtoa_r+0x59e>
 800ce64:	e0c6      	b.n	800cff4 <_dtoa_r+0x72c>
 800ce66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ce68:	42a3      	cmp	r3, r4
 800ce6a:	d100      	bne.n	800ce6e <_dtoa_r+0x5a6>
 800ce6c:	e765      	b.n	800cd3a <_dtoa_r+0x472>
 800ce6e:	2200      	movs	r2, #0
 800ce70:	0030      	movs	r0, r6
 800ce72:	0039      	movs	r1, r7
 800ce74:	4b59      	ldr	r3, [pc, #356]	@ (800cfdc <_dtoa_r+0x714>)
 800ce76:	f7f5 fb99 	bl	80025ac <__aeabi_dmul>
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	0006      	movs	r6, r0
 800ce7e:	000f      	movs	r7, r1
 800ce80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ce82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce84:	4b55      	ldr	r3, [pc, #340]	@ (800cfdc <_dtoa_r+0x714>)
 800ce86:	f7f5 fb91 	bl	80025ac <__aeabi_dmul>
 800ce8a:	9416      	str	r4, [sp, #88]	@ 0x58
 800ce8c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ce8e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ce90:	e7c3      	b.n	800ce1a <_dtoa_r+0x552>
 800ce92:	0030      	movs	r0, r6
 800ce94:	0039      	movs	r1, r7
 800ce96:	f7f5 fb89 	bl	80025ac <__aeabi_dmul>
 800ce9a:	9d08      	ldr	r5, [sp, #32]
 800ce9c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ce9e:	002b      	movs	r3, r5
 800cea0:	4694      	mov	ip, r2
 800cea2:	9016      	str	r0, [sp, #88]	@ 0x58
 800cea4:	9117      	str	r1, [sp, #92]	@ 0x5c
 800cea6:	4463      	add	r3, ip
 800cea8:	9319      	str	r3, [sp, #100]	@ 0x64
 800ceaa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ceac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ceae:	f7f6 fa8f 	bl	80033d0 <__aeabi_d2iz>
 800ceb2:	0004      	movs	r4, r0
 800ceb4:	f7f6 fac8 	bl	8003448 <__aeabi_i2d>
 800ceb8:	000b      	movs	r3, r1
 800ceba:	0002      	movs	r2, r0
 800cebc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cebe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cec0:	f7f5 fe5a 	bl	8002b78 <__aeabi_dsub>
 800cec4:	3430      	adds	r4, #48	@ 0x30
 800cec6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cec8:	702c      	strb	r4, [r5, #0]
 800ceca:	3501      	adds	r5, #1
 800cecc:	0006      	movs	r6, r0
 800cece:	000f      	movs	r7, r1
 800ced0:	42ab      	cmp	r3, r5
 800ced2:	d12a      	bne.n	800cf2a <_dtoa_r+0x662>
 800ced4:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800ced6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800ced8:	9b08      	ldr	r3, [sp, #32]
 800ceda:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800cedc:	469c      	mov	ip, r3
 800cede:	2200      	movs	r2, #0
 800cee0:	4b42      	ldr	r3, [pc, #264]	@ (800cfec <_dtoa_r+0x724>)
 800cee2:	4464      	add	r4, ip
 800cee4:	f7f4 fb62 	bl	80015ac <__aeabi_dadd>
 800cee8:	0002      	movs	r2, r0
 800ceea:	000b      	movs	r3, r1
 800ceec:	0030      	movs	r0, r6
 800ceee:	0039      	movs	r1, r7
 800cef0:	f7f3 fac2 	bl	8000478 <__aeabi_dcmpgt>
 800cef4:	2800      	cmp	r0, #0
 800cef6:	d000      	beq.n	800cefa <_dtoa_r+0x632>
 800cef8:	e07c      	b.n	800cff4 <_dtoa_r+0x72c>
 800cefa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cefc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cefe:	2000      	movs	r0, #0
 800cf00:	493a      	ldr	r1, [pc, #232]	@ (800cfec <_dtoa_r+0x724>)
 800cf02:	f7f5 fe39 	bl	8002b78 <__aeabi_dsub>
 800cf06:	0002      	movs	r2, r0
 800cf08:	000b      	movs	r3, r1
 800cf0a:	0030      	movs	r0, r6
 800cf0c:	0039      	movs	r1, r7
 800cf0e:	f7f3 fa9f 	bl	8000450 <__aeabi_dcmplt>
 800cf12:	2800      	cmp	r0, #0
 800cf14:	d100      	bne.n	800cf18 <_dtoa_r+0x650>
 800cf16:	e710      	b.n	800cd3a <_dtoa_r+0x472>
 800cf18:	0023      	movs	r3, r4
 800cf1a:	3c01      	subs	r4, #1
 800cf1c:	7822      	ldrb	r2, [r4, #0]
 800cf1e:	2a30      	cmp	r2, #48	@ 0x30
 800cf20:	d0fa      	beq.n	800cf18 <_dtoa_r+0x650>
 800cf22:	001c      	movs	r4, r3
 800cf24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cf26:	9304      	str	r3, [sp, #16]
 800cf28:	e042      	b.n	800cfb0 <_dtoa_r+0x6e8>
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	4b2b      	ldr	r3, [pc, #172]	@ (800cfdc <_dtoa_r+0x714>)
 800cf2e:	f7f5 fb3d 	bl	80025ac <__aeabi_dmul>
 800cf32:	900a      	str	r0, [sp, #40]	@ 0x28
 800cf34:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cf36:	e7b8      	b.n	800ceaa <_dtoa_r+0x5e2>
 800cf38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf3a:	9d08      	ldr	r5, [sp, #32]
 800cf3c:	3b01      	subs	r3, #1
 800cf3e:	195b      	adds	r3, r3, r5
 800cf40:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cf42:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800cf44:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf46:	9a06      	ldr	r2, [sp, #24]
 800cf48:	9b07      	ldr	r3, [sp, #28]
 800cf4a:	0030      	movs	r0, r6
 800cf4c:	0039      	movs	r1, r7
 800cf4e:	f7f4 fef3 	bl	8001d38 <__aeabi_ddiv>
 800cf52:	f7f6 fa3d 	bl	80033d0 <__aeabi_d2iz>
 800cf56:	9009      	str	r0, [sp, #36]	@ 0x24
 800cf58:	f7f6 fa76 	bl	8003448 <__aeabi_i2d>
 800cf5c:	9a06      	ldr	r2, [sp, #24]
 800cf5e:	9b07      	ldr	r3, [sp, #28]
 800cf60:	f7f5 fb24 	bl	80025ac <__aeabi_dmul>
 800cf64:	0002      	movs	r2, r0
 800cf66:	000b      	movs	r3, r1
 800cf68:	0030      	movs	r0, r6
 800cf6a:	0039      	movs	r1, r7
 800cf6c:	f7f5 fe04 	bl	8002b78 <__aeabi_dsub>
 800cf70:	002b      	movs	r3, r5
 800cf72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf74:	3501      	adds	r5, #1
 800cf76:	3230      	adds	r2, #48	@ 0x30
 800cf78:	701a      	strb	r2, [r3, #0]
 800cf7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf7c:	002c      	movs	r4, r5
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d14b      	bne.n	800d01a <_dtoa_r+0x752>
 800cf82:	0002      	movs	r2, r0
 800cf84:	000b      	movs	r3, r1
 800cf86:	f7f4 fb11 	bl	80015ac <__aeabi_dadd>
 800cf8a:	9a06      	ldr	r2, [sp, #24]
 800cf8c:	9b07      	ldr	r3, [sp, #28]
 800cf8e:	0006      	movs	r6, r0
 800cf90:	000f      	movs	r7, r1
 800cf92:	f7f3 fa71 	bl	8000478 <__aeabi_dcmpgt>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d12a      	bne.n	800cff0 <_dtoa_r+0x728>
 800cf9a:	9a06      	ldr	r2, [sp, #24]
 800cf9c:	9b07      	ldr	r3, [sp, #28]
 800cf9e:	0030      	movs	r0, r6
 800cfa0:	0039      	movs	r1, r7
 800cfa2:	f7f3 fa4f 	bl	8000444 <__aeabi_dcmpeq>
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	d002      	beq.n	800cfb0 <_dtoa_r+0x6e8>
 800cfaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfac:	07dd      	lsls	r5, r3, #31
 800cfae:	d41f      	bmi.n	800cff0 <_dtoa_r+0x728>
 800cfb0:	9905      	ldr	r1, [sp, #20]
 800cfb2:	9803      	ldr	r0, [sp, #12]
 800cfb4:	f000 fbc2 	bl	800d73c <_Bfree>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	7023      	strb	r3, [r4, #0]
 800cfbc:	9b04      	ldr	r3, [sp, #16]
 800cfbe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	6013      	str	r3, [r2, #0]
 800cfc4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d100      	bne.n	800cfcc <_dtoa_r+0x704>
 800cfca:	e4c7      	b.n	800c95c <_dtoa_r+0x94>
 800cfcc:	601c      	str	r4, [r3, #0]
 800cfce:	e4c5      	b.n	800c95c <_dtoa_r+0x94>
 800cfd0:	0800ee48 	.word	0x0800ee48
 800cfd4:	0800ee20 	.word	0x0800ee20
 800cfd8:	3ff00000 	.word	0x3ff00000
 800cfdc:	40240000 	.word	0x40240000
 800cfe0:	401c0000 	.word	0x401c0000
 800cfe4:	fcc00000 	.word	0xfcc00000
 800cfe8:	40140000 	.word	0x40140000
 800cfec:	3fe00000 	.word	0x3fe00000
 800cff0:	9b04      	ldr	r3, [sp, #16]
 800cff2:	930c      	str	r3, [sp, #48]	@ 0x30
 800cff4:	0023      	movs	r3, r4
 800cff6:	001c      	movs	r4, r3
 800cff8:	3b01      	subs	r3, #1
 800cffa:	781a      	ldrb	r2, [r3, #0]
 800cffc:	2a39      	cmp	r2, #57	@ 0x39
 800cffe:	d108      	bne.n	800d012 <_dtoa_r+0x74a>
 800d000:	9a08      	ldr	r2, [sp, #32]
 800d002:	429a      	cmp	r2, r3
 800d004:	d1f7      	bne.n	800cff6 <_dtoa_r+0x72e>
 800d006:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d008:	9908      	ldr	r1, [sp, #32]
 800d00a:	3201      	adds	r2, #1
 800d00c:	920c      	str	r2, [sp, #48]	@ 0x30
 800d00e:	2230      	movs	r2, #48	@ 0x30
 800d010:	700a      	strb	r2, [r1, #0]
 800d012:	781a      	ldrb	r2, [r3, #0]
 800d014:	3201      	adds	r2, #1
 800d016:	701a      	strb	r2, [r3, #0]
 800d018:	e784      	b.n	800cf24 <_dtoa_r+0x65c>
 800d01a:	2200      	movs	r2, #0
 800d01c:	4bc6      	ldr	r3, [pc, #792]	@ (800d338 <_dtoa_r+0xa70>)
 800d01e:	f7f5 fac5 	bl	80025ac <__aeabi_dmul>
 800d022:	2200      	movs	r2, #0
 800d024:	2300      	movs	r3, #0
 800d026:	0006      	movs	r6, r0
 800d028:	000f      	movs	r7, r1
 800d02a:	f7f3 fa0b 	bl	8000444 <__aeabi_dcmpeq>
 800d02e:	2800      	cmp	r0, #0
 800d030:	d089      	beq.n	800cf46 <_dtoa_r+0x67e>
 800d032:	e7bd      	b.n	800cfb0 <_dtoa_r+0x6e8>
 800d034:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800d036:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800d038:	9c06      	ldr	r4, [sp, #24]
 800d03a:	2f00      	cmp	r7, #0
 800d03c:	d014      	beq.n	800d068 <_dtoa_r+0x7a0>
 800d03e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d040:	2a01      	cmp	r2, #1
 800d042:	dd00      	ble.n	800d046 <_dtoa_r+0x77e>
 800d044:	e0e4      	b.n	800d210 <_dtoa_r+0x948>
 800d046:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800d048:	2a00      	cmp	r2, #0
 800d04a:	d100      	bne.n	800d04e <_dtoa_r+0x786>
 800d04c:	e0da      	b.n	800d204 <_dtoa_r+0x93c>
 800d04e:	4abb      	ldr	r2, [pc, #748]	@ (800d33c <_dtoa_r+0xa74>)
 800d050:	189b      	adds	r3, r3, r2
 800d052:	9a06      	ldr	r2, [sp, #24]
 800d054:	2101      	movs	r1, #1
 800d056:	18d2      	adds	r2, r2, r3
 800d058:	9206      	str	r2, [sp, #24]
 800d05a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d05c:	9803      	ldr	r0, [sp, #12]
 800d05e:	18d3      	adds	r3, r2, r3
 800d060:	930d      	str	r3, [sp, #52]	@ 0x34
 800d062:	f000 fc23 	bl	800d8ac <__i2b>
 800d066:	0007      	movs	r7, r0
 800d068:	2c00      	cmp	r4, #0
 800d06a:	d00e      	beq.n	800d08a <_dtoa_r+0x7c2>
 800d06c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d06e:	2b00      	cmp	r3, #0
 800d070:	dd0b      	ble.n	800d08a <_dtoa_r+0x7c2>
 800d072:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d074:	0023      	movs	r3, r4
 800d076:	4294      	cmp	r4, r2
 800d078:	dd00      	ble.n	800d07c <_dtoa_r+0x7b4>
 800d07a:	0013      	movs	r3, r2
 800d07c:	9a06      	ldr	r2, [sp, #24]
 800d07e:	1ae4      	subs	r4, r4, r3
 800d080:	1ad2      	subs	r2, r2, r3
 800d082:	9206      	str	r2, [sp, #24]
 800d084:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d086:	1ad3      	subs	r3, r2, r3
 800d088:	930d      	str	r3, [sp, #52]	@ 0x34
 800d08a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d021      	beq.n	800d0d4 <_dtoa_r+0x80c>
 800d090:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d092:	2b00      	cmp	r3, #0
 800d094:	d100      	bne.n	800d098 <_dtoa_r+0x7d0>
 800d096:	e0d3      	b.n	800d240 <_dtoa_r+0x978>
 800d098:	9e05      	ldr	r6, [sp, #20]
 800d09a:	2d00      	cmp	r5, #0
 800d09c:	d014      	beq.n	800d0c8 <_dtoa_r+0x800>
 800d09e:	0039      	movs	r1, r7
 800d0a0:	002a      	movs	r2, r5
 800d0a2:	9803      	ldr	r0, [sp, #12]
 800d0a4:	f000 fcc4 	bl	800da30 <__pow5mult>
 800d0a8:	9a05      	ldr	r2, [sp, #20]
 800d0aa:	0001      	movs	r1, r0
 800d0ac:	0007      	movs	r7, r0
 800d0ae:	9803      	ldr	r0, [sp, #12]
 800d0b0:	f000 fc14 	bl	800d8dc <__multiply>
 800d0b4:	0006      	movs	r6, r0
 800d0b6:	9905      	ldr	r1, [sp, #20]
 800d0b8:	9803      	ldr	r0, [sp, #12]
 800d0ba:	f000 fb3f 	bl	800d73c <_Bfree>
 800d0be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0c0:	9605      	str	r6, [sp, #20]
 800d0c2:	1b5b      	subs	r3, r3, r5
 800d0c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d0c6:	d005      	beq.n	800d0d4 <_dtoa_r+0x80c>
 800d0c8:	0031      	movs	r1, r6
 800d0ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d0cc:	9803      	ldr	r0, [sp, #12]
 800d0ce:	f000 fcaf 	bl	800da30 <__pow5mult>
 800d0d2:	9005      	str	r0, [sp, #20]
 800d0d4:	2101      	movs	r1, #1
 800d0d6:	9803      	ldr	r0, [sp, #12]
 800d0d8:	f000 fbe8 	bl	800d8ac <__i2b>
 800d0dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d0de:	0006      	movs	r6, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d100      	bne.n	800d0e6 <_dtoa_r+0x81e>
 800d0e4:	e1bc      	b.n	800d460 <_dtoa_r+0xb98>
 800d0e6:	001a      	movs	r2, r3
 800d0e8:	0001      	movs	r1, r0
 800d0ea:	9803      	ldr	r0, [sp, #12]
 800d0ec:	f000 fca0 	bl	800da30 <__pow5mult>
 800d0f0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d0f2:	0006      	movs	r6, r0
 800d0f4:	2500      	movs	r5, #0
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	dc16      	bgt.n	800d128 <_dtoa_r+0x860>
 800d0fa:	2500      	movs	r5, #0
 800d0fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0fe:	42ab      	cmp	r3, r5
 800d100:	d10e      	bne.n	800d120 <_dtoa_r+0x858>
 800d102:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d104:	031b      	lsls	r3, r3, #12
 800d106:	42ab      	cmp	r3, r5
 800d108:	d10a      	bne.n	800d120 <_dtoa_r+0x858>
 800d10a:	4b8d      	ldr	r3, [pc, #564]	@ (800d340 <_dtoa_r+0xa78>)
 800d10c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d10e:	4213      	tst	r3, r2
 800d110:	d006      	beq.n	800d120 <_dtoa_r+0x858>
 800d112:	9b06      	ldr	r3, [sp, #24]
 800d114:	3501      	adds	r5, #1
 800d116:	3301      	adds	r3, #1
 800d118:	9306      	str	r3, [sp, #24]
 800d11a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d11c:	3301      	adds	r3, #1
 800d11e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d120:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d122:	2001      	movs	r0, #1
 800d124:	2b00      	cmp	r3, #0
 800d126:	d008      	beq.n	800d13a <_dtoa_r+0x872>
 800d128:	6933      	ldr	r3, [r6, #16]
 800d12a:	3303      	adds	r3, #3
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	18f3      	adds	r3, r6, r3
 800d130:	6858      	ldr	r0, [r3, #4]
 800d132:	f000 fb6b 	bl	800d80c <__hi0bits>
 800d136:	2320      	movs	r3, #32
 800d138:	1a18      	subs	r0, r3, r0
 800d13a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d13c:	1818      	adds	r0, r3, r0
 800d13e:	0002      	movs	r2, r0
 800d140:	231f      	movs	r3, #31
 800d142:	401a      	ands	r2, r3
 800d144:	4218      	tst	r0, r3
 800d146:	d100      	bne.n	800d14a <_dtoa_r+0x882>
 800d148:	e081      	b.n	800d24e <_dtoa_r+0x986>
 800d14a:	3301      	adds	r3, #1
 800d14c:	1a9b      	subs	r3, r3, r2
 800d14e:	2b04      	cmp	r3, #4
 800d150:	dd79      	ble.n	800d246 <_dtoa_r+0x97e>
 800d152:	231c      	movs	r3, #28
 800d154:	1a9b      	subs	r3, r3, r2
 800d156:	9a06      	ldr	r2, [sp, #24]
 800d158:	18e4      	adds	r4, r4, r3
 800d15a:	18d2      	adds	r2, r2, r3
 800d15c:	9206      	str	r2, [sp, #24]
 800d15e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d160:	18d3      	adds	r3, r2, r3
 800d162:	930d      	str	r3, [sp, #52]	@ 0x34
 800d164:	9b06      	ldr	r3, [sp, #24]
 800d166:	2b00      	cmp	r3, #0
 800d168:	dd05      	ble.n	800d176 <_dtoa_r+0x8ae>
 800d16a:	001a      	movs	r2, r3
 800d16c:	9905      	ldr	r1, [sp, #20]
 800d16e:	9803      	ldr	r0, [sp, #12]
 800d170:	f000 fcba 	bl	800dae8 <__lshift>
 800d174:	9005      	str	r0, [sp, #20]
 800d176:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d178:	2b00      	cmp	r3, #0
 800d17a:	dd05      	ble.n	800d188 <_dtoa_r+0x8c0>
 800d17c:	0031      	movs	r1, r6
 800d17e:	001a      	movs	r2, r3
 800d180:	9803      	ldr	r0, [sp, #12]
 800d182:	f000 fcb1 	bl	800dae8 <__lshift>
 800d186:	0006      	movs	r6, r0
 800d188:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d061      	beq.n	800d252 <_dtoa_r+0x98a>
 800d18e:	0031      	movs	r1, r6
 800d190:	9805      	ldr	r0, [sp, #20]
 800d192:	f000 fd15 	bl	800dbc0 <__mcmp>
 800d196:	2800      	cmp	r0, #0
 800d198:	da5b      	bge.n	800d252 <_dtoa_r+0x98a>
 800d19a:	9b04      	ldr	r3, [sp, #16]
 800d19c:	220a      	movs	r2, #10
 800d19e:	3b01      	subs	r3, #1
 800d1a0:	930c      	str	r3, [sp, #48]	@ 0x30
 800d1a2:	9905      	ldr	r1, [sp, #20]
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	9803      	ldr	r0, [sp, #12]
 800d1a8:	f000 faec 	bl	800d784 <__multadd>
 800d1ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d1ae:	9005      	str	r0, [sp, #20]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d100      	bne.n	800d1b6 <_dtoa_r+0x8ee>
 800d1b4:	e15b      	b.n	800d46e <_dtoa_r+0xba6>
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	0039      	movs	r1, r7
 800d1ba:	220a      	movs	r2, #10
 800d1bc:	9803      	ldr	r0, [sp, #12]
 800d1be:	f000 fae1 	bl	800d784 <__multadd>
 800d1c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1c4:	0007      	movs	r7, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	dc4d      	bgt.n	800d266 <_dtoa_r+0x99e>
 800d1ca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	dd46      	ble.n	800d25e <_dtoa_r+0x996>
 800d1d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d000      	beq.n	800d1d8 <_dtoa_r+0x910>
 800d1d6:	e5db      	b.n	800cd90 <_dtoa_r+0x4c8>
 800d1d8:	0031      	movs	r1, r6
 800d1da:	2205      	movs	r2, #5
 800d1dc:	9803      	ldr	r0, [sp, #12]
 800d1de:	f000 fad1 	bl	800d784 <__multadd>
 800d1e2:	0006      	movs	r6, r0
 800d1e4:	0001      	movs	r1, r0
 800d1e6:	9805      	ldr	r0, [sp, #20]
 800d1e8:	f000 fcea 	bl	800dbc0 <__mcmp>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	dc00      	bgt.n	800d1f2 <_dtoa_r+0x92a>
 800d1f0:	e5ce      	b.n	800cd90 <_dtoa_r+0x4c8>
 800d1f2:	9b08      	ldr	r3, [sp, #32]
 800d1f4:	9a08      	ldr	r2, [sp, #32]
 800d1f6:	1c5c      	adds	r4, r3, #1
 800d1f8:	2331      	movs	r3, #49	@ 0x31
 800d1fa:	7013      	strb	r3, [r2, #0]
 800d1fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1fe:	3301      	adds	r3, #1
 800d200:	930c      	str	r3, [sp, #48]	@ 0x30
 800d202:	e5c9      	b.n	800cd98 <_dtoa_r+0x4d0>
 800d204:	2336      	movs	r3, #54	@ 0x36
 800d206:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d208:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800d20a:	1a9b      	subs	r3, r3, r2
 800d20c:	9c06      	ldr	r4, [sp, #24]
 800d20e:	e720      	b.n	800d052 <_dtoa_r+0x78a>
 800d210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d212:	1e5d      	subs	r5, r3, #1
 800d214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d216:	42ab      	cmp	r3, r5
 800d218:	db08      	blt.n	800d22c <_dtoa_r+0x964>
 800d21a:	1b5d      	subs	r5, r3, r5
 800d21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d21e:	2b00      	cmp	r3, #0
 800d220:	daf4      	bge.n	800d20c <_dtoa_r+0x944>
 800d222:	9b06      	ldr	r3, [sp, #24]
 800d224:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d226:	1a9c      	subs	r4, r3, r2
 800d228:	2300      	movs	r3, #0
 800d22a:	e712      	b.n	800d052 <_dtoa_r+0x78a>
 800d22c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d22e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d230:	1aeb      	subs	r3, r5, r3
 800d232:	18d3      	adds	r3, r2, r3
 800d234:	9314      	str	r3, [sp, #80]	@ 0x50
 800d236:	950f      	str	r5, [sp, #60]	@ 0x3c
 800d238:	9c06      	ldr	r4, [sp, #24]
 800d23a:	2500      	movs	r5, #0
 800d23c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d23e:	e708      	b.n	800d052 <_dtoa_r+0x78a>
 800d240:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d242:	9905      	ldr	r1, [sp, #20]
 800d244:	e742      	b.n	800d0cc <_dtoa_r+0x804>
 800d246:	2b04      	cmp	r3, #4
 800d248:	d08c      	beq.n	800d164 <_dtoa_r+0x89c>
 800d24a:	331c      	adds	r3, #28
 800d24c:	e783      	b.n	800d156 <_dtoa_r+0x88e>
 800d24e:	0013      	movs	r3, r2
 800d250:	e7fb      	b.n	800d24a <_dtoa_r+0x982>
 800d252:	9b04      	ldr	r3, [sp, #16]
 800d254:	930c      	str	r3, [sp, #48]	@ 0x30
 800d256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d258:	930e      	str	r3, [sp, #56]	@ 0x38
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	ddb5      	ble.n	800d1ca <_dtoa_r+0x902>
 800d25e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d260:	2b00      	cmp	r3, #0
 800d262:	d100      	bne.n	800d266 <_dtoa_r+0x99e>
 800d264:	e107      	b.n	800d476 <_dtoa_r+0xbae>
 800d266:	2c00      	cmp	r4, #0
 800d268:	dd05      	ble.n	800d276 <_dtoa_r+0x9ae>
 800d26a:	0039      	movs	r1, r7
 800d26c:	0022      	movs	r2, r4
 800d26e:	9803      	ldr	r0, [sp, #12]
 800d270:	f000 fc3a 	bl	800dae8 <__lshift>
 800d274:	0007      	movs	r7, r0
 800d276:	9704      	str	r7, [sp, #16]
 800d278:	2d00      	cmp	r5, #0
 800d27a:	d020      	beq.n	800d2be <_dtoa_r+0x9f6>
 800d27c:	6879      	ldr	r1, [r7, #4]
 800d27e:	9803      	ldr	r0, [sp, #12]
 800d280:	f000 fa18 	bl	800d6b4 <_Balloc>
 800d284:	1e04      	subs	r4, r0, #0
 800d286:	d10c      	bne.n	800d2a2 <_dtoa_r+0x9da>
 800d288:	0022      	movs	r2, r4
 800d28a:	4b2e      	ldr	r3, [pc, #184]	@ (800d344 <_dtoa_r+0xa7c>)
 800d28c:	482e      	ldr	r0, [pc, #184]	@ (800d348 <_dtoa_r+0xa80>)
 800d28e:	492f      	ldr	r1, [pc, #188]	@ (800d34c <_dtoa_r+0xa84>)
 800d290:	f7ff fb2f 	bl	800c8f2 <_dtoa_r+0x2a>
 800d294:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800d296:	0037      	movs	r7, r6
 800d298:	e7ab      	b.n	800d1f2 <_dtoa_r+0x92a>
 800d29a:	9b04      	ldr	r3, [sp, #16]
 800d29c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800d29e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d2a0:	e7f9      	b.n	800d296 <_dtoa_r+0x9ce>
 800d2a2:	0039      	movs	r1, r7
 800d2a4:	693a      	ldr	r2, [r7, #16]
 800d2a6:	310c      	adds	r1, #12
 800d2a8:	3202      	adds	r2, #2
 800d2aa:	0092      	lsls	r2, r2, #2
 800d2ac:	300c      	adds	r0, #12
 800d2ae:	f000 ffd1 	bl	800e254 <memcpy>
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	0021      	movs	r1, r4
 800d2b6:	9803      	ldr	r0, [sp, #12]
 800d2b8:	f000 fc16 	bl	800dae8 <__lshift>
 800d2bc:	9004      	str	r0, [sp, #16]
 800d2be:	9b08      	ldr	r3, [sp, #32]
 800d2c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2c2:	9306      	str	r3, [sp, #24]
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	189b      	adds	r3, r3, r2
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d2cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2ce:	4013      	ands	r3, r2
 800d2d0:	930e      	str	r3, [sp, #56]	@ 0x38
 800d2d2:	0031      	movs	r1, r6
 800d2d4:	9805      	ldr	r0, [sp, #20]
 800d2d6:	f7ff fa71 	bl	800c7bc <quorem>
 800d2da:	0039      	movs	r1, r7
 800d2dc:	0005      	movs	r5, r0
 800d2de:	900a      	str	r0, [sp, #40]	@ 0x28
 800d2e0:	9805      	ldr	r0, [sp, #20]
 800d2e2:	f000 fc6d 	bl	800dbc0 <__mcmp>
 800d2e6:	9a04      	ldr	r2, [sp, #16]
 800d2e8:	900d      	str	r0, [sp, #52]	@ 0x34
 800d2ea:	0031      	movs	r1, r6
 800d2ec:	9803      	ldr	r0, [sp, #12]
 800d2ee:	f000 fc83 	bl	800dbf8 <__mdiff>
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	68c3      	ldr	r3, [r0, #12]
 800d2f6:	0004      	movs	r4, r0
 800d2f8:	3530      	adds	r5, #48	@ 0x30
 800d2fa:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d104      	bne.n	800d30a <_dtoa_r+0xa42>
 800d300:	0001      	movs	r1, r0
 800d302:	9805      	ldr	r0, [sp, #20]
 800d304:	f000 fc5c 	bl	800dbc0 <__mcmp>
 800d308:	9009      	str	r0, [sp, #36]	@ 0x24
 800d30a:	0021      	movs	r1, r4
 800d30c:	9803      	ldr	r0, [sp, #12]
 800d30e:	f000 fa15 	bl	800d73c <_Bfree>
 800d312:	9b06      	ldr	r3, [sp, #24]
 800d314:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d316:	1c5c      	adds	r4, r3, #1
 800d318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d31a:	4313      	orrs	r3, r2
 800d31c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d31e:	4313      	orrs	r3, r2
 800d320:	d116      	bne.n	800d350 <_dtoa_r+0xa88>
 800d322:	2d39      	cmp	r5, #57	@ 0x39
 800d324:	d02f      	beq.n	800d386 <_dtoa_r+0xabe>
 800d326:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d328:	2b00      	cmp	r3, #0
 800d32a:	dd01      	ble.n	800d330 <_dtoa_r+0xa68>
 800d32c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800d32e:	3531      	adds	r5, #49	@ 0x31
 800d330:	9b06      	ldr	r3, [sp, #24]
 800d332:	701d      	strb	r5, [r3, #0]
 800d334:	e532      	b.n	800cd9c <_dtoa_r+0x4d4>
 800d336:	46c0      	nop			@ (mov r8, r8)
 800d338:	40240000 	.word	0x40240000
 800d33c:	00000433 	.word	0x00000433
 800d340:	7ff00000 	.word	0x7ff00000
 800d344:	0800ed50 	.word	0x0800ed50
 800d348:	0800ecf8 	.word	0x0800ecf8
 800d34c:	000002ef 	.word	0x000002ef
 800d350:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d352:	2b00      	cmp	r3, #0
 800d354:	db04      	blt.n	800d360 <_dtoa_r+0xa98>
 800d356:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d358:	4313      	orrs	r3, r2
 800d35a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d35c:	4313      	orrs	r3, r2
 800d35e:	d11e      	bne.n	800d39e <_dtoa_r+0xad6>
 800d360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d362:	2b00      	cmp	r3, #0
 800d364:	dde4      	ble.n	800d330 <_dtoa_r+0xa68>
 800d366:	9905      	ldr	r1, [sp, #20]
 800d368:	2201      	movs	r2, #1
 800d36a:	9803      	ldr	r0, [sp, #12]
 800d36c:	f000 fbbc 	bl	800dae8 <__lshift>
 800d370:	0031      	movs	r1, r6
 800d372:	9005      	str	r0, [sp, #20]
 800d374:	f000 fc24 	bl	800dbc0 <__mcmp>
 800d378:	2800      	cmp	r0, #0
 800d37a:	dc02      	bgt.n	800d382 <_dtoa_r+0xaba>
 800d37c:	d1d8      	bne.n	800d330 <_dtoa_r+0xa68>
 800d37e:	07eb      	lsls	r3, r5, #31
 800d380:	d5d6      	bpl.n	800d330 <_dtoa_r+0xa68>
 800d382:	2d39      	cmp	r5, #57	@ 0x39
 800d384:	d1d2      	bne.n	800d32c <_dtoa_r+0xa64>
 800d386:	2339      	movs	r3, #57	@ 0x39
 800d388:	9a06      	ldr	r2, [sp, #24]
 800d38a:	7013      	strb	r3, [r2, #0]
 800d38c:	0023      	movs	r3, r4
 800d38e:	001c      	movs	r4, r3
 800d390:	3b01      	subs	r3, #1
 800d392:	781a      	ldrb	r2, [r3, #0]
 800d394:	2a39      	cmp	r2, #57	@ 0x39
 800d396:	d050      	beq.n	800d43a <_dtoa_r+0xb72>
 800d398:	3201      	adds	r2, #1
 800d39a:	701a      	strb	r2, [r3, #0]
 800d39c:	e4fe      	b.n	800cd9c <_dtoa_r+0x4d4>
 800d39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	dd03      	ble.n	800d3ac <_dtoa_r+0xae4>
 800d3a4:	2d39      	cmp	r5, #57	@ 0x39
 800d3a6:	d0ee      	beq.n	800d386 <_dtoa_r+0xabe>
 800d3a8:	3501      	adds	r5, #1
 800d3aa:	e7c1      	b.n	800d330 <_dtoa_r+0xa68>
 800d3ac:	9b06      	ldr	r3, [sp, #24]
 800d3ae:	9a06      	ldr	r2, [sp, #24]
 800d3b0:	701d      	strb	r5, [r3, #0]
 800d3b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d02b      	beq.n	800d410 <_dtoa_r+0xb48>
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	220a      	movs	r2, #10
 800d3bc:	9905      	ldr	r1, [sp, #20]
 800d3be:	9803      	ldr	r0, [sp, #12]
 800d3c0:	f000 f9e0 	bl	800d784 <__multadd>
 800d3c4:	9b04      	ldr	r3, [sp, #16]
 800d3c6:	9005      	str	r0, [sp, #20]
 800d3c8:	429f      	cmp	r7, r3
 800d3ca:	d109      	bne.n	800d3e0 <_dtoa_r+0xb18>
 800d3cc:	0039      	movs	r1, r7
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	220a      	movs	r2, #10
 800d3d2:	9803      	ldr	r0, [sp, #12]
 800d3d4:	f000 f9d6 	bl	800d784 <__multadd>
 800d3d8:	0007      	movs	r7, r0
 800d3da:	9004      	str	r0, [sp, #16]
 800d3dc:	9406      	str	r4, [sp, #24]
 800d3de:	e778      	b.n	800d2d2 <_dtoa_r+0xa0a>
 800d3e0:	0039      	movs	r1, r7
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	220a      	movs	r2, #10
 800d3e6:	9803      	ldr	r0, [sp, #12]
 800d3e8:	f000 f9cc 	bl	800d784 <__multadd>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	0007      	movs	r7, r0
 800d3f0:	220a      	movs	r2, #10
 800d3f2:	9904      	ldr	r1, [sp, #16]
 800d3f4:	9803      	ldr	r0, [sp, #12]
 800d3f6:	f000 f9c5 	bl	800d784 <__multadd>
 800d3fa:	9004      	str	r0, [sp, #16]
 800d3fc:	e7ee      	b.n	800d3dc <_dtoa_r+0xb14>
 800d3fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d400:	2401      	movs	r4, #1
 800d402:	2b00      	cmp	r3, #0
 800d404:	dd00      	ble.n	800d408 <_dtoa_r+0xb40>
 800d406:	001c      	movs	r4, r3
 800d408:	9704      	str	r7, [sp, #16]
 800d40a:	2700      	movs	r7, #0
 800d40c:	9b08      	ldr	r3, [sp, #32]
 800d40e:	191c      	adds	r4, r3, r4
 800d410:	9905      	ldr	r1, [sp, #20]
 800d412:	2201      	movs	r2, #1
 800d414:	9803      	ldr	r0, [sp, #12]
 800d416:	f000 fb67 	bl	800dae8 <__lshift>
 800d41a:	0031      	movs	r1, r6
 800d41c:	9005      	str	r0, [sp, #20]
 800d41e:	f000 fbcf 	bl	800dbc0 <__mcmp>
 800d422:	2800      	cmp	r0, #0
 800d424:	dcb2      	bgt.n	800d38c <_dtoa_r+0xac4>
 800d426:	d101      	bne.n	800d42c <_dtoa_r+0xb64>
 800d428:	07ed      	lsls	r5, r5, #31
 800d42a:	d4af      	bmi.n	800d38c <_dtoa_r+0xac4>
 800d42c:	0023      	movs	r3, r4
 800d42e:	001c      	movs	r4, r3
 800d430:	3b01      	subs	r3, #1
 800d432:	781a      	ldrb	r2, [r3, #0]
 800d434:	2a30      	cmp	r2, #48	@ 0x30
 800d436:	d0fa      	beq.n	800d42e <_dtoa_r+0xb66>
 800d438:	e4b0      	b.n	800cd9c <_dtoa_r+0x4d4>
 800d43a:	9a08      	ldr	r2, [sp, #32]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d1a6      	bne.n	800d38e <_dtoa_r+0xac6>
 800d440:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d442:	3301      	adds	r3, #1
 800d444:	930c      	str	r3, [sp, #48]	@ 0x30
 800d446:	2331      	movs	r3, #49	@ 0x31
 800d448:	7013      	strb	r3, [r2, #0]
 800d44a:	e4a7      	b.n	800cd9c <_dtoa_r+0x4d4>
 800d44c:	4b14      	ldr	r3, [pc, #80]	@ (800d4a0 <_dtoa_r+0xbd8>)
 800d44e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800d450:	9308      	str	r3, [sp, #32]
 800d452:	4b14      	ldr	r3, [pc, #80]	@ (800d4a4 <_dtoa_r+0xbdc>)
 800d454:	2a00      	cmp	r2, #0
 800d456:	d001      	beq.n	800d45c <_dtoa_r+0xb94>
 800d458:	f7ff fa7e 	bl	800c958 <_dtoa_r+0x90>
 800d45c:	f7ff fa7e 	bl	800c95c <_dtoa_r+0x94>
 800d460:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d462:	2b01      	cmp	r3, #1
 800d464:	dc00      	bgt.n	800d468 <_dtoa_r+0xba0>
 800d466:	e648      	b.n	800d0fa <_dtoa_r+0x832>
 800d468:	2001      	movs	r0, #1
 800d46a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800d46c:	e665      	b.n	800d13a <_dtoa_r+0x872>
 800d46e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d470:	2b00      	cmp	r3, #0
 800d472:	dc00      	bgt.n	800d476 <_dtoa_r+0xbae>
 800d474:	e6a9      	b.n	800d1ca <_dtoa_r+0x902>
 800d476:	2400      	movs	r4, #0
 800d478:	0031      	movs	r1, r6
 800d47a:	9805      	ldr	r0, [sp, #20]
 800d47c:	f7ff f99e 	bl	800c7bc <quorem>
 800d480:	9b08      	ldr	r3, [sp, #32]
 800d482:	3030      	adds	r0, #48	@ 0x30
 800d484:	5518      	strb	r0, [r3, r4]
 800d486:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d488:	3401      	adds	r4, #1
 800d48a:	0005      	movs	r5, r0
 800d48c:	42a3      	cmp	r3, r4
 800d48e:	ddb6      	ble.n	800d3fe <_dtoa_r+0xb36>
 800d490:	2300      	movs	r3, #0
 800d492:	220a      	movs	r2, #10
 800d494:	9905      	ldr	r1, [sp, #20]
 800d496:	9803      	ldr	r0, [sp, #12]
 800d498:	f000 f974 	bl	800d784 <__multadd>
 800d49c:	9005      	str	r0, [sp, #20]
 800d49e:	e7eb      	b.n	800d478 <_dtoa_r+0xbb0>
 800d4a0:	0800ecd4 	.word	0x0800ecd4
 800d4a4:	0800ecdc 	.word	0x0800ecdc

0800d4a8 <_free_r>:
 800d4a8:	b570      	push	{r4, r5, r6, lr}
 800d4aa:	0005      	movs	r5, r0
 800d4ac:	1e0c      	subs	r4, r1, #0
 800d4ae:	d010      	beq.n	800d4d2 <_free_r+0x2a>
 800d4b0:	3c04      	subs	r4, #4
 800d4b2:	6823      	ldr	r3, [r4, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	da00      	bge.n	800d4ba <_free_r+0x12>
 800d4b8:	18e4      	adds	r4, r4, r3
 800d4ba:	0028      	movs	r0, r5
 800d4bc:	f000 f8ea 	bl	800d694 <__malloc_lock>
 800d4c0:	4a1d      	ldr	r2, [pc, #116]	@ (800d538 <_free_r+0x90>)
 800d4c2:	6813      	ldr	r3, [r2, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d105      	bne.n	800d4d4 <_free_r+0x2c>
 800d4c8:	6063      	str	r3, [r4, #4]
 800d4ca:	6014      	str	r4, [r2, #0]
 800d4cc:	0028      	movs	r0, r5
 800d4ce:	f000 f8e9 	bl	800d6a4 <__malloc_unlock>
 800d4d2:	bd70      	pop	{r4, r5, r6, pc}
 800d4d4:	42a3      	cmp	r3, r4
 800d4d6:	d908      	bls.n	800d4ea <_free_r+0x42>
 800d4d8:	6820      	ldr	r0, [r4, #0]
 800d4da:	1821      	adds	r1, r4, r0
 800d4dc:	428b      	cmp	r3, r1
 800d4de:	d1f3      	bne.n	800d4c8 <_free_r+0x20>
 800d4e0:	6819      	ldr	r1, [r3, #0]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	1809      	adds	r1, r1, r0
 800d4e6:	6021      	str	r1, [r4, #0]
 800d4e8:	e7ee      	b.n	800d4c8 <_free_r+0x20>
 800d4ea:	001a      	movs	r2, r3
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d001      	beq.n	800d4f6 <_free_r+0x4e>
 800d4f2:	42a3      	cmp	r3, r4
 800d4f4:	d9f9      	bls.n	800d4ea <_free_r+0x42>
 800d4f6:	6811      	ldr	r1, [r2, #0]
 800d4f8:	1850      	adds	r0, r2, r1
 800d4fa:	42a0      	cmp	r0, r4
 800d4fc:	d10b      	bne.n	800d516 <_free_r+0x6e>
 800d4fe:	6820      	ldr	r0, [r4, #0]
 800d500:	1809      	adds	r1, r1, r0
 800d502:	1850      	adds	r0, r2, r1
 800d504:	6011      	str	r1, [r2, #0]
 800d506:	4283      	cmp	r3, r0
 800d508:	d1e0      	bne.n	800d4cc <_free_r+0x24>
 800d50a:	6818      	ldr	r0, [r3, #0]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	1841      	adds	r1, r0, r1
 800d510:	6011      	str	r1, [r2, #0]
 800d512:	6053      	str	r3, [r2, #4]
 800d514:	e7da      	b.n	800d4cc <_free_r+0x24>
 800d516:	42a0      	cmp	r0, r4
 800d518:	d902      	bls.n	800d520 <_free_r+0x78>
 800d51a:	230c      	movs	r3, #12
 800d51c:	602b      	str	r3, [r5, #0]
 800d51e:	e7d5      	b.n	800d4cc <_free_r+0x24>
 800d520:	6820      	ldr	r0, [r4, #0]
 800d522:	1821      	adds	r1, r4, r0
 800d524:	428b      	cmp	r3, r1
 800d526:	d103      	bne.n	800d530 <_free_r+0x88>
 800d528:	6819      	ldr	r1, [r3, #0]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	1809      	adds	r1, r1, r0
 800d52e:	6021      	str	r1, [r4, #0]
 800d530:	6063      	str	r3, [r4, #4]
 800d532:	6054      	str	r4, [r2, #4]
 800d534:	e7ca      	b.n	800d4cc <_free_r+0x24>
 800d536:	46c0      	nop			@ (mov r8, r8)
 800d538:	20000758 	.word	0x20000758

0800d53c <malloc>:
 800d53c:	b510      	push	{r4, lr}
 800d53e:	4b03      	ldr	r3, [pc, #12]	@ (800d54c <malloc+0x10>)
 800d540:	0001      	movs	r1, r0
 800d542:	6818      	ldr	r0, [r3, #0]
 800d544:	f000 f826 	bl	800d594 <_malloc_r>
 800d548:	bd10      	pop	{r4, pc}
 800d54a:	46c0      	nop			@ (mov r8, r8)
 800d54c:	20000028 	.word	0x20000028

0800d550 <sbrk_aligned>:
 800d550:	b570      	push	{r4, r5, r6, lr}
 800d552:	4e0f      	ldr	r6, [pc, #60]	@ (800d590 <sbrk_aligned+0x40>)
 800d554:	000d      	movs	r5, r1
 800d556:	6831      	ldr	r1, [r6, #0]
 800d558:	0004      	movs	r4, r0
 800d55a:	2900      	cmp	r1, #0
 800d55c:	d102      	bne.n	800d564 <sbrk_aligned+0x14>
 800d55e:	f000 fe67 	bl	800e230 <_sbrk_r>
 800d562:	6030      	str	r0, [r6, #0]
 800d564:	0029      	movs	r1, r5
 800d566:	0020      	movs	r0, r4
 800d568:	f000 fe62 	bl	800e230 <_sbrk_r>
 800d56c:	1c43      	adds	r3, r0, #1
 800d56e:	d103      	bne.n	800d578 <sbrk_aligned+0x28>
 800d570:	2501      	movs	r5, #1
 800d572:	426d      	negs	r5, r5
 800d574:	0028      	movs	r0, r5
 800d576:	bd70      	pop	{r4, r5, r6, pc}
 800d578:	2303      	movs	r3, #3
 800d57a:	1cc5      	adds	r5, r0, #3
 800d57c:	439d      	bics	r5, r3
 800d57e:	42a8      	cmp	r0, r5
 800d580:	d0f8      	beq.n	800d574 <sbrk_aligned+0x24>
 800d582:	1a29      	subs	r1, r5, r0
 800d584:	0020      	movs	r0, r4
 800d586:	f000 fe53 	bl	800e230 <_sbrk_r>
 800d58a:	3001      	adds	r0, #1
 800d58c:	d1f2      	bne.n	800d574 <sbrk_aligned+0x24>
 800d58e:	e7ef      	b.n	800d570 <sbrk_aligned+0x20>
 800d590:	20000754 	.word	0x20000754

0800d594 <_malloc_r>:
 800d594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d596:	2203      	movs	r2, #3
 800d598:	1ccb      	adds	r3, r1, #3
 800d59a:	4393      	bics	r3, r2
 800d59c:	3308      	adds	r3, #8
 800d59e:	0005      	movs	r5, r0
 800d5a0:	001f      	movs	r7, r3
 800d5a2:	2b0c      	cmp	r3, #12
 800d5a4:	d234      	bcs.n	800d610 <_malloc_r+0x7c>
 800d5a6:	270c      	movs	r7, #12
 800d5a8:	42b9      	cmp	r1, r7
 800d5aa:	d833      	bhi.n	800d614 <_malloc_r+0x80>
 800d5ac:	0028      	movs	r0, r5
 800d5ae:	f000 f871 	bl	800d694 <__malloc_lock>
 800d5b2:	4e37      	ldr	r6, [pc, #220]	@ (800d690 <_malloc_r+0xfc>)
 800d5b4:	6833      	ldr	r3, [r6, #0]
 800d5b6:	001c      	movs	r4, r3
 800d5b8:	2c00      	cmp	r4, #0
 800d5ba:	d12f      	bne.n	800d61c <_malloc_r+0x88>
 800d5bc:	0039      	movs	r1, r7
 800d5be:	0028      	movs	r0, r5
 800d5c0:	f7ff ffc6 	bl	800d550 <sbrk_aligned>
 800d5c4:	0004      	movs	r4, r0
 800d5c6:	1c43      	adds	r3, r0, #1
 800d5c8:	d15f      	bne.n	800d68a <_malloc_r+0xf6>
 800d5ca:	6834      	ldr	r4, [r6, #0]
 800d5cc:	9400      	str	r4, [sp, #0]
 800d5ce:	9b00      	ldr	r3, [sp, #0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d14a      	bne.n	800d66a <_malloc_r+0xd6>
 800d5d4:	2c00      	cmp	r4, #0
 800d5d6:	d052      	beq.n	800d67e <_malloc_r+0xea>
 800d5d8:	6823      	ldr	r3, [r4, #0]
 800d5da:	0028      	movs	r0, r5
 800d5dc:	18e3      	adds	r3, r4, r3
 800d5de:	9900      	ldr	r1, [sp, #0]
 800d5e0:	9301      	str	r3, [sp, #4]
 800d5e2:	f000 fe25 	bl	800e230 <_sbrk_r>
 800d5e6:	9b01      	ldr	r3, [sp, #4]
 800d5e8:	4283      	cmp	r3, r0
 800d5ea:	d148      	bne.n	800d67e <_malloc_r+0xea>
 800d5ec:	6823      	ldr	r3, [r4, #0]
 800d5ee:	0028      	movs	r0, r5
 800d5f0:	1aff      	subs	r7, r7, r3
 800d5f2:	0039      	movs	r1, r7
 800d5f4:	f7ff ffac 	bl	800d550 <sbrk_aligned>
 800d5f8:	3001      	adds	r0, #1
 800d5fa:	d040      	beq.n	800d67e <_malloc_r+0xea>
 800d5fc:	6823      	ldr	r3, [r4, #0]
 800d5fe:	19db      	adds	r3, r3, r7
 800d600:	6023      	str	r3, [r4, #0]
 800d602:	6833      	ldr	r3, [r6, #0]
 800d604:	685a      	ldr	r2, [r3, #4]
 800d606:	2a00      	cmp	r2, #0
 800d608:	d133      	bne.n	800d672 <_malloc_r+0xde>
 800d60a:	9b00      	ldr	r3, [sp, #0]
 800d60c:	6033      	str	r3, [r6, #0]
 800d60e:	e019      	b.n	800d644 <_malloc_r+0xb0>
 800d610:	2b00      	cmp	r3, #0
 800d612:	dac9      	bge.n	800d5a8 <_malloc_r+0x14>
 800d614:	230c      	movs	r3, #12
 800d616:	602b      	str	r3, [r5, #0]
 800d618:	2000      	movs	r0, #0
 800d61a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d61c:	6821      	ldr	r1, [r4, #0]
 800d61e:	1bc9      	subs	r1, r1, r7
 800d620:	d420      	bmi.n	800d664 <_malloc_r+0xd0>
 800d622:	290b      	cmp	r1, #11
 800d624:	d90a      	bls.n	800d63c <_malloc_r+0xa8>
 800d626:	19e2      	adds	r2, r4, r7
 800d628:	6027      	str	r7, [r4, #0]
 800d62a:	42a3      	cmp	r3, r4
 800d62c:	d104      	bne.n	800d638 <_malloc_r+0xa4>
 800d62e:	6032      	str	r2, [r6, #0]
 800d630:	6863      	ldr	r3, [r4, #4]
 800d632:	6011      	str	r1, [r2, #0]
 800d634:	6053      	str	r3, [r2, #4]
 800d636:	e005      	b.n	800d644 <_malloc_r+0xb0>
 800d638:	605a      	str	r2, [r3, #4]
 800d63a:	e7f9      	b.n	800d630 <_malloc_r+0x9c>
 800d63c:	6862      	ldr	r2, [r4, #4]
 800d63e:	42a3      	cmp	r3, r4
 800d640:	d10e      	bne.n	800d660 <_malloc_r+0xcc>
 800d642:	6032      	str	r2, [r6, #0]
 800d644:	0028      	movs	r0, r5
 800d646:	f000 f82d 	bl	800d6a4 <__malloc_unlock>
 800d64a:	0020      	movs	r0, r4
 800d64c:	2207      	movs	r2, #7
 800d64e:	300b      	adds	r0, #11
 800d650:	1d23      	adds	r3, r4, #4
 800d652:	4390      	bics	r0, r2
 800d654:	1ac2      	subs	r2, r0, r3
 800d656:	4298      	cmp	r0, r3
 800d658:	d0df      	beq.n	800d61a <_malloc_r+0x86>
 800d65a:	1a1b      	subs	r3, r3, r0
 800d65c:	50a3      	str	r3, [r4, r2]
 800d65e:	e7dc      	b.n	800d61a <_malloc_r+0x86>
 800d660:	605a      	str	r2, [r3, #4]
 800d662:	e7ef      	b.n	800d644 <_malloc_r+0xb0>
 800d664:	0023      	movs	r3, r4
 800d666:	6864      	ldr	r4, [r4, #4]
 800d668:	e7a6      	b.n	800d5b8 <_malloc_r+0x24>
 800d66a:	9c00      	ldr	r4, [sp, #0]
 800d66c:	6863      	ldr	r3, [r4, #4]
 800d66e:	9300      	str	r3, [sp, #0]
 800d670:	e7ad      	b.n	800d5ce <_malloc_r+0x3a>
 800d672:	001a      	movs	r2, r3
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	42a3      	cmp	r3, r4
 800d678:	d1fb      	bne.n	800d672 <_malloc_r+0xde>
 800d67a:	2300      	movs	r3, #0
 800d67c:	e7da      	b.n	800d634 <_malloc_r+0xa0>
 800d67e:	230c      	movs	r3, #12
 800d680:	0028      	movs	r0, r5
 800d682:	602b      	str	r3, [r5, #0]
 800d684:	f000 f80e 	bl	800d6a4 <__malloc_unlock>
 800d688:	e7c6      	b.n	800d618 <_malloc_r+0x84>
 800d68a:	6007      	str	r7, [r0, #0]
 800d68c:	e7da      	b.n	800d644 <_malloc_r+0xb0>
 800d68e:	46c0      	nop			@ (mov r8, r8)
 800d690:	20000758 	.word	0x20000758

0800d694 <__malloc_lock>:
 800d694:	b510      	push	{r4, lr}
 800d696:	4802      	ldr	r0, [pc, #8]	@ (800d6a0 <__malloc_lock+0xc>)
 800d698:	f7ff f87b 	bl	800c792 <__retarget_lock_acquire_recursive>
 800d69c:	bd10      	pop	{r4, pc}
 800d69e:	46c0      	nop			@ (mov r8, r8)
 800d6a0:	20000750 	.word	0x20000750

0800d6a4 <__malloc_unlock>:
 800d6a4:	b510      	push	{r4, lr}
 800d6a6:	4802      	ldr	r0, [pc, #8]	@ (800d6b0 <__malloc_unlock+0xc>)
 800d6a8:	f7ff f874 	bl	800c794 <__retarget_lock_release_recursive>
 800d6ac:	bd10      	pop	{r4, pc}
 800d6ae:	46c0      	nop			@ (mov r8, r8)
 800d6b0:	20000750 	.word	0x20000750

0800d6b4 <_Balloc>:
 800d6b4:	b570      	push	{r4, r5, r6, lr}
 800d6b6:	69c5      	ldr	r5, [r0, #28]
 800d6b8:	0006      	movs	r6, r0
 800d6ba:	000c      	movs	r4, r1
 800d6bc:	2d00      	cmp	r5, #0
 800d6be:	d10e      	bne.n	800d6de <_Balloc+0x2a>
 800d6c0:	2010      	movs	r0, #16
 800d6c2:	f7ff ff3b 	bl	800d53c <malloc>
 800d6c6:	1e02      	subs	r2, r0, #0
 800d6c8:	61f0      	str	r0, [r6, #28]
 800d6ca:	d104      	bne.n	800d6d6 <_Balloc+0x22>
 800d6cc:	216b      	movs	r1, #107	@ 0x6b
 800d6ce:	4b19      	ldr	r3, [pc, #100]	@ (800d734 <_Balloc+0x80>)
 800d6d0:	4819      	ldr	r0, [pc, #100]	@ (800d738 <_Balloc+0x84>)
 800d6d2:	f000 fdc9 	bl	800e268 <__assert_func>
 800d6d6:	6045      	str	r5, [r0, #4]
 800d6d8:	6085      	str	r5, [r0, #8]
 800d6da:	6005      	str	r5, [r0, #0]
 800d6dc:	60c5      	str	r5, [r0, #12]
 800d6de:	69f5      	ldr	r5, [r6, #28]
 800d6e0:	68eb      	ldr	r3, [r5, #12]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d013      	beq.n	800d70e <_Balloc+0x5a>
 800d6e6:	69f3      	ldr	r3, [r6, #28]
 800d6e8:	00a2      	lsls	r2, r4, #2
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	189b      	adds	r3, r3, r2
 800d6ee:	6818      	ldr	r0, [r3, #0]
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d118      	bne.n	800d726 <_Balloc+0x72>
 800d6f4:	2101      	movs	r1, #1
 800d6f6:	000d      	movs	r5, r1
 800d6f8:	40a5      	lsls	r5, r4
 800d6fa:	1d6a      	adds	r2, r5, #5
 800d6fc:	0030      	movs	r0, r6
 800d6fe:	0092      	lsls	r2, r2, #2
 800d700:	f000 fdd0 	bl	800e2a4 <_calloc_r>
 800d704:	2800      	cmp	r0, #0
 800d706:	d00c      	beq.n	800d722 <_Balloc+0x6e>
 800d708:	6044      	str	r4, [r0, #4]
 800d70a:	6085      	str	r5, [r0, #8]
 800d70c:	e00d      	b.n	800d72a <_Balloc+0x76>
 800d70e:	2221      	movs	r2, #33	@ 0x21
 800d710:	2104      	movs	r1, #4
 800d712:	0030      	movs	r0, r6
 800d714:	f000 fdc6 	bl	800e2a4 <_calloc_r>
 800d718:	69f3      	ldr	r3, [r6, #28]
 800d71a:	60e8      	str	r0, [r5, #12]
 800d71c:	68db      	ldr	r3, [r3, #12]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1e1      	bne.n	800d6e6 <_Balloc+0x32>
 800d722:	2000      	movs	r0, #0
 800d724:	bd70      	pop	{r4, r5, r6, pc}
 800d726:	6802      	ldr	r2, [r0, #0]
 800d728:	601a      	str	r2, [r3, #0]
 800d72a:	2300      	movs	r3, #0
 800d72c:	6103      	str	r3, [r0, #16]
 800d72e:	60c3      	str	r3, [r0, #12]
 800d730:	e7f8      	b.n	800d724 <_Balloc+0x70>
 800d732:	46c0      	nop			@ (mov r8, r8)
 800d734:	0800ece1 	.word	0x0800ece1
 800d738:	0800ed61 	.word	0x0800ed61

0800d73c <_Bfree>:
 800d73c:	b570      	push	{r4, r5, r6, lr}
 800d73e:	69c6      	ldr	r6, [r0, #28]
 800d740:	0005      	movs	r5, r0
 800d742:	000c      	movs	r4, r1
 800d744:	2e00      	cmp	r6, #0
 800d746:	d10e      	bne.n	800d766 <_Bfree+0x2a>
 800d748:	2010      	movs	r0, #16
 800d74a:	f7ff fef7 	bl	800d53c <malloc>
 800d74e:	1e02      	subs	r2, r0, #0
 800d750:	61e8      	str	r0, [r5, #28]
 800d752:	d104      	bne.n	800d75e <_Bfree+0x22>
 800d754:	218f      	movs	r1, #143	@ 0x8f
 800d756:	4b09      	ldr	r3, [pc, #36]	@ (800d77c <_Bfree+0x40>)
 800d758:	4809      	ldr	r0, [pc, #36]	@ (800d780 <_Bfree+0x44>)
 800d75a:	f000 fd85 	bl	800e268 <__assert_func>
 800d75e:	6046      	str	r6, [r0, #4]
 800d760:	6086      	str	r6, [r0, #8]
 800d762:	6006      	str	r6, [r0, #0]
 800d764:	60c6      	str	r6, [r0, #12]
 800d766:	2c00      	cmp	r4, #0
 800d768:	d007      	beq.n	800d77a <_Bfree+0x3e>
 800d76a:	69eb      	ldr	r3, [r5, #28]
 800d76c:	6862      	ldr	r2, [r4, #4]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	0092      	lsls	r2, r2, #2
 800d772:	189b      	adds	r3, r3, r2
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	6022      	str	r2, [r4, #0]
 800d778:	601c      	str	r4, [r3, #0]
 800d77a:	bd70      	pop	{r4, r5, r6, pc}
 800d77c:	0800ece1 	.word	0x0800ece1
 800d780:	0800ed61 	.word	0x0800ed61

0800d784 <__multadd>:
 800d784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d786:	000f      	movs	r7, r1
 800d788:	9001      	str	r0, [sp, #4]
 800d78a:	000c      	movs	r4, r1
 800d78c:	001e      	movs	r6, r3
 800d78e:	2000      	movs	r0, #0
 800d790:	690d      	ldr	r5, [r1, #16]
 800d792:	3714      	adds	r7, #20
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	3001      	adds	r0, #1
 800d798:	b299      	uxth	r1, r3
 800d79a:	4351      	muls	r1, r2
 800d79c:	0c1b      	lsrs	r3, r3, #16
 800d79e:	4353      	muls	r3, r2
 800d7a0:	1989      	adds	r1, r1, r6
 800d7a2:	0c0e      	lsrs	r6, r1, #16
 800d7a4:	199b      	adds	r3, r3, r6
 800d7a6:	0c1e      	lsrs	r6, r3, #16
 800d7a8:	b289      	uxth	r1, r1
 800d7aa:	041b      	lsls	r3, r3, #16
 800d7ac:	185b      	adds	r3, r3, r1
 800d7ae:	c708      	stmia	r7!, {r3}
 800d7b0:	4285      	cmp	r5, r0
 800d7b2:	dcef      	bgt.n	800d794 <__multadd+0x10>
 800d7b4:	2e00      	cmp	r6, #0
 800d7b6:	d022      	beq.n	800d7fe <__multadd+0x7a>
 800d7b8:	68a3      	ldr	r3, [r4, #8]
 800d7ba:	42ab      	cmp	r3, r5
 800d7bc:	dc19      	bgt.n	800d7f2 <__multadd+0x6e>
 800d7be:	6861      	ldr	r1, [r4, #4]
 800d7c0:	9801      	ldr	r0, [sp, #4]
 800d7c2:	3101      	adds	r1, #1
 800d7c4:	f7ff ff76 	bl	800d6b4 <_Balloc>
 800d7c8:	1e07      	subs	r7, r0, #0
 800d7ca:	d105      	bne.n	800d7d8 <__multadd+0x54>
 800d7cc:	003a      	movs	r2, r7
 800d7ce:	21ba      	movs	r1, #186	@ 0xba
 800d7d0:	4b0c      	ldr	r3, [pc, #48]	@ (800d804 <__multadd+0x80>)
 800d7d2:	480d      	ldr	r0, [pc, #52]	@ (800d808 <__multadd+0x84>)
 800d7d4:	f000 fd48 	bl	800e268 <__assert_func>
 800d7d8:	0021      	movs	r1, r4
 800d7da:	6922      	ldr	r2, [r4, #16]
 800d7dc:	310c      	adds	r1, #12
 800d7de:	3202      	adds	r2, #2
 800d7e0:	0092      	lsls	r2, r2, #2
 800d7e2:	300c      	adds	r0, #12
 800d7e4:	f000 fd36 	bl	800e254 <memcpy>
 800d7e8:	0021      	movs	r1, r4
 800d7ea:	9801      	ldr	r0, [sp, #4]
 800d7ec:	f7ff ffa6 	bl	800d73c <_Bfree>
 800d7f0:	003c      	movs	r4, r7
 800d7f2:	1d2b      	adds	r3, r5, #4
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	18e3      	adds	r3, r4, r3
 800d7f8:	3501      	adds	r5, #1
 800d7fa:	605e      	str	r6, [r3, #4]
 800d7fc:	6125      	str	r5, [r4, #16]
 800d7fe:	0020      	movs	r0, r4
 800d800:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d802:	46c0      	nop			@ (mov r8, r8)
 800d804:	0800ed50 	.word	0x0800ed50
 800d808:	0800ed61 	.word	0x0800ed61

0800d80c <__hi0bits>:
 800d80c:	2280      	movs	r2, #128	@ 0x80
 800d80e:	0003      	movs	r3, r0
 800d810:	0252      	lsls	r2, r2, #9
 800d812:	2000      	movs	r0, #0
 800d814:	4293      	cmp	r3, r2
 800d816:	d201      	bcs.n	800d81c <__hi0bits+0x10>
 800d818:	041b      	lsls	r3, r3, #16
 800d81a:	3010      	adds	r0, #16
 800d81c:	2280      	movs	r2, #128	@ 0x80
 800d81e:	0452      	lsls	r2, r2, #17
 800d820:	4293      	cmp	r3, r2
 800d822:	d201      	bcs.n	800d828 <__hi0bits+0x1c>
 800d824:	3008      	adds	r0, #8
 800d826:	021b      	lsls	r3, r3, #8
 800d828:	2280      	movs	r2, #128	@ 0x80
 800d82a:	0552      	lsls	r2, r2, #21
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d201      	bcs.n	800d834 <__hi0bits+0x28>
 800d830:	3004      	adds	r0, #4
 800d832:	011b      	lsls	r3, r3, #4
 800d834:	2280      	movs	r2, #128	@ 0x80
 800d836:	05d2      	lsls	r2, r2, #23
 800d838:	4293      	cmp	r3, r2
 800d83a:	d201      	bcs.n	800d840 <__hi0bits+0x34>
 800d83c:	3002      	adds	r0, #2
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	2b00      	cmp	r3, #0
 800d842:	db03      	blt.n	800d84c <__hi0bits+0x40>
 800d844:	3001      	adds	r0, #1
 800d846:	4213      	tst	r3, r2
 800d848:	d100      	bne.n	800d84c <__hi0bits+0x40>
 800d84a:	2020      	movs	r0, #32
 800d84c:	4770      	bx	lr

0800d84e <__lo0bits>:
 800d84e:	6803      	ldr	r3, [r0, #0]
 800d850:	0001      	movs	r1, r0
 800d852:	2207      	movs	r2, #7
 800d854:	0018      	movs	r0, r3
 800d856:	4010      	ands	r0, r2
 800d858:	4213      	tst	r3, r2
 800d85a:	d00d      	beq.n	800d878 <__lo0bits+0x2a>
 800d85c:	3a06      	subs	r2, #6
 800d85e:	2000      	movs	r0, #0
 800d860:	4213      	tst	r3, r2
 800d862:	d105      	bne.n	800d870 <__lo0bits+0x22>
 800d864:	3002      	adds	r0, #2
 800d866:	4203      	tst	r3, r0
 800d868:	d003      	beq.n	800d872 <__lo0bits+0x24>
 800d86a:	40d3      	lsrs	r3, r2
 800d86c:	0010      	movs	r0, r2
 800d86e:	600b      	str	r3, [r1, #0]
 800d870:	4770      	bx	lr
 800d872:	089b      	lsrs	r3, r3, #2
 800d874:	600b      	str	r3, [r1, #0]
 800d876:	e7fb      	b.n	800d870 <__lo0bits+0x22>
 800d878:	b29a      	uxth	r2, r3
 800d87a:	2a00      	cmp	r2, #0
 800d87c:	d101      	bne.n	800d882 <__lo0bits+0x34>
 800d87e:	2010      	movs	r0, #16
 800d880:	0c1b      	lsrs	r3, r3, #16
 800d882:	b2da      	uxtb	r2, r3
 800d884:	2a00      	cmp	r2, #0
 800d886:	d101      	bne.n	800d88c <__lo0bits+0x3e>
 800d888:	3008      	adds	r0, #8
 800d88a:	0a1b      	lsrs	r3, r3, #8
 800d88c:	071a      	lsls	r2, r3, #28
 800d88e:	d101      	bne.n	800d894 <__lo0bits+0x46>
 800d890:	3004      	adds	r0, #4
 800d892:	091b      	lsrs	r3, r3, #4
 800d894:	079a      	lsls	r2, r3, #30
 800d896:	d101      	bne.n	800d89c <__lo0bits+0x4e>
 800d898:	3002      	adds	r0, #2
 800d89a:	089b      	lsrs	r3, r3, #2
 800d89c:	07da      	lsls	r2, r3, #31
 800d89e:	d4e9      	bmi.n	800d874 <__lo0bits+0x26>
 800d8a0:	3001      	adds	r0, #1
 800d8a2:	085b      	lsrs	r3, r3, #1
 800d8a4:	d1e6      	bne.n	800d874 <__lo0bits+0x26>
 800d8a6:	2020      	movs	r0, #32
 800d8a8:	e7e2      	b.n	800d870 <__lo0bits+0x22>
	...

0800d8ac <__i2b>:
 800d8ac:	b510      	push	{r4, lr}
 800d8ae:	000c      	movs	r4, r1
 800d8b0:	2101      	movs	r1, #1
 800d8b2:	f7ff feff 	bl	800d6b4 <_Balloc>
 800d8b6:	2800      	cmp	r0, #0
 800d8b8:	d107      	bne.n	800d8ca <__i2b+0x1e>
 800d8ba:	2146      	movs	r1, #70	@ 0x46
 800d8bc:	4c05      	ldr	r4, [pc, #20]	@ (800d8d4 <__i2b+0x28>)
 800d8be:	0002      	movs	r2, r0
 800d8c0:	4b05      	ldr	r3, [pc, #20]	@ (800d8d8 <__i2b+0x2c>)
 800d8c2:	0020      	movs	r0, r4
 800d8c4:	31ff      	adds	r1, #255	@ 0xff
 800d8c6:	f000 fccf 	bl	800e268 <__assert_func>
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	6144      	str	r4, [r0, #20]
 800d8ce:	6103      	str	r3, [r0, #16]
 800d8d0:	bd10      	pop	{r4, pc}
 800d8d2:	46c0      	nop			@ (mov r8, r8)
 800d8d4:	0800ed61 	.word	0x0800ed61
 800d8d8:	0800ed50 	.word	0x0800ed50

0800d8dc <__multiply>:
 800d8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8de:	0014      	movs	r4, r2
 800d8e0:	690a      	ldr	r2, [r1, #16]
 800d8e2:	6923      	ldr	r3, [r4, #16]
 800d8e4:	000d      	movs	r5, r1
 800d8e6:	b089      	sub	sp, #36	@ 0x24
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	db02      	blt.n	800d8f2 <__multiply+0x16>
 800d8ec:	0023      	movs	r3, r4
 800d8ee:	000c      	movs	r4, r1
 800d8f0:	001d      	movs	r5, r3
 800d8f2:	6927      	ldr	r7, [r4, #16]
 800d8f4:	692e      	ldr	r6, [r5, #16]
 800d8f6:	6861      	ldr	r1, [r4, #4]
 800d8f8:	19bb      	adds	r3, r7, r6
 800d8fa:	9300      	str	r3, [sp, #0]
 800d8fc:	68a3      	ldr	r3, [r4, #8]
 800d8fe:	19ba      	adds	r2, r7, r6
 800d900:	4293      	cmp	r3, r2
 800d902:	da00      	bge.n	800d906 <__multiply+0x2a>
 800d904:	3101      	adds	r1, #1
 800d906:	f7ff fed5 	bl	800d6b4 <_Balloc>
 800d90a:	4684      	mov	ip, r0
 800d90c:	2800      	cmp	r0, #0
 800d90e:	d106      	bne.n	800d91e <__multiply+0x42>
 800d910:	21b1      	movs	r1, #177	@ 0xb1
 800d912:	4662      	mov	r2, ip
 800d914:	4b44      	ldr	r3, [pc, #272]	@ (800da28 <__multiply+0x14c>)
 800d916:	4845      	ldr	r0, [pc, #276]	@ (800da2c <__multiply+0x150>)
 800d918:	0049      	lsls	r1, r1, #1
 800d91a:	f000 fca5 	bl	800e268 <__assert_func>
 800d91e:	0002      	movs	r2, r0
 800d920:	19bb      	adds	r3, r7, r6
 800d922:	3214      	adds	r2, #20
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	18d3      	adds	r3, r2, r3
 800d928:	9301      	str	r3, [sp, #4]
 800d92a:	2100      	movs	r1, #0
 800d92c:	0013      	movs	r3, r2
 800d92e:	9801      	ldr	r0, [sp, #4]
 800d930:	4283      	cmp	r3, r0
 800d932:	d328      	bcc.n	800d986 <__multiply+0xaa>
 800d934:	0023      	movs	r3, r4
 800d936:	00bf      	lsls	r7, r7, #2
 800d938:	3314      	adds	r3, #20
 800d93a:	9304      	str	r3, [sp, #16]
 800d93c:	3514      	adds	r5, #20
 800d93e:	19db      	adds	r3, r3, r7
 800d940:	00b6      	lsls	r6, r6, #2
 800d942:	9302      	str	r3, [sp, #8]
 800d944:	19ab      	adds	r3, r5, r6
 800d946:	9307      	str	r3, [sp, #28]
 800d948:	2304      	movs	r3, #4
 800d94a:	9305      	str	r3, [sp, #20]
 800d94c:	0023      	movs	r3, r4
 800d94e:	9902      	ldr	r1, [sp, #8]
 800d950:	3315      	adds	r3, #21
 800d952:	4299      	cmp	r1, r3
 800d954:	d305      	bcc.n	800d962 <__multiply+0x86>
 800d956:	1b0c      	subs	r4, r1, r4
 800d958:	3c15      	subs	r4, #21
 800d95a:	08a4      	lsrs	r4, r4, #2
 800d95c:	3401      	adds	r4, #1
 800d95e:	00a3      	lsls	r3, r4, #2
 800d960:	9305      	str	r3, [sp, #20]
 800d962:	9b07      	ldr	r3, [sp, #28]
 800d964:	429d      	cmp	r5, r3
 800d966:	d310      	bcc.n	800d98a <__multiply+0xae>
 800d968:	9b00      	ldr	r3, [sp, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	dd05      	ble.n	800d97a <__multiply+0x9e>
 800d96e:	9b01      	ldr	r3, [sp, #4]
 800d970:	3b04      	subs	r3, #4
 800d972:	9301      	str	r3, [sp, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d052      	beq.n	800da20 <__multiply+0x144>
 800d97a:	4663      	mov	r3, ip
 800d97c:	4660      	mov	r0, ip
 800d97e:	9a00      	ldr	r2, [sp, #0]
 800d980:	611a      	str	r2, [r3, #16]
 800d982:	b009      	add	sp, #36	@ 0x24
 800d984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d986:	c302      	stmia	r3!, {r1}
 800d988:	e7d1      	b.n	800d92e <__multiply+0x52>
 800d98a:	682c      	ldr	r4, [r5, #0]
 800d98c:	b2a4      	uxth	r4, r4
 800d98e:	2c00      	cmp	r4, #0
 800d990:	d01f      	beq.n	800d9d2 <__multiply+0xf6>
 800d992:	2300      	movs	r3, #0
 800d994:	0017      	movs	r7, r2
 800d996:	9e04      	ldr	r6, [sp, #16]
 800d998:	9303      	str	r3, [sp, #12]
 800d99a:	ce08      	ldmia	r6!, {r3}
 800d99c:	6839      	ldr	r1, [r7, #0]
 800d99e:	9306      	str	r3, [sp, #24]
 800d9a0:	466b      	mov	r3, sp
 800d9a2:	8b1b      	ldrh	r3, [r3, #24]
 800d9a4:	b288      	uxth	r0, r1
 800d9a6:	4363      	muls	r3, r4
 800d9a8:	181b      	adds	r3, r3, r0
 800d9aa:	9803      	ldr	r0, [sp, #12]
 800d9ac:	0c09      	lsrs	r1, r1, #16
 800d9ae:	181b      	adds	r3, r3, r0
 800d9b0:	9806      	ldr	r0, [sp, #24]
 800d9b2:	0c00      	lsrs	r0, r0, #16
 800d9b4:	4360      	muls	r0, r4
 800d9b6:	1840      	adds	r0, r0, r1
 800d9b8:	0c19      	lsrs	r1, r3, #16
 800d9ba:	1841      	adds	r1, r0, r1
 800d9bc:	0c08      	lsrs	r0, r1, #16
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	0409      	lsls	r1, r1, #16
 800d9c2:	4319      	orrs	r1, r3
 800d9c4:	9b02      	ldr	r3, [sp, #8]
 800d9c6:	9003      	str	r0, [sp, #12]
 800d9c8:	c702      	stmia	r7!, {r1}
 800d9ca:	42b3      	cmp	r3, r6
 800d9cc:	d8e5      	bhi.n	800d99a <__multiply+0xbe>
 800d9ce:	9b05      	ldr	r3, [sp, #20]
 800d9d0:	50d0      	str	r0, [r2, r3]
 800d9d2:	682c      	ldr	r4, [r5, #0]
 800d9d4:	0c24      	lsrs	r4, r4, #16
 800d9d6:	d020      	beq.n	800da1a <__multiply+0x13e>
 800d9d8:	2100      	movs	r1, #0
 800d9da:	0010      	movs	r0, r2
 800d9dc:	6813      	ldr	r3, [r2, #0]
 800d9de:	9e04      	ldr	r6, [sp, #16]
 800d9e0:	9103      	str	r1, [sp, #12]
 800d9e2:	6831      	ldr	r1, [r6, #0]
 800d9e4:	6807      	ldr	r7, [r0, #0]
 800d9e6:	b289      	uxth	r1, r1
 800d9e8:	4361      	muls	r1, r4
 800d9ea:	0c3f      	lsrs	r7, r7, #16
 800d9ec:	19c9      	adds	r1, r1, r7
 800d9ee:	9f03      	ldr	r7, [sp, #12]
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	19c9      	adds	r1, r1, r7
 800d9f4:	040f      	lsls	r7, r1, #16
 800d9f6:	431f      	orrs	r7, r3
 800d9f8:	6007      	str	r7, [r0, #0]
 800d9fa:	ce80      	ldmia	r6!, {r7}
 800d9fc:	6843      	ldr	r3, [r0, #4]
 800d9fe:	0c3f      	lsrs	r7, r7, #16
 800da00:	4367      	muls	r7, r4
 800da02:	b29b      	uxth	r3, r3
 800da04:	0c09      	lsrs	r1, r1, #16
 800da06:	18fb      	adds	r3, r7, r3
 800da08:	185b      	adds	r3, r3, r1
 800da0a:	0c19      	lsrs	r1, r3, #16
 800da0c:	9103      	str	r1, [sp, #12]
 800da0e:	9902      	ldr	r1, [sp, #8]
 800da10:	3004      	adds	r0, #4
 800da12:	42b1      	cmp	r1, r6
 800da14:	d8e5      	bhi.n	800d9e2 <__multiply+0x106>
 800da16:	9905      	ldr	r1, [sp, #20]
 800da18:	5053      	str	r3, [r2, r1]
 800da1a:	3504      	adds	r5, #4
 800da1c:	3204      	adds	r2, #4
 800da1e:	e7a0      	b.n	800d962 <__multiply+0x86>
 800da20:	9b00      	ldr	r3, [sp, #0]
 800da22:	3b01      	subs	r3, #1
 800da24:	9300      	str	r3, [sp, #0]
 800da26:	e79f      	b.n	800d968 <__multiply+0x8c>
 800da28:	0800ed50 	.word	0x0800ed50
 800da2c:	0800ed61 	.word	0x0800ed61

0800da30 <__pow5mult>:
 800da30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da32:	2303      	movs	r3, #3
 800da34:	0015      	movs	r5, r2
 800da36:	0007      	movs	r7, r0
 800da38:	000e      	movs	r6, r1
 800da3a:	401a      	ands	r2, r3
 800da3c:	421d      	tst	r5, r3
 800da3e:	d008      	beq.n	800da52 <__pow5mult+0x22>
 800da40:	4925      	ldr	r1, [pc, #148]	@ (800dad8 <__pow5mult+0xa8>)
 800da42:	3a01      	subs	r2, #1
 800da44:	0092      	lsls	r2, r2, #2
 800da46:	5852      	ldr	r2, [r2, r1]
 800da48:	2300      	movs	r3, #0
 800da4a:	0031      	movs	r1, r6
 800da4c:	f7ff fe9a 	bl	800d784 <__multadd>
 800da50:	0006      	movs	r6, r0
 800da52:	10ad      	asrs	r5, r5, #2
 800da54:	d03d      	beq.n	800dad2 <__pow5mult+0xa2>
 800da56:	69fc      	ldr	r4, [r7, #28]
 800da58:	2c00      	cmp	r4, #0
 800da5a:	d10f      	bne.n	800da7c <__pow5mult+0x4c>
 800da5c:	2010      	movs	r0, #16
 800da5e:	f7ff fd6d 	bl	800d53c <malloc>
 800da62:	1e02      	subs	r2, r0, #0
 800da64:	61f8      	str	r0, [r7, #28]
 800da66:	d105      	bne.n	800da74 <__pow5mult+0x44>
 800da68:	21b4      	movs	r1, #180	@ 0xb4
 800da6a:	4b1c      	ldr	r3, [pc, #112]	@ (800dadc <__pow5mult+0xac>)
 800da6c:	481c      	ldr	r0, [pc, #112]	@ (800dae0 <__pow5mult+0xb0>)
 800da6e:	31ff      	adds	r1, #255	@ 0xff
 800da70:	f000 fbfa 	bl	800e268 <__assert_func>
 800da74:	6044      	str	r4, [r0, #4]
 800da76:	6084      	str	r4, [r0, #8]
 800da78:	6004      	str	r4, [r0, #0]
 800da7a:	60c4      	str	r4, [r0, #12]
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	689c      	ldr	r4, [r3, #8]
 800da80:	9301      	str	r3, [sp, #4]
 800da82:	2c00      	cmp	r4, #0
 800da84:	d108      	bne.n	800da98 <__pow5mult+0x68>
 800da86:	0038      	movs	r0, r7
 800da88:	4916      	ldr	r1, [pc, #88]	@ (800dae4 <__pow5mult+0xb4>)
 800da8a:	f7ff ff0f 	bl	800d8ac <__i2b>
 800da8e:	9b01      	ldr	r3, [sp, #4]
 800da90:	0004      	movs	r4, r0
 800da92:	6098      	str	r0, [r3, #8]
 800da94:	2300      	movs	r3, #0
 800da96:	6003      	str	r3, [r0, #0]
 800da98:	2301      	movs	r3, #1
 800da9a:	421d      	tst	r5, r3
 800da9c:	d00a      	beq.n	800dab4 <__pow5mult+0x84>
 800da9e:	0031      	movs	r1, r6
 800daa0:	0022      	movs	r2, r4
 800daa2:	0038      	movs	r0, r7
 800daa4:	f7ff ff1a 	bl	800d8dc <__multiply>
 800daa8:	0031      	movs	r1, r6
 800daaa:	9001      	str	r0, [sp, #4]
 800daac:	0038      	movs	r0, r7
 800daae:	f7ff fe45 	bl	800d73c <_Bfree>
 800dab2:	9e01      	ldr	r6, [sp, #4]
 800dab4:	106d      	asrs	r5, r5, #1
 800dab6:	d00c      	beq.n	800dad2 <__pow5mult+0xa2>
 800dab8:	6820      	ldr	r0, [r4, #0]
 800daba:	2800      	cmp	r0, #0
 800dabc:	d107      	bne.n	800dace <__pow5mult+0x9e>
 800dabe:	0022      	movs	r2, r4
 800dac0:	0021      	movs	r1, r4
 800dac2:	0038      	movs	r0, r7
 800dac4:	f7ff ff0a 	bl	800d8dc <__multiply>
 800dac8:	2300      	movs	r3, #0
 800daca:	6020      	str	r0, [r4, #0]
 800dacc:	6003      	str	r3, [r0, #0]
 800dace:	0004      	movs	r4, r0
 800dad0:	e7e2      	b.n	800da98 <__pow5mult+0x68>
 800dad2:	0030      	movs	r0, r6
 800dad4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dad6:	46c0      	nop			@ (mov r8, r8)
 800dad8:	0800ee14 	.word	0x0800ee14
 800dadc:	0800ece1 	.word	0x0800ece1
 800dae0:	0800ed61 	.word	0x0800ed61
 800dae4:	00000271 	.word	0x00000271

0800dae8 <__lshift>:
 800dae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daea:	000c      	movs	r4, r1
 800daec:	0016      	movs	r6, r2
 800daee:	6923      	ldr	r3, [r4, #16]
 800daf0:	1157      	asrs	r7, r2, #5
 800daf2:	b085      	sub	sp, #20
 800daf4:	18fb      	adds	r3, r7, r3
 800daf6:	9301      	str	r3, [sp, #4]
 800daf8:	3301      	adds	r3, #1
 800dafa:	9300      	str	r3, [sp, #0]
 800dafc:	6849      	ldr	r1, [r1, #4]
 800dafe:	68a3      	ldr	r3, [r4, #8]
 800db00:	9002      	str	r0, [sp, #8]
 800db02:	9a00      	ldr	r2, [sp, #0]
 800db04:	4293      	cmp	r3, r2
 800db06:	db10      	blt.n	800db2a <__lshift+0x42>
 800db08:	9802      	ldr	r0, [sp, #8]
 800db0a:	f7ff fdd3 	bl	800d6b4 <_Balloc>
 800db0e:	2300      	movs	r3, #0
 800db10:	0001      	movs	r1, r0
 800db12:	0005      	movs	r5, r0
 800db14:	001a      	movs	r2, r3
 800db16:	3114      	adds	r1, #20
 800db18:	4298      	cmp	r0, r3
 800db1a:	d10c      	bne.n	800db36 <__lshift+0x4e>
 800db1c:	21ef      	movs	r1, #239	@ 0xef
 800db1e:	002a      	movs	r2, r5
 800db20:	4b25      	ldr	r3, [pc, #148]	@ (800dbb8 <__lshift+0xd0>)
 800db22:	4826      	ldr	r0, [pc, #152]	@ (800dbbc <__lshift+0xd4>)
 800db24:	0049      	lsls	r1, r1, #1
 800db26:	f000 fb9f 	bl	800e268 <__assert_func>
 800db2a:	3101      	adds	r1, #1
 800db2c:	005b      	lsls	r3, r3, #1
 800db2e:	e7e8      	b.n	800db02 <__lshift+0x1a>
 800db30:	0098      	lsls	r0, r3, #2
 800db32:	500a      	str	r2, [r1, r0]
 800db34:	3301      	adds	r3, #1
 800db36:	42bb      	cmp	r3, r7
 800db38:	dbfa      	blt.n	800db30 <__lshift+0x48>
 800db3a:	43fb      	mvns	r3, r7
 800db3c:	17db      	asrs	r3, r3, #31
 800db3e:	401f      	ands	r7, r3
 800db40:	00bf      	lsls	r7, r7, #2
 800db42:	0023      	movs	r3, r4
 800db44:	201f      	movs	r0, #31
 800db46:	19c9      	adds	r1, r1, r7
 800db48:	0037      	movs	r7, r6
 800db4a:	6922      	ldr	r2, [r4, #16]
 800db4c:	3314      	adds	r3, #20
 800db4e:	0092      	lsls	r2, r2, #2
 800db50:	189a      	adds	r2, r3, r2
 800db52:	4007      	ands	r7, r0
 800db54:	4206      	tst	r6, r0
 800db56:	d029      	beq.n	800dbac <__lshift+0xc4>
 800db58:	3001      	adds	r0, #1
 800db5a:	1bc0      	subs	r0, r0, r7
 800db5c:	9003      	str	r0, [sp, #12]
 800db5e:	468c      	mov	ip, r1
 800db60:	2000      	movs	r0, #0
 800db62:	681e      	ldr	r6, [r3, #0]
 800db64:	40be      	lsls	r6, r7
 800db66:	4306      	orrs	r6, r0
 800db68:	4660      	mov	r0, ip
 800db6a:	c040      	stmia	r0!, {r6}
 800db6c:	4684      	mov	ip, r0
 800db6e:	9e03      	ldr	r6, [sp, #12]
 800db70:	cb01      	ldmia	r3!, {r0}
 800db72:	40f0      	lsrs	r0, r6
 800db74:	429a      	cmp	r2, r3
 800db76:	d8f4      	bhi.n	800db62 <__lshift+0x7a>
 800db78:	0026      	movs	r6, r4
 800db7a:	3615      	adds	r6, #21
 800db7c:	2304      	movs	r3, #4
 800db7e:	42b2      	cmp	r2, r6
 800db80:	d304      	bcc.n	800db8c <__lshift+0xa4>
 800db82:	1b13      	subs	r3, r2, r4
 800db84:	3b15      	subs	r3, #21
 800db86:	089b      	lsrs	r3, r3, #2
 800db88:	3301      	adds	r3, #1
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	50c8      	str	r0, [r1, r3]
 800db8e:	2800      	cmp	r0, #0
 800db90:	d002      	beq.n	800db98 <__lshift+0xb0>
 800db92:	9b01      	ldr	r3, [sp, #4]
 800db94:	3302      	adds	r3, #2
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	9b00      	ldr	r3, [sp, #0]
 800db9a:	9802      	ldr	r0, [sp, #8]
 800db9c:	3b01      	subs	r3, #1
 800db9e:	0021      	movs	r1, r4
 800dba0:	612b      	str	r3, [r5, #16]
 800dba2:	f7ff fdcb 	bl	800d73c <_Bfree>
 800dba6:	0028      	movs	r0, r5
 800dba8:	b005      	add	sp, #20
 800dbaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbac:	cb01      	ldmia	r3!, {r0}
 800dbae:	c101      	stmia	r1!, {r0}
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d8fb      	bhi.n	800dbac <__lshift+0xc4>
 800dbb4:	e7f0      	b.n	800db98 <__lshift+0xb0>
 800dbb6:	46c0      	nop			@ (mov r8, r8)
 800dbb8:	0800ed50 	.word	0x0800ed50
 800dbbc:	0800ed61 	.word	0x0800ed61

0800dbc0 <__mcmp>:
 800dbc0:	b530      	push	{r4, r5, lr}
 800dbc2:	690b      	ldr	r3, [r1, #16]
 800dbc4:	6904      	ldr	r4, [r0, #16]
 800dbc6:	0002      	movs	r2, r0
 800dbc8:	1ae0      	subs	r0, r4, r3
 800dbca:	429c      	cmp	r4, r3
 800dbcc:	d10f      	bne.n	800dbee <__mcmp+0x2e>
 800dbce:	3214      	adds	r2, #20
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	3114      	adds	r1, #20
 800dbd4:	0014      	movs	r4, r2
 800dbd6:	18c9      	adds	r1, r1, r3
 800dbd8:	18d2      	adds	r2, r2, r3
 800dbda:	3a04      	subs	r2, #4
 800dbdc:	3904      	subs	r1, #4
 800dbde:	6815      	ldr	r5, [r2, #0]
 800dbe0:	680b      	ldr	r3, [r1, #0]
 800dbe2:	429d      	cmp	r5, r3
 800dbe4:	d004      	beq.n	800dbf0 <__mcmp+0x30>
 800dbe6:	2001      	movs	r0, #1
 800dbe8:	429d      	cmp	r5, r3
 800dbea:	d200      	bcs.n	800dbee <__mcmp+0x2e>
 800dbec:	3802      	subs	r0, #2
 800dbee:	bd30      	pop	{r4, r5, pc}
 800dbf0:	4294      	cmp	r4, r2
 800dbf2:	d3f2      	bcc.n	800dbda <__mcmp+0x1a>
 800dbf4:	e7fb      	b.n	800dbee <__mcmp+0x2e>
	...

0800dbf8 <__mdiff>:
 800dbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbfa:	000c      	movs	r4, r1
 800dbfc:	b087      	sub	sp, #28
 800dbfe:	9000      	str	r0, [sp, #0]
 800dc00:	0011      	movs	r1, r2
 800dc02:	0020      	movs	r0, r4
 800dc04:	0017      	movs	r7, r2
 800dc06:	f7ff ffdb 	bl	800dbc0 <__mcmp>
 800dc0a:	1e05      	subs	r5, r0, #0
 800dc0c:	d110      	bne.n	800dc30 <__mdiff+0x38>
 800dc0e:	0001      	movs	r1, r0
 800dc10:	9800      	ldr	r0, [sp, #0]
 800dc12:	f7ff fd4f 	bl	800d6b4 <_Balloc>
 800dc16:	1e02      	subs	r2, r0, #0
 800dc18:	d104      	bne.n	800dc24 <__mdiff+0x2c>
 800dc1a:	4b40      	ldr	r3, [pc, #256]	@ (800dd1c <__mdiff+0x124>)
 800dc1c:	4840      	ldr	r0, [pc, #256]	@ (800dd20 <__mdiff+0x128>)
 800dc1e:	4941      	ldr	r1, [pc, #260]	@ (800dd24 <__mdiff+0x12c>)
 800dc20:	f000 fb22 	bl	800e268 <__assert_func>
 800dc24:	2301      	movs	r3, #1
 800dc26:	6145      	str	r5, [r0, #20]
 800dc28:	6103      	str	r3, [r0, #16]
 800dc2a:	0010      	movs	r0, r2
 800dc2c:	b007      	add	sp, #28
 800dc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc30:	2600      	movs	r6, #0
 800dc32:	42b0      	cmp	r0, r6
 800dc34:	da03      	bge.n	800dc3e <__mdiff+0x46>
 800dc36:	0023      	movs	r3, r4
 800dc38:	003c      	movs	r4, r7
 800dc3a:	001f      	movs	r7, r3
 800dc3c:	3601      	adds	r6, #1
 800dc3e:	6861      	ldr	r1, [r4, #4]
 800dc40:	9800      	ldr	r0, [sp, #0]
 800dc42:	f7ff fd37 	bl	800d6b4 <_Balloc>
 800dc46:	1e02      	subs	r2, r0, #0
 800dc48:	d103      	bne.n	800dc52 <__mdiff+0x5a>
 800dc4a:	4b34      	ldr	r3, [pc, #208]	@ (800dd1c <__mdiff+0x124>)
 800dc4c:	4834      	ldr	r0, [pc, #208]	@ (800dd20 <__mdiff+0x128>)
 800dc4e:	4936      	ldr	r1, [pc, #216]	@ (800dd28 <__mdiff+0x130>)
 800dc50:	e7e6      	b.n	800dc20 <__mdiff+0x28>
 800dc52:	6923      	ldr	r3, [r4, #16]
 800dc54:	3414      	adds	r4, #20
 800dc56:	9300      	str	r3, [sp, #0]
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	18e3      	adds	r3, r4, r3
 800dc5c:	0021      	movs	r1, r4
 800dc5e:	9401      	str	r4, [sp, #4]
 800dc60:	003c      	movs	r4, r7
 800dc62:	9302      	str	r3, [sp, #8]
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	3414      	adds	r4, #20
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	18e3      	adds	r3, r4, r3
 800dc6c:	9303      	str	r3, [sp, #12]
 800dc6e:	0003      	movs	r3, r0
 800dc70:	60c6      	str	r6, [r0, #12]
 800dc72:	468c      	mov	ip, r1
 800dc74:	2000      	movs	r0, #0
 800dc76:	3314      	adds	r3, #20
 800dc78:	9304      	str	r3, [sp, #16]
 800dc7a:	9305      	str	r3, [sp, #20]
 800dc7c:	4663      	mov	r3, ip
 800dc7e:	cb20      	ldmia	r3!, {r5}
 800dc80:	b2a9      	uxth	r1, r5
 800dc82:	000e      	movs	r6, r1
 800dc84:	469c      	mov	ip, r3
 800dc86:	cc08      	ldmia	r4!, {r3}
 800dc88:	0c2d      	lsrs	r5, r5, #16
 800dc8a:	b299      	uxth	r1, r3
 800dc8c:	1a71      	subs	r1, r6, r1
 800dc8e:	1809      	adds	r1, r1, r0
 800dc90:	0c1b      	lsrs	r3, r3, #16
 800dc92:	1408      	asrs	r0, r1, #16
 800dc94:	1aeb      	subs	r3, r5, r3
 800dc96:	181b      	adds	r3, r3, r0
 800dc98:	1418      	asrs	r0, r3, #16
 800dc9a:	b289      	uxth	r1, r1
 800dc9c:	041b      	lsls	r3, r3, #16
 800dc9e:	4319      	orrs	r1, r3
 800dca0:	9b05      	ldr	r3, [sp, #20]
 800dca2:	c302      	stmia	r3!, {r1}
 800dca4:	9305      	str	r3, [sp, #20]
 800dca6:	9b03      	ldr	r3, [sp, #12]
 800dca8:	42a3      	cmp	r3, r4
 800dcaa:	d8e7      	bhi.n	800dc7c <__mdiff+0x84>
 800dcac:	0039      	movs	r1, r7
 800dcae:	9c03      	ldr	r4, [sp, #12]
 800dcb0:	3115      	adds	r1, #21
 800dcb2:	2304      	movs	r3, #4
 800dcb4:	428c      	cmp	r4, r1
 800dcb6:	d304      	bcc.n	800dcc2 <__mdiff+0xca>
 800dcb8:	1be3      	subs	r3, r4, r7
 800dcba:	3b15      	subs	r3, #21
 800dcbc:	089b      	lsrs	r3, r3, #2
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	9901      	ldr	r1, [sp, #4]
 800dcc4:	18cd      	adds	r5, r1, r3
 800dcc6:	9904      	ldr	r1, [sp, #16]
 800dcc8:	002e      	movs	r6, r5
 800dcca:	18cb      	adds	r3, r1, r3
 800dccc:	001f      	movs	r7, r3
 800dcce:	9902      	ldr	r1, [sp, #8]
 800dcd0:	428e      	cmp	r6, r1
 800dcd2:	d311      	bcc.n	800dcf8 <__mdiff+0x100>
 800dcd4:	9c02      	ldr	r4, [sp, #8]
 800dcd6:	1ee9      	subs	r1, r5, #3
 800dcd8:	2000      	movs	r0, #0
 800dcda:	428c      	cmp	r4, r1
 800dcdc:	d304      	bcc.n	800dce8 <__mdiff+0xf0>
 800dcde:	0021      	movs	r1, r4
 800dce0:	3103      	adds	r1, #3
 800dce2:	1b49      	subs	r1, r1, r5
 800dce4:	0889      	lsrs	r1, r1, #2
 800dce6:	0088      	lsls	r0, r1, #2
 800dce8:	181b      	adds	r3, r3, r0
 800dcea:	3b04      	subs	r3, #4
 800dcec:	6819      	ldr	r1, [r3, #0]
 800dcee:	2900      	cmp	r1, #0
 800dcf0:	d010      	beq.n	800dd14 <__mdiff+0x11c>
 800dcf2:	9b00      	ldr	r3, [sp, #0]
 800dcf4:	6113      	str	r3, [r2, #16]
 800dcf6:	e798      	b.n	800dc2a <__mdiff+0x32>
 800dcf8:	4684      	mov	ip, r0
 800dcfa:	ce02      	ldmia	r6!, {r1}
 800dcfc:	b288      	uxth	r0, r1
 800dcfe:	4460      	add	r0, ip
 800dd00:	1400      	asrs	r0, r0, #16
 800dd02:	0c0c      	lsrs	r4, r1, #16
 800dd04:	1904      	adds	r4, r0, r4
 800dd06:	4461      	add	r1, ip
 800dd08:	1420      	asrs	r0, r4, #16
 800dd0a:	b289      	uxth	r1, r1
 800dd0c:	0424      	lsls	r4, r4, #16
 800dd0e:	4321      	orrs	r1, r4
 800dd10:	c702      	stmia	r7!, {r1}
 800dd12:	e7dc      	b.n	800dcce <__mdiff+0xd6>
 800dd14:	9900      	ldr	r1, [sp, #0]
 800dd16:	3901      	subs	r1, #1
 800dd18:	9100      	str	r1, [sp, #0]
 800dd1a:	e7e6      	b.n	800dcea <__mdiff+0xf2>
 800dd1c:	0800ed50 	.word	0x0800ed50
 800dd20:	0800ed61 	.word	0x0800ed61
 800dd24:	00000237 	.word	0x00000237
 800dd28:	00000245 	.word	0x00000245

0800dd2c <__d2b>:
 800dd2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd2e:	2101      	movs	r1, #1
 800dd30:	0016      	movs	r6, r2
 800dd32:	001f      	movs	r7, r3
 800dd34:	f7ff fcbe 	bl	800d6b4 <_Balloc>
 800dd38:	1e04      	subs	r4, r0, #0
 800dd3a:	d105      	bne.n	800dd48 <__d2b+0x1c>
 800dd3c:	0022      	movs	r2, r4
 800dd3e:	4b25      	ldr	r3, [pc, #148]	@ (800ddd4 <__d2b+0xa8>)
 800dd40:	4825      	ldr	r0, [pc, #148]	@ (800ddd8 <__d2b+0xac>)
 800dd42:	4926      	ldr	r1, [pc, #152]	@ (800dddc <__d2b+0xb0>)
 800dd44:	f000 fa90 	bl	800e268 <__assert_func>
 800dd48:	033b      	lsls	r3, r7, #12
 800dd4a:	007d      	lsls	r5, r7, #1
 800dd4c:	0b1b      	lsrs	r3, r3, #12
 800dd4e:	0d6d      	lsrs	r5, r5, #21
 800dd50:	d002      	beq.n	800dd58 <__d2b+0x2c>
 800dd52:	2280      	movs	r2, #128	@ 0x80
 800dd54:	0352      	lsls	r2, r2, #13
 800dd56:	4313      	orrs	r3, r2
 800dd58:	9301      	str	r3, [sp, #4]
 800dd5a:	2e00      	cmp	r6, #0
 800dd5c:	d025      	beq.n	800ddaa <__d2b+0x7e>
 800dd5e:	4668      	mov	r0, sp
 800dd60:	9600      	str	r6, [sp, #0]
 800dd62:	f7ff fd74 	bl	800d84e <__lo0bits>
 800dd66:	9b01      	ldr	r3, [sp, #4]
 800dd68:	9900      	ldr	r1, [sp, #0]
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	d01b      	beq.n	800dda6 <__d2b+0x7a>
 800dd6e:	2220      	movs	r2, #32
 800dd70:	001e      	movs	r6, r3
 800dd72:	1a12      	subs	r2, r2, r0
 800dd74:	4096      	lsls	r6, r2
 800dd76:	0032      	movs	r2, r6
 800dd78:	40c3      	lsrs	r3, r0
 800dd7a:	430a      	orrs	r2, r1
 800dd7c:	6162      	str	r2, [r4, #20]
 800dd7e:	9301      	str	r3, [sp, #4]
 800dd80:	9e01      	ldr	r6, [sp, #4]
 800dd82:	61a6      	str	r6, [r4, #24]
 800dd84:	1e73      	subs	r3, r6, #1
 800dd86:	419e      	sbcs	r6, r3
 800dd88:	3601      	adds	r6, #1
 800dd8a:	6126      	str	r6, [r4, #16]
 800dd8c:	2d00      	cmp	r5, #0
 800dd8e:	d014      	beq.n	800ddba <__d2b+0x8e>
 800dd90:	2635      	movs	r6, #53	@ 0x35
 800dd92:	4b13      	ldr	r3, [pc, #76]	@ (800dde0 <__d2b+0xb4>)
 800dd94:	18ed      	adds	r5, r5, r3
 800dd96:	9b08      	ldr	r3, [sp, #32]
 800dd98:	182d      	adds	r5, r5, r0
 800dd9a:	601d      	str	r5, [r3, #0]
 800dd9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd9e:	1a36      	subs	r6, r6, r0
 800dda0:	601e      	str	r6, [r3, #0]
 800dda2:	0020      	movs	r0, r4
 800dda4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dda6:	6161      	str	r1, [r4, #20]
 800dda8:	e7ea      	b.n	800dd80 <__d2b+0x54>
 800ddaa:	a801      	add	r0, sp, #4
 800ddac:	f7ff fd4f 	bl	800d84e <__lo0bits>
 800ddb0:	9b01      	ldr	r3, [sp, #4]
 800ddb2:	2601      	movs	r6, #1
 800ddb4:	6163      	str	r3, [r4, #20]
 800ddb6:	3020      	adds	r0, #32
 800ddb8:	e7e7      	b.n	800dd8a <__d2b+0x5e>
 800ddba:	4b0a      	ldr	r3, [pc, #40]	@ (800dde4 <__d2b+0xb8>)
 800ddbc:	18c0      	adds	r0, r0, r3
 800ddbe:	9b08      	ldr	r3, [sp, #32]
 800ddc0:	6018      	str	r0, [r3, #0]
 800ddc2:	4b09      	ldr	r3, [pc, #36]	@ (800dde8 <__d2b+0xbc>)
 800ddc4:	18f3      	adds	r3, r6, r3
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	18e3      	adds	r3, r4, r3
 800ddca:	6958      	ldr	r0, [r3, #20]
 800ddcc:	f7ff fd1e 	bl	800d80c <__hi0bits>
 800ddd0:	0176      	lsls	r6, r6, #5
 800ddd2:	e7e3      	b.n	800dd9c <__d2b+0x70>
 800ddd4:	0800ed50 	.word	0x0800ed50
 800ddd8:	0800ed61 	.word	0x0800ed61
 800dddc:	0000030f 	.word	0x0000030f
 800dde0:	fffffbcd 	.word	0xfffffbcd
 800dde4:	fffffbce 	.word	0xfffffbce
 800dde8:	3fffffff 	.word	0x3fffffff

0800ddec <__ssputs_r>:
 800ddec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddee:	688e      	ldr	r6, [r1, #8]
 800ddf0:	b085      	sub	sp, #20
 800ddf2:	001f      	movs	r7, r3
 800ddf4:	000c      	movs	r4, r1
 800ddf6:	680b      	ldr	r3, [r1, #0]
 800ddf8:	9002      	str	r0, [sp, #8]
 800ddfa:	9203      	str	r2, [sp, #12]
 800ddfc:	42be      	cmp	r6, r7
 800ddfe:	d830      	bhi.n	800de62 <__ssputs_r+0x76>
 800de00:	210c      	movs	r1, #12
 800de02:	5e62      	ldrsh	r2, [r4, r1]
 800de04:	2190      	movs	r1, #144	@ 0x90
 800de06:	00c9      	lsls	r1, r1, #3
 800de08:	420a      	tst	r2, r1
 800de0a:	d028      	beq.n	800de5e <__ssputs_r+0x72>
 800de0c:	2003      	movs	r0, #3
 800de0e:	6921      	ldr	r1, [r4, #16]
 800de10:	1a5b      	subs	r3, r3, r1
 800de12:	9301      	str	r3, [sp, #4]
 800de14:	6963      	ldr	r3, [r4, #20]
 800de16:	4343      	muls	r3, r0
 800de18:	9801      	ldr	r0, [sp, #4]
 800de1a:	0fdd      	lsrs	r5, r3, #31
 800de1c:	18ed      	adds	r5, r5, r3
 800de1e:	1c7b      	adds	r3, r7, #1
 800de20:	181b      	adds	r3, r3, r0
 800de22:	106d      	asrs	r5, r5, #1
 800de24:	42ab      	cmp	r3, r5
 800de26:	d900      	bls.n	800de2a <__ssputs_r+0x3e>
 800de28:	001d      	movs	r5, r3
 800de2a:	0552      	lsls	r2, r2, #21
 800de2c:	d528      	bpl.n	800de80 <__ssputs_r+0x94>
 800de2e:	0029      	movs	r1, r5
 800de30:	9802      	ldr	r0, [sp, #8]
 800de32:	f7ff fbaf 	bl	800d594 <_malloc_r>
 800de36:	1e06      	subs	r6, r0, #0
 800de38:	d02c      	beq.n	800de94 <__ssputs_r+0xa8>
 800de3a:	9a01      	ldr	r2, [sp, #4]
 800de3c:	6921      	ldr	r1, [r4, #16]
 800de3e:	f000 fa09 	bl	800e254 <memcpy>
 800de42:	89a2      	ldrh	r2, [r4, #12]
 800de44:	4b18      	ldr	r3, [pc, #96]	@ (800dea8 <__ssputs_r+0xbc>)
 800de46:	401a      	ands	r2, r3
 800de48:	2380      	movs	r3, #128	@ 0x80
 800de4a:	4313      	orrs	r3, r2
 800de4c:	81a3      	strh	r3, [r4, #12]
 800de4e:	9b01      	ldr	r3, [sp, #4]
 800de50:	6126      	str	r6, [r4, #16]
 800de52:	18f6      	adds	r6, r6, r3
 800de54:	6026      	str	r6, [r4, #0]
 800de56:	003e      	movs	r6, r7
 800de58:	6165      	str	r5, [r4, #20]
 800de5a:	1aed      	subs	r5, r5, r3
 800de5c:	60a5      	str	r5, [r4, #8]
 800de5e:	42be      	cmp	r6, r7
 800de60:	d900      	bls.n	800de64 <__ssputs_r+0x78>
 800de62:	003e      	movs	r6, r7
 800de64:	0032      	movs	r2, r6
 800de66:	9903      	ldr	r1, [sp, #12]
 800de68:	6820      	ldr	r0, [r4, #0]
 800de6a:	f000 f9ce 	bl	800e20a <memmove>
 800de6e:	2000      	movs	r0, #0
 800de70:	68a3      	ldr	r3, [r4, #8]
 800de72:	1b9b      	subs	r3, r3, r6
 800de74:	60a3      	str	r3, [r4, #8]
 800de76:	6823      	ldr	r3, [r4, #0]
 800de78:	199b      	adds	r3, r3, r6
 800de7a:	6023      	str	r3, [r4, #0]
 800de7c:	b005      	add	sp, #20
 800de7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de80:	002a      	movs	r2, r5
 800de82:	9802      	ldr	r0, [sp, #8]
 800de84:	f000 fa4d 	bl	800e322 <_realloc_r>
 800de88:	1e06      	subs	r6, r0, #0
 800de8a:	d1e0      	bne.n	800de4e <__ssputs_r+0x62>
 800de8c:	6921      	ldr	r1, [r4, #16]
 800de8e:	9802      	ldr	r0, [sp, #8]
 800de90:	f7ff fb0a 	bl	800d4a8 <_free_r>
 800de94:	230c      	movs	r3, #12
 800de96:	2001      	movs	r0, #1
 800de98:	9a02      	ldr	r2, [sp, #8]
 800de9a:	4240      	negs	r0, r0
 800de9c:	6013      	str	r3, [r2, #0]
 800de9e:	89a2      	ldrh	r2, [r4, #12]
 800dea0:	3334      	adds	r3, #52	@ 0x34
 800dea2:	4313      	orrs	r3, r2
 800dea4:	81a3      	strh	r3, [r4, #12]
 800dea6:	e7e9      	b.n	800de7c <__ssputs_r+0x90>
 800dea8:	fffffb7f 	.word	0xfffffb7f

0800deac <_svfiprintf_r>:
 800deac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800deae:	b0a1      	sub	sp, #132	@ 0x84
 800deb0:	9003      	str	r0, [sp, #12]
 800deb2:	001d      	movs	r5, r3
 800deb4:	898b      	ldrh	r3, [r1, #12]
 800deb6:	000f      	movs	r7, r1
 800deb8:	0016      	movs	r6, r2
 800deba:	061b      	lsls	r3, r3, #24
 800debc:	d511      	bpl.n	800dee2 <_svfiprintf_r+0x36>
 800debe:	690b      	ldr	r3, [r1, #16]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10e      	bne.n	800dee2 <_svfiprintf_r+0x36>
 800dec4:	2140      	movs	r1, #64	@ 0x40
 800dec6:	f7ff fb65 	bl	800d594 <_malloc_r>
 800deca:	6038      	str	r0, [r7, #0]
 800decc:	6138      	str	r0, [r7, #16]
 800dece:	2800      	cmp	r0, #0
 800ded0:	d105      	bne.n	800dede <_svfiprintf_r+0x32>
 800ded2:	230c      	movs	r3, #12
 800ded4:	9a03      	ldr	r2, [sp, #12]
 800ded6:	6013      	str	r3, [r2, #0]
 800ded8:	2001      	movs	r0, #1
 800deda:	4240      	negs	r0, r0
 800dedc:	e0cf      	b.n	800e07e <_svfiprintf_r+0x1d2>
 800dede:	2340      	movs	r3, #64	@ 0x40
 800dee0:	617b      	str	r3, [r7, #20]
 800dee2:	2300      	movs	r3, #0
 800dee4:	ac08      	add	r4, sp, #32
 800dee6:	6163      	str	r3, [r4, #20]
 800dee8:	3320      	adds	r3, #32
 800deea:	7663      	strb	r3, [r4, #25]
 800deec:	3310      	adds	r3, #16
 800deee:	76a3      	strb	r3, [r4, #26]
 800def0:	9507      	str	r5, [sp, #28]
 800def2:	0035      	movs	r5, r6
 800def4:	782b      	ldrb	r3, [r5, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d001      	beq.n	800defe <_svfiprintf_r+0x52>
 800defa:	2b25      	cmp	r3, #37	@ 0x25
 800defc:	d148      	bne.n	800df90 <_svfiprintf_r+0xe4>
 800defe:	1bab      	subs	r3, r5, r6
 800df00:	9305      	str	r3, [sp, #20]
 800df02:	42b5      	cmp	r5, r6
 800df04:	d00b      	beq.n	800df1e <_svfiprintf_r+0x72>
 800df06:	0032      	movs	r2, r6
 800df08:	0039      	movs	r1, r7
 800df0a:	9803      	ldr	r0, [sp, #12]
 800df0c:	f7ff ff6e 	bl	800ddec <__ssputs_r>
 800df10:	3001      	adds	r0, #1
 800df12:	d100      	bne.n	800df16 <_svfiprintf_r+0x6a>
 800df14:	e0ae      	b.n	800e074 <_svfiprintf_r+0x1c8>
 800df16:	6963      	ldr	r3, [r4, #20]
 800df18:	9a05      	ldr	r2, [sp, #20]
 800df1a:	189b      	adds	r3, r3, r2
 800df1c:	6163      	str	r3, [r4, #20]
 800df1e:	782b      	ldrb	r3, [r5, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d100      	bne.n	800df26 <_svfiprintf_r+0x7a>
 800df24:	e0a6      	b.n	800e074 <_svfiprintf_r+0x1c8>
 800df26:	2201      	movs	r2, #1
 800df28:	2300      	movs	r3, #0
 800df2a:	4252      	negs	r2, r2
 800df2c:	6062      	str	r2, [r4, #4]
 800df2e:	a904      	add	r1, sp, #16
 800df30:	3254      	adds	r2, #84	@ 0x54
 800df32:	1852      	adds	r2, r2, r1
 800df34:	1c6e      	adds	r6, r5, #1
 800df36:	6023      	str	r3, [r4, #0]
 800df38:	60e3      	str	r3, [r4, #12]
 800df3a:	60a3      	str	r3, [r4, #8]
 800df3c:	7013      	strb	r3, [r2, #0]
 800df3e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800df40:	4b54      	ldr	r3, [pc, #336]	@ (800e094 <_svfiprintf_r+0x1e8>)
 800df42:	2205      	movs	r2, #5
 800df44:	0018      	movs	r0, r3
 800df46:	7831      	ldrb	r1, [r6, #0]
 800df48:	9305      	str	r3, [sp, #20]
 800df4a:	f7fe fc2c 	bl	800c7a6 <memchr>
 800df4e:	1c75      	adds	r5, r6, #1
 800df50:	2800      	cmp	r0, #0
 800df52:	d11f      	bne.n	800df94 <_svfiprintf_r+0xe8>
 800df54:	6822      	ldr	r2, [r4, #0]
 800df56:	06d3      	lsls	r3, r2, #27
 800df58:	d504      	bpl.n	800df64 <_svfiprintf_r+0xb8>
 800df5a:	2353      	movs	r3, #83	@ 0x53
 800df5c:	a904      	add	r1, sp, #16
 800df5e:	185b      	adds	r3, r3, r1
 800df60:	2120      	movs	r1, #32
 800df62:	7019      	strb	r1, [r3, #0]
 800df64:	0713      	lsls	r3, r2, #28
 800df66:	d504      	bpl.n	800df72 <_svfiprintf_r+0xc6>
 800df68:	2353      	movs	r3, #83	@ 0x53
 800df6a:	a904      	add	r1, sp, #16
 800df6c:	185b      	adds	r3, r3, r1
 800df6e:	212b      	movs	r1, #43	@ 0x2b
 800df70:	7019      	strb	r1, [r3, #0]
 800df72:	7833      	ldrb	r3, [r6, #0]
 800df74:	2b2a      	cmp	r3, #42	@ 0x2a
 800df76:	d016      	beq.n	800dfa6 <_svfiprintf_r+0xfa>
 800df78:	0035      	movs	r5, r6
 800df7a:	2100      	movs	r1, #0
 800df7c:	200a      	movs	r0, #10
 800df7e:	68e3      	ldr	r3, [r4, #12]
 800df80:	782a      	ldrb	r2, [r5, #0]
 800df82:	1c6e      	adds	r6, r5, #1
 800df84:	3a30      	subs	r2, #48	@ 0x30
 800df86:	2a09      	cmp	r2, #9
 800df88:	d950      	bls.n	800e02c <_svfiprintf_r+0x180>
 800df8a:	2900      	cmp	r1, #0
 800df8c:	d111      	bne.n	800dfb2 <_svfiprintf_r+0x106>
 800df8e:	e017      	b.n	800dfc0 <_svfiprintf_r+0x114>
 800df90:	3501      	adds	r5, #1
 800df92:	e7af      	b.n	800def4 <_svfiprintf_r+0x48>
 800df94:	9b05      	ldr	r3, [sp, #20]
 800df96:	6822      	ldr	r2, [r4, #0]
 800df98:	1ac0      	subs	r0, r0, r3
 800df9a:	2301      	movs	r3, #1
 800df9c:	4083      	lsls	r3, r0
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	002e      	movs	r6, r5
 800dfa2:	6023      	str	r3, [r4, #0]
 800dfa4:	e7cc      	b.n	800df40 <_svfiprintf_r+0x94>
 800dfa6:	9b07      	ldr	r3, [sp, #28]
 800dfa8:	1d19      	adds	r1, r3, #4
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	9107      	str	r1, [sp, #28]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	db01      	blt.n	800dfb6 <_svfiprintf_r+0x10a>
 800dfb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dfb4:	e004      	b.n	800dfc0 <_svfiprintf_r+0x114>
 800dfb6:	425b      	negs	r3, r3
 800dfb8:	60e3      	str	r3, [r4, #12]
 800dfba:	2302      	movs	r3, #2
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	6023      	str	r3, [r4, #0]
 800dfc0:	782b      	ldrb	r3, [r5, #0]
 800dfc2:	2b2e      	cmp	r3, #46	@ 0x2e
 800dfc4:	d10c      	bne.n	800dfe0 <_svfiprintf_r+0x134>
 800dfc6:	786b      	ldrb	r3, [r5, #1]
 800dfc8:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfca:	d134      	bne.n	800e036 <_svfiprintf_r+0x18a>
 800dfcc:	9b07      	ldr	r3, [sp, #28]
 800dfce:	3502      	adds	r5, #2
 800dfd0:	1d1a      	adds	r2, r3, #4
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	9207      	str	r2, [sp, #28]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	da01      	bge.n	800dfde <_svfiprintf_r+0x132>
 800dfda:	2301      	movs	r3, #1
 800dfdc:	425b      	negs	r3, r3
 800dfde:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfe0:	4e2d      	ldr	r6, [pc, #180]	@ (800e098 <_svfiprintf_r+0x1ec>)
 800dfe2:	2203      	movs	r2, #3
 800dfe4:	0030      	movs	r0, r6
 800dfe6:	7829      	ldrb	r1, [r5, #0]
 800dfe8:	f7fe fbdd 	bl	800c7a6 <memchr>
 800dfec:	2800      	cmp	r0, #0
 800dfee:	d006      	beq.n	800dffe <_svfiprintf_r+0x152>
 800dff0:	2340      	movs	r3, #64	@ 0x40
 800dff2:	1b80      	subs	r0, r0, r6
 800dff4:	4083      	lsls	r3, r0
 800dff6:	6822      	ldr	r2, [r4, #0]
 800dff8:	3501      	adds	r5, #1
 800dffa:	4313      	orrs	r3, r2
 800dffc:	6023      	str	r3, [r4, #0]
 800dffe:	7829      	ldrb	r1, [r5, #0]
 800e000:	2206      	movs	r2, #6
 800e002:	4826      	ldr	r0, [pc, #152]	@ (800e09c <_svfiprintf_r+0x1f0>)
 800e004:	1c6e      	adds	r6, r5, #1
 800e006:	7621      	strb	r1, [r4, #24]
 800e008:	f7fe fbcd 	bl	800c7a6 <memchr>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	d038      	beq.n	800e082 <_svfiprintf_r+0x1d6>
 800e010:	4b23      	ldr	r3, [pc, #140]	@ (800e0a0 <_svfiprintf_r+0x1f4>)
 800e012:	2b00      	cmp	r3, #0
 800e014:	d122      	bne.n	800e05c <_svfiprintf_r+0x1b0>
 800e016:	2207      	movs	r2, #7
 800e018:	9b07      	ldr	r3, [sp, #28]
 800e01a:	3307      	adds	r3, #7
 800e01c:	4393      	bics	r3, r2
 800e01e:	3308      	adds	r3, #8
 800e020:	9307      	str	r3, [sp, #28]
 800e022:	6963      	ldr	r3, [r4, #20]
 800e024:	9a04      	ldr	r2, [sp, #16]
 800e026:	189b      	adds	r3, r3, r2
 800e028:	6163      	str	r3, [r4, #20]
 800e02a:	e762      	b.n	800def2 <_svfiprintf_r+0x46>
 800e02c:	4343      	muls	r3, r0
 800e02e:	0035      	movs	r5, r6
 800e030:	2101      	movs	r1, #1
 800e032:	189b      	adds	r3, r3, r2
 800e034:	e7a4      	b.n	800df80 <_svfiprintf_r+0xd4>
 800e036:	2300      	movs	r3, #0
 800e038:	200a      	movs	r0, #10
 800e03a:	0019      	movs	r1, r3
 800e03c:	3501      	adds	r5, #1
 800e03e:	6063      	str	r3, [r4, #4]
 800e040:	782a      	ldrb	r2, [r5, #0]
 800e042:	1c6e      	adds	r6, r5, #1
 800e044:	3a30      	subs	r2, #48	@ 0x30
 800e046:	2a09      	cmp	r2, #9
 800e048:	d903      	bls.n	800e052 <_svfiprintf_r+0x1a6>
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d0c8      	beq.n	800dfe0 <_svfiprintf_r+0x134>
 800e04e:	9109      	str	r1, [sp, #36]	@ 0x24
 800e050:	e7c6      	b.n	800dfe0 <_svfiprintf_r+0x134>
 800e052:	4341      	muls	r1, r0
 800e054:	0035      	movs	r5, r6
 800e056:	2301      	movs	r3, #1
 800e058:	1889      	adds	r1, r1, r2
 800e05a:	e7f1      	b.n	800e040 <_svfiprintf_r+0x194>
 800e05c:	aa07      	add	r2, sp, #28
 800e05e:	9200      	str	r2, [sp, #0]
 800e060:	0021      	movs	r1, r4
 800e062:	003a      	movs	r2, r7
 800e064:	4b0f      	ldr	r3, [pc, #60]	@ (800e0a4 <_svfiprintf_r+0x1f8>)
 800e066:	9803      	ldr	r0, [sp, #12]
 800e068:	f7fd fe0c 	bl	800bc84 <_printf_float>
 800e06c:	9004      	str	r0, [sp, #16]
 800e06e:	9b04      	ldr	r3, [sp, #16]
 800e070:	3301      	adds	r3, #1
 800e072:	d1d6      	bne.n	800e022 <_svfiprintf_r+0x176>
 800e074:	89bb      	ldrh	r3, [r7, #12]
 800e076:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800e078:	065b      	lsls	r3, r3, #25
 800e07a:	d500      	bpl.n	800e07e <_svfiprintf_r+0x1d2>
 800e07c:	e72c      	b.n	800ded8 <_svfiprintf_r+0x2c>
 800e07e:	b021      	add	sp, #132	@ 0x84
 800e080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e082:	aa07      	add	r2, sp, #28
 800e084:	9200      	str	r2, [sp, #0]
 800e086:	0021      	movs	r1, r4
 800e088:	003a      	movs	r2, r7
 800e08a:	4b06      	ldr	r3, [pc, #24]	@ (800e0a4 <_svfiprintf_r+0x1f8>)
 800e08c:	9803      	ldr	r0, [sp, #12]
 800e08e:	f7fe f8a7 	bl	800c1e0 <_printf_i>
 800e092:	e7eb      	b.n	800e06c <_svfiprintf_r+0x1c0>
 800e094:	0800edba 	.word	0x0800edba
 800e098:	0800edc0 	.word	0x0800edc0
 800e09c:	0800edc4 	.word	0x0800edc4
 800e0a0:	0800bc85 	.word	0x0800bc85
 800e0a4:	0800dded 	.word	0x0800dded

0800e0a8 <__sflush_r>:
 800e0a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0aa:	220c      	movs	r2, #12
 800e0ac:	5e8b      	ldrsh	r3, [r1, r2]
 800e0ae:	0005      	movs	r5, r0
 800e0b0:	000c      	movs	r4, r1
 800e0b2:	071a      	lsls	r2, r3, #28
 800e0b4:	d456      	bmi.n	800e164 <__sflush_r+0xbc>
 800e0b6:	684a      	ldr	r2, [r1, #4]
 800e0b8:	2a00      	cmp	r2, #0
 800e0ba:	dc02      	bgt.n	800e0c2 <__sflush_r+0x1a>
 800e0bc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800e0be:	2a00      	cmp	r2, #0
 800e0c0:	dd4e      	ble.n	800e160 <__sflush_r+0xb8>
 800e0c2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800e0c4:	2f00      	cmp	r7, #0
 800e0c6:	d04b      	beq.n	800e160 <__sflush_r+0xb8>
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	2080      	movs	r0, #128	@ 0x80
 800e0cc:	682e      	ldr	r6, [r5, #0]
 800e0ce:	602a      	str	r2, [r5, #0]
 800e0d0:	001a      	movs	r2, r3
 800e0d2:	0140      	lsls	r0, r0, #5
 800e0d4:	6a21      	ldr	r1, [r4, #32]
 800e0d6:	4002      	ands	r2, r0
 800e0d8:	4203      	tst	r3, r0
 800e0da:	d033      	beq.n	800e144 <__sflush_r+0x9c>
 800e0dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e0de:	89a3      	ldrh	r3, [r4, #12]
 800e0e0:	075b      	lsls	r3, r3, #29
 800e0e2:	d506      	bpl.n	800e0f2 <__sflush_r+0x4a>
 800e0e4:	6863      	ldr	r3, [r4, #4]
 800e0e6:	1ad2      	subs	r2, r2, r3
 800e0e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d001      	beq.n	800e0f2 <__sflush_r+0x4a>
 800e0ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e0f0:	1ad2      	subs	r2, r2, r3
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	0028      	movs	r0, r5
 800e0f6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800e0f8:	6a21      	ldr	r1, [r4, #32]
 800e0fa:	47b8      	blx	r7
 800e0fc:	89a2      	ldrh	r2, [r4, #12]
 800e0fe:	1c43      	adds	r3, r0, #1
 800e100:	d106      	bne.n	800e110 <__sflush_r+0x68>
 800e102:	6829      	ldr	r1, [r5, #0]
 800e104:	291d      	cmp	r1, #29
 800e106:	d846      	bhi.n	800e196 <__sflush_r+0xee>
 800e108:	4b29      	ldr	r3, [pc, #164]	@ (800e1b0 <__sflush_r+0x108>)
 800e10a:	40cb      	lsrs	r3, r1
 800e10c:	07db      	lsls	r3, r3, #31
 800e10e:	d542      	bpl.n	800e196 <__sflush_r+0xee>
 800e110:	2300      	movs	r3, #0
 800e112:	6063      	str	r3, [r4, #4]
 800e114:	6923      	ldr	r3, [r4, #16]
 800e116:	6023      	str	r3, [r4, #0]
 800e118:	04d2      	lsls	r2, r2, #19
 800e11a:	d505      	bpl.n	800e128 <__sflush_r+0x80>
 800e11c:	1c43      	adds	r3, r0, #1
 800e11e:	d102      	bne.n	800e126 <__sflush_r+0x7e>
 800e120:	682b      	ldr	r3, [r5, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d100      	bne.n	800e128 <__sflush_r+0x80>
 800e126:	6560      	str	r0, [r4, #84]	@ 0x54
 800e128:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e12a:	602e      	str	r6, [r5, #0]
 800e12c:	2900      	cmp	r1, #0
 800e12e:	d017      	beq.n	800e160 <__sflush_r+0xb8>
 800e130:	0023      	movs	r3, r4
 800e132:	3344      	adds	r3, #68	@ 0x44
 800e134:	4299      	cmp	r1, r3
 800e136:	d002      	beq.n	800e13e <__sflush_r+0x96>
 800e138:	0028      	movs	r0, r5
 800e13a:	f7ff f9b5 	bl	800d4a8 <_free_r>
 800e13e:	2300      	movs	r3, #0
 800e140:	6363      	str	r3, [r4, #52]	@ 0x34
 800e142:	e00d      	b.n	800e160 <__sflush_r+0xb8>
 800e144:	2301      	movs	r3, #1
 800e146:	0028      	movs	r0, r5
 800e148:	47b8      	blx	r7
 800e14a:	0002      	movs	r2, r0
 800e14c:	1c43      	adds	r3, r0, #1
 800e14e:	d1c6      	bne.n	800e0de <__sflush_r+0x36>
 800e150:	682b      	ldr	r3, [r5, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d0c3      	beq.n	800e0de <__sflush_r+0x36>
 800e156:	2b1d      	cmp	r3, #29
 800e158:	d001      	beq.n	800e15e <__sflush_r+0xb6>
 800e15a:	2b16      	cmp	r3, #22
 800e15c:	d11a      	bne.n	800e194 <__sflush_r+0xec>
 800e15e:	602e      	str	r6, [r5, #0]
 800e160:	2000      	movs	r0, #0
 800e162:	e01e      	b.n	800e1a2 <__sflush_r+0xfa>
 800e164:	690e      	ldr	r6, [r1, #16]
 800e166:	2e00      	cmp	r6, #0
 800e168:	d0fa      	beq.n	800e160 <__sflush_r+0xb8>
 800e16a:	680f      	ldr	r7, [r1, #0]
 800e16c:	600e      	str	r6, [r1, #0]
 800e16e:	1bba      	subs	r2, r7, r6
 800e170:	9201      	str	r2, [sp, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	079b      	lsls	r3, r3, #30
 800e176:	d100      	bne.n	800e17a <__sflush_r+0xd2>
 800e178:	694a      	ldr	r2, [r1, #20]
 800e17a:	60a2      	str	r2, [r4, #8]
 800e17c:	9b01      	ldr	r3, [sp, #4]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	ddee      	ble.n	800e160 <__sflush_r+0xb8>
 800e182:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e184:	0032      	movs	r2, r6
 800e186:	001f      	movs	r7, r3
 800e188:	0028      	movs	r0, r5
 800e18a:	9b01      	ldr	r3, [sp, #4]
 800e18c:	6a21      	ldr	r1, [r4, #32]
 800e18e:	47b8      	blx	r7
 800e190:	2800      	cmp	r0, #0
 800e192:	dc07      	bgt.n	800e1a4 <__sflush_r+0xfc>
 800e194:	89a2      	ldrh	r2, [r4, #12]
 800e196:	2340      	movs	r3, #64	@ 0x40
 800e198:	2001      	movs	r0, #1
 800e19a:	4313      	orrs	r3, r2
 800e19c:	b21b      	sxth	r3, r3
 800e19e:	81a3      	strh	r3, [r4, #12]
 800e1a0:	4240      	negs	r0, r0
 800e1a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e1a4:	9b01      	ldr	r3, [sp, #4]
 800e1a6:	1836      	adds	r6, r6, r0
 800e1a8:	1a1b      	subs	r3, r3, r0
 800e1aa:	9301      	str	r3, [sp, #4]
 800e1ac:	e7e6      	b.n	800e17c <__sflush_r+0xd4>
 800e1ae:	46c0      	nop			@ (mov r8, r8)
 800e1b0:	20400001 	.word	0x20400001

0800e1b4 <_fflush_r>:
 800e1b4:	690b      	ldr	r3, [r1, #16]
 800e1b6:	b570      	push	{r4, r5, r6, lr}
 800e1b8:	0005      	movs	r5, r0
 800e1ba:	000c      	movs	r4, r1
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d102      	bne.n	800e1c6 <_fflush_r+0x12>
 800e1c0:	2500      	movs	r5, #0
 800e1c2:	0028      	movs	r0, r5
 800e1c4:	bd70      	pop	{r4, r5, r6, pc}
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	d004      	beq.n	800e1d4 <_fflush_r+0x20>
 800e1ca:	6a03      	ldr	r3, [r0, #32]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d101      	bne.n	800e1d4 <_fflush_r+0x20>
 800e1d0:	f7fe f9a2 	bl	800c518 <__sinit>
 800e1d4:	220c      	movs	r2, #12
 800e1d6:	5ea3      	ldrsh	r3, [r4, r2]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d0f1      	beq.n	800e1c0 <_fflush_r+0xc>
 800e1dc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e1de:	07d2      	lsls	r2, r2, #31
 800e1e0:	d404      	bmi.n	800e1ec <_fflush_r+0x38>
 800e1e2:	059b      	lsls	r3, r3, #22
 800e1e4:	d402      	bmi.n	800e1ec <_fflush_r+0x38>
 800e1e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1e8:	f7fe fad3 	bl	800c792 <__retarget_lock_acquire_recursive>
 800e1ec:	0028      	movs	r0, r5
 800e1ee:	0021      	movs	r1, r4
 800e1f0:	f7ff ff5a 	bl	800e0a8 <__sflush_r>
 800e1f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e1f6:	0005      	movs	r5, r0
 800e1f8:	07db      	lsls	r3, r3, #31
 800e1fa:	d4e2      	bmi.n	800e1c2 <_fflush_r+0xe>
 800e1fc:	89a3      	ldrh	r3, [r4, #12]
 800e1fe:	059b      	lsls	r3, r3, #22
 800e200:	d4df      	bmi.n	800e1c2 <_fflush_r+0xe>
 800e202:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e204:	f7fe fac6 	bl	800c794 <__retarget_lock_release_recursive>
 800e208:	e7db      	b.n	800e1c2 <_fflush_r+0xe>

0800e20a <memmove>:
 800e20a:	b510      	push	{r4, lr}
 800e20c:	4288      	cmp	r0, r1
 800e20e:	d902      	bls.n	800e216 <memmove+0xc>
 800e210:	188b      	adds	r3, r1, r2
 800e212:	4298      	cmp	r0, r3
 800e214:	d308      	bcc.n	800e228 <memmove+0x1e>
 800e216:	2300      	movs	r3, #0
 800e218:	429a      	cmp	r2, r3
 800e21a:	d007      	beq.n	800e22c <memmove+0x22>
 800e21c:	5ccc      	ldrb	r4, [r1, r3]
 800e21e:	54c4      	strb	r4, [r0, r3]
 800e220:	3301      	adds	r3, #1
 800e222:	e7f9      	b.n	800e218 <memmove+0xe>
 800e224:	5c8b      	ldrb	r3, [r1, r2]
 800e226:	5483      	strb	r3, [r0, r2]
 800e228:	3a01      	subs	r2, #1
 800e22a:	d2fb      	bcs.n	800e224 <memmove+0x1a>
 800e22c:	bd10      	pop	{r4, pc}
	...

0800e230 <_sbrk_r>:
 800e230:	2300      	movs	r3, #0
 800e232:	b570      	push	{r4, r5, r6, lr}
 800e234:	4d06      	ldr	r5, [pc, #24]	@ (800e250 <_sbrk_r+0x20>)
 800e236:	0004      	movs	r4, r0
 800e238:	0008      	movs	r0, r1
 800e23a:	602b      	str	r3, [r5, #0]
 800e23c:	f7f7 fc70 	bl	8005b20 <_sbrk>
 800e240:	1c43      	adds	r3, r0, #1
 800e242:	d103      	bne.n	800e24c <_sbrk_r+0x1c>
 800e244:	682b      	ldr	r3, [r5, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d000      	beq.n	800e24c <_sbrk_r+0x1c>
 800e24a:	6023      	str	r3, [r4, #0]
 800e24c:	bd70      	pop	{r4, r5, r6, pc}
 800e24e:	46c0      	nop			@ (mov r8, r8)
 800e250:	2000074c 	.word	0x2000074c

0800e254 <memcpy>:
 800e254:	2300      	movs	r3, #0
 800e256:	b510      	push	{r4, lr}
 800e258:	429a      	cmp	r2, r3
 800e25a:	d100      	bne.n	800e25e <memcpy+0xa>
 800e25c:	bd10      	pop	{r4, pc}
 800e25e:	5ccc      	ldrb	r4, [r1, r3]
 800e260:	54c4      	strb	r4, [r0, r3]
 800e262:	3301      	adds	r3, #1
 800e264:	e7f8      	b.n	800e258 <memcpy+0x4>
	...

0800e268 <__assert_func>:
 800e268:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e26a:	0014      	movs	r4, r2
 800e26c:	001a      	movs	r2, r3
 800e26e:	4b09      	ldr	r3, [pc, #36]	@ (800e294 <__assert_func+0x2c>)
 800e270:	0005      	movs	r5, r0
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	000e      	movs	r6, r1
 800e276:	68d8      	ldr	r0, [r3, #12]
 800e278:	4b07      	ldr	r3, [pc, #28]	@ (800e298 <__assert_func+0x30>)
 800e27a:	2c00      	cmp	r4, #0
 800e27c:	d101      	bne.n	800e282 <__assert_func+0x1a>
 800e27e:	4b07      	ldr	r3, [pc, #28]	@ (800e29c <__assert_func+0x34>)
 800e280:	001c      	movs	r4, r3
 800e282:	4907      	ldr	r1, [pc, #28]	@ (800e2a0 <__assert_func+0x38>)
 800e284:	9301      	str	r3, [sp, #4]
 800e286:	9402      	str	r4, [sp, #8]
 800e288:	002b      	movs	r3, r5
 800e28a:	9600      	str	r6, [sp, #0]
 800e28c:	f000 f886 	bl	800e39c <fiprintf>
 800e290:	f000 f894 	bl	800e3bc <abort>
 800e294:	20000028 	.word	0x20000028
 800e298:	0800edd5 	.word	0x0800edd5
 800e29c:	0800ee10 	.word	0x0800ee10
 800e2a0:	0800ede2 	.word	0x0800ede2

0800e2a4 <_calloc_r>:
 800e2a4:	b570      	push	{r4, r5, r6, lr}
 800e2a6:	0c0b      	lsrs	r3, r1, #16
 800e2a8:	0c15      	lsrs	r5, r2, #16
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d11e      	bne.n	800e2ec <_calloc_r+0x48>
 800e2ae:	2d00      	cmp	r5, #0
 800e2b0:	d10c      	bne.n	800e2cc <_calloc_r+0x28>
 800e2b2:	b289      	uxth	r1, r1
 800e2b4:	b294      	uxth	r4, r2
 800e2b6:	434c      	muls	r4, r1
 800e2b8:	0021      	movs	r1, r4
 800e2ba:	f7ff f96b 	bl	800d594 <_malloc_r>
 800e2be:	1e05      	subs	r5, r0, #0
 800e2c0:	d01b      	beq.n	800e2fa <_calloc_r+0x56>
 800e2c2:	0022      	movs	r2, r4
 800e2c4:	2100      	movs	r1, #0
 800e2c6:	f7fe f9c9 	bl	800c65c <memset>
 800e2ca:	e016      	b.n	800e2fa <_calloc_r+0x56>
 800e2cc:	1c2b      	adds	r3, r5, #0
 800e2ce:	1c0c      	adds	r4, r1, #0
 800e2d0:	b289      	uxth	r1, r1
 800e2d2:	b292      	uxth	r2, r2
 800e2d4:	434a      	muls	r2, r1
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	b2a1      	uxth	r1, r4
 800e2da:	4359      	muls	r1, r3
 800e2dc:	0c14      	lsrs	r4, r2, #16
 800e2de:	190c      	adds	r4, r1, r4
 800e2e0:	0c23      	lsrs	r3, r4, #16
 800e2e2:	d107      	bne.n	800e2f4 <_calloc_r+0x50>
 800e2e4:	0424      	lsls	r4, r4, #16
 800e2e6:	b292      	uxth	r2, r2
 800e2e8:	4314      	orrs	r4, r2
 800e2ea:	e7e5      	b.n	800e2b8 <_calloc_r+0x14>
 800e2ec:	2d00      	cmp	r5, #0
 800e2ee:	d101      	bne.n	800e2f4 <_calloc_r+0x50>
 800e2f0:	1c14      	adds	r4, r2, #0
 800e2f2:	e7ed      	b.n	800e2d0 <_calloc_r+0x2c>
 800e2f4:	230c      	movs	r3, #12
 800e2f6:	2500      	movs	r5, #0
 800e2f8:	6003      	str	r3, [r0, #0]
 800e2fa:	0028      	movs	r0, r5
 800e2fc:	bd70      	pop	{r4, r5, r6, pc}

0800e2fe <__ascii_mbtowc>:
 800e2fe:	b082      	sub	sp, #8
 800e300:	2900      	cmp	r1, #0
 800e302:	d100      	bne.n	800e306 <__ascii_mbtowc+0x8>
 800e304:	a901      	add	r1, sp, #4
 800e306:	1e10      	subs	r0, r2, #0
 800e308:	d006      	beq.n	800e318 <__ascii_mbtowc+0x1a>
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d006      	beq.n	800e31c <__ascii_mbtowc+0x1e>
 800e30e:	7813      	ldrb	r3, [r2, #0]
 800e310:	600b      	str	r3, [r1, #0]
 800e312:	7810      	ldrb	r0, [r2, #0]
 800e314:	1e43      	subs	r3, r0, #1
 800e316:	4198      	sbcs	r0, r3
 800e318:	b002      	add	sp, #8
 800e31a:	4770      	bx	lr
 800e31c:	2002      	movs	r0, #2
 800e31e:	4240      	negs	r0, r0
 800e320:	e7fa      	b.n	800e318 <__ascii_mbtowc+0x1a>

0800e322 <_realloc_r>:
 800e322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e324:	0006      	movs	r6, r0
 800e326:	000c      	movs	r4, r1
 800e328:	0015      	movs	r5, r2
 800e32a:	2900      	cmp	r1, #0
 800e32c:	d105      	bne.n	800e33a <_realloc_r+0x18>
 800e32e:	0011      	movs	r1, r2
 800e330:	f7ff f930 	bl	800d594 <_malloc_r>
 800e334:	0004      	movs	r4, r0
 800e336:	0020      	movs	r0, r4
 800e338:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e33a:	2a00      	cmp	r2, #0
 800e33c:	d103      	bne.n	800e346 <_realloc_r+0x24>
 800e33e:	f7ff f8b3 	bl	800d4a8 <_free_r>
 800e342:	002c      	movs	r4, r5
 800e344:	e7f7      	b.n	800e336 <_realloc_r+0x14>
 800e346:	f000 f840 	bl	800e3ca <_malloc_usable_size_r>
 800e34a:	0007      	movs	r7, r0
 800e34c:	4285      	cmp	r5, r0
 800e34e:	d802      	bhi.n	800e356 <_realloc_r+0x34>
 800e350:	0843      	lsrs	r3, r0, #1
 800e352:	42ab      	cmp	r3, r5
 800e354:	d3ef      	bcc.n	800e336 <_realloc_r+0x14>
 800e356:	0029      	movs	r1, r5
 800e358:	0030      	movs	r0, r6
 800e35a:	f7ff f91b 	bl	800d594 <_malloc_r>
 800e35e:	9001      	str	r0, [sp, #4]
 800e360:	2800      	cmp	r0, #0
 800e362:	d101      	bne.n	800e368 <_realloc_r+0x46>
 800e364:	9c01      	ldr	r4, [sp, #4]
 800e366:	e7e6      	b.n	800e336 <_realloc_r+0x14>
 800e368:	002a      	movs	r2, r5
 800e36a:	42bd      	cmp	r5, r7
 800e36c:	d900      	bls.n	800e370 <_realloc_r+0x4e>
 800e36e:	003a      	movs	r2, r7
 800e370:	0021      	movs	r1, r4
 800e372:	9801      	ldr	r0, [sp, #4]
 800e374:	f7ff ff6e 	bl	800e254 <memcpy>
 800e378:	0021      	movs	r1, r4
 800e37a:	0030      	movs	r0, r6
 800e37c:	f7ff f894 	bl	800d4a8 <_free_r>
 800e380:	e7f0      	b.n	800e364 <_realloc_r+0x42>

0800e382 <__ascii_wctomb>:
 800e382:	0003      	movs	r3, r0
 800e384:	1e08      	subs	r0, r1, #0
 800e386:	d005      	beq.n	800e394 <__ascii_wctomb+0x12>
 800e388:	2aff      	cmp	r2, #255	@ 0xff
 800e38a:	d904      	bls.n	800e396 <__ascii_wctomb+0x14>
 800e38c:	228a      	movs	r2, #138	@ 0x8a
 800e38e:	2001      	movs	r0, #1
 800e390:	601a      	str	r2, [r3, #0]
 800e392:	4240      	negs	r0, r0
 800e394:	4770      	bx	lr
 800e396:	2001      	movs	r0, #1
 800e398:	700a      	strb	r2, [r1, #0]
 800e39a:	e7fb      	b.n	800e394 <__ascii_wctomb+0x12>

0800e39c <fiprintf>:
 800e39c:	b40e      	push	{r1, r2, r3}
 800e39e:	b517      	push	{r0, r1, r2, r4, lr}
 800e3a0:	4c05      	ldr	r4, [pc, #20]	@ (800e3b8 <fiprintf+0x1c>)
 800e3a2:	ab05      	add	r3, sp, #20
 800e3a4:	cb04      	ldmia	r3!, {r2}
 800e3a6:	0001      	movs	r1, r0
 800e3a8:	6820      	ldr	r0, [r4, #0]
 800e3aa:	9301      	str	r3, [sp, #4]
 800e3ac:	f000 f83c 	bl	800e428 <_vfiprintf_r>
 800e3b0:	bc1e      	pop	{r1, r2, r3, r4}
 800e3b2:	bc08      	pop	{r3}
 800e3b4:	b003      	add	sp, #12
 800e3b6:	4718      	bx	r3
 800e3b8:	20000028 	.word	0x20000028

0800e3bc <abort>:
 800e3bc:	2006      	movs	r0, #6
 800e3be:	b510      	push	{r4, lr}
 800e3c0:	f000 fa18 	bl	800e7f4 <raise>
 800e3c4:	2001      	movs	r0, #1
 800e3c6:	f7f7 fb39 	bl	8005a3c <_exit>

0800e3ca <_malloc_usable_size_r>:
 800e3ca:	1f0b      	subs	r3, r1, #4
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	1f18      	subs	r0, r3, #4
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	da01      	bge.n	800e3d8 <_malloc_usable_size_r+0xe>
 800e3d4:	580b      	ldr	r3, [r1, r0]
 800e3d6:	18c0      	adds	r0, r0, r3
 800e3d8:	4770      	bx	lr

0800e3da <__sfputc_r>:
 800e3da:	6893      	ldr	r3, [r2, #8]
 800e3dc:	b510      	push	{r4, lr}
 800e3de:	3b01      	subs	r3, #1
 800e3e0:	6093      	str	r3, [r2, #8]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	da04      	bge.n	800e3f0 <__sfputc_r+0x16>
 800e3e6:	6994      	ldr	r4, [r2, #24]
 800e3e8:	42a3      	cmp	r3, r4
 800e3ea:	db07      	blt.n	800e3fc <__sfputc_r+0x22>
 800e3ec:	290a      	cmp	r1, #10
 800e3ee:	d005      	beq.n	800e3fc <__sfputc_r+0x22>
 800e3f0:	6813      	ldr	r3, [r2, #0]
 800e3f2:	1c58      	adds	r0, r3, #1
 800e3f4:	6010      	str	r0, [r2, #0]
 800e3f6:	7019      	strb	r1, [r3, #0]
 800e3f8:	0008      	movs	r0, r1
 800e3fa:	bd10      	pop	{r4, pc}
 800e3fc:	f000 f930 	bl	800e660 <__swbuf_r>
 800e400:	0001      	movs	r1, r0
 800e402:	e7f9      	b.n	800e3f8 <__sfputc_r+0x1e>

0800e404 <__sfputs_r>:
 800e404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e406:	0006      	movs	r6, r0
 800e408:	000f      	movs	r7, r1
 800e40a:	0014      	movs	r4, r2
 800e40c:	18d5      	adds	r5, r2, r3
 800e40e:	42ac      	cmp	r4, r5
 800e410:	d101      	bne.n	800e416 <__sfputs_r+0x12>
 800e412:	2000      	movs	r0, #0
 800e414:	e007      	b.n	800e426 <__sfputs_r+0x22>
 800e416:	7821      	ldrb	r1, [r4, #0]
 800e418:	003a      	movs	r2, r7
 800e41a:	0030      	movs	r0, r6
 800e41c:	f7ff ffdd 	bl	800e3da <__sfputc_r>
 800e420:	3401      	adds	r4, #1
 800e422:	1c43      	adds	r3, r0, #1
 800e424:	d1f3      	bne.n	800e40e <__sfputs_r+0xa>
 800e426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e428 <_vfiprintf_r>:
 800e428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e42a:	b0a1      	sub	sp, #132	@ 0x84
 800e42c:	000f      	movs	r7, r1
 800e42e:	0015      	movs	r5, r2
 800e430:	001e      	movs	r6, r3
 800e432:	9003      	str	r0, [sp, #12]
 800e434:	2800      	cmp	r0, #0
 800e436:	d004      	beq.n	800e442 <_vfiprintf_r+0x1a>
 800e438:	6a03      	ldr	r3, [r0, #32]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d101      	bne.n	800e442 <_vfiprintf_r+0x1a>
 800e43e:	f7fe f86b 	bl	800c518 <__sinit>
 800e442:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e444:	07db      	lsls	r3, r3, #31
 800e446:	d405      	bmi.n	800e454 <_vfiprintf_r+0x2c>
 800e448:	89bb      	ldrh	r3, [r7, #12]
 800e44a:	059b      	lsls	r3, r3, #22
 800e44c:	d402      	bmi.n	800e454 <_vfiprintf_r+0x2c>
 800e44e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e450:	f7fe f99f 	bl	800c792 <__retarget_lock_acquire_recursive>
 800e454:	89bb      	ldrh	r3, [r7, #12]
 800e456:	071b      	lsls	r3, r3, #28
 800e458:	d502      	bpl.n	800e460 <_vfiprintf_r+0x38>
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d113      	bne.n	800e488 <_vfiprintf_r+0x60>
 800e460:	0039      	movs	r1, r7
 800e462:	9803      	ldr	r0, [sp, #12]
 800e464:	f000 f93e 	bl	800e6e4 <__swsetup_r>
 800e468:	2800      	cmp	r0, #0
 800e46a:	d00d      	beq.n	800e488 <_vfiprintf_r+0x60>
 800e46c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e46e:	07db      	lsls	r3, r3, #31
 800e470:	d503      	bpl.n	800e47a <_vfiprintf_r+0x52>
 800e472:	2001      	movs	r0, #1
 800e474:	4240      	negs	r0, r0
 800e476:	b021      	add	sp, #132	@ 0x84
 800e478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e47a:	89bb      	ldrh	r3, [r7, #12]
 800e47c:	059b      	lsls	r3, r3, #22
 800e47e:	d4f8      	bmi.n	800e472 <_vfiprintf_r+0x4a>
 800e480:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e482:	f7fe f987 	bl	800c794 <__retarget_lock_release_recursive>
 800e486:	e7f4      	b.n	800e472 <_vfiprintf_r+0x4a>
 800e488:	2300      	movs	r3, #0
 800e48a:	ac08      	add	r4, sp, #32
 800e48c:	6163      	str	r3, [r4, #20]
 800e48e:	3320      	adds	r3, #32
 800e490:	7663      	strb	r3, [r4, #25]
 800e492:	3310      	adds	r3, #16
 800e494:	76a3      	strb	r3, [r4, #26]
 800e496:	9607      	str	r6, [sp, #28]
 800e498:	002e      	movs	r6, r5
 800e49a:	7833      	ldrb	r3, [r6, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d001      	beq.n	800e4a4 <_vfiprintf_r+0x7c>
 800e4a0:	2b25      	cmp	r3, #37	@ 0x25
 800e4a2:	d148      	bne.n	800e536 <_vfiprintf_r+0x10e>
 800e4a4:	1b73      	subs	r3, r6, r5
 800e4a6:	9305      	str	r3, [sp, #20]
 800e4a8:	42ae      	cmp	r6, r5
 800e4aa:	d00b      	beq.n	800e4c4 <_vfiprintf_r+0x9c>
 800e4ac:	002a      	movs	r2, r5
 800e4ae:	0039      	movs	r1, r7
 800e4b0:	9803      	ldr	r0, [sp, #12]
 800e4b2:	f7ff ffa7 	bl	800e404 <__sfputs_r>
 800e4b6:	3001      	adds	r0, #1
 800e4b8:	d100      	bne.n	800e4bc <_vfiprintf_r+0x94>
 800e4ba:	e0ae      	b.n	800e61a <_vfiprintf_r+0x1f2>
 800e4bc:	6963      	ldr	r3, [r4, #20]
 800e4be:	9a05      	ldr	r2, [sp, #20]
 800e4c0:	189b      	adds	r3, r3, r2
 800e4c2:	6163      	str	r3, [r4, #20]
 800e4c4:	7833      	ldrb	r3, [r6, #0]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d100      	bne.n	800e4cc <_vfiprintf_r+0xa4>
 800e4ca:	e0a6      	b.n	800e61a <_vfiprintf_r+0x1f2>
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	4252      	negs	r2, r2
 800e4d2:	6062      	str	r2, [r4, #4]
 800e4d4:	a904      	add	r1, sp, #16
 800e4d6:	3254      	adds	r2, #84	@ 0x54
 800e4d8:	1852      	adds	r2, r2, r1
 800e4da:	1c75      	adds	r5, r6, #1
 800e4dc:	6023      	str	r3, [r4, #0]
 800e4de:	60e3      	str	r3, [r4, #12]
 800e4e0:	60a3      	str	r3, [r4, #8]
 800e4e2:	7013      	strb	r3, [r2, #0]
 800e4e4:	65a3      	str	r3, [r4, #88]	@ 0x58
 800e4e6:	4b59      	ldr	r3, [pc, #356]	@ (800e64c <_vfiprintf_r+0x224>)
 800e4e8:	2205      	movs	r2, #5
 800e4ea:	0018      	movs	r0, r3
 800e4ec:	7829      	ldrb	r1, [r5, #0]
 800e4ee:	9305      	str	r3, [sp, #20]
 800e4f0:	f7fe f959 	bl	800c7a6 <memchr>
 800e4f4:	1c6e      	adds	r6, r5, #1
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	d11f      	bne.n	800e53a <_vfiprintf_r+0x112>
 800e4fa:	6822      	ldr	r2, [r4, #0]
 800e4fc:	06d3      	lsls	r3, r2, #27
 800e4fe:	d504      	bpl.n	800e50a <_vfiprintf_r+0xe2>
 800e500:	2353      	movs	r3, #83	@ 0x53
 800e502:	a904      	add	r1, sp, #16
 800e504:	185b      	adds	r3, r3, r1
 800e506:	2120      	movs	r1, #32
 800e508:	7019      	strb	r1, [r3, #0]
 800e50a:	0713      	lsls	r3, r2, #28
 800e50c:	d504      	bpl.n	800e518 <_vfiprintf_r+0xf0>
 800e50e:	2353      	movs	r3, #83	@ 0x53
 800e510:	a904      	add	r1, sp, #16
 800e512:	185b      	adds	r3, r3, r1
 800e514:	212b      	movs	r1, #43	@ 0x2b
 800e516:	7019      	strb	r1, [r3, #0]
 800e518:	782b      	ldrb	r3, [r5, #0]
 800e51a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e51c:	d016      	beq.n	800e54c <_vfiprintf_r+0x124>
 800e51e:	002e      	movs	r6, r5
 800e520:	2100      	movs	r1, #0
 800e522:	200a      	movs	r0, #10
 800e524:	68e3      	ldr	r3, [r4, #12]
 800e526:	7832      	ldrb	r2, [r6, #0]
 800e528:	1c75      	adds	r5, r6, #1
 800e52a:	3a30      	subs	r2, #48	@ 0x30
 800e52c:	2a09      	cmp	r2, #9
 800e52e:	d950      	bls.n	800e5d2 <_vfiprintf_r+0x1aa>
 800e530:	2900      	cmp	r1, #0
 800e532:	d111      	bne.n	800e558 <_vfiprintf_r+0x130>
 800e534:	e017      	b.n	800e566 <_vfiprintf_r+0x13e>
 800e536:	3601      	adds	r6, #1
 800e538:	e7af      	b.n	800e49a <_vfiprintf_r+0x72>
 800e53a:	9b05      	ldr	r3, [sp, #20]
 800e53c:	6822      	ldr	r2, [r4, #0]
 800e53e:	1ac0      	subs	r0, r0, r3
 800e540:	2301      	movs	r3, #1
 800e542:	4083      	lsls	r3, r0
 800e544:	4313      	orrs	r3, r2
 800e546:	0035      	movs	r5, r6
 800e548:	6023      	str	r3, [r4, #0]
 800e54a:	e7cc      	b.n	800e4e6 <_vfiprintf_r+0xbe>
 800e54c:	9b07      	ldr	r3, [sp, #28]
 800e54e:	1d19      	adds	r1, r3, #4
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	9107      	str	r1, [sp, #28]
 800e554:	2b00      	cmp	r3, #0
 800e556:	db01      	blt.n	800e55c <_vfiprintf_r+0x134>
 800e558:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e55a:	e004      	b.n	800e566 <_vfiprintf_r+0x13e>
 800e55c:	425b      	negs	r3, r3
 800e55e:	60e3      	str	r3, [r4, #12]
 800e560:	2302      	movs	r3, #2
 800e562:	4313      	orrs	r3, r2
 800e564:	6023      	str	r3, [r4, #0]
 800e566:	7833      	ldrb	r3, [r6, #0]
 800e568:	2b2e      	cmp	r3, #46	@ 0x2e
 800e56a:	d10c      	bne.n	800e586 <_vfiprintf_r+0x15e>
 800e56c:	7873      	ldrb	r3, [r6, #1]
 800e56e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e570:	d134      	bne.n	800e5dc <_vfiprintf_r+0x1b4>
 800e572:	9b07      	ldr	r3, [sp, #28]
 800e574:	3602      	adds	r6, #2
 800e576:	1d1a      	adds	r2, r3, #4
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	9207      	str	r2, [sp, #28]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	da01      	bge.n	800e584 <_vfiprintf_r+0x15c>
 800e580:	2301      	movs	r3, #1
 800e582:	425b      	negs	r3, r3
 800e584:	9309      	str	r3, [sp, #36]	@ 0x24
 800e586:	4d32      	ldr	r5, [pc, #200]	@ (800e650 <_vfiprintf_r+0x228>)
 800e588:	2203      	movs	r2, #3
 800e58a:	0028      	movs	r0, r5
 800e58c:	7831      	ldrb	r1, [r6, #0]
 800e58e:	f7fe f90a 	bl	800c7a6 <memchr>
 800e592:	2800      	cmp	r0, #0
 800e594:	d006      	beq.n	800e5a4 <_vfiprintf_r+0x17c>
 800e596:	2340      	movs	r3, #64	@ 0x40
 800e598:	1b40      	subs	r0, r0, r5
 800e59a:	4083      	lsls	r3, r0
 800e59c:	6822      	ldr	r2, [r4, #0]
 800e59e:	3601      	adds	r6, #1
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	6023      	str	r3, [r4, #0]
 800e5a4:	7831      	ldrb	r1, [r6, #0]
 800e5a6:	2206      	movs	r2, #6
 800e5a8:	482a      	ldr	r0, [pc, #168]	@ (800e654 <_vfiprintf_r+0x22c>)
 800e5aa:	1c75      	adds	r5, r6, #1
 800e5ac:	7621      	strb	r1, [r4, #24]
 800e5ae:	f7fe f8fa 	bl	800c7a6 <memchr>
 800e5b2:	2800      	cmp	r0, #0
 800e5b4:	d040      	beq.n	800e638 <_vfiprintf_r+0x210>
 800e5b6:	4b28      	ldr	r3, [pc, #160]	@ (800e658 <_vfiprintf_r+0x230>)
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d122      	bne.n	800e602 <_vfiprintf_r+0x1da>
 800e5bc:	2207      	movs	r2, #7
 800e5be:	9b07      	ldr	r3, [sp, #28]
 800e5c0:	3307      	adds	r3, #7
 800e5c2:	4393      	bics	r3, r2
 800e5c4:	3308      	adds	r3, #8
 800e5c6:	9307      	str	r3, [sp, #28]
 800e5c8:	6963      	ldr	r3, [r4, #20]
 800e5ca:	9a04      	ldr	r2, [sp, #16]
 800e5cc:	189b      	adds	r3, r3, r2
 800e5ce:	6163      	str	r3, [r4, #20]
 800e5d0:	e762      	b.n	800e498 <_vfiprintf_r+0x70>
 800e5d2:	4343      	muls	r3, r0
 800e5d4:	002e      	movs	r6, r5
 800e5d6:	2101      	movs	r1, #1
 800e5d8:	189b      	adds	r3, r3, r2
 800e5da:	e7a4      	b.n	800e526 <_vfiprintf_r+0xfe>
 800e5dc:	2300      	movs	r3, #0
 800e5de:	200a      	movs	r0, #10
 800e5e0:	0019      	movs	r1, r3
 800e5e2:	3601      	adds	r6, #1
 800e5e4:	6063      	str	r3, [r4, #4]
 800e5e6:	7832      	ldrb	r2, [r6, #0]
 800e5e8:	1c75      	adds	r5, r6, #1
 800e5ea:	3a30      	subs	r2, #48	@ 0x30
 800e5ec:	2a09      	cmp	r2, #9
 800e5ee:	d903      	bls.n	800e5f8 <_vfiprintf_r+0x1d0>
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d0c8      	beq.n	800e586 <_vfiprintf_r+0x15e>
 800e5f4:	9109      	str	r1, [sp, #36]	@ 0x24
 800e5f6:	e7c6      	b.n	800e586 <_vfiprintf_r+0x15e>
 800e5f8:	4341      	muls	r1, r0
 800e5fa:	002e      	movs	r6, r5
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	1889      	adds	r1, r1, r2
 800e600:	e7f1      	b.n	800e5e6 <_vfiprintf_r+0x1be>
 800e602:	aa07      	add	r2, sp, #28
 800e604:	9200      	str	r2, [sp, #0]
 800e606:	0021      	movs	r1, r4
 800e608:	003a      	movs	r2, r7
 800e60a:	4b14      	ldr	r3, [pc, #80]	@ (800e65c <_vfiprintf_r+0x234>)
 800e60c:	9803      	ldr	r0, [sp, #12]
 800e60e:	f7fd fb39 	bl	800bc84 <_printf_float>
 800e612:	9004      	str	r0, [sp, #16]
 800e614:	9b04      	ldr	r3, [sp, #16]
 800e616:	3301      	adds	r3, #1
 800e618:	d1d6      	bne.n	800e5c8 <_vfiprintf_r+0x1a0>
 800e61a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e61c:	07db      	lsls	r3, r3, #31
 800e61e:	d405      	bmi.n	800e62c <_vfiprintf_r+0x204>
 800e620:	89bb      	ldrh	r3, [r7, #12]
 800e622:	059b      	lsls	r3, r3, #22
 800e624:	d402      	bmi.n	800e62c <_vfiprintf_r+0x204>
 800e626:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e628:	f7fe f8b4 	bl	800c794 <__retarget_lock_release_recursive>
 800e62c:	89bb      	ldrh	r3, [r7, #12]
 800e62e:	065b      	lsls	r3, r3, #25
 800e630:	d500      	bpl.n	800e634 <_vfiprintf_r+0x20c>
 800e632:	e71e      	b.n	800e472 <_vfiprintf_r+0x4a>
 800e634:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800e636:	e71e      	b.n	800e476 <_vfiprintf_r+0x4e>
 800e638:	aa07      	add	r2, sp, #28
 800e63a:	9200      	str	r2, [sp, #0]
 800e63c:	0021      	movs	r1, r4
 800e63e:	003a      	movs	r2, r7
 800e640:	4b06      	ldr	r3, [pc, #24]	@ (800e65c <_vfiprintf_r+0x234>)
 800e642:	9803      	ldr	r0, [sp, #12]
 800e644:	f7fd fdcc 	bl	800c1e0 <_printf_i>
 800e648:	e7e3      	b.n	800e612 <_vfiprintf_r+0x1ea>
 800e64a:	46c0      	nop			@ (mov r8, r8)
 800e64c:	0800edba 	.word	0x0800edba
 800e650:	0800edc0 	.word	0x0800edc0
 800e654:	0800edc4 	.word	0x0800edc4
 800e658:	0800bc85 	.word	0x0800bc85
 800e65c:	0800e405 	.word	0x0800e405

0800e660 <__swbuf_r>:
 800e660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e662:	0006      	movs	r6, r0
 800e664:	000d      	movs	r5, r1
 800e666:	0014      	movs	r4, r2
 800e668:	2800      	cmp	r0, #0
 800e66a:	d004      	beq.n	800e676 <__swbuf_r+0x16>
 800e66c:	6a03      	ldr	r3, [r0, #32]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d101      	bne.n	800e676 <__swbuf_r+0x16>
 800e672:	f7fd ff51 	bl	800c518 <__sinit>
 800e676:	69a3      	ldr	r3, [r4, #24]
 800e678:	60a3      	str	r3, [r4, #8]
 800e67a:	89a3      	ldrh	r3, [r4, #12]
 800e67c:	071b      	lsls	r3, r3, #28
 800e67e:	d502      	bpl.n	800e686 <__swbuf_r+0x26>
 800e680:	6923      	ldr	r3, [r4, #16]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d109      	bne.n	800e69a <__swbuf_r+0x3a>
 800e686:	0021      	movs	r1, r4
 800e688:	0030      	movs	r0, r6
 800e68a:	f000 f82b 	bl	800e6e4 <__swsetup_r>
 800e68e:	2800      	cmp	r0, #0
 800e690:	d003      	beq.n	800e69a <__swbuf_r+0x3a>
 800e692:	2501      	movs	r5, #1
 800e694:	426d      	negs	r5, r5
 800e696:	0028      	movs	r0, r5
 800e698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e69a:	6923      	ldr	r3, [r4, #16]
 800e69c:	6820      	ldr	r0, [r4, #0]
 800e69e:	b2ef      	uxtb	r7, r5
 800e6a0:	1ac0      	subs	r0, r0, r3
 800e6a2:	6963      	ldr	r3, [r4, #20]
 800e6a4:	b2ed      	uxtb	r5, r5
 800e6a6:	4283      	cmp	r3, r0
 800e6a8:	dc05      	bgt.n	800e6b6 <__swbuf_r+0x56>
 800e6aa:	0021      	movs	r1, r4
 800e6ac:	0030      	movs	r0, r6
 800e6ae:	f7ff fd81 	bl	800e1b4 <_fflush_r>
 800e6b2:	2800      	cmp	r0, #0
 800e6b4:	d1ed      	bne.n	800e692 <__swbuf_r+0x32>
 800e6b6:	68a3      	ldr	r3, [r4, #8]
 800e6b8:	3001      	adds	r0, #1
 800e6ba:	3b01      	subs	r3, #1
 800e6bc:	60a3      	str	r3, [r4, #8]
 800e6be:	6823      	ldr	r3, [r4, #0]
 800e6c0:	1c5a      	adds	r2, r3, #1
 800e6c2:	6022      	str	r2, [r4, #0]
 800e6c4:	701f      	strb	r7, [r3, #0]
 800e6c6:	6963      	ldr	r3, [r4, #20]
 800e6c8:	4283      	cmp	r3, r0
 800e6ca:	d004      	beq.n	800e6d6 <__swbuf_r+0x76>
 800e6cc:	89a3      	ldrh	r3, [r4, #12]
 800e6ce:	07db      	lsls	r3, r3, #31
 800e6d0:	d5e1      	bpl.n	800e696 <__swbuf_r+0x36>
 800e6d2:	2d0a      	cmp	r5, #10
 800e6d4:	d1df      	bne.n	800e696 <__swbuf_r+0x36>
 800e6d6:	0021      	movs	r1, r4
 800e6d8:	0030      	movs	r0, r6
 800e6da:	f7ff fd6b 	bl	800e1b4 <_fflush_r>
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	d0d9      	beq.n	800e696 <__swbuf_r+0x36>
 800e6e2:	e7d6      	b.n	800e692 <__swbuf_r+0x32>

0800e6e4 <__swsetup_r>:
 800e6e4:	4b2d      	ldr	r3, [pc, #180]	@ (800e79c <__swsetup_r+0xb8>)
 800e6e6:	b570      	push	{r4, r5, r6, lr}
 800e6e8:	0005      	movs	r5, r0
 800e6ea:	6818      	ldr	r0, [r3, #0]
 800e6ec:	000c      	movs	r4, r1
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	d004      	beq.n	800e6fc <__swsetup_r+0x18>
 800e6f2:	6a03      	ldr	r3, [r0, #32]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d101      	bne.n	800e6fc <__swsetup_r+0x18>
 800e6f8:	f7fd ff0e 	bl	800c518 <__sinit>
 800e6fc:	220c      	movs	r2, #12
 800e6fe:	5ea3      	ldrsh	r3, [r4, r2]
 800e700:	071a      	lsls	r2, r3, #28
 800e702:	d423      	bmi.n	800e74c <__swsetup_r+0x68>
 800e704:	06da      	lsls	r2, r3, #27
 800e706:	d407      	bmi.n	800e718 <__swsetup_r+0x34>
 800e708:	2209      	movs	r2, #9
 800e70a:	602a      	str	r2, [r5, #0]
 800e70c:	2240      	movs	r2, #64	@ 0x40
 800e70e:	2001      	movs	r0, #1
 800e710:	4313      	orrs	r3, r2
 800e712:	81a3      	strh	r3, [r4, #12]
 800e714:	4240      	negs	r0, r0
 800e716:	e03a      	b.n	800e78e <__swsetup_r+0xaa>
 800e718:	075b      	lsls	r3, r3, #29
 800e71a:	d513      	bpl.n	800e744 <__swsetup_r+0x60>
 800e71c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e71e:	2900      	cmp	r1, #0
 800e720:	d008      	beq.n	800e734 <__swsetup_r+0x50>
 800e722:	0023      	movs	r3, r4
 800e724:	3344      	adds	r3, #68	@ 0x44
 800e726:	4299      	cmp	r1, r3
 800e728:	d002      	beq.n	800e730 <__swsetup_r+0x4c>
 800e72a:	0028      	movs	r0, r5
 800e72c:	f7fe febc 	bl	800d4a8 <_free_r>
 800e730:	2300      	movs	r3, #0
 800e732:	6363      	str	r3, [r4, #52]	@ 0x34
 800e734:	2224      	movs	r2, #36	@ 0x24
 800e736:	89a3      	ldrh	r3, [r4, #12]
 800e738:	4393      	bics	r3, r2
 800e73a:	81a3      	strh	r3, [r4, #12]
 800e73c:	2300      	movs	r3, #0
 800e73e:	6063      	str	r3, [r4, #4]
 800e740:	6923      	ldr	r3, [r4, #16]
 800e742:	6023      	str	r3, [r4, #0]
 800e744:	2308      	movs	r3, #8
 800e746:	89a2      	ldrh	r2, [r4, #12]
 800e748:	4313      	orrs	r3, r2
 800e74a:	81a3      	strh	r3, [r4, #12]
 800e74c:	6923      	ldr	r3, [r4, #16]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d10b      	bne.n	800e76a <__swsetup_r+0x86>
 800e752:	21a0      	movs	r1, #160	@ 0xa0
 800e754:	2280      	movs	r2, #128	@ 0x80
 800e756:	89a3      	ldrh	r3, [r4, #12]
 800e758:	0089      	lsls	r1, r1, #2
 800e75a:	0092      	lsls	r2, r2, #2
 800e75c:	400b      	ands	r3, r1
 800e75e:	4293      	cmp	r3, r2
 800e760:	d003      	beq.n	800e76a <__swsetup_r+0x86>
 800e762:	0021      	movs	r1, r4
 800e764:	0028      	movs	r0, r5
 800e766:	f000 f88f 	bl	800e888 <__smakebuf_r>
 800e76a:	220c      	movs	r2, #12
 800e76c:	5ea3      	ldrsh	r3, [r4, r2]
 800e76e:	2101      	movs	r1, #1
 800e770:	001a      	movs	r2, r3
 800e772:	400a      	ands	r2, r1
 800e774:	420b      	tst	r3, r1
 800e776:	d00b      	beq.n	800e790 <__swsetup_r+0xac>
 800e778:	2200      	movs	r2, #0
 800e77a:	60a2      	str	r2, [r4, #8]
 800e77c:	6962      	ldr	r2, [r4, #20]
 800e77e:	4252      	negs	r2, r2
 800e780:	61a2      	str	r2, [r4, #24]
 800e782:	2000      	movs	r0, #0
 800e784:	6922      	ldr	r2, [r4, #16]
 800e786:	4282      	cmp	r2, r0
 800e788:	d101      	bne.n	800e78e <__swsetup_r+0xaa>
 800e78a:	061a      	lsls	r2, r3, #24
 800e78c:	d4be      	bmi.n	800e70c <__swsetup_r+0x28>
 800e78e:	bd70      	pop	{r4, r5, r6, pc}
 800e790:	0799      	lsls	r1, r3, #30
 800e792:	d400      	bmi.n	800e796 <__swsetup_r+0xb2>
 800e794:	6962      	ldr	r2, [r4, #20]
 800e796:	60a2      	str	r2, [r4, #8]
 800e798:	e7f3      	b.n	800e782 <__swsetup_r+0x9e>
 800e79a:	46c0      	nop			@ (mov r8, r8)
 800e79c:	20000028 	.word	0x20000028

0800e7a0 <_raise_r>:
 800e7a0:	b570      	push	{r4, r5, r6, lr}
 800e7a2:	0004      	movs	r4, r0
 800e7a4:	000d      	movs	r5, r1
 800e7a6:	291f      	cmp	r1, #31
 800e7a8:	d904      	bls.n	800e7b4 <_raise_r+0x14>
 800e7aa:	2316      	movs	r3, #22
 800e7ac:	6003      	str	r3, [r0, #0]
 800e7ae:	2001      	movs	r0, #1
 800e7b0:	4240      	negs	r0, r0
 800e7b2:	bd70      	pop	{r4, r5, r6, pc}
 800e7b4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d004      	beq.n	800e7c4 <_raise_r+0x24>
 800e7ba:	008a      	lsls	r2, r1, #2
 800e7bc:	189b      	adds	r3, r3, r2
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	2a00      	cmp	r2, #0
 800e7c2:	d108      	bne.n	800e7d6 <_raise_r+0x36>
 800e7c4:	0020      	movs	r0, r4
 800e7c6:	f000 f831 	bl	800e82c <_getpid_r>
 800e7ca:	002a      	movs	r2, r5
 800e7cc:	0001      	movs	r1, r0
 800e7ce:	0020      	movs	r0, r4
 800e7d0:	f000 f81a 	bl	800e808 <_kill_r>
 800e7d4:	e7ed      	b.n	800e7b2 <_raise_r+0x12>
 800e7d6:	2a01      	cmp	r2, #1
 800e7d8:	d009      	beq.n	800e7ee <_raise_r+0x4e>
 800e7da:	1c51      	adds	r1, r2, #1
 800e7dc:	d103      	bne.n	800e7e6 <_raise_r+0x46>
 800e7de:	2316      	movs	r3, #22
 800e7e0:	6003      	str	r3, [r0, #0]
 800e7e2:	2001      	movs	r0, #1
 800e7e4:	e7e5      	b.n	800e7b2 <_raise_r+0x12>
 800e7e6:	2100      	movs	r1, #0
 800e7e8:	0028      	movs	r0, r5
 800e7ea:	6019      	str	r1, [r3, #0]
 800e7ec:	4790      	blx	r2
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	e7df      	b.n	800e7b2 <_raise_r+0x12>
	...

0800e7f4 <raise>:
 800e7f4:	b510      	push	{r4, lr}
 800e7f6:	4b03      	ldr	r3, [pc, #12]	@ (800e804 <raise+0x10>)
 800e7f8:	0001      	movs	r1, r0
 800e7fa:	6818      	ldr	r0, [r3, #0]
 800e7fc:	f7ff ffd0 	bl	800e7a0 <_raise_r>
 800e800:	bd10      	pop	{r4, pc}
 800e802:	46c0      	nop			@ (mov r8, r8)
 800e804:	20000028 	.word	0x20000028

0800e808 <_kill_r>:
 800e808:	2300      	movs	r3, #0
 800e80a:	b570      	push	{r4, r5, r6, lr}
 800e80c:	4d06      	ldr	r5, [pc, #24]	@ (800e828 <_kill_r+0x20>)
 800e80e:	0004      	movs	r4, r0
 800e810:	0008      	movs	r0, r1
 800e812:	0011      	movs	r1, r2
 800e814:	602b      	str	r3, [r5, #0]
 800e816:	f7f7 f901 	bl	8005a1c <_kill>
 800e81a:	1c43      	adds	r3, r0, #1
 800e81c:	d103      	bne.n	800e826 <_kill_r+0x1e>
 800e81e:	682b      	ldr	r3, [r5, #0]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d000      	beq.n	800e826 <_kill_r+0x1e>
 800e824:	6023      	str	r3, [r4, #0]
 800e826:	bd70      	pop	{r4, r5, r6, pc}
 800e828:	2000074c 	.word	0x2000074c

0800e82c <_getpid_r>:
 800e82c:	b510      	push	{r4, lr}
 800e82e:	f7f7 f8ef 	bl	8005a10 <_getpid>
 800e832:	bd10      	pop	{r4, pc}

0800e834 <__swhatbuf_r>:
 800e834:	b570      	push	{r4, r5, r6, lr}
 800e836:	000e      	movs	r6, r1
 800e838:	001d      	movs	r5, r3
 800e83a:	230e      	movs	r3, #14
 800e83c:	5ec9      	ldrsh	r1, [r1, r3]
 800e83e:	0014      	movs	r4, r2
 800e840:	b096      	sub	sp, #88	@ 0x58
 800e842:	2900      	cmp	r1, #0
 800e844:	da0c      	bge.n	800e860 <__swhatbuf_r+0x2c>
 800e846:	89b2      	ldrh	r2, [r6, #12]
 800e848:	2380      	movs	r3, #128	@ 0x80
 800e84a:	0011      	movs	r1, r2
 800e84c:	4019      	ands	r1, r3
 800e84e:	421a      	tst	r2, r3
 800e850:	d114      	bne.n	800e87c <__swhatbuf_r+0x48>
 800e852:	2380      	movs	r3, #128	@ 0x80
 800e854:	00db      	lsls	r3, r3, #3
 800e856:	2000      	movs	r0, #0
 800e858:	6029      	str	r1, [r5, #0]
 800e85a:	6023      	str	r3, [r4, #0]
 800e85c:	b016      	add	sp, #88	@ 0x58
 800e85e:	bd70      	pop	{r4, r5, r6, pc}
 800e860:	466a      	mov	r2, sp
 800e862:	f000 f853 	bl	800e90c <_fstat_r>
 800e866:	2800      	cmp	r0, #0
 800e868:	dbed      	blt.n	800e846 <__swhatbuf_r+0x12>
 800e86a:	23f0      	movs	r3, #240	@ 0xf0
 800e86c:	9901      	ldr	r1, [sp, #4]
 800e86e:	021b      	lsls	r3, r3, #8
 800e870:	4019      	ands	r1, r3
 800e872:	4b04      	ldr	r3, [pc, #16]	@ (800e884 <__swhatbuf_r+0x50>)
 800e874:	18c9      	adds	r1, r1, r3
 800e876:	424b      	negs	r3, r1
 800e878:	4159      	adcs	r1, r3
 800e87a:	e7ea      	b.n	800e852 <__swhatbuf_r+0x1e>
 800e87c:	2100      	movs	r1, #0
 800e87e:	2340      	movs	r3, #64	@ 0x40
 800e880:	e7e9      	b.n	800e856 <__swhatbuf_r+0x22>
 800e882:	46c0      	nop			@ (mov r8, r8)
 800e884:	ffffe000 	.word	0xffffe000

0800e888 <__smakebuf_r>:
 800e888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e88a:	2602      	movs	r6, #2
 800e88c:	898b      	ldrh	r3, [r1, #12]
 800e88e:	0005      	movs	r5, r0
 800e890:	000c      	movs	r4, r1
 800e892:	b085      	sub	sp, #20
 800e894:	4233      	tst	r3, r6
 800e896:	d007      	beq.n	800e8a8 <__smakebuf_r+0x20>
 800e898:	0023      	movs	r3, r4
 800e89a:	3347      	adds	r3, #71	@ 0x47
 800e89c:	6023      	str	r3, [r4, #0]
 800e89e:	6123      	str	r3, [r4, #16]
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	6163      	str	r3, [r4, #20]
 800e8a4:	b005      	add	sp, #20
 800e8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8a8:	ab03      	add	r3, sp, #12
 800e8aa:	aa02      	add	r2, sp, #8
 800e8ac:	f7ff ffc2 	bl	800e834 <__swhatbuf_r>
 800e8b0:	9f02      	ldr	r7, [sp, #8]
 800e8b2:	9001      	str	r0, [sp, #4]
 800e8b4:	0039      	movs	r1, r7
 800e8b6:	0028      	movs	r0, r5
 800e8b8:	f7fe fe6c 	bl	800d594 <_malloc_r>
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	d108      	bne.n	800e8d2 <__smakebuf_r+0x4a>
 800e8c0:	220c      	movs	r2, #12
 800e8c2:	5ea3      	ldrsh	r3, [r4, r2]
 800e8c4:	059a      	lsls	r2, r3, #22
 800e8c6:	d4ed      	bmi.n	800e8a4 <__smakebuf_r+0x1c>
 800e8c8:	2203      	movs	r2, #3
 800e8ca:	4393      	bics	r3, r2
 800e8cc:	431e      	orrs	r6, r3
 800e8ce:	81a6      	strh	r6, [r4, #12]
 800e8d0:	e7e2      	b.n	800e898 <__smakebuf_r+0x10>
 800e8d2:	2380      	movs	r3, #128	@ 0x80
 800e8d4:	89a2      	ldrh	r2, [r4, #12]
 800e8d6:	6020      	str	r0, [r4, #0]
 800e8d8:	4313      	orrs	r3, r2
 800e8da:	81a3      	strh	r3, [r4, #12]
 800e8dc:	9b03      	ldr	r3, [sp, #12]
 800e8de:	6120      	str	r0, [r4, #16]
 800e8e0:	6167      	str	r7, [r4, #20]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d00c      	beq.n	800e900 <__smakebuf_r+0x78>
 800e8e6:	0028      	movs	r0, r5
 800e8e8:	230e      	movs	r3, #14
 800e8ea:	5ee1      	ldrsh	r1, [r4, r3]
 800e8ec:	f000 f820 	bl	800e930 <_isatty_r>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d005      	beq.n	800e900 <__smakebuf_r+0x78>
 800e8f4:	2303      	movs	r3, #3
 800e8f6:	89a2      	ldrh	r2, [r4, #12]
 800e8f8:	439a      	bics	r2, r3
 800e8fa:	3b02      	subs	r3, #2
 800e8fc:	4313      	orrs	r3, r2
 800e8fe:	81a3      	strh	r3, [r4, #12]
 800e900:	89a3      	ldrh	r3, [r4, #12]
 800e902:	9a01      	ldr	r2, [sp, #4]
 800e904:	4313      	orrs	r3, r2
 800e906:	81a3      	strh	r3, [r4, #12]
 800e908:	e7cc      	b.n	800e8a4 <__smakebuf_r+0x1c>
	...

0800e90c <_fstat_r>:
 800e90c:	2300      	movs	r3, #0
 800e90e:	b570      	push	{r4, r5, r6, lr}
 800e910:	4d06      	ldr	r5, [pc, #24]	@ (800e92c <_fstat_r+0x20>)
 800e912:	0004      	movs	r4, r0
 800e914:	0008      	movs	r0, r1
 800e916:	0011      	movs	r1, r2
 800e918:	602b      	str	r3, [r5, #0]
 800e91a:	f7f7 f8df 	bl	8005adc <_fstat>
 800e91e:	1c43      	adds	r3, r0, #1
 800e920:	d103      	bne.n	800e92a <_fstat_r+0x1e>
 800e922:	682b      	ldr	r3, [r5, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d000      	beq.n	800e92a <_fstat_r+0x1e>
 800e928:	6023      	str	r3, [r4, #0]
 800e92a:	bd70      	pop	{r4, r5, r6, pc}
 800e92c:	2000074c 	.word	0x2000074c

0800e930 <_isatty_r>:
 800e930:	2300      	movs	r3, #0
 800e932:	b570      	push	{r4, r5, r6, lr}
 800e934:	4d06      	ldr	r5, [pc, #24]	@ (800e950 <_isatty_r+0x20>)
 800e936:	0004      	movs	r4, r0
 800e938:	0008      	movs	r0, r1
 800e93a:	602b      	str	r3, [r5, #0]
 800e93c:	f7f7 f8dc 	bl	8005af8 <_isatty>
 800e940:	1c43      	adds	r3, r0, #1
 800e942:	d103      	bne.n	800e94c <_isatty_r+0x1c>
 800e944:	682b      	ldr	r3, [r5, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d000      	beq.n	800e94c <_isatty_r+0x1c>
 800e94a:	6023      	str	r3, [r4, #0]
 800e94c:	bd70      	pop	{r4, r5, r6, pc}
 800e94e:	46c0      	nop			@ (mov r8, r8)
 800e950:	2000074c 	.word	0x2000074c

0800e954 <_init>:
 800e954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e956:	46c0      	nop			@ (mov r8, r8)
 800e958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e95a:	bc08      	pop	{r3}
 800e95c:	469e      	mov	lr, r3
 800e95e:	4770      	bx	lr

0800e960 <_fini>:
 800e960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e962:	46c0      	nop			@ (mov r8, r8)
 800e964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e966:	bc08      	pop	{r3}
 800e968:	469e      	mov	lr, r3
 800e96a:	4770      	bx	lr
