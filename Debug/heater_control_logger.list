
heater_control_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d894  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800d950  0800d950  0000e950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfe0  0800dfe0  0000f1e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800dfe0  0800dfe0  0000f1e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dfe0  0800dfe0  0000f1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfe0  0800dfe0  0000efe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dfe4  0800dfe4  0000efe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800dfe8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  200001e4  0800e1cc  0000f1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  0800e1cc  0000f660  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fa4  00000000  00000000  0000f20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ac  00000000  00000000  000291b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  0002c760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001257  00000000  00000000  0002ded0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a175  00000000  00000000  0002f127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c88f  00000000  00000000  0004929c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0a24  00000000  00000000  00065b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010654f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006928  00000000  00000000  00106594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010cebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001e4 	.word	0x200001e4
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800d934 	.word	0x0800d934

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001e8 	.word	0x200001e8
 80000fc:	0800d934 	.word	0x0800d934

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			@ (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	@ 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	@ 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	@ 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 febb 	bl	80021b0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fdfb 	bl	8002040 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fead 	bl	80021b0 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fea3 	bl	80021b0 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fe25 	bl	80020c8 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fe1b 	bl	80020c8 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fb6d 	bl	8000b88 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 faed 	bl	8000a98 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fb5f 	bl	8000b88 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb55 	bl	8000b88 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 fafb 	bl	8000ae8 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 faf1 	bl	8000ae8 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)

08000514 <__aeabi_f2uiz>:
 8000514:	219e      	movs	r1, #158	@ 0x9e
 8000516:	b510      	push	{r4, lr}
 8000518:	05c9      	lsls	r1, r1, #23
 800051a:	1c04      	adds	r4, r0, #0
 800051c:	f7ff fff0 	bl	8000500 <__aeabi_fcmpge>
 8000520:	2800      	cmp	r0, #0
 8000522:	d103      	bne.n	800052c <__aeabi_f2uiz+0x18>
 8000524:	1c20      	adds	r0, r4, #0
 8000526:	f000 fe5f 	bl	80011e8 <__aeabi_f2iz>
 800052a:	bd10      	pop	{r4, pc}
 800052c:	219e      	movs	r1, #158	@ 0x9e
 800052e:	1c20      	adds	r0, r4, #0
 8000530:	05c9      	lsls	r1, r1, #23
 8000532:	f000 fcb5 	bl	8000ea0 <__aeabi_fsub>
 8000536:	f000 fe57 	bl	80011e8 <__aeabi_f2iz>
 800053a:	2380      	movs	r3, #128	@ 0x80
 800053c:	061b      	lsls	r3, r3, #24
 800053e:	469c      	mov	ip, r3
 8000540:	4460      	add	r0, ip
 8000542:	e7f2      	b.n	800052a <__aeabi_f2uiz+0x16>

08000544 <__aeabi_fadd>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	46ce      	mov	lr, r9
 8000548:	4647      	mov	r7, r8
 800054a:	0243      	lsls	r3, r0, #9
 800054c:	0a5a      	lsrs	r2, r3, #9
 800054e:	024e      	lsls	r6, r1, #9
 8000550:	0045      	lsls	r5, r0, #1
 8000552:	0fc4      	lsrs	r4, r0, #31
 8000554:	0048      	lsls	r0, r1, #1
 8000556:	4691      	mov	r9, r2
 8000558:	0e2d      	lsrs	r5, r5, #24
 800055a:	0a72      	lsrs	r2, r6, #9
 800055c:	0e00      	lsrs	r0, r0, #24
 800055e:	4694      	mov	ip, r2
 8000560:	b580      	push	{r7, lr}
 8000562:	099b      	lsrs	r3, r3, #6
 8000564:	0fc9      	lsrs	r1, r1, #31
 8000566:	09b6      	lsrs	r6, r6, #6
 8000568:	1a2a      	subs	r2, r5, r0
 800056a:	428c      	cmp	r4, r1
 800056c:	d021      	beq.n	80005b2 <__aeabi_fadd+0x6e>
 800056e:	2a00      	cmp	r2, #0
 8000570:	dd0d      	ble.n	800058e <__aeabi_fadd+0x4a>
 8000572:	2800      	cmp	r0, #0
 8000574:	d12d      	bne.n	80005d2 <__aeabi_fadd+0x8e>
 8000576:	2e00      	cmp	r6, #0
 8000578:	d100      	bne.n	800057c <__aeabi_fadd+0x38>
 800057a:	e08d      	b.n	8000698 <__aeabi_fadd+0x154>
 800057c:	1e51      	subs	r1, r2, #1
 800057e:	2a01      	cmp	r2, #1
 8000580:	d100      	bne.n	8000584 <__aeabi_fadd+0x40>
 8000582:	e11d      	b.n	80007c0 <__aeabi_fadd+0x27c>
 8000584:	2aff      	cmp	r2, #255	@ 0xff
 8000586:	d100      	bne.n	800058a <__aeabi_fadd+0x46>
 8000588:	e0ab      	b.n	80006e2 <__aeabi_fadd+0x19e>
 800058a:	000a      	movs	r2, r1
 800058c:	e027      	b.n	80005de <__aeabi_fadd+0x9a>
 800058e:	2a00      	cmp	r2, #0
 8000590:	d04d      	beq.n	800062e <__aeabi_fadd+0xea>
 8000592:	1b42      	subs	r2, r0, r5
 8000594:	2d00      	cmp	r5, #0
 8000596:	d000      	beq.n	800059a <__aeabi_fadd+0x56>
 8000598:	e0cc      	b.n	8000734 <__aeabi_fadd+0x1f0>
 800059a:	2b00      	cmp	r3, #0
 800059c:	d100      	bne.n	80005a0 <__aeabi_fadd+0x5c>
 800059e:	e079      	b.n	8000694 <__aeabi_fadd+0x150>
 80005a0:	1e54      	subs	r4, r2, #1
 80005a2:	2a01      	cmp	r2, #1
 80005a4:	d100      	bne.n	80005a8 <__aeabi_fadd+0x64>
 80005a6:	e128      	b.n	80007fa <__aeabi_fadd+0x2b6>
 80005a8:	2aff      	cmp	r2, #255	@ 0xff
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0x6a>
 80005ac:	e097      	b.n	80006de <__aeabi_fadd+0x19a>
 80005ae:	0022      	movs	r2, r4
 80005b0:	e0c5      	b.n	800073e <__aeabi_fadd+0x1fa>
 80005b2:	2a00      	cmp	r2, #0
 80005b4:	dc00      	bgt.n	80005b8 <__aeabi_fadd+0x74>
 80005b6:	e096      	b.n	80006e6 <__aeabi_fadd+0x1a2>
 80005b8:	2800      	cmp	r0, #0
 80005ba:	d04f      	beq.n	800065c <__aeabi_fadd+0x118>
 80005bc:	2dff      	cmp	r5, #255	@ 0xff
 80005be:	d100      	bne.n	80005c2 <__aeabi_fadd+0x7e>
 80005c0:	e08f      	b.n	80006e2 <__aeabi_fadd+0x19e>
 80005c2:	2180      	movs	r1, #128	@ 0x80
 80005c4:	04c9      	lsls	r1, r1, #19
 80005c6:	430e      	orrs	r6, r1
 80005c8:	2a1b      	cmp	r2, #27
 80005ca:	dd51      	ble.n	8000670 <__aeabi_fadd+0x12c>
 80005cc:	002a      	movs	r2, r5
 80005ce:	3301      	adds	r3, #1
 80005d0:	e018      	b.n	8000604 <__aeabi_fadd+0xc0>
 80005d2:	2dff      	cmp	r5, #255	@ 0xff
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0x94>
 80005d6:	e084      	b.n	80006e2 <__aeabi_fadd+0x19e>
 80005d8:	2180      	movs	r1, #128	@ 0x80
 80005da:	04c9      	lsls	r1, r1, #19
 80005dc:	430e      	orrs	r6, r1
 80005de:	2101      	movs	r1, #1
 80005e0:	2a1b      	cmp	r2, #27
 80005e2:	dc08      	bgt.n	80005f6 <__aeabi_fadd+0xb2>
 80005e4:	0031      	movs	r1, r6
 80005e6:	2020      	movs	r0, #32
 80005e8:	40d1      	lsrs	r1, r2
 80005ea:	1a82      	subs	r2, r0, r2
 80005ec:	4096      	lsls	r6, r2
 80005ee:	0032      	movs	r2, r6
 80005f0:	1e50      	subs	r0, r2, #1
 80005f2:	4182      	sbcs	r2, r0
 80005f4:	4311      	orrs	r1, r2
 80005f6:	1a5b      	subs	r3, r3, r1
 80005f8:	015a      	lsls	r2, r3, #5
 80005fa:	d459      	bmi.n	80006b0 <__aeabi_fadd+0x16c>
 80005fc:	2107      	movs	r1, #7
 80005fe:	002a      	movs	r2, r5
 8000600:	4019      	ands	r1, r3
 8000602:	d049      	beq.n	8000698 <__aeabi_fadd+0x154>
 8000604:	210f      	movs	r1, #15
 8000606:	4019      	ands	r1, r3
 8000608:	2904      	cmp	r1, #4
 800060a:	d000      	beq.n	800060e <__aeabi_fadd+0xca>
 800060c:	3304      	adds	r3, #4
 800060e:	0159      	lsls	r1, r3, #5
 8000610:	d542      	bpl.n	8000698 <__aeabi_fadd+0x154>
 8000612:	1c50      	adds	r0, r2, #1
 8000614:	2afe      	cmp	r2, #254	@ 0xfe
 8000616:	d03a      	beq.n	800068e <__aeabi_fadd+0x14a>
 8000618:	019b      	lsls	r3, r3, #6
 800061a:	b2c0      	uxtb	r0, r0
 800061c:	0a5b      	lsrs	r3, r3, #9
 800061e:	05c0      	lsls	r0, r0, #23
 8000620:	4318      	orrs	r0, r3
 8000622:	07e4      	lsls	r4, r4, #31
 8000624:	4320      	orrs	r0, r4
 8000626:	bcc0      	pop	{r6, r7}
 8000628:	46b9      	mov	r9, r7
 800062a:	46b0      	mov	r8, r6
 800062c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800062e:	20fe      	movs	r0, #254	@ 0xfe
 8000630:	4680      	mov	r8, r0
 8000632:	1c6f      	adds	r7, r5, #1
 8000634:	0038      	movs	r0, r7
 8000636:	4647      	mov	r7, r8
 8000638:	4207      	tst	r7, r0
 800063a:	d000      	beq.n	800063e <__aeabi_fadd+0xfa>
 800063c:	e08e      	b.n	800075c <__aeabi_fadd+0x218>
 800063e:	2d00      	cmp	r5, #0
 8000640:	d000      	beq.n	8000644 <__aeabi_fadd+0x100>
 8000642:	e0b4      	b.n	80007ae <__aeabi_fadd+0x26a>
 8000644:	2b00      	cmp	r3, #0
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0x106>
 8000648:	e0db      	b.n	8000802 <__aeabi_fadd+0x2be>
 800064a:	2e00      	cmp	r6, #0
 800064c:	d06c      	beq.n	8000728 <__aeabi_fadd+0x1e4>
 800064e:	1b98      	subs	r0, r3, r6
 8000650:	0145      	lsls	r5, r0, #5
 8000652:	d400      	bmi.n	8000656 <__aeabi_fadd+0x112>
 8000654:	e0f7      	b.n	8000846 <__aeabi_fadd+0x302>
 8000656:	000c      	movs	r4, r1
 8000658:	1af3      	subs	r3, r6, r3
 800065a:	e03d      	b.n	80006d8 <__aeabi_fadd+0x194>
 800065c:	2e00      	cmp	r6, #0
 800065e:	d01b      	beq.n	8000698 <__aeabi_fadd+0x154>
 8000660:	1e51      	subs	r1, r2, #1
 8000662:	2a01      	cmp	r2, #1
 8000664:	d100      	bne.n	8000668 <__aeabi_fadd+0x124>
 8000666:	e082      	b.n	800076e <__aeabi_fadd+0x22a>
 8000668:	2aff      	cmp	r2, #255	@ 0xff
 800066a:	d03a      	beq.n	80006e2 <__aeabi_fadd+0x19e>
 800066c:	000a      	movs	r2, r1
 800066e:	e7ab      	b.n	80005c8 <__aeabi_fadd+0x84>
 8000670:	0031      	movs	r1, r6
 8000672:	2020      	movs	r0, #32
 8000674:	40d1      	lsrs	r1, r2
 8000676:	1a82      	subs	r2, r0, r2
 8000678:	4096      	lsls	r6, r2
 800067a:	0032      	movs	r2, r6
 800067c:	1e50      	subs	r0, r2, #1
 800067e:	4182      	sbcs	r2, r0
 8000680:	430a      	orrs	r2, r1
 8000682:	189b      	adds	r3, r3, r2
 8000684:	015a      	lsls	r2, r3, #5
 8000686:	d5b9      	bpl.n	80005fc <__aeabi_fadd+0xb8>
 8000688:	1c6a      	adds	r2, r5, #1
 800068a:	2dfe      	cmp	r5, #254	@ 0xfe
 800068c:	d175      	bne.n	800077a <__aeabi_fadd+0x236>
 800068e:	20ff      	movs	r0, #255	@ 0xff
 8000690:	2300      	movs	r3, #0
 8000692:	e7c4      	b.n	800061e <__aeabi_fadd+0xda>
 8000694:	000c      	movs	r4, r1
 8000696:	0033      	movs	r3, r6
 8000698:	08db      	lsrs	r3, r3, #3
 800069a:	2aff      	cmp	r2, #255	@ 0xff
 800069c:	d146      	bne.n	800072c <__aeabi_fadd+0x1e8>
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0f5      	beq.n	800068e <__aeabi_fadd+0x14a>
 80006a2:	2280      	movs	r2, #128	@ 0x80
 80006a4:	03d2      	lsls	r2, r2, #15
 80006a6:	4313      	orrs	r3, r2
 80006a8:	025b      	lsls	r3, r3, #9
 80006aa:	20ff      	movs	r0, #255	@ 0xff
 80006ac:	0a5b      	lsrs	r3, r3, #9
 80006ae:	e7b6      	b.n	800061e <__aeabi_fadd+0xda>
 80006b0:	019f      	lsls	r7, r3, #6
 80006b2:	09bf      	lsrs	r7, r7, #6
 80006b4:	0038      	movs	r0, r7
 80006b6:	f002 fdcd 	bl	8003254 <__clzsi2>
 80006ba:	3805      	subs	r0, #5
 80006bc:	4087      	lsls	r7, r0
 80006be:	4285      	cmp	r5, r0
 80006c0:	dc24      	bgt.n	800070c <__aeabi_fadd+0x1c8>
 80006c2:	003b      	movs	r3, r7
 80006c4:	2120      	movs	r1, #32
 80006c6:	1b42      	subs	r2, r0, r5
 80006c8:	3201      	adds	r2, #1
 80006ca:	40d3      	lsrs	r3, r2
 80006cc:	1a8a      	subs	r2, r1, r2
 80006ce:	4097      	lsls	r7, r2
 80006d0:	1e7a      	subs	r2, r7, #1
 80006d2:	4197      	sbcs	r7, r2
 80006d4:	2200      	movs	r2, #0
 80006d6:	433b      	orrs	r3, r7
 80006d8:	0759      	lsls	r1, r3, #29
 80006da:	d193      	bne.n	8000604 <__aeabi_fadd+0xc0>
 80006dc:	e797      	b.n	800060e <__aeabi_fadd+0xca>
 80006de:	000c      	movs	r4, r1
 80006e0:	0033      	movs	r3, r6
 80006e2:	08db      	lsrs	r3, r3, #3
 80006e4:	e7db      	b.n	800069e <__aeabi_fadd+0x15a>
 80006e6:	2a00      	cmp	r2, #0
 80006e8:	d014      	beq.n	8000714 <__aeabi_fadd+0x1d0>
 80006ea:	1b42      	subs	r2, r0, r5
 80006ec:	2d00      	cmp	r5, #0
 80006ee:	d14b      	bne.n	8000788 <__aeabi_fadd+0x244>
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0d0      	beq.n	8000696 <__aeabi_fadd+0x152>
 80006f4:	1e51      	subs	r1, r2, #1
 80006f6:	2a01      	cmp	r2, #1
 80006f8:	d100      	bne.n	80006fc <__aeabi_fadd+0x1b8>
 80006fa:	e09e      	b.n	800083a <__aeabi_fadd+0x2f6>
 80006fc:	2aff      	cmp	r2, #255	@ 0xff
 80006fe:	d0ef      	beq.n	80006e0 <__aeabi_fadd+0x19c>
 8000700:	000a      	movs	r2, r1
 8000702:	2a1b      	cmp	r2, #27
 8000704:	dd5f      	ble.n	80007c6 <__aeabi_fadd+0x282>
 8000706:	0002      	movs	r2, r0
 8000708:	1c73      	adds	r3, r6, #1
 800070a:	e77b      	b.n	8000604 <__aeabi_fadd+0xc0>
 800070c:	4b50      	ldr	r3, [pc, #320]	@ (8000850 <__aeabi_fadd+0x30c>)
 800070e:	1a2a      	subs	r2, r5, r0
 8000710:	403b      	ands	r3, r7
 8000712:	e7e1      	b.n	80006d8 <__aeabi_fadd+0x194>
 8000714:	21fe      	movs	r1, #254	@ 0xfe
 8000716:	1c6a      	adds	r2, r5, #1
 8000718:	4211      	tst	r1, r2
 800071a:	d13b      	bne.n	8000794 <__aeabi_fadd+0x250>
 800071c:	2d00      	cmp	r5, #0
 800071e:	d15d      	bne.n	80007dc <__aeabi_fadd+0x298>
 8000720:	2b00      	cmp	r3, #0
 8000722:	d07f      	beq.n	8000824 <__aeabi_fadd+0x2e0>
 8000724:	2e00      	cmp	r6, #0
 8000726:	d17f      	bne.n	8000828 <__aeabi_fadd+0x2e4>
 8000728:	2200      	movs	r2, #0
 800072a:	08db      	lsrs	r3, r3, #3
 800072c:	025b      	lsls	r3, r3, #9
 800072e:	0a5b      	lsrs	r3, r3, #9
 8000730:	b2d0      	uxtb	r0, r2
 8000732:	e774      	b.n	800061e <__aeabi_fadd+0xda>
 8000734:	28ff      	cmp	r0, #255	@ 0xff
 8000736:	d0d2      	beq.n	80006de <__aeabi_fadd+0x19a>
 8000738:	2480      	movs	r4, #128	@ 0x80
 800073a:	04e4      	lsls	r4, r4, #19
 800073c:	4323      	orrs	r3, r4
 800073e:	2401      	movs	r4, #1
 8000740:	2a1b      	cmp	r2, #27
 8000742:	dc07      	bgt.n	8000754 <__aeabi_fadd+0x210>
 8000744:	001c      	movs	r4, r3
 8000746:	2520      	movs	r5, #32
 8000748:	40d4      	lsrs	r4, r2
 800074a:	1aaa      	subs	r2, r5, r2
 800074c:	4093      	lsls	r3, r2
 800074e:	1e5a      	subs	r2, r3, #1
 8000750:	4193      	sbcs	r3, r2
 8000752:	431c      	orrs	r4, r3
 8000754:	1b33      	subs	r3, r6, r4
 8000756:	0005      	movs	r5, r0
 8000758:	000c      	movs	r4, r1
 800075a:	e74d      	b.n	80005f8 <__aeabi_fadd+0xb4>
 800075c:	1b9f      	subs	r7, r3, r6
 800075e:	017a      	lsls	r2, r7, #5
 8000760:	d422      	bmi.n	80007a8 <__aeabi_fadd+0x264>
 8000762:	2f00      	cmp	r7, #0
 8000764:	d1a6      	bne.n	80006b4 <__aeabi_fadd+0x170>
 8000766:	2400      	movs	r4, #0
 8000768:	2000      	movs	r0, #0
 800076a:	2300      	movs	r3, #0
 800076c:	e757      	b.n	800061e <__aeabi_fadd+0xda>
 800076e:	199b      	adds	r3, r3, r6
 8000770:	2501      	movs	r5, #1
 8000772:	3201      	adds	r2, #1
 8000774:	0159      	lsls	r1, r3, #5
 8000776:	d400      	bmi.n	800077a <__aeabi_fadd+0x236>
 8000778:	e740      	b.n	80005fc <__aeabi_fadd+0xb8>
 800077a:	2101      	movs	r1, #1
 800077c:	4835      	ldr	r0, [pc, #212]	@ (8000854 <__aeabi_fadd+0x310>)
 800077e:	4019      	ands	r1, r3
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	4003      	ands	r3, r0
 8000784:	430b      	orrs	r3, r1
 8000786:	e7a7      	b.n	80006d8 <__aeabi_fadd+0x194>
 8000788:	28ff      	cmp	r0, #255	@ 0xff
 800078a:	d0a9      	beq.n	80006e0 <__aeabi_fadd+0x19c>
 800078c:	2180      	movs	r1, #128	@ 0x80
 800078e:	04c9      	lsls	r1, r1, #19
 8000790:	430b      	orrs	r3, r1
 8000792:	e7b6      	b.n	8000702 <__aeabi_fadd+0x1be>
 8000794:	2aff      	cmp	r2, #255	@ 0xff
 8000796:	d100      	bne.n	800079a <__aeabi_fadd+0x256>
 8000798:	e779      	b.n	800068e <__aeabi_fadd+0x14a>
 800079a:	199b      	adds	r3, r3, r6
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	0759      	lsls	r1, r3, #29
 80007a0:	d000      	beq.n	80007a4 <__aeabi_fadd+0x260>
 80007a2:	e72f      	b.n	8000604 <__aeabi_fadd+0xc0>
 80007a4:	08db      	lsrs	r3, r3, #3
 80007a6:	e7c1      	b.n	800072c <__aeabi_fadd+0x1e8>
 80007a8:	000c      	movs	r4, r1
 80007aa:	1af7      	subs	r7, r6, r3
 80007ac:	e782      	b.n	80006b4 <__aeabi_fadd+0x170>
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d12c      	bne.n	800080c <__aeabi_fadd+0x2c8>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d193      	bne.n	80006de <__aeabi_fadd+0x19a>
 80007b6:	2380      	movs	r3, #128	@ 0x80
 80007b8:	2400      	movs	r4, #0
 80007ba:	20ff      	movs	r0, #255	@ 0xff
 80007bc:	03db      	lsls	r3, r3, #15
 80007be:	e72e      	b.n	800061e <__aeabi_fadd+0xda>
 80007c0:	2501      	movs	r5, #1
 80007c2:	1b9b      	subs	r3, r3, r6
 80007c4:	e718      	b.n	80005f8 <__aeabi_fadd+0xb4>
 80007c6:	0019      	movs	r1, r3
 80007c8:	2520      	movs	r5, #32
 80007ca:	40d1      	lsrs	r1, r2
 80007cc:	1aaa      	subs	r2, r5, r2
 80007ce:	4093      	lsls	r3, r2
 80007d0:	1e5a      	subs	r2, r3, #1
 80007d2:	4193      	sbcs	r3, r2
 80007d4:	430b      	orrs	r3, r1
 80007d6:	0005      	movs	r5, r0
 80007d8:	199b      	adds	r3, r3, r6
 80007da:	e753      	b.n	8000684 <__aeabi_fadd+0x140>
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d100      	bne.n	80007e2 <__aeabi_fadd+0x29e>
 80007e0:	e77e      	b.n	80006e0 <__aeabi_fadd+0x19c>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fadd+0x2a4>
 80007e6:	e77c      	b.n	80006e2 <__aeabi_fadd+0x19e>
 80007e8:	2280      	movs	r2, #128	@ 0x80
 80007ea:	03d2      	lsls	r2, r2, #15
 80007ec:	4591      	cmp	r9, r2
 80007ee:	d302      	bcc.n	80007f6 <__aeabi_fadd+0x2b2>
 80007f0:	4594      	cmp	ip, r2
 80007f2:	d200      	bcs.n	80007f6 <__aeabi_fadd+0x2b2>
 80007f4:	0033      	movs	r3, r6
 80007f6:	08db      	lsrs	r3, r3, #3
 80007f8:	e753      	b.n	80006a2 <__aeabi_fadd+0x15e>
 80007fa:	000c      	movs	r4, r1
 80007fc:	1af3      	subs	r3, r6, r3
 80007fe:	3501      	adds	r5, #1
 8000800:	e6fa      	b.n	80005f8 <__aeabi_fadd+0xb4>
 8000802:	2e00      	cmp	r6, #0
 8000804:	d0af      	beq.n	8000766 <__aeabi_fadd+0x222>
 8000806:	000c      	movs	r4, r1
 8000808:	0033      	movs	r3, r6
 800080a:	e78d      	b.n	8000728 <__aeabi_fadd+0x1e4>
 800080c:	2e00      	cmp	r6, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fadd+0x2ce>
 8000810:	e767      	b.n	80006e2 <__aeabi_fadd+0x19e>
 8000812:	2280      	movs	r2, #128	@ 0x80
 8000814:	03d2      	lsls	r2, r2, #15
 8000816:	4591      	cmp	r9, r2
 8000818:	d3ed      	bcc.n	80007f6 <__aeabi_fadd+0x2b2>
 800081a:	4594      	cmp	ip, r2
 800081c:	d2eb      	bcs.n	80007f6 <__aeabi_fadd+0x2b2>
 800081e:	000c      	movs	r4, r1
 8000820:	0033      	movs	r3, r6
 8000822:	e7e8      	b.n	80007f6 <__aeabi_fadd+0x2b2>
 8000824:	0033      	movs	r3, r6
 8000826:	e77f      	b.n	8000728 <__aeabi_fadd+0x1e4>
 8000828:	199b      	adds	r3, r3, r6
 800082a:	2200      	movs	r2, #0
 800082c:	0159      	lsls	r1, r3, #5
 800082e:	d5b9      	bpl.n	80007a4 <__aeabi_fadd+0x260>
 8000830:	4a07      	ldr	r2, [pc, #28]	@ (8000850 <__aeabi_fadd+0x30c>)
 8000832:	4013      	ands	r3, r2
 8000834:	08db      	lsrs	r3, r3, #3
 8000836:	2201      	movs	r2, #1
 8000838:	e778      	b.n	800072c <__aeabi_fadd+0x1e8>
 800083a:	199b      	adds	r3, r3, r6
 800083c:	3201      	adds	r2, #1
 800083e:	3501      	adds	r5, #1
 8000840:	0159      	lsls	r1, r3, #5
 8000842:	d49a      	bmi.n	800077a <__aeabi_fadd+0x236>
 8000844:	e6da      	b.n	80005fc <__aeabi_fadd+0xb8>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d08d      	beq.n	8000766 <__aeabi_fadd+0x222>
 800084a:	08db      	lsrs	r3, r3, #3
 800084c:	e76e      	b.n	800072c <__aeabi_fadd+0x1e8>
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	fbffffff 	.word	0xfbffffff
 8000854:	7dffffff 	.word	0x7dffffff

08000858 <__aeabi_fdiv>:
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	464f      	mov	r7, r9
 800085c:	4646      	mov	r6, r8
 800085e:	46d6      	mov	lr, sl
 8000860:	0244      	lsls	r4, r0, #9
 8000862:	b5c0      	push	{r6, r7, lr}
 8000864:	0047      	lsls	r7, r0, #1
 8000866:	1c0e      	adds	r6, r1, #0
 8000868:	0a64      	lsrs	r4, r4, #9
 800086a:	0e3f      	lsrs	r7, r7, #24
 800086c:	0fc5      	lsrs	r5, r0, #31
 800086e:	2f00      	cmp	r7, #0
 8000870:	d03c      	beq.n	80008ec <__aeabi_fdiv+0x94>
 8000872:	2fff      	cmp	r7, #255	@ 0xff
 8000874:	d042      	beq.n	80008fc <__aeabi_fdiv+0xa4>
 8000876:	2300      	movs	r3, #0
 8000878:	2280      	movs	r2, #128	@ 0x80
 800087a:	4699      	mov	r9, r3
 800087c:	469a      	mov	sl, r3
 800087e:	00e4      	lsls	r4, r4, #3
 8000880:	04d2      	lsls	r2, r2, #19
 8000882:	4314      	orrs	r4, r2
 8000884:	3f7f      	subs	r7, #127	@ 0x7f
 8000886:	0273      	lsls	r3, r6, #9
 8000888:	0a5b      	lsrs	r3, r3, #9
 800088a:	4698      	mov	r8, r3
 800088c:	0073      	lsls	r3, r6, #1
 800088e:	0e1b      	lsrs	r3, r3, #24
 8000890:	0ff6      	lsrs	r6, r6, #31
 8000892:	2b00      	cmp	r3, #0
 8000894:	d01b      	beq.n	80008ce <__aeabi_fdiv+0x76>
 8000896:	2bff      	cmp	r3, #255	@ 0xff
 8000898:	d013      	beq.n	80008c2 <__aeabi_fdiv+0x6a>
 800089a:	4642      	mov	r2, r8
 800089c:	2180      	movs	r1, #128	@ 0x80
 800089e:	00d2      	lsls	r2, r2, #3
 80008a0:	04c9      	lsls	r1, r1, #19
 80008a2:	4311      	orrs	r1, r2
 80008a4:	4688      	mov	r8, r1
 80008a6:	2000      	movs	r0, #0
 80008a8:	3b7f      	subs	r3, #127	@ 0x7f
 80008aa:	0029      	movs	r1, r5
 80008ac:	1aff      	subs	r7, r7, r3
 80008ae:	464b      	mov	r3, r9
 80008b0:	4071      	eors	r1, r6
 80008b2:	b2c9      	uxtb	r1, r1
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d900      	bls.n	80008ba <__aeabi_fdiv+0x62>
 80008b8:	e0b5      	b.n	8000a26 <__aeabi_fdiv+0x1ce>
 80008ba:	4a74      	ldr	r2, [pc, #464]	@ (8000a8c <__aeabi_fdiv+0x234>)
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	58d3      	ldr	r3, [r2, r3]
 80008c0:	469f      	mov	pc, r3
 80008c2:	4643      	mov	r3, r8
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d13f      	bne.n	8000948 <__aeabi_fdiv+0xf0>
 80008c8:	3fff      	subs	r7, #255	@ 0xff
 80008ca:	3302      	adds	r3, #2
 80008cc:	e003      	b.n	80008d6 <__aeabi_fdiv+0x7e>
 80008ce:	4643      	mov	r3, r8
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d12d      	bne.n	8000930 <__aeabi_fdiv+0xd8>
 80008d4:	2301      	movs	r3, #1
 80008d6:	0029      	movs	r1, r5
 80008d8:	464a      	mov	r2, r9
 80008da:	4071      	eors	r1, r6
 80008dc:	b2c9      	uxtb	r1, r1
 80008de:	431a      	orrs	r2, r3
 80008e0:	2a0e      	cmp	r2, #14
 80008e2:	d838      	bhi.n	8000956 <__aeabi_fdiv+0xfe>
 80008e4:	486a      	ldr	r0, [pc, #424]	@ (8000a90 <__aeabi_fdiv+0x238>)
 80008e6:	0092      	lsls	r2, r2, #2
 80008e8:	5882      	ldr	r2, [r0, r2]
 80008ea:	4697      	mov	pc, r2
 80008ec:	2c00      	cmp	r4, #0
 80008ee:	d113      	bne.n	8000918 <__aeabi_fdiv+0xc0>
 80008f0:	2304      	movs	r3, #4
 80008f2:	4699      	mov	r9, r3
 80008f4:	3b03      	subs	r3, #3
 80008f6:	2700      	movs	r7, #0
 80008f8:	469a      	mov	sl, r3
 80008fa:	e7c4      	b.n	8000886 <__aeabi_fdiv+0x2e>
 80008fc:	2c00      	cmp	r4, #0
 80008fe:	d105      	bne.n	800090c <__aeabi_fdiv+0xb4>
 8000900:	2308      	movs	r3, #8
 8000902:	4699      	mov	r9, r3
 8000904:	3b06      	subs	r3, #6
 8000906:	27ff      	movs	r7, #255	@ 0xff
 8000908:	469a      	mov	sl, r3
 800090a:	e7bc      	b.n	8000886 <__aeabi_fdiv+0x2e>
 800090c:	230c      	movs	r3, #12
 800090e:	4699      	mov	r9, r3
 8000910:	3b09      	subs	r3, #9
 8000912:	27ff      	movs	r7, #255	@ 0xff
 8000914:	469a      	mov	sl, r3
 8000916:	e7b6      	b.n	8000886 <__aeabi_fdiv+0x2e>
 8000918:	0020      	movs	r0, r4
 800091a:	f002 fc9b 	bl	8003254 <__clzsi2>
 800091e:	2776      	movs	r7, #118	@ 0x76
 8000920:	1f43      	subs	r3, r0, #5
 8000922:	409c      	lsls	r4, r3
 8000924:	2300      	movs	r3, #0
 8000926:	427f      	negs	r7, r7
 8000928:	4699      	mov	r9, r3
 800092a:	469a      	mov	sl, r3
 800092c:	1a3f      	subs	r7, r7, r0
 800092e:	e7aa      	b.n	8000886 <__aeabi_fdiv+0x2e>
 8000930:	4640      	mov	r0, r8
 8000932:	f002 fc8f 	bl	8003254 <__clzsi2>
 8000936:	4642      	mov	r2, r8
 8000938:	1f43      	subs	r3, r0, #5
 800093a:	409a      	lsls	r2, r3
 800093c:	2376      	movs	r3, #118	@ 0x76
 800093e:	425b      	negs	r3, r3
 8000940:	1a1b      	subs	r3, r3, r0
 8000942:	4690      	mov	r8, r2
 8000944:	2000      	movs	r0, #0
 8000946:	e7b0      	b.n	80008aa <__aeabi_fdiv+0x52>
 8000948:	2303      	movs	r3, #3
 800094a:	464a      	mov	r2, r9
 800094c:	431a      	orrs	r2, r3
 800094e:	4691      	mov	r9, r2
 8000950:	2003      	movs	r0, #3
 8000952:	33fc      	adds	r3, #252	@ 0xfc
 8000954:	e7a9      	b.n	80008aa <__aeabi_fdiv+0x52>
 8000956:	000d      	movs	r5, r1
 8000958:	20ff      	movs	r0, #255	@ 0xff
 800095a:	2200      	movs	r2, #0
 800095c:	05c0      	lsls	r0, r0, #23
 800095e:	07ed      	lsls	r5, r5, #31
 8000960:	4310      	orrs	r0, r2
 8000962:	4328      	orrs	r0, r5
 8000964:	bce0      	pop	{r5, r6, r7}
 8000966:	46ba      	mov	sl, r7
 8000968:	46b1      	mov	r9, r6
 800096a:	46a8      	mov	r8, r5
 800096c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096e:	000d      	movs	r5, r1
 8000970:	2000      	movs	r0, #0
 8000972:	2200      	movs	r2, #0
 8000974:	e7f2      	b.n	800095c <__aeabi_fdiv+0x104>
 8000976:	4653      	mov	r3, sl
 8000978:	2b02      	cmp	r3, #2
 800097a:	d0ed      	beq.n	8000958 <__aeabi_fdiv+0x100>
 800097c:	2b03      	cmp	r3, #3
 800097e:	d033      	beq.n	80009e8 <__aeabi_fdiv+0x190>
 8000980:	46a0      	mov	r8, r4
 8000982:	2b01      	cmp	r3, #1
 8000984:	d105      	bne.n	8000992 <__aeabi_fdiv+0x13a>
 8000986:	2000      	movs	r0, #0
 8000988:	2200      	movs	r2, #0
 800098a:	e7e7      	b.n	800095c <__aeabi_fdiv+0x104>
 800098c:	0035      	movs	r5, r6
 800098e:	2803      	cmp	r0, #3
 8000990:	d07a      	beq.n	8000a88 <__aeabi_fdiv+0x230>
 8000992:	003b      	movs	r3, r7
 8000994:	337f      	adds	r3, #127	@ 0x7f
 8000996:	2b00      	cmp	r3, #0
 8000998:	dd2d      	ble.n	80009f6 <__aeabi_fdiv+0x19e>
 800099a:	4642      	mov	r2, r8
 800099c:	0752      	lsls	r2, r2, #29
 800099e:	d007      	beq.n	80009b0 <__aeabi_fdiv+0x158>
 80009a0:	220f      	movs	r2, #15
 80009a2:	4641      	mov	r1, r8
 80009a4:	400a      	ands	r2, r1
 80009a6:	2a04      	cmp	r2, #4
 80009a8:	d002      	beq.n	80009b0 <__aeabi_fdiv+0x158>
 80009aa:	2204      	movs	r2, #4
 80009ac:	4694      	mov	ip, r2
 80009ae:	44e0      	add	r8, ip
 80009b0:	4642      	mov	r2, r8
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	d505      	bpl.n	80009c2 <__aeabi_fdiv+0x16a>
 80009b6:	4642      	mov	r2, r8
 80009b8:	4b36      	ldr	r3, [pc, #216]	@ (8000a94 <__aeabi_fdiv+0x23c>)
 80009ba:	401a      	ands	r2, r3
 80009bc:	003b      	movs	r3, r7
 80009be:	4690      	mov	r8, r2
 80009c0:	3380      	adds	r3, #128	@ 0x80
 80009c2:	2bfe      	cmp	r3, #254	@ 0xfe
 80009c4:	dcc8      	bgt.n	8000958 <__aeabi_fdiv+0x100>
 80009c6:	4642      	mov	r2, r8
 80009c8:	0192      	lsls	r2, r2, #6
 80009ca:	0a52      	lsrs	r2, r2, #9
 80009cc:	b2d8      	uxtb	r0, r3
 80009ce:	e7c5      	b.n	800095c <__aeabi_fdiv+0x104>
 80009d0:	2280      	movs	r2, #128	@ 0x80
 80009d2:	2500      	movs	r5, #0
 80009d4:	20ff      	movs	r0, #255	@ 0xff
 80009d6:	03d2      	lsls	r2, r2, #15
 80009d8:	e7c0      	b.n	800095c <__aeabi_fdiv+0x104>
 80009da:	2280      	movs	r2, #128	@ 0x80
 80009dc:	03d2      	lsls	r2, r2, #15
 80009de:	4214      	tst	r4, r2
 80009e0:	d002      	beq.n	80009e8 <__aeabi_fdiv+0x190>
 80009e2:	4643      	mov	r3, r8
 80009e4:	4213      	tst	r3, r2
 80009e6:	d049      	beq.n	8000a7c <__aeabi_fdiv+0x224>
 80009e8:	2280      	movs	r2, #128	@ 0x80
 80009ea:	03d2      	lsls	r2, r2, #15
 80009ec:	4322      	orrs	r2, r4
 80009ee:	0252      	lsls	r2, r2, #9
 80009f0:	20ff      	movs	r0, #255	@ 0xff
 80009f2:	0a52      	lsrs	r2, r2, #9
 80009f4:	e7b2      	b.n	800095c <__aeabi_fdiv+0x104>
 80009f6:	2201      	movs	r2, #1
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	2b1b      	cmp	r3, #27
 80009fc:	dcc3      	bgt.n	8000986 <__aeabi_fdiv+0x12e>
 80009fe:	4642      	mov	r2, r8
 8000a00:	40da      	lsrs	r2, r3
 8000a02:	4643      	mov	r3, r8
 8000a04:	379e      	adds	r7, #158	@ 0x9e
 8000a06:	40bb      	lsls	r3, r7
 8000a08:	1e59      	subs	r1, r3, #1
 8000a0a:	418b      	sbcs	r3, r1
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	0753      	lsls	r3, r2, #29
 8000a10:	d004      	beq.n	8000a1c <__aeabi_fdiv+0x1c4>
 8000a12:	230f      	movs	r3, #15
 8000a14:	4013      	ands	r3, r2
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fdiv+0x1c4>
 8000a1a:	3204      	adds	r2, #4
 8000a1c:	0153      	lsls	r3, r2, #5
 8000a1e:	d529      	bpl.n	8000a74 <__aeabi_fdiv+0x21c>
 8000a20:	2001      	movs	r0, #1
 8000a22:	2200      	movs	r2, #0
 8000a24:	e79a      	b.n	800095c <__aeabi_fdiv+0x104>
 8000a26:	4642      	mov	r2, r8
 8000a28:	0163      	lsls	r3, r4, #5
 8000a2a:	0155      	lsls	r5, r2, #5
 8000a2c:	42ab      	cmp	r3, r5
 8000a2e:	d215      	bcs.n	8000a5c <__aeabi_fdiv+0x204>
 8000a30:	201b      	movs	r0, #27
 8000a32:	2200      	movs	r2, #0
 8000a34:	3f01      	subs	r7, #1
 8000a36:	2601      	movs	r6, #1
 8000a38:	001c      	movs	r4, r3
 8000a3a:	0052      	lsls	r2, r2, #1
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	2c00      	cmp	r4, #0
 8000a40:	db01      	blt.n	8000a46 <__aeabi_fdiv+0x1ee>
 8000a42:	429d      	cmp	r5, r3
 8000a44:	d801      	bhi.n	8000a4a <__aeabi_fdiv+0x1f2>
 8000a46:	1b5b      	subs	r3, r3, r5
 8000a48:	4332      	orrs	r2, r6
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d1f3      	bne.n	8000a38 <__aeabi_fdiv+0x1e0>
 8000a50:	1e58      	subs	r0, r3, #1
 8000a52:	4183      	sbcs	r3, r0
 8000a54:	4313      	orrs	r3, r2
 8000a56:	4698      	mov	r8, r3
 8000a58:	000d      	movs	r5, r1
 8000a5a:	e79a      	b.n	8000992 <__aeabi_fdiv+0x13a>
 8000a5c:	201a      	movs	r0, #26
 8000a5e:	2201      	movs	r2, #1
 8000a60:	1b5b      	subs	r3, r3, r5
 8000a62:	e7e8      	b.n	8000a36 <__aeabi_fdiv+0x1de>
 8000a64:	3b02      	subs	r3, #2
 8000a66:	425a      	negs	r2, r3
 8000a68:	4153      	adcs	r3, r2
 8000a6a:	425b      	negs	r3, r3
 8000a6c:	0035      	movs	r5, r6
 8000a6e:	2200      	movs	r2, #0
 8000a70:	b2d8      	uxtb	r0, r3
 8000a72:	e773      	b.n	800095c <__aeabi_fdiv+0x104>
 8000a74:	0192      	lsls	r2, r2, #6
 8000a76:	2000      	movs	r0, #0
 8000a78:	0a52      	lsrs	r2, r2, #9
 8000a7a:	e76f      	b.n	800095c <__aeabi_fdiv+0x104>
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	0252      	lsls	r2, r2, #9
 8000a80:	0035      	movs	r5, r6
 8000a82:	20ff      	movs	r0, #255	@ 0xff
 8000a84:	0a52      	lsrs	r2, r2, #9
 8000a86:	e769      	b.n	800095c <__aeabi_fdiv+0x104>
 8000a88:	4644      	mov	r4, r8
 8000a8a:	e7ad      	b.n	80009e8 <__aeabi_fdiv+0x190>
 8000a8c:	0800db10 	.word	0x0800db10
 8000a90:	0800db50 	.word	0x0800db50
 8000a94:	f7ffffff 	.word	0xf7ffffff

08000a98 <__eqsf2>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	0042      	lsls	r2, r0, #1
 8000a9c:	024e      	lsls	r6, r1, #9
 8000a9e:	004c      	lsls	r4, r1, #1
 8000aa0:	0245      	lsls	r5, r0, #9
 8000aa2:	0a6d      	lsrs	r5, r5, #9
 8000aa4:	0e12      	lsrs	r2, r2, #24
 8000aa6:	0fc3      	lsrs	r3, r0, #31
 8000aa8:	0a76      	lsrs	r6, r6, #9
 8000aaa:	0e24      	lsrs	r4, r4, #24
 8000aac:	0fc9      	lsrs	r1, r1, #31
 8000aae:	2aff      	cmp	r2, #255	@ 0xff
 8000ab0:	d010      	beq.n	8000ad4 <__eqsf2+0x3c>
 8000ab2:	2cff      	cmp	r4, #255	@ 0xff
 8000ab4:	d00c      	beq.n	8000ad0 <__eqsf2+0x38>
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	42a2      	cmp	r2, r4
 8000aba:	d10a      	bne.n	8000ad2 <__eqsf2+0x3a>
 8000abc:	42b5      	cmp	r5, r6
 8000abe:	d108      	bne.n	8000ad2 <__eqsf2+0x3a>
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	d00f      	beq.n	8000ae4 <__eqsf2+0x4c>
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	d104      	bne.n	8000ad2 <__eqsf2+0x3a>
 8000ac8:	0028      	movs	r0, r5
 8000aca:	1e43      	subs	r3, r0, #1
 8000acc:	4198      	sbcs	r0, r3
 8000ace:	e000      	b.n	8000ad2 <__eqsf2+0x3a>
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	bd70      	pop	{r4, r5, r6, pc}
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	2cff      	cmp	r4, #255	@ 0xff
 8000ad8:	d1fb      	bne.n	8000ad2 <__eqsf2+0x3a>
 8000ada:	4335      	orrs	r5, r6
 8000adc:	d1f9      	bne.n	8000ad2 <__eqsf2+0x3a>
 8000ade:	404b      	eors	r3, r1
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	e7f6      	b.n	8000ad2 <__eqsf2+0x3a>
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	e7f4      	b.n	8000ad2 <__eqsf2+0x3a>

08000ae8 <__gesf2>:
 8000ae8:	b530      	push	{r4, r5, lr}
 8000aea:	0042      	lsls	r2, r0, #1
 8000aec:	0244      	lsls	r4, r0, #9
 8000aee:	024d      	lsls	r5, r1, #9
 8000af0:	0fc3      	lsrs	r3, r0, #31
 8000af2:	0048      	lsls	r0, r1, #1
 8000af4:	0a64      	lsrs	r4, r4, #9
 8000af6:	0e12      	lsrs	r2, r2, #24
 8000af8:	0a6d      	lsrs	r5, r5, #9
 8000afa:	0e00      	lsrs	r0, r0, #24
 8000afc:	0fc9      	lsrs	r1, r1, #31
 8000afe:	2aff      	cmp	r2, #255	@ 0xff
 8000b00:	d019      	beq.n	8000b36 <__gesf2+0x4e>
 8000b02:	28ff      	cmp	r0, #255	@ 0xff
 8000b04:	d00b      	beq.n	8000b1e <__gesf2+0x36>
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	d11e      	bne.n	8000b48 <__gesf2+0x60>
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	d10b      	bne.n	8000b26 <__gesf2+0x3e>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d027      	beq.n	8000b62 <__gesf2+0x7a>
 8000b12:	2c00      	cmp	r4, #0
 8000b14:	d134      	bne.n	8000b80 <__gesf2+0x98>
 8000b16:	2900      	cmp	r1, #0
 8000b18:	d02f      	beq.n	8000b7a <__gesf2+0x92>
 8000b1a:	0008      	movs	r0, r1
 8000b1c:	bd30      	pop	{r4, r5, pc}
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d128      	bne.n	8000b74 <__gesf2+0x8c>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d101      	bne.n	8000b2a <__gesf2+0x42>
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	d0f5      	beq.n	8000b16 <__gesf2+0x2e>
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d107      	bne.n	8000b3e <__gesf2+0x56>
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d023      	beq.n	8000b7a <__gesf2+0x92>
 8000b32:	0018      	movs	r0, r3
 8000b34:	e7f2      	b.n	8000b1c <__gesf2+0x34>
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d11c      	bne.n	8000b74 <__gesf2+0x8c>
 8000b3a:	28ff      	cmp	r0, #255	@ 0xff
 8000b3c:	d014      	beq.n	8000b68 <__gesf2+0x80>
 8000b3e:	1e58      	subs	r0, r3, #1
 8000b40:	2302      	movs	r3, #2
 8000b42:	4018      	ands	r0, r3
 8000b44:	3801      	subs	r0, #1
 8000b46:	e7e9      	b.n	8000b1c <__gesf2+0x34>
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	d0f8      	beq.n	8000b3e <__gesf2+0x56>
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	d1f6      	bne.n	8000b3e <__gesf2+0x56>
 8000b50:	4282      	cmp	r2, r0
 8000b52:	dcf4      	bgt.n	8000b3e <__gesf2+0x56>
 8000b54:	dbeb      	blt.n	8000b2e <__gesf2+0x46>
 8000b56:	42ac      	cmp	r4, r5
 8000b58:	d8f1      	bhi.n	8000b3e <__gesf2+0x56>
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	42ac      	cmp	r4, r5
 8000b5e:	d2dd      	bcs.n	8000b1c <__gesf2+0x34>
 8000b60:	e7e5      	b.n	8000b2e <__gesf2+0x46>
 8000b62:	2c00      	cmp	r4, #0
 8000b64:	d0da      	beq.n	8000b1c <__gesf2+0x34>
 8000b66:	e7ea      	b.n	8000b3e <__gesf2+0x56>
 8000b68:	2d00      	cmp	r5, #0
 8000b6a:	d103      	bne.n	8000b74 <__gesf2+0x8c>
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d1e6      	bne.n	8000b3e <__gesf2+0x56>
 8000b70:	2000      	movs	r0, #0
 8000b72:	e7d3      	b.n	8000b1c <__gesf2+0x34>
 8000b74:	2002      	movs	r0, #2
 8000b76:	4240      	negs	r0, r0
 8000b78:	e7d0      	b.n	8000b1c <__gesf2+0x34>
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4240      	negs	r0, r0
 8000b7e:	e7cd      	b.n	8000b1c <__gesf2+0x34>
 8000b80:	428b      	cmp	r3, r1
 8000b82:	d0e8      	beq.n	8000b56 <__gesf2+0x6e>
 8000b84:	e7db      	b.n	8000b3e <__gesf2+0x56>
 8000b86:	46c0      	nop			@ (mov r8, r8)

08000b88 <__lesf2>:
 8000b88:	b530      	push	{r4, r5, lr}
 8000b8a:	0042      	lsls	r2, r0, #1
 8000b8c:	0244      	lsls	r4, r0, #9
 8000b8e:	024d      	lsls	r5, r1, #9
 8000b90:	0fc3      	lsrs	r3, r0, #31
 8000b92:	0048      	lsls	r0, r1, #1
 8000b94:	0a64      	lsrs	r4, r4, #9
 8000b96:	0e12      	lsrs	r2, r2, #24
 8000b98:	0a6d      	lsrs	r5, r5, #9
 8000b9a:	0e00      	lsrs	r0, r0, #24
 8000b9c:	0fc9      	lsrs	r1, r1, #31
 8000b9e:	2aff      	cmp	r2, #255	@ 0xff
 8000ba0:	d01a      	beq.n	8000bd8 <__lesf2+0x50>
 8000ba2:	28ff      	cmp	r0, #255	@ 0xff
 8000ba4:	d00e      	beq.n	8000bc4 <__lesf2+0x3c>
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	d11e      	bne.n	8000be8 <__lesf2+0x60>
 8000baa:	2800      	cmp	r0, #0
 8000bac:	d10e      	bne.n	8000bcc <__lesf2+0x44>
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	d02a      	beq.n	8000c08 <__lesf2+0x80>
 8000bb2:	2c00      	cmp	r4, #0
 8000bb4:	d00c      	beq.n	8000bd0 <__lesf2+0x48>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d01d      	beq.n	8000bf6 <__lesf2+0x6e>
 8000bba:	1e58      	subs	r0, r3, #1
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	4018      	ands	r0, r3
 8000bc0:	3801      	subs	r0, #1
 8000bc2:	e010      	b.n	8000be6 <__lesf2+0x5e>
 8000bc4:	2d00      	cmp	r5, #0
 8000bc6:	d10d      	bne.n	8000be4 <__lesf2+0x5c>
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	d120      	bne.n	8000c0e <__lesf2+0x86>
 8000bcc:	2c00      	cmp	r4, #0
 8000bce:	d11e      	bne.n	8000c0e <__lesf2+0x86>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	d023      	beq.n	8000c1c <__lesf2+0x94>
 8000bd4:	0008      	movs	r0, r1
 8000bd6:	e006      	b.n	8000be6 <__lesf2+0x5e>
 8000bd8:	2c00      	cmp	r4, #0
 8000bda:	d103      	bne.n	8000be4 <__lesf2+0x5c>
 8000bdc:	28ff      	cmp	r0, #255	@ 0xff
 8000bde:	d1ec      	bne.n	8000bba <__lesf2+0x32>
 8000be0:	2d00      	cmp	r5, #0
 8000be2:	d017      	beq.n	8000c14 <__lesf2+0x8c>
 8000be4:	2002      	movs	r0, #2
 8000be6:	bd30      	pop	{r4, r5, pc}
 8000be8:	2800      	cmp	r0, #0
 8000bea:	d0e6      	beq.n	8000bba <__lesf2+0x32>
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d1e4      	bne.n	8000bba <__lesf2+0x32>
 8000bf0:	4282      	cmp	r2, r0
 8000bf2:	dce2      	bgt.n	8000bba <__lesf2+0x32>
 8000bf4:	db04      	blt.n	8000c00 <__lesf2+0x78>
 8000bf6:	42ac      	cmp	r4, r5
 8000bf8:	d8df      	bhi.n	8000bba <__lesf2+0x32>
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	42ac      	cmp	r4, r5
 8000bfe:	d2f2      	bcs.n	8000be6 <__lesf2+0x5e>
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d00b      	beq.n	8000c1c <__lesf2+0x94>
 8000c04:	0018      	movs	r0, r3
 8000c06:	e7ee      	b.n	8000be6 <__lesf2+0x5e>
 8000c08:	2c00      	cmp	r4, #0
 8000c0a:	d0ec      	beq.n	8000be6 <__lesf2+0x5e>
 8000c0c:	e7d5      	b.n	8000bba <__lesf2+0x32>
 8000c0e:	428b      	cmp	r3, r1
 8000c10:	d1d3      	bne.n	8000bba <__lesf2+0x32>
 8000c12:	e7f5      	b.n	8000c00 <__lesf2+0x78>
 8000c14:	2000      	movs	r0, #0
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d0e5      	beq.n	8000be6 <__lesf2+0x5e>
 8000c1a:	e7ce      	b.n	8000bba <__lesf2+0x32>
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	4240      	negs	r0, r0
 8000c20:	e7e1      	b.n	8000be6 <__lesf2+0x5e>
 8000c22:	46c0      	nop			@ (mov r8, r8)

08000c24 <__aeabi_fmul>:
 8000c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c26:	464f      	mov	r7, r9
 8000c28:	4646      	mov	r6, r8
 8000c2a:	46d6      	mov	lr, sl
 8000c2c:	0243      	lsls	r3, r0, #9
 8000c2e:	0a5b      	lsrs	r3, r3, #9
 8000c30:	0045      	lsls	r5, r0, #1
 8000c32:	b5c0      	push	{r6, r7, lr}
 8000c34:	4699      	mov	r9, r3
 8000c36:	1c0f      	adds	r7, r1, #0
 8000c38:	0e2d      	lsrs	r5, r5, #24
 8000c3a:	0fc6      	lsrs	r6, r0, #31
 8000c3c:	2d00      	cmp	r5, #0
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_fmul+0x1e>
 8000c40:	e088      	b.n	8000d54 <__aeabi_fmul+0x130>
 8000c42:	2dff      	cmp	r5, #255	@ 0xff
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fmul+0x24>
 8000c46:	e08d      	b.n	8000d64 <__aeabi_fmul+0x140>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	04d2      	lsls	r2, r2, #19
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	2300      	movs	r3, #0
 8000c52:	4691      	mov	r9, r2
 8000c54:	4698      	mov	r8, r3
 8000c56:	469a      	mov	sl, r3
 8000c58:	3d7f      	subs	r5, #127	@ 0x7f
 8000c5a:	027c      	lsls	r4, r7, #9
 8000c5c:	007b      	lsls	r3, r7, #1
 8000c5e:	0a64      	lsrs	r4, r4, #9
 8000c60:	0e1b      	lsrs	r3, r3, #24
 8000c62:	0fff      	lsrs	r7, r7, #31
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d068      	beq.n	8000d3a <__aeabi_fmul+0x116>
 8000c68:	2bff      	cmp	r3, #255	@ 0xff
 8000c6a:	d021      	beq.n	8000cb0 <__aeabi_fmul+0x8c>
 8000c6c:	2280      	movs	r2, #128	@ 0x80
 8000c6e:	00e4      	lsls	r4, r4, #3
 8000c70:	04d2      	lsls	r2, r2, #19
 8000c72:	4314      	orrs	r4, r2
 8000c74:	4642      	mov	r2, r8
 8000c76:	3b7f      	subs	r3, #127	@ 0x7f
 8000c78:	195b      	adds	r3, r3, r5
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	1c5d      	adds	r5, r3, #1
 8000c7e:	2a0a      	cmp	r2, #10
 8000c80:	dc2e      	bgt.n	8000ce0 <__aeabi_fmul+0xbc>
 8000c82:	407e      	eors	r6, r7
 8000c84:	4642      	mov	r2, r8
 8000c86:	2a02      	cmp	r2, #2
 8000c88:	dc23      	bgt.n	8000cd2 <__aeabi_fmul+0xae>
 8000c8a:	3a01      	subs	r2, #1
 8000c8c:	2a01      	cmp	r2, #1
 8000c8e:	d900      	bls.n	8000c92 <__aeabi_fmul+0x6e>
 8000c90:	e0bd      	b.n	8000e0e <__aeabi_fmul+0x1ea>
 8000c92:	2902      	cmp	r1, #2
 8000c94:	d06e      	beq.n	8000d74 <__aeabi_fmul+0x150>
 8000c96:	2901      	cmp	r1, #1
 8000c98:	d12c      	bne.n	8000cf4 <__aeabi_fmul+0xd0>
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	05c0      	lsls	r0, r0, #23
 8000ca0:	07f6      	lsls	r6, r6, #31
 8000ca2:	4310      	orrs	r0, r2
 8000ca4:	4330      	orrs	r0, r6
 8000ca6:	bce0      	pop	{r5, r6, r7}
 8000ca8:	46ba      	mov	sl, r7
 8000caa:	46b1      	mov	r9, r6
 8000cac:	46a8      	mov	r8, r5
 8000cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb0:	002b      	movs	r3, r5
 8000cb2:	33ff      	adds	r3, #255	@ 0xff
 8000cb4:	2c00      	cmp	r4, #0
 8000cb6:	d065      	beq.n	8000d84 <__aeabi_fmul+0x160>
 8000cb8:	2203      	movs	r2, #3
 8000cba:	4641      	mov	r1, r8
 8000cbc:	4311      	orrs	r1, r2
 8000cbe:	0032      	movs	r2, r6
 8000cc0:	3501      	adds	r5, #1
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	407a      	eors	r2, r7
 8000cc6:	35ff      	adds	r5, #255	@ 0xff
 8000cc8:	290a      	cmp	r1, #10
 8000cca:	dd00      	ble.n	8000cce <__aeabi_fmul+0xaa>
 8000ccc:	e0d8      	b.n	8000e80 <__aeabi_fmul+0x25c>
 8000cce:	0016      	movs	r6, r2
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	4640      	mov	r0, r8
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	4082      	lsls	r2, r0
 8000cd8:	20a6      	movs	r0, #166	@ 0xa6
 8000cda:	00c0      	lsls	r0, r0, #3
 8000cdc:	4202      	tst	r2, r0
 8000cde:	d020      	beq.n	8000d22 <__aeabi_fmul+0xfe>
 8000ce0:	4653      	mov	r3, sl
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d046      	beq.n	8000d74 <__aeabi_fmul+0x150>
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d100      	bne.n	8000cec <__aeabi_fmul+0xc8>
 8000cea:	e0bb      	b.n	8000e64 <__aeabi_fmul+0x240>
 8000cec:	4651      	mov	r1, sl
 8000cee:	464c      	mov	r4, r9
 8000cf0:	2901      	cmp	r1, #1
 8000cf2:	d0d2      	beq.n	8000c9a <__aeabi_fmul+0x76>
 8000cf4:	002b      	movs	r3, r5
 8000cf6:	337f      	adds	r3, #127	@ 0x7f
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	dd70      	ble.n	8000dde <__aeabi_fmul+0x1ba>
 8000cfc:	0762      	lsls	r2, r4, #29
 8000cfe:	d004      	beq.n	8000d0a <__aeabi_fmul+0xe6>
 8000d00:	220f      	movs	r2, #15
 8000d02:	4022      	ands	r2, r4
 8000d04:	2a04      	cmp	r2, #4
 8000d06:	d000      	beq.n	8000d0a <__aeabi_fmul+0xe6>
 8000d08:	3404      	adds	r4, #4
 8000d0a:	0122      	lsls	r2, r4, #4
 8000d0c:	d503      	bpl.n	8000d16 <__aeabi_fmul+0xf2>
 8000d0e:	4b63      	ldr	r3, [pc, #396]	@ (8000e9c <__aeabi_fmul+0x278>)
 8000d10:	401c      	ands	r4, r3
 8000d12:	002b      	movs	r3, r5
 8000d14:	3380      	adds	r3, #128	@ 0x80
 8000d16:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d18:	dc2c      	bgt.n	8000d74 <__aeabi_fmul+0x150>
 8000d1a:	01a2      	lsls	r2, r4, #6
 8000d1c:	0a52      	lsrs	r2, r2, #9
 8000d1e:	b2d8      	uxtb	r0, r3
 8000d20:	e7bd      	b.n	8000c9e <__aeabi_fmul+0x7a>
 8000d22:	2090      	movs	r0, #144	@ 0x90
 8000d24:	0080      	lsls	r0, r0, #2
 8000d26:	4202      	tst	r2, r0
 8000d28:	d127      	bne.n	8000d7a <__aeabi_fmul+0x156>
 8000d2a:	38b9      	subs	r0, #185	@ 0xb9
 8000d2c:	38ff      	subs	r0, #255	@ 0xff
 8000d2e:	4210      	tst	r0, r2
 8000d30:	d06d      	beq.n	8000e0e <__aeabi_fmul+0x1ea>
 8000d32:	003e      	movs	r6, r7
 8000d34:	46a1      	mov	r9, r4
 8000d36:	468a      	mov	sl, r1
 8000d38:	e7d2      	b.n	8000ce0 <__aeabi_fmul+0xbc>
 8000d3a:	2c00      	cmp	r4, #0
 8000d3c:	d141      	bne.n	8000dc2 <__aeabi_fmul+0x19e>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	4642      	mov	r2, r8
 8000d42:	431a      	orrs	r2, r3
 8000d44:	4690      	mov	r8, r2
 8000d46:	002b      	movs	r3, r5
 8000d48:	4642      	mov	r2, r8
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	1c5d      	adds	r5, r3, #1
 8000d4e:	2a0a      	cmp	r2, #10
 8000d50:	dd97      	ble.n	8000c82 <__aeabi_fmul+0x5e>
 8000d52:	e7c5      	b.n	8000ce0 <__aeabi_fmul+0xbc>
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d126      	bne.n	8000da6 <__aeabi_fmul+0x182>
 8000d58:	2304      	movs	r3, #4
 8000d5a:	4698      	mov	r8, r3
 8000d5c:	3b03      	subs	r3, #3
 8000d5e:	2500      	movs	r5, #0
 8000d60:	469a      	mov	sl, r3
 8000d62:	e77a      	b.n	8000c5a <__aeabi_fmul+0x36>
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d118      	bne.n	8000d9a <__aeabi_fmul+0x176>
 8000d68:	2308      	movs	r3, #8
 8000d6a:	4698      	mov	r8, r3
 8000d6c:	3b06      	subs	r3, #6
 8000d6e:	25ff      	movs	r5, #255	@ 0xff
 8000d70:	469a      	mov	sl, r3
 8000d72:	e772      	b.n	8000c5a <__aeabi_fmul+0x36>
 8000d74:	20ff      	movs	r0, #255	@ 0xff
 8000d76:	2200      	movs	r2, #0
 8000d78:	e791      	b.n	8000c9e <__aeabi_fmul+0x7a>
 8000d7a:	2280      	movs	r2, #128	@ 0x80
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	20ff      	movs	r0, #255	@ 0xff
 8000d80:	03d2      	lsls	r2, r2, #15
 8000d82:	e78c      	b.n	8000c9e <__aeabi_fmul+0x7a>
 8000d84:	4641      	mov	r1, r8
 8000d86:	2202      	movs	r2, #2
 8000d88:	3501      	adds	r5, #1
 8000d8a:	4311      	orrs	r1, r2
 8000d8c:	4688      	mov	r8, r1
 8000d8e:	35ff      	adds	r5, #255	@ 0xff
 8000d90:	290a      	cmp	r1, #10
 8000d92:	dca5      	bgt.n	8000ce0 <__aeabi_fmul+0xbc>
 8000d94:	2102      	movs	r1, #2
 8000d96:	407e      	eors	r6, r7
 8000d98:	e774      	b.n	8000c84 <__aeabi_fmul+0x60>
 8000d9a:	230c      	movs	r3, #12
 8000d9c:	4698      	mov	r8, r3
 8000d9e:	3b09      	subs	r3, #9
 8000da0:	25ff      	movs	r5, #255	@ 0xff
 8000da2:	469a      	mov	sl, r3
 8000da4:	e759      	b.n	8000c5a <__aeabi_fmul+0x36>
 8000da6:	0018      	movs	r0, r3
 8000da8:	f002 fa54 	bl	8003254 <__clzsi2>
 8000dac:	464a      	mov	r2, r9
 8000dae:	1f43      	subs	r3, r0, #5
 8000db0:	2576      	movs	r5, #118	@ 0x76
 8000db2:	409a      	lsls	r2, r3
 8000db4:	2300      	movs	r3, #0
 8000db6:	426d      	negs	r5, r5
 8000db8:	4691      	mov	r9, r2
 8000dba:	4698      	mov	r8, r3
 8000dbc:	469a      	mov	sl, r3
 8000dbe:	1a2d      	subs	r5, r5, r0
 8000dc0:	e74b      	b.n	8000c5a <__aeabi_fmul+0x36>
 8000dc2:	0020      	movs	r0, r4
 8000dc4:	f002 fa46 	bl	8003254 <__clzsi2>
 8000dc8:	4642      	mov	r2, r8
 8000dca:	1f43      	subs	r3, r0, #5
 8000dcc:	409c      	lsls	r4, r3
 8000dce:	1a2b      	subs	r3, r5, r0
 8000dd0:	3b76      	subs	r3, #118	@ 0x76
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	1c5d      	adds	r5, r3, #1
 8000dd6:	2a0a      	cmp	r2, #10
 8000dd8:	dc00      	bgt.n	8000ddc <__aeabi_fmul+0x1b8>
 8000dda:	e752      	b.n	8000c82 <__aeabi_fmul+0x5e>
 8000ddc:	e780      	b.n	8000ce0 <__aeabi_fmul+0xbc>
 8000dde:	2201      	movs	r2, #1
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b1b      	cmp	r3, #27
 8000de4:	dd00      	ble.n	8000de8 <__aeabi_fmul+0x1c4>
 8000de6:	e758      	b.n	8000c9a <__aeabi_fmul+0x76>
 8000de8:	359e      	adds	r5, #158	@ 0x9e
 8000dea:	0022      	movs	r2, r4
 8000dec:	40ac      	lsls	r4, r5
 8000dee:	40da      	lsrs	r2, r3
 8000df0:	1e63      	subs	r3, r4, #1
 8000df2:	419c      	sbcs	r4, r3
 8000df4:	4322      	orrs	r2, r4
 8000df6:	0753      	lsls	r3, r2, #29
 8000df8:	d004      	beq.n	8000e04 <__aeabi_fmul+0x1e0>
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d000      	beq.n	8000e04 <__aeabi_fmul+0x1e0>
 8000e02:	3204      	adds	r2, #4
 8000e04:	0153      	lsls	r3, r2, #5
 8000e06:	d537      	bpl.n	8000e78 <__aeabi_fmul+0x254>
 8000e08:	2001      	movs	r0, #1
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	e747      	b.n	8000c9e <__aeabi_fmul+0x7a>
 8000e0e:	0c21      	lsrs	r1, r4, #16
 8000e10:	464a      	mov	r2, r9
 8000e12:	0424      	lsls	r4, r4, #16
 8000e14:	0c24      	lsrs	r4, r4, #16
 8000e16:	0027      	movs	r7, r4
 8000e18:	0c10      	lsrs	r0, r2, #16
 8000e1a:	0412      	lsls	r2, r2, #16
 8000e1c:	0c12      	lsrs	r2, r2, #16
 8000e1e:	4344      	muls	r4, r0
 8000e20:	4357      	muls	r7, r2
 8000e22:	4348      	muls	r0, r1
 8000e24:	4351      	muls	r1, r2
 8000e26:	0c3a      	lsrs	r2, r7, #16
 8000e28:	1909      	adds	r1, r1, r4
 8000e2a:	1852      	adds	r2, r2, r1
 8000e2c:	4294      	cmp	r4, r2
 8000e2e:	d903      	bls.n	8000e38 <__aeabi_fmul+0x214>
 8000e30:	2180      	movs	r1, #128	@ 0x80
 8000e32:	0249      	lsls	r1, r1, #9
 8000e34:	468c      	mov	ip, r1
 8000e36:	4460      	add	r0, ip
 8000e38:	043f      	lsls	r7, r7, #16
 8000e3a:	0411      	lsls	r1, r2, #16
 8000e3c:	0c3f      	lsrs	r7, r7, #16
 8000e3e:	19c9      	adds	r1, r1, r7
 8000e40:	018c      	lsls	r4, r1, #6
 8000e42:	1e67      	subs	r7, r4, #1
 8000e44:	41bc      	sbcs	r4, r7
 8000e46:	0c12      	lsrs	r2, r2, #16
 8000e48:	0e89      	lsrs	r1, r1, #26
 8000e4a:	1812      	adds	r2, r2, r0
 8000e4c:	430c      	orrs	r4, r1
 8000e4e:	0192      	lsls	r2, r2, #6
 8000e50:	4314      	orrs	r4, r2
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	d50e      	bpl.n	8000e74 <__aeabi_fmul+0x250>
 8000e56:	2301      	movs	r3, #1
 8000e58:	0862      	lsrs	r2, r4, #1
 8000e5a:	401c      	ands	r4, r3
 8000e5c:	4314      	orrs	r4, r2
 8000e5e:	e749      	b.n	8000cf4 <__aeabi_fmul+0xd0>
 8000e60:	003e      	movs	r6, r7
 8000e62:	46a1      	mov	r9, r4
 8000e64:	2280      	movs	r2, #128	@ 0x80
 8000e66:	464b      	mov	r3, r9
 8000e68:	03d2      	lsls	r2, r2, #15
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	0252      	lsls	r2, r2, #9
 8000e6e:	20ff      	movs	r0, #255	@ 0xff
 8000e70:	0a52      	lsrs	r2, r2, #9
 8000e72:	e714      	b.n	8000c9e <__aeabi_fmul+0x7a>
 8000e74:	001d      	movs	r5, r3
 8000e76:	e73d      	b.n	8000cf4 <__aeabi_fmul+0xd0>
 8000e78:	0192      	lsls	r2, r2, #6
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	0a52      	lsrs	r2, r2, #9
 8000e7e:	e70e      	b.n	8000c9e <__aeabi_fmul+0x7a>
 8000e80:	290f      	cmp	r1, #15
 8000e82:	d1ed      	bne.n	8000e60 <__aeabi_fmul+0x23c>
 8000e84:	2280      	movs	r2, #128	@ 0x80
 8000e86:	464b      	mov	r3, r9
 8000e88:	03d2      	lsls	r2, r2, #15
 8000e8a:	4213      	tst	r3, r2
 8000e8c:	d0ea      	beq.n	8000e64 <__aeabi_fmul+0x240>
 8000e8e:	4214      	tst	r4, r2
 8000e90:	d1e8      	bne.n	8000e64 <__aeabi_fmul+0x240>
 8000e92:	003e      	movs	r6, r7
 8000e94:	20ff      	movs	r0, #255	@ 0xff
 8000e96:	4322      	orrs	r2, r4
 8000e98:	e701      	b.n	8000c9e <__aeabi_fmul+0x7a>
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	f7ffffff 	.word	0xf7ffffff

08000ea0 <__aeabi_fsub>:
 8000ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea2:	4647      	mov	r7, r8
 8000ea4:	46ce      	mov	lr, r9
 8000ea6:	024e      	lsls	r6, r1, #9
 8000ea8:	0243      	lsls	r3, r0, #9
 8000eaa:	0045      	lsls	r5, r0, #1
 8000eac:	0a72      	lsrs	r2, r6, #9
 8000eae:	0fc4      	lsrs	r4, r0, #31
 8000eb0:	0048      	lsls	r0, r1, #1
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	4694      	mov	ip, r2
 8000eb6:	0a5f      	lsrs	r7, r3, #9
 8000eb8:	0e2d      	lsrs	r5, r5, #24
 8000eba:	099b      	lsrs	r3, r3, #6
 8000ebc:	0e00      	lsrs	r0, r0, #24
 8000ebe:	0fc9      	lsrs	r1, r1, #31
 8000ec0:	09b6      	lsrs	r6, r6, #6
 8000ec2:	28ff      	cmp	r0, #255	@ 0xff
 8000ec4:	d024      	beq.n	8000f10 <__aeabi_fsub+0x70>
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4051      	eors	r1, r2
 8000eca:	1a2a      	subs	r2, r5, r0
 8000ecc:	428c      	cmp	r4, r1
 8000ece:	d00f      	beq.n	8000ef0 <__aeabi_fsub+0x50>
 8000ed0:	2a00      	cmp	r2, #0
 8000ed2:	dc00      	bgt.n	8000ed6 <__aeabi_fsub+0x36>
 8000ed4:	e16a      	b.n	80011ac <__aeabi_fsub+0x30c>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	d135      	bne.n	8000f46 <__aeabi_fsub+0xa6>
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_fsub+0x40>
 8000ede:	e0a2      	b.n	8001026 <__aeabi_fsub+0x186>
 8000ee0:	1e51      	subs	r1, r2, #1
 8000ee2:	2a01      	cmp	r2, #1
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_fsub+0x48>
 8000ee6:	e124      	b.n	8001132 <__aeabi_fsub+0x292>
 8000ee8:	2aff      	cmp	r2, #255	@ 0xff
 8000eea:	d021      	beq.n	8000f30 <__aeabi_fsub+0x90>
 8000eec:	000a      	movs	r2, r1
 8000eee:	e02f      	b.n	8000f50 <__aeabi_fsub+0xb0>
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	dc00      	bgt.n	8000ef6 <__aeabi_fsub+0x56>
 8000ef4:	e167      	b.n	80011c6 <__aeabi_fsub+0x326>
 8000ef6:	2800      	cmp	r0, #0
 8000ef8:	d05e      	beq.n	8000fb8 <__aeabi_fsub+0x118>
 8000efa:	2dff      	cmp	r5, #255	@ 0xff
 8000efc:	d018      	beq.n	8000f30 <__aeabi_fsub+0x90>
 8000efe:	2180      	movs	r1, #128	@ 0x80
 8000f00:	04c9      	lsls	r1, r1, #19
 8000f02:	430e      	orrs	r6, r1
 8000f04:	2a1b      	cmp	r2, #27
 8000f06:	dc00      	bgt.n	8000f0a <__aeabi_fsub+0x6a>
 8000f08:	e076      	b.n	8000ff8 <__aeabi_fsub+0x158>
 8000f0a:	002a      	movs	r2, r5
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	e032      	b.n	8000f76 <__aeabi_fsub+0xd6>
 8000f10:	002a      	movs	r2, r5
 8000f12:	3aff      	subs	r2, #255	@ 0xff
 8000f14:	4691      	mov	r9, r2
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d042      	beq.n	8000fa0 <__aeabi_fsub+0x100>
 8000f1a:	428c      	cmp	r4, r1
 8000f1c:	d055      	beq.n	8000fca <__aeabi_fsub+0x12a>
 8000f1e:	464a      	mov	r2, r9
 8000f20:	2a00      	cmp	r2, #0
 8000f22:	d100      	bne.n	8000f26 <__aeabi_fsub+0x86>
 8000f24:	e09c      	b.n	8001060 <__aeabi_fsub+0x1c0>
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d100      	bne.n	8000f2c <__aeabi_fsub+0x8c>
 8000f2a:	e077      	b.n	800101c <__aeabi_fsub+0x17c>
 8000f2c:	000c      	movs	r4, r1
 8000f2e:	0033      	movs	r3, r6
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0x98>
 8000f36:	e06e      	b.n	8001016 <__aeabi_fsub+0x176>
 8000f38:	2280      	movs	r2, #128	@ 0x80
 8000f3a:	03d2      	lsls	r2, r2, #15
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	025b      	lsls	r3, r3, #9
 8000f40:	20ff      	movs	r0, #255	@ 0xff
 8000f42:	0a5b      	lsrs	r3, r3, #9
 8000f44:	e024      	b.n	8000f90 <__aeabi_fsub+0xf0>
 8000f46:	2dff      	cmp	r5, #255	@ 0xff
 8000f48:	d0f2      	beq.n	8000f30 <__aeabi_fsub+0x90>
 8000f4a:	2180      	movs	r1, #128	@ 0x80
 8000f4c:	04c9      	lsls	r1, r1, #19
 8000f4e:	430e      	orrs	r6, r1
 8000f50:	2101      	movs	r1, #1
 8000f52:	2a1b      	cmp	r2, #27
 8000f54:	dc08      	bgt.n	8000f68 <__aeabi_fsub+0xc8>
 8000f56:	0031      	movs	r1, r6
 8000f58:	2020      	movs	r0, #32
 8000f5a:	40d1      	lsrs	r1, r2
 8000f5c:	1a82      	subs	r2, r0, r2
 8000f5e:	4096      	lsls	r6, r2
 8000f60:	0032      	movs	r2, r6
 8000f62:	1e50      	subs	r0, r2, #1
 8000f64:	4182      	sbcs	r2, r0
 8000f66:	4311      	orrs	r1, r2
 8000f68:	1a5b      	subs	r3, r3, r1
 8000f6a:	015a      	lsls	r2, r3, #5
 8000f6c:	d460      	bmi.n	8001030 <__aeabi_fsub+0x190>
 8000f6e:	2107      	movs	r1, #7
 8000f70:	002a      	movs	r2, r5
 8000f72:	4019      	ands	r1, r3
 8000f74:	d057      	beq.n	8001026 <__aeabi_fsub+0x186>
 8000f76:	210f      	movs	r1, #15
 8000f78:	4019      	ands	r1, r3
 8000f7a:	2904      	cmp	r1, #4
 8000f7c:	d000      	beq.n	8000f80 <__aeabi_fsub+0xe0>
 8000f7e:	3304      	adds	r3, #4
 8000f80:	0159      	lsls	r1, r3, #5
 8000f82:	d550      	bpl.n	8001026 <__aeabi_fsub+0x186>
 8000f84:	1c50      	adds	r0, r2, #1
 8000f86:	2afe      	cmp	r2, #254	@ 0xfe
 8000f88:	d045      	beq.n	8001016 <__aeabi_fsub+0x176>
 8000f8a:	019b      	lsls	r3, r3, #6
 8000f8c:	b2c0      	uxtb	r0, r0
 8000f8e:	0a5b      	lsrs	r3, r3, #9
 8000f90:	05c0      	lsls	r0, r0, #23
 8000f92:	4318      	orrs	r0, r3
 8000f94:	07e4      	lsls	r4, r4, #31
 8000f96:	4320      	orrs	r0, r4
 8000f98:	bcc0      	pop	{r6, r7}
 8000f9a:	46b9      	mov	r9, r7
 8000f9c:	46b0      	mov	r8, r6
 8000f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4051      	eors	r1, r2
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d1ba      	bne.n	8000f1e <__aeabi_fsub+0x7e>
 8000fa8:	464a      	mov	r2, r9
 8000faa:	2a00      	cmp	r2, #0
 8000fac:	d010      	beq.n	8000fd0 <__aeabi_fsub+0x130>
 8000fae:	2d00      	cmp	r5, #0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_fsub+0x114>
 8000fb2:	e098      	b.n	80010e6 <__aeabi_fsub+0x246>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e7bb      	b.n	8000f30 <__aeabi_fsub+0x90>
 8000fb8:	2e00      	cmp	r6, #0
 8000fba:	d034      	beq.n	8001026 <__aeabi_fsub+0x186>
 8000fbc:	1e51      	subs	r1, r2, #1
 8000fbe:	2a01      	cmp	r2, #1
 8000fc0:	d06e      	beq.n	80010a0 <__aeabi_fsub+0x200>
 8000fc2:	2aff      	cmp	r2, #255	@ 0xff
 8000fc4:	d0b4      	beq.n	8000f30 <__aeabi_fsub+0x90>
 8000fc6:	000a      	movs	r2, r1
 8000fc8:	e79c      	b.n	8000f04 <__aeabi_fsub+0x64>
 8000fca:	2a00      	cmp	r2, #0
 8000fcc:	d000      	beq.n	8000fd0 <__aeabi_fsub+0x130>
 8000fce:	e088      	b.n	80010e2 <__aeabi_fsub+0x242>
 8000fd0:	20fe      	movs	r0, #254	@ 0xfe
 8000fd2:	1c6a      	adds	r2, r5, #1
 8000fd4:	4210      	tst	r0, r2
 8000fd6:	d000      	beq.n	8000fda <__aeabi_fsub+0x13a>
 8000fd8:	e092      	b.n	8001100 <__aeabi_fsub+0x260>
 8000fda:	2d00      	cmp	r5, #0
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_fsub+0x140>
 8000fde:	e0a4      	b.n	800112a <__aeabi_fsub+0x28a>
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_fsub+0x146>
 8000fe4:	e0cb      	b.n	800117e <__aeabi_fsub+0x2de>
 8000fe6:	2e00      	cmp	r6, #0
 8000fe8:	d000      	beq.n	8000fec <__aeabi_fsub+0x14c>
 8000fea:	e0ca      	b.n	8001182 <__aeabi_fsub+0x2e2>
 8000fec:	2200      	movs	r2, #0
 8000fee:	08db      	lsrs	r3, r3, #3
 8000ff0:	025b      	lsls	r3, r3, #9
 8000ff2:	0a5b      	lsrs	r3, r3, #9
 8000ff4:	b2d0      	uxtb	r0, r2
 8000ff6:	e7cb      	b.n	8000f90 <__aeabi_fsub+0xf0>
 8000ff8:	0031      	movs	r1, r6
 8000ffa:	2020      	movs	r0, #32
 8000ffc:	40d1      	lsrs	r1, r2
 8000ffe:	1a82      	subs	r2, r0, r2
 8001000:	4096      	lsls	r6, r2
 8001002:	0032      	movs	r2, r6
 8001004:	1e50      	subs	r0, r2, #1
 8001006:	4182      	sbcs	r2, r0
 8001008:	430a      	orrs	r2, r1
 800100a:	189b      	adds	r3, r3, r2
 800100c:	015a      	lsls	r2, r3, #5
 800100e:	d5ae      	bpl.n	8000f6e <__aeabi_fsub+0xce>
 8001010:	1c6a      	adds	r2, r5, #1
 8001012:	2dfe      	cmp	r5, #254	@ 0xfe
 8001014:	d14a      	bne.n	80010ac <__aeabi_fsub+0x20c>
 8001016:	20ff      	movs	r0, #255	@ 0xff
 8001018:	2300      	movs	r3, #0
 800101a:	e7b9      	b.n	8000f90 <__aeabi_fsub+0xf0>
 800101c:	22ff      	movs	r2, #255	@ 0xff
 800101e:	2b00      	cmp	r3, #0
 8001020:	d14b      	bne.n	80010ba <__aeabi_fsub+0x21a>
 8001022:	000c      	movs	r4, r1
 8001024:	0033      	movs	r3, r6
 8001026:	08db      	lsrs	r3, r3, #3
 8001028:	2aff      	cmp	r2, #255	@ 0xff
 800102a:	d100      	bne.n	800102e <__aeabi_fsub+0x18e>
 800102c:	e781      	b.n	8000f32 <__aeabi_fsub+0x92>
 800102e:	e7df      	b.n	8000ff0 <__aeabi_fsub+0x150>
 8001030:	019f      	lsls	r7, r3, #6
 8001032:	09bf      	lsrs	r7, r7, #6
 8001034:	0038      	movs	r0, r7
 8001036:	f002 f90d 	bl	8003254 <__clzsi2>
 800103a:	3805      	subs	r0, #5
 800103c:	4087      	lsls	r7, r0
 800103e:	4285      	cmp	r5, r0
 8001040:	dc21      	bgt.n	8001086 <__aeabi_fsub+0x1e6>
 8001042:	003b      	movs	r3, r7
 8001044:	2120      	movs	r1, #32
 8001046:	1b42      	subs	r2, r0, r5
 8001048:	3201      	adds	r2, #1
 800104a:	40d3      	lsrs	r3, r2
 800104c:	1a8a      	subs	r2, r1, r2
 800104e:	4097      	lsls	r7, r2
 8001050:	1e7a      	subs	r2, r7, #1
 8001052:	4197      	sbcs	r7, r2
 8001054:	2200      	movs	r2, #0
 8001056:	433b      	orrs	r3, r7
 8001058:	0759      	lsls	r1, r3, #29
 800105a:	d000      	beq.n	800105e <__aeabi_fsub+0x1be>
 800105c:	e78b      	b.n	8000f76 <__aeabi_fsub+0xd6>
 800105e:	e78f      	b.n	8000f80 <__aeabi_fsub+0xe0>
 8001060:	20fe      	movs	r0, #254	@ 0xfe
 8001062:	1c6a      	adds	r2, r5, #1
 8001064:	4210      	tst	r0, r2
 8001066:	d112      	bne.n	800108e <__aeabi_fsub+0x1ee>
 8001068:	2d00      	cmp	r5, #0
 800106a:	d152      	bne.n	8001112 <__aeabi_fsub+0x272>
 800106c:	2b00      	cmp	r3, #0
 800106e:	d07c      	beq.n	800116a <__aeabi_fsub+0x2ca>
 8001070:	2e00      	cmp	r6, #0
 8001072:	d0bb      	beq.n	8000fec <__aeabi_fsub+0x14c>
 8001074:	1b9a      	subs	r2, r3, r6
 8001076:	0150      	lsls	r0, r2, #5
 8001078:	d400      	bmi.n	800107c <__aeabi_fsub+0x1dc>
 800107a:	e08b      	b.n	8001194 <__aeabi_fsub+0x2f4>
 800107c:	2401      	movs	r4, #1
 800107e:	2200      	movs	r2, #0
 8001080:	1af3      	subs	r3, r6, r3
 8001082:	400c      	ands	r4, r1
 8001084:	e7e8      	b.n	8001058 <__aeabi_fsub+0x1b8>
 8001086:	4b56      	ldr	r3, [pc, #344]	@ (80011e0 <__aeabi_fsub+0x340>)
 8001088:	1a2a      	subs	r2, r5, r0
 800108a:	403b      	ands	r3, r7
 800108c:	e7e4      	b.n	8001058 <__aeabi_fsub+0x1b8>
 800108e:	1b9f      	subs	r7, r3, r6
 8001090:	017a      	lsls	r2, r7, #5
 8001092:	d446      	bmi.n	8001122 <__aeabi_fsub+0x282>
 8001094:	2f00      	cmp	r7, #0
 8001096:	d1cd      	bne.n	8001034 <__aeabi_fsub+0x194>
 8001098:	2400      	movs	r4, #0
 800109a:	2000      	movs	r0, #0
 800109c:	2300      	movs	r3, #0
 800109e:	e777      	b.n	8000f90 <__aeabi_fsub+0xf0>
 80010a0:	199b      	adds	r3, r3, r6
 80010a2:	2501      	movs	r5, #1
 80010a4:	3201      	adds	r2, #1
 80010a6:	0159      	lsls	r1, r3, #5
 80010a8:	d400      	bmi.n	80010ac <__aeabi_fsub+0x20c>
 80010aa:	e760      	b.n	8000f6e <__aeabi_fsub+0xce>
 80010ac:	2101      	movs	r1, #1
 80010ae:	484d      	ldr	r0, [pc, #308]	@ (80011e4 <__aeabi_fsub+0x344>)
 80010b0:	4019      	ands	r1, r3
 80010b2:	085b      	lsrs	r3, r3, #1
 80010b4:	4003      	ands	r3, r0
 80010b6:	430b      	orrs	r3, r1
 80010b8:	e7ce      	b.n	8001058 <__aeabi_fsub+0x1b8>
 80010ba:	1e57      	subs	r7, r2, #1
 80010bc:	2a01      	cmp	r2, #1
 80010be:	d05a      	beq.n	8001176 <__aeabi_fsub+0x2d6>
 80010c0:	000c      	movs	r4, r1
 80010c2:	2aff      	cmp	r2, #255	@ 0xff
 80010c4:	d033      	beq.n	800112e <__aeabi_fsub+0x28e>
 80010c6:	2201      	movs	r2, #1
 80010c8:	2f1b      	cmp	r7, #27
 80010ca:	dc07      	bgt.n	80010dc <__aeabi_fsub+0x23c>
 80010cc:	2120      	movs	r1, #32
 80010ce:	1bc9      	subs	r1, r1, r7
 80010d0:	001a      	movs	r2, r3
 80010d2:	408b      	lsls	r3, r1
 80010d4:	40fa      	lsrs	r2, r7
 80010d6:	1e59      	subs	r1, r3, #1
 80010d8:	418b      	sbcs	r3, r1
 80010da:	431a      	orrs	r2, r3
 80010dc:	0005      	movs	r5, r0
 80010de:	1ab3      	subs	r3, r6, r2
 80010e0:	e743      	b.n	8000f6a <__aeabi_fsub+0xca>
 80010e2:	2d00      	cmp	r5, #0
 80010e4:	d123      	bne.n	800112e <__aeabi_fsub+0x28e>
 80010e6:	22ff      	movs	r2, #255	@ 0xff
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d09b      	beq.n	8001024 <__aeabi_fsub+0x184>
 80010ec:	1e51      	subs	r1, r2, #1
 80010ee:	2a01      	cmp	r2, #1
 80010f0:	d0d6      	beq.n	80010a0 <__aeabi_fsub+0x200>
 80010f2:	2aff      	cmp	r2, #255	@ 0xff
 80010f4:	d01b      	beq.n	800112e <__aeabi_fsub+0x28e>
 80010f6:	291b      	cmp	r1, #27
 80010f8:	dd2c      	ble.n	8001154 <__aeabi_fsub+0x2b4>
 80010fa:	0002      	movs	r2, r0
 80010fc:	1c73      	adds	r3, r6, #1
 80010fe:	e73a      	b.n	8000f76 <__aeabi_fsub+0xd6>
 8001100:	2aff      	cmp	r2, #255	@ 0xff
 8001102:	d088      	beq.n	8001016 <__aeabi_fsub+0x176>
 8001104:	199b      	adds	r3, r3, r6
 8001106:	085b      	lsrs	r3, r3, #1
 8001108:	0759      	lsls	r1, r3, #29
 800110a:	d000      	beq.n	800110e <__aeabi_fsub+0x26e>
 800110c:	e733      	b.n	8000f76 <__aeabi_fsub+0xd6>
 800110e:	08db      	lsrs	r3, r3, #3
 8001110:	e76e      	b.n	8000ff0 <__aeabi_fsub+0x150>
 8001112:	2b00      	cmp	r3, #0
 8001114:	d110      	bne.n	8001138 <__aeabi_fsub+0x298>
 8001116:	2e00      	cmp	r6, #0
 8001118:	d043      	beq.n	80011a2 <__aeabi_fsub+0x302>
 800111a:	2401      	movs	r4, #1
 800111c:	0033      	movs	r3, r6
 800111e:	400c      	ands	r4, r1
 8001120:	e706      	b.n	8000f30 <__aeabi_fsub+0x90>
 8001122:	2401      	movs	r4, #1
 8001124:	1af7      	subs	r7, r6, r3
 8001126:	400c      	ands	r4, r1
 8001128:	e784      	b.n	8001034 <__aeabi_fsub+0x194>
 800112a:	2b00      	cmp	r3, #0
 800112c:	d104      	bne.n	8001138 <__aeabi_fsub+0x298>
 800112e:	0033      	movs	r3, r6
 8001130:	e6fe      	b.n	8000f30 <__aeabi_fsub+0x90>
 8001132:	2501      	movs	r5, #1
 8001134:	1b9b      	subs	r3, r3, r6
 8001136:	e718      	b.n	8000f6a <__aeabi_fsub+0xca>
 8001138:	2e00      	cmp	r6, #0
 800113a:	d100      	bne.n	800113e <__aeabi_fsub+0x29e>
 800113c:	e6f8      	b.n	8000f30 <__aeabi_fsub+0x90>
 800113e:	2280      	movs	r2, #128	@ 0x80
 8001140:	03d2      	lsls	r2, r2, #15
 8001142:	4297      	cmp	r7, r2
 8001144:	d304      	bcc.n	8001150 <__aeabi_fsub+0x2b0>
 8001146:	4594      	cmp	ip, r2
 8001148:	d202      	bcs.n	8001150 <__aeabi_fsub+0x2b0>
 800114a:	2401      	movs	r4, #1
 800114c:	0033      	movs	r3, r6
 800114e:	400c      	ands	r4, r1
 8001150:	08db      	lsrs	r3, r3, #3
 8001152:	e6f1      	b.n	8000f38 <__aeabi_fsub+0x98>
 8001154:	001a      	movs	r2, r3
 8001156:	2520      	movs	r5, #32
 8001158:	40ca      	lsrs	r2, r1
 800115a:	1a69      	subs	r1, r5, r1
 800115c:	408b      	lsls	r3, r1
 800115e:	1e59      	subs	r1, r3, #1
 8001160:	418b      	sbcs	r3, r1
 8001162:	4313      	orrs	r3, r2
 8001164:	0005      	movs	r5, r0
 8001166:	199b      	adds	r3, r3, r6
 8001168:	e750      	b.n	800100c <__aeabi_fsub+0x16c>
 800116a:	2e00      	cmp	r6, #0
 800116c:	d094      	beq.n	8001098 <__aeabi_fsub+0x1f8>
 800116e:	2401      	movs	r4, #1
 8001170:	0033      	movs	r3, r6
 8001172:	400c      	ands	r4, r1
 8001174:	e73a      	b.n	8000fec <__aeabi_fsub+0x14c>
 8001176:	000c      	movs	r4, r1
 8001178:	2501      	movs	r5, #1
 800117a:	1af3      	subs	r3, r6, r3
 800117c:	e6f5      	b.n	8000f6a <__aeabi_fsub+0xca>
 800117e:	0033      	movs	r3, r6
 8001180:	e734      	b.n	8000fec <__aeabi_fsub+0x14c>
 8001182:	199b      	adds	r3, r3, r6
 8001184:	2200      	movs	r2, #0
 8001186:	0159      	lsls	r1, r3, #5
 8001188:	d5c1      	bpl.n	800110e <__aeabi_fsub+0x26e>
 800118a:	4a15      	ldr	r2, [pc, #84]	@ (80011e0 <__aeabi_fsub+0x340>)
 800118c:	4013      	ands	r3, r2
 800118e:	08db      	lsrs	r3, r3, #3
 8001190:	2201      	movs	r2, #1
 8001192:	e72d      	b.n	8000ff0 <__aeabi_fsub+0x150>
 8001194:	2a00      	cmp	r2, #0
 8001196:	d100      	bne.n	800119a <__aeabi_fsub+0x2fa>
 8001198:	e77e      	b.n	8001098 <__aeabi_fsub+0x1f8>
 800119a:	0013      	movs	r3, r2
 800119c:	2200      	movs	r2, #0
 800119e:	08db      	lsrs	r3, r3, #3
 80011a0:	e726      	b.n	8000ff0 <__aeabi_fsub+0x150>
 80011a2:	2380      	movs	r3, #128	@ 0x80
 80011a4:	2400      	movs	r4, #0
 80011a6:	20ff      	movs	r0, #255	@ 0xff
 80011a8:	03db      	lsls	r3, r3, #15
 80011aa:	e6f1      	b.n	8000f90 <__aeabi_fsub+0xf0>
 80011ac:	2a00      	cmp	r2, #0
 80011ae:	d100      	bne.n	80011b2 <__aeabi_fsub+0x312>
 80011b0:	e756      	b.n	8001060 <__aeabi_fsub+0x1c0>
 80011b2:	1b47      	subs	r7, r0, r5
 80011b4:	003a      	movs	r2, r7
 80011b6:	2d00      	cmp	r5, #0
 80011b8:	d100      	bne.n	80011bc <__aeabi_fsub+0x31c>
 80011ba:	e730      	b.n	800101e <__aeabi_fsub+0x17e>
 80011bc:	2280      	movs	r2, #128	@ 0x80
 80011be:	04d2      	lsls	r2, r2, #19
 80011c0:	000c      	movs	r4, r1
 80011c2:	4313      	orrs	r3, r2
 80011c4:	e77f      	b.n	80010c6 <__aeabi_fsub+0x226>
 80011c6:	2a00      	cmp	r2, #0
 80011c8:	d100      	bne.n	80011cc <__aeabi_fsub+0x32c>
 80011ca:	e701      	b.n	8000fd0 <__aeabi_fsub+0x130>
 80011cc:	1b41      	subs	r1, r0, r5
 80011ce:	2d00      	cmp	r5, #0
 80011d0:	d101      	bne.n	80011d6 <__aeabi_fsub+0x336>
 80011d2:	000a      	movs	r2, r1
 80011d4:	e788      	b.n	80010e8 <__aeabi_fsub+0x248>
 80011d6:	2280      	movs	r2, #128	@ 0x80
 80011d8:	04d2      	lsls	r2, r2, #19
 80011da:	4313      	orrs	r3, r2
 80011dc:	e78b      	b.n	80010f6 <__aeabi_fsub+0x256>
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	fbffffff 	.word	0xfbffffff
 80011e4:	7dffffff 	.word	0x7dffffff

080011e8 <__aeabi_f2iz>:
 80011e8:	0241      	lsls	r1, r0, #9
 80011ea:	0042      	lsls	r2, r0, #1
 80011ec:	0fc3      	lsrs	r3, r0, #31
 80011ee:	0a49      	lsrs	r1, r1, #9
 80011f0:	2000      	movs	r0, #0
 80011f2:	0e12      	lsrs	r2, r2, #24
 80011f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80011f6:	dd03      	ble.n	8001200 <__aeabi_f2iz+0x18>
 80011f8:	2a9d      	cmp	r2, #157	@ 0x9d
 80011fa:	dd02      	ble.n	8001202 <__aeabi_f2iz+0x1a>
 80011fc:	4a09      	ldr	r2, [pc, #36]	@ (8001224 <__aeabi_f2iz+0x3c>)
 80011fe:	1898      	adds	r0, r3, r2
 8001200:	4770      	bx	lr
 8001202:	2080      	movs	r0, #128	@ 0x80
 8001204:	0400      	lsls	r0, r0, #16
 8001206:	4301      	orrs	r1, r0
 8001208:	2a95      	cmp	r2, #149	@ 0x95
 800120a:	dc07      	bgt.n	800121c <__aeabi_f2iz+0x34>
 800120c:	2096      	movs	r0, #150	@ 0x96
 800120e:	1a82      	subs	r2, r0, r2
 8001210:	40d1      	lsrs	r1, r2
 8001212:	4248      	negs	r0, r1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f3      	bne.n	8001200 <__aeabi_f2iz+0x18>
 8001218:	0008      	movs	r0, r1
 800121a:	e7f1      	b.n	8001200 <__aeabi_f2iz+0x18>
 800121c:	3a96      	subs	r2, #150	@ 0x96
 800121e:	4091      	lsls	r1, r2
 8001220:	e7f7      	b.n	8001212 <__aeabi_f2iz+0x2a>
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	7fffffff 	.word	0x7fffffff

08001228 <__aeabi_i2f>:
 8001228:	b570      	push	{r4, r5, r6, lr}
 800122a:	2800      	cmp	r0, #0
 800122c:	d013      	beq.n	8001256 <__aeabi_i2f+0x2e>
 800122e:	17c3      	asrs	r3, r0, #31
 8001230:	18c5      	adds	r5, r0, r3
 8001232:	405d      	eors	r5, r3
 8001234:	0fc4      	lsrs	r4, r0, #31
 8001236:	0028      	movs	r0, r5
 8001238:	f002 f80c 	bl	8003254 <__clzsi2>
 800123c:	239e      	movs	r3, #158	@ 0x9e
 800123e:	0001      	movs	r1, r0
 8001240:	1a1b      	subs	r3, r3, r0
 8001242:	2b96      	cmp	r3, #150	@ 0x96
 8001244:	dc0f      	bgt.n	8001266 <__aeabi_i2f+0x3e>
 8001246:	2808      	cmp	r0, #8
 8001248:	d034      	beq.n	80012b4 <__aeabi_i2f+0x8c>
 800124a:	3908      	subs	r1, #8
 800124c:	408d      	lsls	r5, r1
 800124e:	026d      	lsls	r5, r5, #9
 8001250:	0a6d      	lsrs	r5, r5, #9
 8001252:	b2d8      	uxtb	r0, r3
 8001254:	e002      	b.n	800125c <__aeabi_i2f+0x34>
 8001256:	2400      	movs	r4, #0
 8001258:	2000      	movs	r0, #0
 800125a:	2500      	movs	r5, #0
 800125c:	05c0      	lsls	r0, r0, #23
 800125e:	4328      	orrs	r0, r5
 8001260:	07e4      	lsls	r4, r4, #31
 8001262:	4320      	orrs	r0, r4
 8001264:	bd70      	pop	{r4, r5, r6, pc}
 8001266:	2b99      	cmp	r3, #153	@ 0x99
 8001268:	dc16      	bgt.n	8001298 <__aeabi_i2f+0x70>
 800126a:	1f42      	subs	r2, r0, #5
 800126c:	2805      	cmp	r0, #5
 800126e:	d000      	beq.n	8001272 <__aeabi_i2f+0x4a>
 8001270:	4095      	lsls	r5, r2
 8001272:	002a      	movs	r2, r5
 8001274:	4811      	ldr	r0, [pc, #68]	@ (80012bc <__aeabi_i2f+0x94>)
 8001276:	4002      	ands	r2, r0
 8001278:	076e      	lsls	r6, r5, #29
 800127a:	d009      	beq.n	8001290 <__aeabi_i2f+0x68>
 800127c:	260f      	movs	r6, #15
 800127e:	4035      	ands	r5, r6
 8001280:	2d04      	cmp	r5, #4
 8001282:	d005      	beq.n	8001290 <__aeabi_i2f+0x68>
 8001284:	3204      	adds	r2, #4
 8001286:	0155      	lsls	r5, r2, #5
 8001288:	d502      	bpl.n	8001290 <__aeabi_i2f+0x68>
 800128a:	239f      	movs	r3, #159	@ 0x9f
 800128c:	4002      	ands	r2, r0
 800128e:	1a5b      	subs	r3, r3, r1
 8001290:	0192      	lsls	r2, r2, #6
 8001292:	0a55      	lsrs	r5, r2, #9
 8001294:	b2d8      	uxtb	r0, r3
 8001296:	e7e1      	b.n	800125c <__aeabi_i2f+0x34>
 8001298:	2205      	movs	r2, #5
 800129a:	1a12      	subs	r2, r2, r0
 800129c:	0028      	movs	r0, r5
 800129e:	40d0      	lsrs	r0, r2
 80012a0:	0002      	movs	r2, r0
 80012a2:	0008      	movs	r0, r1
 80012a4:	301b      	adds	r0, #27
 80012a6:	4085      	lsls	r5, r0
 80012a8:	0028      	movs	r0, r5
 80012aa:	1e45      	subs	r5, r0, #1
 80012ac:	41a8      	sbcs	r0, r5
 80012ae:	4302      	orrs	r2, r0
 80012b0:	0015      	movs	r5, r2
 80012b2:	e7de      	b.n	8001272 <__aeabi_i2f+0x4a>
 80012b4:	026d      	lsls	r5, r5, #9
 80012b6:	2096      	movs	r0, #150	@ 0x96
 80012b8:	0a6d      	lsrs	r5, r5, #9
 80012ba:	e7cf      	b.n	800125c <__aeabi_i2f+0x34>
 80012bc:	fbffffff 	.word	0xfbffffff

080012c0 <__aeabi_ui2f>:
 80012c0:	b570      	push	{r4, r5, r6, lr}
 80012c2:	1e04      	subs	r4, r0, #0
 80012c4:	d00e      	beq.n	80012e4 <__aeabi_ui2f+0x24>
 80012c6:	f001 ffc5 	bl	8003254 <__clzsi2>
 80012ca:	239e      	movs	r3, #158	@ 0x9e
 80012cc:	0001      	movs	r1, r0
 80012ce:	1a1b      	subs	r3, r3, r0
 80012d0:	2b96      	cmp	r3, #150	@ 0x96
 80012d2:	dc0c      	bgt.n	80012ee <__aeabi_ui2f+0x2e>
 80012d4:	2808      	cmp	r0, #8
 80012d6:	d02f      	beq.n	8001338 <__aeabi_ui2f+0x78>
 80012d8:	3908      	subs	r1, #8
 80012da:	408c      	lsls	r4, r1
 80012dc:	0264      	lsls	r4, r4, #9
 80012de:	0a64      	lsrs	r4, r4, #9
 80012e0:	b2d8      	uxtb	r0, r3
 80012e2:	e001      	b.n	80012e8 <__aeabi_ui2f+0x28>
 80012e4:	2000      	movs	r0, #0
 80012e6:	2400      	movs	r4, #0
 80012e8:	05c0      	lsls	r0, r0, #23
 80012ea:	4320      	orrs	r0, r4
 80012ec:	bd70      	pop	{r4, r5, r6, pc}
 80012ee:	2b99      	cmp	r3, #153	@ 0x99
 80012f0:	dc16      	bgt.n	8001320 <__aeabi_ui2f+0x60>
 80012f2:	1f42      	subs	r2, r0, #5
 80012f4:	2805      	cmp	r0, #5
 80012f6:	d000      	beq.n	80012fa <__aeabi_ui2f+0x3a>
 80012f8:	4094      	lsls	r4, r2
 80012fa:	0022      	movs	r2, r4
 80012fc:	4810      	ldr	r0, [pc, #64]	@ (8001340 <__aeabi_ui2f+0x80>)
 80012fe:	4002      	ands	r2, r0
 8001300:	0765      	lsls	r5, r4, #29
 8001302:	d009      	beq.n	8001318 <__aeabi_ui2f+0x58>
 8001304:	250f      	movs	r5, #15
 8001306:	402c      	ands	r4, r5
 8001308:	2c04      	cmp	r4, #4
 800130a:	d005      	beq.n	8001318 <__aeabi_ui2f+0x58>
 800130c:	3204      	adds	r2, #4
 800130e:	0154      	lsls	r4, r2, #5
 8001310:	d502      	bpl.n	8001318 <__aeabi_ui2f+0x58>
 8001312:	239f      	movs	r3, #159	@ 0x9f
 8001314:	4002      	ands	r2, r0
 8001316:	1a5b      	subs	r3, r3, r1
 8001318:	0192      	lsls	r2, r2, #6
 800131a:	0a54      	lsrs	r4, r2, #9
 800131c:	b2d8      	uxtb	r0, r3
 800131e:	e7e3      	b.n	80012e8 <__aeabi_ui2f+0x28>
 8001320:	0002      	movs	r2, r0
 8001322:	0020      	movs	r0, r4
 8001324:	321b      	adds	r2, #27
 8001326:	4090      	lsls	r0, r2
 8001328:	0002      	movs	r2, r0
 800132a:	1e50      	subs	r0, r2, #1
 800132c:	4182      	sbcs	r2, r0
 800132e:	2005      	movs	r0, #5
 8001330:	1a40      	subs	r0, r0, r1
 8001332:	40c4      	lsrs	r4, r0
 8001334:	4314      	orrs	r4, r2
 8001336:	e7e0      	b.n	80012fa <__aeabi_ui2f+0x3a>
 8001338:	0264      	lsls	r4, r4, #9
 800133a:	2096      	movs	r0, #150	@ 0x96
 800133c:	0a64      	lsrs	r4, r4, #9
 800133e:	e7d3      	b.n	80012e8 <__aeabi_ui2f+0x28>
 8001340:	fbffffff 	.word	0xfbffffff

08001344 <__aeabi_dadd>:
 8001344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001346:	4657      	mov	r7, sl
 8001348:	464e      	mov	r6, r9
 800134a:	4645      	mov	r5, r8
 800134c:	46de      	mov	lr, fp
 800134e:	b5e0      	push	{r5, r6, r7, lr}
 8001350:	b083      	sub	sp, #12
 8001352:	9000      	str	r0, [sp, #0]
 8001354:	9101      	str	r1, [sp, #4]
 8001356:	030c      	lsls	r4, r1, #12
 8001358:	004f      	lsls	r7, r1, #1
 800135a:	0fce      	lsrs	r6, r1, #31
 800135c:	0a61      	lsrs	r1, r4, #9
 800135e:	9c00      	ldr	r4, [sp, #0]
 8001360:	031d      	lsls	r5, r3, #12
 8001362:	0f64      	lsrs	r4, r4, #29
 8001364:	430c      	orrs	r4, r1
 8001366:	9900      	ldr	r1, [sp, #0]
 8001368:	9200      	str	r2, [sp, #0]
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	00c8      	lsls	r0, r1, #3
 800136e:	0059      	lsls	r1, r3, #1
 8001370:	0d4b      	lsrs	r3, r1, #21
 8001372:	4699      	mov	r9, r3
 8001374:	9a00      	ldr	r2, [sp, #0]
 8001376:	9b01      	ldr	r3, [sp, #4]
 8001378:	0a6d      	lsrs	r5, r5, #9
 800137a:	0fd9      	lsrs	r1, r3, #31
 800137c:	0f53      	lsrs	r3, r2, #29
 800137e:	432b      	orrs	r3, r5
 8001380:	469a      	mov	sl, r3
 8001382:	9b00      	ldr	r3, [sp, #0]
 8001384:	0d7f      	lsrs	r7, r7, #21
 8001386:	00da      	lsls	r2, r3, #3
 8001388:	4694      	mov	ip, r2
 800138a:	464a      	mov	r2, r9
 800138c:	46b0      	mov	r8, r6
 800138e:	1aba      	subs	r2, r7, r2
 8001390:	428e      	cmp	r6, r1
 8001392:	d100      	bne.n	8001396 <__aeabi_dadd+0x52>
 8001394:	e0b0      	b.n	80014f8 <__aeabi_dadd+0x1b4>
 8001396:	2a00      	cmp	r2, #0
 8001398:	dc00      	bgt.n	800139c <__aeabi_dadd+0x58>
 800139a:	e078      	b.n	800148e <__aeabi_dadd+0x14a>
 800139c:	4649      	mov	r1, r9
 800139e:	2900      	cmp	r1, #0
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dadd+0x60>
 80013a2:	e0e9      	b.n	8001578 <__aeabi_dadd+0x234>
 80013a4:	49c9      	ldr	r1, [pc, #804]	@ (80016cc <__aeabi_dadd+0x388>)
 80013a6:	428f      	cmp	r7, r1
 80013a8:	d100      	bne.n	80013ac <__aeabi_dadd+0x68>
 80013aa:	e195      	b.n	80016d8 <__aeabi_dadd+0x394>
 80013ac:	2501      	movs	r5, #1
 80013ae:	2a38      	cmp	r2, #56	@ 0x38
 80013b0:	dc16      	bgt.n	80013e0 <__aeabi_dadd+0x9c>
 80013b2:	2180      	movs	r1, #128	@ 0x80
 80013b4:	4653      	mov	r3, sl
 80013b6:	0409      	lsls	r1, r1, #16
 80013b8:	430b      	orrs	r3, r1
 80013ba:	469a      	mov	sl, r3
 80013bc:	2a1f      	cmp	r2, #31
 80013be:	dd00      	ble.n	80013c2 <__aeabi_dadd+0x7e>
 80013c0:	e1e7      	b.n	8001792 <__aeabi_dadd+0x44e>
 80013c2:	2120      	movs	r1, #32
 80013c4:	4655      	mov	r5, sl
 80013c6:	1a8b      	subs	r3, r1, r2
 80013c8:	4661      	mov	r1, ip
 80013ca:	409d      	lsls	r5, r3
 80013cc:	40d1      	lsrs	r1, r2
 80013ce:	430d      	orrs	r5, r1
 80013d0:	4661      	mov	r1, ip
 80013d2:	4099      	lsls	r1, r3
 80013d4:	1e4b      	subs	r3, r1, #1
 80013d6:	4199      	sbcs	r1, r3
 80013d8:	4653      	mov	r3, sl
 80013da:	40d3      	lsrs	r3, r2
 80013dc:	430d      	orrs	r5, r1
 80013de:	1ae4      	subs	r4, r4, r3
 80013e0:	1b45      	subs	r5, r0, r5
 80013e2:	42a8      	cmp	r0, r5
 80013e4:	4180      	sbcs	r0, r0
 80013e6:	4240      	negs	r0, r0
 80013e8:	1a24      	subs	r4, r4, r0
 80013ea:	0223      	lsls	r3, r4, #8
 80013ec:	d400      	bmi.n	80013f0 <__aeabi_dadd+0xac>
 80013ee:	e10f      	b.n	8001610 <__aeabi_dadd+0x2cc>
 80013f0:	0264      	lsls	r4, r4, #9
 80013f2:	0a64      	lsrs	r4, r4, #9
 80013f4:	2c00      	cmp	r4, #0
 80013f6:	d100      	bne.n	80013fa <__aeabi_dadd+0xb6>
 80013f8:	e139      	b.n	800166e <__aeabi_dadd+0x32a>
 80013fa:	0020      	movs	r0, r4
 80013fc:	f001 ff2a 	bl	8003254 <__clzsi2>
 8001400:	0003      	movs	r3, r0
 8001402:	3b08      	subs	r3, #8
 8001404:	2120      	movs	r1, #32
 8001406:	0028      	movs	r0, r5
 8001408:	1aca      	subs	r2, r1, r3
 800140a:	40d0      	lsrs	r0, r2
 800140c:	409c      	lsls	r4, r3
 800140e:	0002      	movs	r2, r0
 8001410:	409d      	lsls	r5, r3
 8001412:	4322      	orrs	r2, r4
 8001414:	429f      	cmp	r7, r3
 8001416:	dd00      	ble.n	800141a <__aeabi_dadd+0xd6>
 8001418:	e173      	b.n	8001702 <__aeabi_dadd+0x3be>
 800141a:	1bd8      	subs	r0, r3, r7
 800141c:	3001      	adds	r0, #1
 800141e:	1a09      	subs	r1, r1, r0
 8001420:	002c      	movs	r4, r5
 8001422:	408d      	lsls	r5, r1
 8001424:	40c4      	lsrs	r4, r0
 8001426:	1e6b      	subs	r3, r5, #1
 8001428:	419d      	sbcs	r5, r3
 800142a:	0013      	movs	r3, r2
 800142c:	40c2      	lsrs	r2, r0
 800142e:	408b      	lsls	r3, r1
 8001430:	4325      	orrs	r5, r4
 8001432:	2700      	movs	r7, #0
 8001434:	0014      	movs	r4, r2
 8001436:	431d      	orrs	r5, r3
 8001438:	076b      	lsls	r3, r5, #29
 800143a:	d009      	beq.n	8001450 <__aeabi_dadd+0x10c>
 800143c:	230f      	movs	r3, #15
 800143e:	402b      	ands	r3, r5
 8001440:	2b04      	cmp	r3, #4
 8001442:	d005      	beq.n	8001450 <__aeabi_dadd+0x10c>
 8001444:	1d2b      	adds	r3, r5, #4
 8001446:	42ab      	cmp	r3, r5
 8001448:	41ad      	sbcs	r5, r5
 800144a:	426d      	negs	r5, r5
 800144c:	1964      	adds	r4, r4, r5
 800144e:	001d      	movs	r5, r3
 8001450:	0223      	lsls	r3, r4, #8
 8001452:	d400      	bmi.n	8001456 <__aeabi_dadd+0x112>
 8001454:	e12d      	b.n	80016b2 <__aeabi_dadd+0x36e>
 8001456:	4a9d      	ldr	r2, [pc, #628]	@ (80016cc <__aeabi_dadd+0x388>)
 8001458:	3701      	adds	r7, #1
 800145a:	4297      	cmp	r7, r2
 800145c:	d100      	bne.n	8001460 <__aeabi_dadd+0x11c>
 800145e:	e0d3      	b.n	8001608 <__aeabi_dadd+0x2c4>
 8001460:	4646      	mov	r6, r8
 8001462:	499b      	ldr	r1, [pc, #620]	@ (80016d0 <__aeabi_dadd+0x38c>)
 8001464:	08ed      	lsrs	r5, r5, #3
 8001466:	4021      	ands	r1, r4
 8001468:	074a      	lsls	r2, r1, #29
 800146a:	432a      	orrs	r2, r5
 800146c:	057c      	lsls	r4, r7, #21
 800146e:	024d      	lsls	r5, r1, #9
 8001470:	0b2d      	lsrs	r5, r5, #12
 8001472:	0d64      	lsrs	r4, r4, #21
 8001474:	0524      	lsls	r4, r4, #20
 8001476:	432c      	orrs	r4, r5
 8001478:	07f6      	lsls	r6, r6, #31
 800147a:	4334      	orrs	r4, r6
 800147c:	0010      	movs	r0, r2
 800147e:	0021      	movs	r1, r4
 8001480:	b003      	add	sp, #12
 8001482:	bcf0      	pop	{r4, r5, r6, r7}
 8001484:	46bb      	mov	fp, r7
 8001486:	46b2      	mov	sl, r6
 8001488:	46a9      	mov	r9, r5
 800148a:	46a0      	mov	r8, r4
 800148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800148e:	2a00      	cmp	r2, #0
 8001490:	d100      	bne.n	8001494 <__aeabi_dadd+0x150>
 8001492:	e084      	b.n	800159e <__aeabi_dadd+0x25a>
 8001494:	464a      	mov	r2, r9
 8001496:	1bd2      	subs	r2, r2, r7
 8001498:	2f00      	cmp	r7, #0
 800149a:	d000      	beq.n	800149e <__aeabi_dadd+0x15a>
 800149c:	e16d      	b.n	800177a <__aeabi_dadd+0x436>
 800149e:	0025      	movs	r5, r4
 80014a0:	4305      	orrs	r5, r0
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dadd+0x162>
 80014a4:	e127      	b.n	80016f6 <__aeabi_dadd+0x3b2>
 80014a6:	1e56      	subs	r6, r2, #1
 80014a8:	2a01      	cmp	r2, #1
 80014aa:	d100      	bne.n	80014ae <__aeabi_dadd+0x16a>
 80014ac:	e23b      	b.n	8001926 <__aeabi_dadd+0x5e2>
 80014ae:	4d87      	ldr	r5, [pc, #540]	@ (80016cc <__aeabi_dadd+0x388>)
 80014b0:	42aa      	cmp	r2, r5
 80014b2:	d100      	bne.n	80014b6 <__aeabi_dadd+0x172>
 80014b4:	e26a      	b.n	800198c <__aeabi_dadd+0x648>
 80014b6:	2501      	movs	r5, #1
 80014b8:	2e38      	cmp	r6, #56	@ 0x38
 80014ba:	dc12      	bgt.n	80014e2 <__aeabi_dadd+0x19e>
 80014bc:	0032      	movs	r2, r6
 80014be:	2a1f      	cmp	r2, #31
 80014c0:	dd00      	ble.n	80014c4 <__aeabi_dadd+0x180>
 80014c2:	e1f8      	b.n	80018b6 <__aeabi_dadd+0x572>
 80014c4:	2620      	movs	r6, #32
 80014c6:	0025      	movs	r5, r4
 80014c8:	1ab6      	subs	r6, r6, r2
 80014ca:	0007      	movs	r7, r0
 80014cc:	4653      	mov	r3, sl
 80014ce:	40b0      	lsls	r0, r6
 80014d0:	40d4      	lsrs	r4, r2
 80014d2:	40b5      	lsls	r5, r6
 80014d4:	40d7      	lsrs	r7, r2
 80014d6:	1e46      	subs	r6, r0, #1
 80014d8:	41b0      	sbcs	r0, r6
 80014da:	1b1b      	subs	r3, r3, r4
 80014dc:	469a      	mov	sl, r3
 80014de:	433d      	orrs	r5, r7
 80014e0:	4305      	orrs	r5, r0
 80014e2:	4662      	mov	r2, ip
 80014e4:	1b55      	subs	r5, r2, r5
 80014e6:	45ac      	cmp	ip, r5
 80014e8:	4192      	sbcs	r2, r2
 80014ea:	4653      	mov	r3, sl
 80014ec:	4252      	negs	r2, r2
 80014ee:	000e      	movs	r6, r1
 80014f0:	464f      	mov	r7, r9
 80014f2:	4688      	mov	r8, r1
 80014f4:	1a9c      	subs	r4, r3, r2
 80014f6:	e778      	b.n	80013ea <__aeabi_dadd+0xa6>
 80014f8:	2a00      	cmp	r2, #0
 80014fa:	dc00      	bgt.n	80014fe <__aeabi_dadd+0x1ba>
 80014fc:	e08e      	b.n	800161c <__aeabi_dadd+0x2d8>
 80014fe:	4649      	mov	r1, r9
 8001500:	2900      	cmp	r1, #0
 8001502:	d175      	bne.n	80015f0 <__aeabi_dadd+0x2ac>
 8001504:	4661      	mov	r1, ip
 8001506:	4653      	mov	r3, sl
 8001508:	4319      	orrs	r1, r3
 800150a:	d100      	bne.n	800150e <__aeabi_dadd+0x1ca>
 800150c:	e0f6      	b.n	80016fc <__aeabi_dadd+0x3b8>
 800150e:	1e51      	subs	r1, r2, #1
 8001510:	2a01      	cmp	r2, #1
 8001512:	d100      	bne.n	8001516 <__aeabi_dadd+0x1d2>
 8001514:	e191      	b.n	800183a <__aeabi_dadd+0x4f6>
 8001516:	4d6d      	ldr	r5, [pc, #436]	@ (80016cc <__aeabi_dadd+0x388>)
 8001518:	42aa      	cmp	r2, r5
 800151a:	d100      	bne.n	800151e <__aeabi_dadd+0x1da>
 800151c:	e0dc      	b.n	80016d8 <__aeabi_dadd+0x394>
 800151e:	2501      	movs	r5, #1
 8001520:	2938      	cmp	r1, #56	@ 0x38
 8001522:	dc14      	bgt.n	800154e <__aeabi_dadd+0x20a>
 8001524:	000a      	movs	r2, r1
 8001526:	2a1f      	cmp	r2, #31
 8001528:	dd00      	ble.n	800152c <__aeabi_dadd+0x1e8>
 800152a:	e1a2      	b.n	8001872 <__aeabi_dadd+0x52e>
 800152c:	2120      	movs	r1, #32
 800152e:	4653      	mov	r3, sl
 8001530:	1a89      	subs	r1, r1, r2
 8001532:	408b      	lsls	r3, r1
 8001534:	001d      	movs	r5, r3
 8001536:	4663      	mov	r3, ip
 8001538:	40d3      	lsrs	r3, r2
 800153a:	431d      	orrs	r5, r3
 800153c:	4663      	mov	r3, ip
 800153e:	408b      	lsls	r3, r1
 8001540:	0019      	movs	r1, r3
 8001542:	1e4b      	subs	r3, r1, #1
 8001544:	4199      	sbcs	r1, r3
 8001546:	4653      	mov	r3, sl
 8001548:	40d3      	lsrs	r3, r2
 800154a:	430d      	orrs	r5, r1
 800154c:	18e4      	adds	r4, r4, r3
 800154e:	182d      	adds	r5, r5, r0
 8001550:	4285      	cmp	r5, r0
 8001552:	4180      	sbcs	r0, r0
 8001554:	4240      	negs	r0, r0
 8001556:	1824      	adds	r4, r4, r0
 8001558:	0223      	lsls	r3, r4, #8
 800155a:	d559      	bpl.n	8001610 <__aeabi_dadd+0x2cc>
 800155c:	4b5b      	ldr	r3, [pc, #364]	@ (80016cc <__aeabi_dadd+0x388>)
 800155e:	3701      	adds	r7, #1
 8001560:	429f      	cmp	r7, r3
 8001562:	d051      	beq.n	8001608 <__aeabi_dadd+0x2c4>
 8001564:	2101      	movs	r1, #1
 8001566:	4b5a      	ldr	r3, [pc, #360]	@ (80016d0 <__aeabi_dadd+0x38c>)
 8001568:	086a      	lsrs	r2, r5, #1
 800156a:	401c      	ands	r4, r3
 800156c:	4029      	ands	r1, r5
 800156e:	430a      	orrs	r2, r1
 8001570:	07e5      	lsls	r5, r4, #31
 8001572:	4315      	orrs	r5, r2
 8001574:	0864      	lsrs	r4, r4, #1
 8001576:	e75f      	b.n	8001438 <__aeabi_dadd+0xf4>
 8001578:	4661      	mov	r1, ip
 800157a:	4653      	mov	r3, sl
 800157c:	4319      	orrs	r1, r3
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x23e>
 8001580:	e0bc      	b.n	80016fc <__aeabi_dadd+0x3b8>
 8001582:	1e51      	subs	r1, r2, #1
 8001584:	2a01      	cmp	r2, #1
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x246>
 8001588:	e164      	b.n	8001854 <__aeabi_dadd+0x510>
 800158a:	4d50      	ldr	r5, [pc, #320]	@ (80016cc <__aeabi_dadd+0x388>)
 800158c:	42aa      	cmp	r2, r5
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x24e>
 8001590:	e16a      	b.n	8001868 <__aeabi_dadd+0x524>
 8001592:	2501      	movs	r5, #1
 8001594:	2938      	cmp	r1, #56	@ 0x38
 8001596:	dd00      	ble.n	800159a <__aeabi_dadd+0x256>
 8001598:	e722      	b.n	80013e0 <__aeabi_dadd+0x9c>
 800159a:	000a      	movs	r2, r1
 800159c:	e70e      	b.n	80013bc <__aeabi_dadd+0x78>
 800159e:	4a4d      	ldr	r2, [pc, #308]	@ (80016d4 <__aeabi_dadd+0x390>)
 80015a0:	1c7d      	adds	r5, r7, #1
 80015a2:	4215      	tst	r5, r2
 80015a4:	d000      	beq.n	80015a8 <__aeabi_dadd+0x264>
 80015a6:	e0d0      	b.n	800174a <__aeabi_dadd+0x406>
 80015a8:	0025      	movs	r5, r4
 80015aa:	4662      	mov	r2, ip
 80015ac:	4653      	mov	r3, sl
 80015ae:	4305      	orrs	r5, r0
 80015b0:	431a      	orrs	r2, r3
 80015b2:	2f00      	cmp	r7, #0
 80015b4:	d000      	beq.n	80015b8 <__aeabi_dadd+0x274>
 80015b6:	e137      	b.n	8001828 <__aeabi_dadd+0x4e4>
 80015b8:	2d00      	cmp	r5, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_dadd+0x27a>
 80015bc:	e1a8      	b.n	8001910 <__aeabi_dadd+0x5cc>
 80015be:	2a00      	cmp	r2, #0
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dadd+0x280>
 80015c2:	e16a      	b.n	800189a <__aeabi_dadd+0x556>
 80015c4:	4663      	mov	r3, ip
 80015c6:	1ac5      	subs	r5, r0, r3
 80015c8:	4653      	mov	r3, sl
 80015ca:	1ae2      	subs	r2, r4, r3
 80015cc:	42a8      	cmp	r0, r5
 80015ce:	419b      	sbcs	r3, r3
 80015d0:	425b      	negs	r3, r3
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	021a      	lsls	r2, r3, #8
 80015d6:	d400      	bmi.n	80015da <__aeabi_dadd+0x296>
 80015d8:	e203      	b.n	80019e2 <__aeabi_dadd+0x69e>
 80015da:	4663      	mov	r3, ip
 80015dc:	1a1d      	subs	r5, r3, r0
 80015de:	45ac      	cmp	ip, r5
 80015e0:	4192      	sbcs	r2, r2
 80015e2:	4653      	mov	r3, sl
 80015e4:	4252      	negs	r2, r2
 80015e6:	1b1c      	subs	r4, r3, r4
 80015e8:	000e      	movs	r6, r1
 80015ea:	4688      	mov	r8, r1
 80015ec:	1aa4      	subs	r4, r4, r2
 80015ee:	e723      	b.n	8001438 <__aeabi_dadd+0xf4>
 80015f0:	4936      	ldr	r1, [pc, #216]	@ (80016cc <__aeabi_dadd+0x388>)
 80015f2:	428f      	cmp	r7, r1
 80015f4:	d070      	beq.n	80016d8 <__aeabi_dadd+0x394>
 80015f6:	2501      	movs	r5, #1
 80015f8:	2a38      	cmp	r2, #56	@ 0x38
 80015fa:	dca8      	bgt.n	800154e <__aeabi_dadd+0x20a>
 80015fc:	2180      	movs	r1, #128	@ 0x80
 80015fe:	4653      	mov	r3, sl
 8001600:	0409      	lsls	r1, r1, #16
 8001602:	430b      	orrs	r3, r1
 8001604:	469a      	mov	sl, r3
 8001606:	e78e      	b.n	8001526 <__aeabi_dadd+0x1e2>
 8001608:	003c      	movs	r4, r7
 800160a:	2500      	movs	r5, #0
 800160c:	2200      	movs	r2, #0
 800160e:	e731      	b.n	8001474 <__aeabi_dadd+0x130>
 8001610:	2307      	movs	r3, #7
 8001612:	402b      	ands	r3, r5
 8001614:	2b00      	cmp	r3, #0
 8001616:	d000      	beq.n	800161a <__aeabi_dadd+0x2d6>
 8001618:	e710      	b.n	800143c <__aeabi_dadd+0xf8>
 800161a:	e093      	b.n	8001744 <__aeabi_dadd+0x400>
 800161c:	2a00      	cmp	r2, #0
 800161e:	d074      	beq.n	800170a <__aeabi_dadd+0x3c6>
 8001620:	464a      	mov	r2, r9
 8001622:	1bd2      	subs	r2, r2, r7
 8001624:	2f00      	cmp	r7, #0
 8001626:	d100      	bne.n	800162a <__aeabi_dadd+0x2e6>
 8001628:	e0c7      	b.n	80017ba <__aeabi_dadd+0x476>
 800162a:	4928      	ldr	r1, [pc, #160]	@ (80016cc <__aeabi_dadd+0x388>)
 800162c:	4589      	cmp	r9, r1
 800162e:	d100      	bne.n	8001632 <__aeabi_dadd+0x2ee>
 8001630:	e185      	b.n	800193e <__aeabi_dadd+0x5fa>
 8001632:	2501      	movs	r5, #1
 8001634:	2a38      	cmp	r2, #56	@ 0x38
 8001636:	dc12      	bgt.n	800165e <__aeabi_dadd+0x31a>
 8001638:	2180      	movs	r1, #128	@ 0x80
 800163a:	0409      	lsls	r1, r1, #16
 800163c:	430c      	orrs	r4, r1
 800163e:	2a1f      	cmp	r2, #31
 8001640:	dd00      	ble.n	8001644 <__aeabi_dadd+0x300>
 8001642:	e1ab      	b.n	800199c <__aeabi_dadd+0x658>
 8001644:	2120      	movs	r1, #32
 8001646:	0025      	movs	r5, r4
 8001648:	1a89      	subs	r1, r1, r2
 800164a:	0007      	movs	r7, r0
 800164c:	4088      	lsls	r0, r1
 800164e:	408d      	lsls	r5, r1
 8001650:	40d7      	lsrs	r7, r2
 8001652:	1e41      	subs	r1, r0, #1
 8001654:	4188      	sbcs	r0, r1
 8001656:	40d4      	lsrs	r4, r2
 8001658:	433d      	orrs	r5, r7
 800165a:	4305      	orrs	r5, r0
 800165c:	44a2      	add	sl, r4
 800165e:	4465      	add	r5, ip
 8001660:	4565      	cmp	r5, ip
 8001662:	4192      	sbcs	r2, r2
 8001664:	4252      	negs	r2, r2
 8001666:	4452      	add	r2, sl
 8001668:	0014      	movs	r4, r2
 800166a:	464f      	mov	r7, r9
 800166c:	e774      	b.n	8001558 <__aeabi_dadd+0x214>
 800166e:	0028      	movs	r0, r5
 8001670:	f001 fdf0 	bl	8003254 <__clzsi2>
 8001674:	0003      	movs	r3, r0
 8001676:	3318      	adds	r3, #24
 8001678:	2b1f      	cmp	r3, #31
 800167a:	dc00      	bgt.n	800167e <__aeabi_dadd+0x33a>
 800167c:	e6c2      	b.n	8001404 <__aeabi_dadd+0xc0>
 800167e:	002a      	movs	r2, r5
 8001680:	3808      	subs	r0, #8
 8001682:	4082      	lsls	r2, r0
 8001684:	429f      	cmp	r7, r3
 8001686:	dd00      	ble.n	800168a <__aeabi_dadd+0x346>
 8001688:	e0a9      	b.n	80017de <__aeabi_dadd+0x49a>
 800168a:	1bdb      	subs	r3, r3, r7
 800168c:	1c58      	adds	r0, r3, #1
 800168e:	281f      	cmp	r0, #31
 8001690:	dc00      	bgt.n	8001694 <__aeabi_dadd+0x350>
 8001692:	e1ac      	b.n	80019ee <__aeabi_dadd+0x6aa>
 8001694:	0015      	movs	r5, r2
 8001696:	3b1f      	subs	r3, #31
 8001698:	40dd      	lsrs	r5, r3
 800169a:	2820      	cmp	r0, #32
 800169c:	d005      	beq.n	80016aa <__aeabi_dadd+0x366>
 800169e:	2340      	movs	r3, #64	@ 0x40
 80016a0:	1a1b      	subs	r3, r3, r0
 80016a2:	409a      	lsls	r2, r3
 80016a4:	1e53      	subs	r3, r2, #1
 80016a6:	419a      	sbcs	r2, r3
 80016a8:	4315      	orrs	r5, r2
 80016aa:	2307      	movs	r3, #7
 80016ac:	2700      	movs	r7, #0
 80016ae:	402b      	ands	r3, r5
 80016b0:	e7b0      	b.n	8001614 <__aeabi_dadd+0x2d0>
 80016b2:	08ed      	lsrs	r5, r5, #3
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <__aeabi_dadd+0x388>)
 80016b6:	0762      	lsls	r2, r4, #29
 80016b8:	432a      	orrs	r2, r5
 80016ba:	08e4      	lsrs	r4, r4, #3
 80016bc:	429f      	cmp	r7, r3
 80016be:	d00f      	beq.n	80016e0 <__aeabi_dadd+0x39c>
 80016c0:	0324      	lsls	r4, r4, #12
 80016c2:	0b25      	lsrs	r5, r4, #12
 80016c4:	057c      	lsls	r4, r7, #21
 80016c6:	0d64      	lsrs	r4, r4, #21
 80016c8:	e6d4      	b.n	8001474 <__aeabi_dadd+0x130>
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	000007ff 	.word	0x000007ff
 80016d0:	ff7fffff 	.word	0xff7fffff
 80016d4:	000007fe 	.word	0x000007fe
 80016d8:	08c0      	lsrs	r0, r0, #3
 80016da:	0762      	lsls	r2, r4, #29
 80016dc:	4302      	orrs	r2, r0
 80016de:	08e4      	lsrs	r4, r4, #3
 80016e0:	0013      	movs	r3, r2
 80016e2:	4323      	orrs	r3, r4
 80016e4:	d100      	bne.n	80016e8 <__aeabi_dadd+0x3a4>
 80016e6:	e186      	b.n	80019f6 <__aeabi_dadd+0x6b2>
 80016e8:	2580      	movs	r5, #128	@ 0x80
 80016ea:	032d      	lsls	r5, r5, #12
 80016ec:	4325      	orrs	r5, r4
 80016ee:	032d      	lsls	r5, r5, #12
 80016f0:	4cc3      	ldr	r4, [pc, #780]	@ (8001a00 <__aeabi_dadd+0x6bc>)
 80016f2:	0b2d      	lsrs	r5, r5, #12
 80016f4:	e6be      	b.n	8001474 <__aeabi_dadd+0x130>
 80016f6:	4660      	mov	r0, ip
 80016f8:	4654      	mov	r4, sl
 80016fa:	000e      	movs	r6, r1
 80016fc:	0017      	movs	r7, r2
 80016fe:	08c5      	lsrs	r5, r0, #3
 8001700:	e7d8      	b.n	80016b4 <__aeabi_dadd+0x370>
 8001702:	4cc0      	ldr	r4, [pc, #768]	@ (8001a04 <__aeabi_dadd+0x6c0>)
 8001704:	1aff      	subs	r7, r7, r3
 8001706:	4014      	ands	r4, r2
 8001708:	e696      	b.n	8001438 <__aeabi_dadd+0xf4>
 800170a:	4abf      	ldr	r2, [pc, #764]	@ (8001a08 <__aeabi_dadd+0x6c4>)
 800170c:	1c79      	adds	r1, r7, #1
 800170e:	4211      	tst	r1, r2
 8001710:	d16b      	bne.n	80017ea <__aeabi_dadd+0x4a6>
 8001712:	0022      	movs	r2, r4
 8001714:	4302      	orrs	r2, r0
 8001716:	2f00      	cmp	r7, #0
 8001718:	d000      	beq.n	800171c <__aeabi_dadd+0x3d8>
 800171a:	e0db      	b.n	80018d4 <__aeabi_dadd+0x590>
 800171c:	2a00      	cmp	r2, #0
 800171e:	d100      	bne.n	8001722 <__aeabi_dadd+0x3de>
 8001720:	e12d      	b.n	800197e <__aeabi_dadd+0x63a>
 8001722:	4662      	mov	r2, ip
 8001724:	4653      	mov	r3, sl
 8001726:	431a      	orrs	r2, r3
 8001728:	d100      	bne.n	800172c <__aeabi_dadd+0x3e8>
 800172a:	e0b6      	b.n	800189a <__aeabi_dadd+0x556>
 800172c:	4663      	mov	r3, ip
 800172e:	18c5      	adds	r5, r0, r3
 8001730:	4285      	cmp	r5, r0
 8001732:	4180      	sbcs	r0, r0
 8001734:	4454      	add	r4, sl
 8001736:	4240      	negs	r0, r0
 8001738:	1824      	adds	r4, r4, r0
 800173a:	0223      	lsls	r3, r4, #8
 800173c:	d502      	bpl.n	8001744 <__aeabi_dadd+0x400>
 800173e:	000f      	movs	r7, r1
 8001740:	4bb0      	ldr	r3, [pc, #704]	@ (8001a04 <__aeabi_dadd+0x6c0>)
 8001742:	401c      	ands	r4, r3
 8001744:	003a      	movs	r2, r7
 8001746:	0028      	movs	r0, r5
 8001748:	e7d8      	b.n	80016fc <__aeabi_dadd+0x3b8>
 800174a:	4662      	mov	r2, ip
 800174c:	1a85      	subs	r5, r0, r2
 800174e:	42a8      	cmp	r0, r5
 8001750:	4192      	sbcs	r2, r2
 8001752:	4653      	mov	r3, sl
 8001754:	4252      	negs	r2, r2
 8001756:	4691      	mov	r9, r2
 8001758:	1ae3      	subs	r3, r4, r3
 800175a:	001a      	movs	r2, r3
 800175c:	464b      	mov	r3, r9
 800175e:	1ad2      	subs	r2, r2, r3
 8001760:	0013      	movs	r3, r2
 8001762:	4691      	mov	r9, r2
 8001764:	021a      	lsls	r2, r3, #8
 8001766:	d454      	bmi.n	8001812 <__aeabi_dadd+0x4ce>
 8001768:	464a      	mov	r2, r9
 800176a:	464c      	mov	r4, r9
 800176c:	432a      	orrs	r2, r5
 800176e:	d000      	beq.n	8001772 <__aeabi_dadd+0x42e>
 8001770:	e640      	b.n	80013f4 <__aeabi_dadd+0xb0>
 8001772:	2600      	movs	r6, #0
 8001774:	2400      	movs	r4, #0
 8001776:	2500      	movs	r5, #0
 8001778:	e67c      	b.n	8001474 <__aeabi_dadd+0x130>
 800177a:	4da1      	ldr	r5, [pc, #644]	@ (8001a00 <__aeabi_dadd+0x6bc>)
 800177c:	45a9      	cmp	r9, r5
 800177e:	d100      	bne.n	8001782 <__aeabi_dadd+0x43e>
 8001780:	e090      	b.n	80018a4 <__aeabi_dadd+0x560>
 8001782:	2501      	movs	r5, #1
 8001784:	2a38      	cmp	r2, #56	@ 0x38
 8001786:	dd00      	ble.n	800178a <__aeabi_dadd+0x446>
 8001788:	e6ab      	b.n	80014e2 <__aeabi_dadd+0x19e>
 800178a:	2580      	movs	r5, #128	@ 0x80
 800178c:	042d      	lsls	r5, r5, #16
 800178e:	432c      	orrs	r4, r5
 8001790:	e695      	b.n	80014be <__aeabi_dadd+0x17a>
 8001792:	0011      	movs	r1, r2
 8001794:	4655      	mov	r5, sl
 8001796:	3920      	subs	r1, #32
 8001798:	40cd      	lsrs	r5, r1
 800179a:	46a9      	mov	r9, r5
 800179c:	2a20      	cmp	r2, #32
 800179e:	d006      	beq.n	80017ae <__aeabi_dadd+0x46a>
 80017a0:	2140      	movs	r1, #64	@ 0x40
 80017a2:	4653      	mov	r3, sl
 80017a4:	1a8a      	subs	r2, r1, r2
 80017a6:	4093      	lsls	r3, r2
 80017a8:	4662      	mov	r2, ip
 80017aa:	431a      	orrs	r2, r3
 80017ac:	4694      	mov	ip, r2
 80017ae:	4665      	mov	r5, ip
 80017b0:	1e6b      	subs	r3, r5, #1
 80017b2:	419d      	sbcs	r5, r3
 80017b4:	464b      	mov	r3, r9
 80017b6:	431d      	orrs	r5, r3
 80017b8:	e612      	b.n	80013e0 <__aeabi_dadd+0x9c>
 80017ba:	0021      	movs	r1, r4
 80017bc:	4301      	orrs	r1, r0
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x47e>
 80017c0:	e0c4      	b.n	800194c <__aeabi_dadd+0x608>
 80017c2:	1e51      	subs	r1, r2, #1
 80017c4:	2a01      	cmp	r2, #1
 80017c6:	d100      	bne.n	80017ca <__aeabi_dadd+0x486>
 80017c8:	e0fb      	b.n	80019c2 <__aeabi_dadd+0x67e>
 80017ca:	4d8d      	ldr	r5, [pc, #564]	@ (8001a00 <__aeabi_dadd+0x6bc>)
 80017cc:	42aa      	cmp	r2, r5
 80017ce:	d100      	bne.n	80017d2 <__aeabi_dadd+0x48e>
 80017d0:	e0b5      	b.n	800193e <__aeabi_dadd+0x5fa>
 80017d2:	2501      	movs	r5, #1
 80017d4:	2938      	cmp	r1, #56	@ 0x38
 80017d6:	dd00      	ble.n	80017da <__aeabi_dadd+0x496>
 80017d8:	e741      	b.n	800165e <__aeabi_dadd+0x31a>
 80017da:	000a      	movs	r2, r1
 80017dc:	e72f      	b.n	800163e <__aeabi_dadd+0x2fa>
 80017de:	4c89      	ldr	r4, [pc, #548]	@ (8001a04 <__aeabi_dadd+0x6c0>)
 80017e0:	1aff      	subs	r7, r7, r3
 80017e2:	4014      	ands	r4, r2
 80017e4:	0762      	lsls	r2, r4, #29
 80017e6:	08e4      	lsrs	r4, r4, #3
 80017e8:	e76a      	b.n	80016c0 <__aeabi_dadd+0x37c>
 80017ea:	4a85      	ldr	r2, [pc, #532]	@ (8001a00 <__aeabi_dadd+0x6bc>)
 80017ec:	4291      	cmp	r1, r2
 80017ee:	d100      	bne.n	80017f2 <__aeabi_dadd+0x4ae>
 80017f0:	e0e3      	b.n	80019ba <__aeabi_dadd+0x676>
 80017f2:	4663      	mov	r3, ip
 80017f4:	18c2      	adds	r2, r0, r3
 80017f6:	4282      	cmp	r2, r0
 80017f8:	4180      	sbcs	r0, r0
 80017fa:	0023      	movs	r3, r4
 80017fc:	4240      	negs	r0, r0
 80017fe:	4453      	add	r3, sl
 8001800:	181b      	adds	r3, r3, r0
 8001802:	07dd      	lsls	r5, r3, #31
 8001804:	085c      	lsrs	r4, r3, #1
 8001806:	2307      	movs	r3, #7
 8001808:	0852      	lsrs	r2, r2, #1
 800180a:	4315      	orrs	r5, r2
 800180c:	000f      	movs	r7, r1
 800180e:	402b      	ands	r3, r5
 8001810:	e700      	b.n	8001614 <__aeabi_dadd+0x2d0>
 8001812:	4663      	mov	r3, ip
 8001814:	1a1d      	subs	r5, r3, r0
 8001816:	45ac      	cmp	ip, r5
 8001818:	4192      	sbcs	r2, r2
 800181a:	4653      	mov	r3, sl
 800181c:	4252      	negs	r2, r2
 800181e:	1b1c      	subs	r4, r3, r4
 8001820:	000e      	movs	r6, r1
 8001822:	4688      	mov	r8, r1
 8001824:	1aa4      	subs	r4, r4, r2
 8001826:	e5e5      	b.n	80013f4 <__aeabi_dadd+0xb0>
 8001828:	2d00      	cmp	r5, #0
 800182a:	d000      	beq.n	800182e <__aeabi_dadd+0x4ea>
 800182c:	e091      	b.n	8001952 <__aeabi_dadd+0x60e>
 800182e:	2a00      	cmp	r2, #0
 8001830:	d138      	bne.n	80018a4 <__aeabi_dadd+0x560>
 8001832:	2480      	movs	r4, #128	@ 0x80
 8001834:	2600      	movs	r6, #0
 8001836:	0324      	lsls	r4, r4, #12
 8001838:	e756      	b.n	80016e8 <__aeabi_dadd+0x3a4>
 800183a:	4663      	mov	r3, ip
 800183c:	18c5      	adds	r5, r0, r3
 800183e:	4285      	cmp	r5, r0
 8001840:	4180      	sbcs	r0, r0
 8001842:	4454      	add	r4, sl
 8001844:	4240      	negs	r0, r0
 8001846:	1824      	adds	r4, r4, r0
 8001848:	2701      	movs	r7, #1
 800184a:	0223      	lsls	r3, r4, #8
 800184c:	d400      	bmi.n	8001850 <__aeabi_dadd+0x50c>
 800184e:	e6df      	b.n	8001610 <__aeabi_dadd+0x2cc>
 8001850:	2702      	movs	r7, #2
 8001852:	e687      	b.n	8001564 <__aeabi_dadd+0x220>
 8001854:	4663      	mov	r3, ip
 8001856:	1ac5      	subs	r5, r0, r3
 8001858:	42a8      	cmp	r0, r5
 800185a:	4180      	sbcs	r0, r0
 800185c:	4653      	mov	r3, sl
 800185e:	4240      	negs	r0, r0
 8001860:	1ae4      	subs	r4, r4, r3
 8001862:	2701      	movs	r7, #1
 8001864:	1a24      	subs	r4, r4, r0
 8001866:	e5c0      	b.n	80013ea <__aeabi_dadd+0xa6>
 8001868:	0762      	lsls	r2, r4, #29
 800186a:	08c0      	lsrs	r0, r0, #3
 800186c:	4302      	orrs	r2, r0
 800186e:	08e4      	lsrs	r4, r4, #3
 8001870:	e736      	b.n	80016e0 <__aeabi_dadd+0x39c>
 8001872:	0011      	movs	r1, r2
 8001874:	4653      	mov	r3, sl
 8001876:	3920      	subs	r1, #32
 8001878:	40cb      	lsrs	r3, r1
 800187a:	4699      	mov	r9, r3
 800187c:	2a20      	cmp	r2, #32
 800187e:	d006      	beq.n	800188e <__aeabi_dadd+0x54a>
 8001880:	2140      	movs	r1, #64	@ 0x40
 8001882:	4653      	mov	r3, sl
 8001884:	1a8a      	subs	r2, r1, r2
 8001886:	4093      	lsls	r3, r2
 8001888:	4662      	mov	r2, ip
 800188a:	431a      	orrs	r2, r3
 800188c:	4694      	mov	ip, r2
 800188e:	4665      	mov	r5, ip
 8001890:	1e6b      	subs	r3, r5, #1
 8001892:	419d      	sbcs	r5, r3
 8001894:	464b      	mov	r3, r9
 8001896:	431d      	orrs	r5, r3
 8001898:	e659      	b.n	800154e <__aeabi_dadd+0x20a>
 800189a:	0762      	lsls	r2, r4, #29
 800189c:	08c0      	lsrs	r0, r0, #3
 800189e:	4302      	orrs	r2, r0
 80018a0:	08e4      	lsrs	r4, r4, #3
 80018a2:	e70d      	b.n	80016c0 <__aeabi_dadd+0x37c>
 80018a4:	4653      	mov	r3, sl
 80018a6:	075a      	lsls	r2, r3, #29
 80018a8:	4663      	mov	r3, ip
 80018aa:	08d8      	lsrs	r0, r3, #3
 80018ac:	4653      	mov	r3, sl
 80018ae:	000e      	movs	r6, r1
 80018b0:	4302      	orrs	r2, r0
 80018b2:	08dc      	lsrs	r4, r3, #3
 80018b4:	e714      	b.n	80016e0 <__aeabi_dadd+0x39c>
 80018b6:	0015      	movs	r5, r2
 80018b8:	0026      	movs	r6, r4
 80018ba:	3d20      	subs	r5, #32
 80018bc:	40ee      	lsrs	r6, r5
 80018be:	2a20      	cmp	r2, #32
 80018c0:	d003      	beq.n	80018ca <__aeabi_dadd+0x586>
 80018c2:	2540      	movs	r5, #64	@ 0x40
 80018c4:	1aaa      	subs	r2, r5, r2
 80018c6:	4094      	lsls	r4, r2
 80018c8:	4320      	orrs	r0, r4
 80018ca:	1e42      	subs	r2, r0, #1
 80018cc:	4190      	sbcs	r0, r2
 80018ce:	0005      	movs	r5, r0
 80018d0:	4335      	orrs	r5, r6
 80018d2:	e606      	b.n	80014e2 <__aeabi_dadd+0x19e>
 80018d4:	2a00      	cmp	r2, #0
 80018d6:	d07c      	beq.n	80019d2 <__aeabi_dadd+0x68e>
 80018d8:	4662      	mov	r2, ip
 80018da:	4653      	mov	r3, sl
 80018dc:	08c0      	lsrs	r0, r0, #3
 80018de:	431a      	orrs	r2, r3
 80018e0:	d100      	bne.n	80018e4 <__aeabi_dadd+0x5a0>
 80018e2:	e6fa      	b.n	80016da <__aeabi_dadd+0x396>
 80018e4:	0762      	lsls	r2, r4, #29
 80018e6:	4310      	orrs	r0, r2
 80018e8:	2280      	movs	r2, #128	@ 0x80
 80018ea:	08e4      	lsrs	r4, r4, #3
 80018ec:	0312      	lsls	r2, r2, #12
 80018ee:	4214      	tst	r4, r2
 80018f0:	d008      	beq.n	8001904 <__aeabi_dadd+0x5c0>
 80018f2:	08d9      	lsrs	r1, r3, #3
 80018f4:	4211      	tst	r1, r2
 80018f6:	d105      	bne.n	8001904 <__aeabi_dadd+0x5c0>
 80018f8:	4663      	mov	r3, ip
 80018fa:	08d8      	lsrs	r0, r3, #3
 80018fc:	4653      	mov	r3, sl
 80018fe:	000c      	movs	r4, r1
 8001900:	075b      	lsls	r3, r3, #29
 8001902:	4318      	orrs	r0, r3
 8001904:	0f42      	lsrs	r2, r0, #29
 8001906:	00c0      	lsls	r0, r0, #3
 8001908:	08c0      	lsrs	r0, r0, #3
 800190a:	0752      	lsls	r2, r2, #29
 800190c:	4302      	orrs	r2, r0
 800190e:	e6e7      	b.n	80016e0 <__aeabi_dadd+0x39c>
 8001910:	2a00      	cmp	r2, #0
 8001912:	d100      	bne.n	8001916 <__aeabi_dadd+0x5d2>
 8001914:	e72d      	b.n	8001772 <__aeabi_dadd+0x42e>
 8001916:	4663      	mov	r3, ip
 8001918:	08d8      	lsrs	r0, r3, #3
 800191a:	4653      	mov	r3, sl
 800191c:	075a      	lsls	r2, r3, #29
 800191e:	000e      	movs	r6, r1
 8001920:	4302      	orrs	r2, r0
 8001922:	08dc      	lsrs	r4, r3, #3
 8001924:	e6cc      	b.n	80016c0 <__aeabi_dadd+0x37c>
 8001926:	4663      	mov	r3, ip
 8001928:	1a1d      	subs	r5, r3, r0
 800192a:	45ac      	cmp	ip, r5
 800192c:	4192      	sbcs	r2, r2
 800192e:	4653      	mov	r3, sl
 8001930:	4252      	negs	r2, r2
 8001932:	1b1c      	subs	r4, r3, r4
 8001934:	000e      	movs	r6, r1
 8001936:	4688      	mov	r8, r1
 8001938:	1aa4      	subs	r4, r4, r2
 800193a:	3701      	adds	r7, #1
 800193c:	e555      	b.n	80013ea <__aeabi_dadd+0xa6>
 800193e:	4663      	mov	r3, ip
 8001940:	08d9      	lsrs	r1, r3, #3
 8001942:	4653      	mov	r3, sl
 8001944:	075a      	lsls	r2, r3, #29
 8001946:	430a      	orrs	r2, r1
 8001948:	08dc      	lsrs	r4, r3, #3
 800194a:	e6c9      	b.n	80016e0 <__aeabi_dadd+0x39c>
 800194c:	4660      	mov	r0, ip
 800194e:	4654      	mov	r4, sl
 8001950:	e6d4      	b.n	80016fc <__aeabi_dadd+0x3b8>
 8001952:	08c0      	lsrs	r0, r0, #3
 8001954:	2a00      	cmp	r2, #0
 8001956:	d100      	bne.n	800195a <__aeabi_dadd+0x616>
 8001958:	e6bf      	b.n	80016da <__aeabi_dadd+0x396>
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	4310      	orrs	r0, r2
 800195e:	2280      	movs	r2, #128	@ 0x80
 8001960:	08e4      	lsrs	r4, r4, #3
 8001962:	0312      	lsls	r2, r2, #12
 8001964:	4214      	tst	r4, r2
 8001966:	d0cd      	beq.n	8001904 <__aeabi_dadd+0x5c0>
 8001968:	08dd      	lsrs	r5, r3, #3
 800196a:	4215      	tst	r5, r2
 800196c:	d1ca      	bne.n	8001904 <__aeabi_dadd+0x5c0>
 800196e:	4663      	mov	r3, ip
 8001970:	08d8      	lsrs	r0, r3, #3
 8001972:	4653      	mov	r3, sl
 8001974:	075b      	lsls	r3, r3, #29
 8001976:	000e      	movs	r6, r1
 8001978:	002c      	movs	r4, r5
 800197a:	4318      	orrs	r0, r3
 800197c:	e7c2      	b.n	8001904 <__aeabi_dadd+0x5c0>
 800197e:	4663      	mov	r3, ip
 8001980:	08d9      	lsrs	r1, r3, #3
 8001982:	4653      	mov	r3, sl
 8001984:	075a      	lsls	r2, r3, #29
 8001986:	430a      	orrs	r2, r1
 8001988:	08dc      	lsrs	r4, r3, #3
 800198a:	e699      	b.n	80016c0 <__aeabi_dadd+0x37c>
 800198c:	4663      	mov	r3, ip
 800198e:	08d8      	lsrs	r0, r3, #3
 8001990:	4653      	mov	r3, sl
 8001992:	075a      	lsls	r2, r3, #29
 8001994:	000e      	movs	r6, r1
 8001996:	4302      	orrs	r2, r0
 8001998:	08dc      	lsrs	r4, r3, #3
 800199a:	e6a1      	b.n	80016e0 <__aeabi_dadd+0x39c>
 800199c:	0011      	movs	r1, r2
 800199e:	0027      	movs	r7, r4
 80019a0:	3920      	subs	r1, #32
 80019a2:	40cf      	lsrs	r7, r1
 80019a4:	2a20      	cmp	r2, #32
 80019a6:	d003      	beq.n	80019b0 <__aeabi_dadd+0x66c>
 80019a8:	2140      	movs	r1, #64	@ 0x40
 80019aa:	1a8a      	subs	r2, r1, r2
 80019ac:	4094      	lsls	r4, r2
 80019ae:	4320      	orrs	r0, r4
 80019b0:	1e42      	subs	r2, r0, #1
 80019b2:	4190      	sbcs	r0, r2
 80019b4:	0005      	movs	r5, r0
 80019b6:	433d      	orrs	r5, r7
 80019b8:	e651      	b.n	800165e <__aeabi_dadd+0x31a>
 80019ba:	000c      	movs	r4, r1
 80019bc:	2500      	movs	r5, #0
 80019be:	2200      	movs	r2, #0
 80019c0:	e558      	b.n	8001474 <__aeabi_dadd+0x130>
 80019c2:	4460      	add	r0, ip
 80019c4:	4560      	cmp	r0, ip
 80019c6:	4192      	sbcs	r2, r2
 80019c8:	4454      	add	r4, sl
 80019ca:	4252      	negs	r2, r2
 80019cc:	0005      	movs	r5, r0
 80019ce:	18a4      	adds	r4, r4, r2
 80019d0:	e73a      	b.n	8001848 <__aeabi_dadd+0x504>
 80019d2:	4653      	mov	r3, sl
 80019d4:	075a      	lsls	r2, r3, #29
 80019d6:	4663      	mov	r3, ip
 80019d8:	08d9      	lsrs	r1, r3, #3
 80019da:	4653      	mov	r3, sl
 80019dc:	430a      	orrs	r2, r1
 80019de:	08dc      	lsrs	r4, r3, #3
 80019e0:	e67e      	b.n	80016e0 <__aeabi_dadd+0x39c>
 80019e2:	001a      	movs	r2, r3
 80019e4:	001c      	movs	r4, r3
 80019e6:	432a      	orrs	r2, r5
 80019e8:	d000      	beq.n	80019ec <__aeabi_dadd+0x6a8>
 80019ea:	e6ab      	b.n	8001744 <__aeabi_dadd+0x400>
 80019ec:	e6c1      	b.n	8001772 <__aeabi_dadd+0x42e>
 80019ee:	2120      	movs	r1, #32
 80019f0:	2500      	movs	r5, #0
 80019f2:	1a09      	subs	r1, r1, r0
 80019f4:	e519      	b.n	800142a <__aeabi_dadd+0xe6>
 80019f6:	2200      	movs	r2, #0
 80019f8:	2500      	movs	r5, #0
 80019fa:	4c01      	ldr	r4, [pc, #4]	@ (8001a00 <__aeabi_dadd+0x6bc>)
 80019fc:	e53a      	b.n	8001474 <__aeabi_dadd+0x130>
 80019fe:	46c0      	nop			@ (mov r8, r8)
 8001a00:	000007ff 	.word	0x000007ff
 8001a04:	ff7fffff 	.word	0xff7fffff
 8001a08:	000007fe 	.word	0x000007fe

08001a0c <__aeabi_ddiv>:
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0e:	46de      	mov	lr, fp
 8001a10:	4645      	mov	r5, r8
 8001a12:	4657      	mov	r7, sl
 8001a14:	464e      	mov	r6, r9
 8001a16:	b5e0      	push	{r5, r6, r7, lr}
 8001a18:	b087      	sub	sp, #28
 8001a1a:	9200      	str	r2, [sp, #0]
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	030b      	lsls	r3, r1, #12
 8001a20:	0b1b      	lsrs	r3, r3, #12
 8001a22:	469b      	mov	fp, r3
 8001a24:	0fca      	lsrs	r2, r1, #31
 8001a26:	004b      	lsls	r3, r1, #1
 8001a28:	0004      	movs	r4, r0
 8001a2a:	4680      	mov	r8, r0
 8001a2c:	0d5b      	lsrs	r3, r3, #21
 8001a2e:	9202      	str	r2, [sp, #8]
 8001a30:	d100      	bne.n	8001a34 <__aeabi_ddiv+0x28>
 8001a32:	e16a      	b.n	8001d0a <__aeabi_ddiv+0x2fe>
 8001a34:	4ad4      	ldr	r2, [pc, #848]	@ (8001d88 <__aeabi_ddiv+0x37c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d100      	bne.n	8001a3c <__aeabi_ddiv+0x30>
 8001a3a:	e18c      	b.n	8001d56 <__aeabi_ddiv+0x34a>
 8001a3c:	4659      	mov	r1, fp
 8001a3e:	0f42      	lsrs	r2, r0, #29
 8001a40:	00c9      	lsls	r1, r1, #3
 8001a42:	430a      	orrs	r2, r1
 8001a44:	2180      	movs	r1, #128	@ 0x80
 8001a46:	0409      	lsls	r1, r1, #16
 8001a48:	4311      	orrs	r1, r2
 8001a4a:	00c2      	lsls	r2, r0, #3
 8001a4c:	4690      	mov	r8, r2
 8001a4e:	4acf      	ldr	r2, [pc, #828]	@ (8001d8c <__aeabi_ddiv+0x380>)
 8001a50:	4689      	mov	r9, r1
 8001a52:	4692      	mov	sl, r2
 8001a54:	449a      	add	sl, r3
 8001a56:	2300      	movs	r3, #0
 8001a58:	2400      	movs	r4, #0
 8001a5a:	9303      	str	r3, [sp, #12]
 8001a5c:	9e00      	ldr	r6, [sp, #0]
 8001a5e:	9f01      	ldr	r7, [sp, #4]
 8001a60:	033b      	lsls	r3, r7, #12
 8001a62:	0b1b      	lsrs	r3, r3, #12
 8001a64:	469b      	mov	fp, r3
 8001a66:	007b      	lsls	r3, r7, #1
 8001a68:	0030      	movs	r0, r6
 8001a6a:	0d5b      	lsrs	r3, r3, #21
 8001a6c:	0ffd      	lsrs	r5, r7, #31
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d100      	bne.n	8001a74 <__aeabi_ddiv+0x68>
 8001a72:	e128      	b.n	8001cc6 <__aeabi_ddiv+0x2ba>
 8001a74:	4ac4      	ldr	r2, [pc, #784]	@ (8001d88 <__aeabi_ddiv+0x37c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d100      	bne.n	8001a7c <__aeabi_ddiv+0x70>
 8001a7a:	e177      	b.n	8001d6c <__aeabi_ddiv+0x360>
 8001a7c:	4659      	mov	r1, fp
 8001a7e:	0f72      	lsrs	r2, r6, #29
 8001a80:	00c9      	lsls	r1, r1, #3
 8001a82:	430a      	orrs	r2, r1
 8001a84:	2180      	movs	r1, #128	@ 0x80
 8001a86:	0409      	lsls	r1, r1, #16
 8001a88:	4311      	orrs	r1, r2
 8001a8a:	468b      	mov	fp, r1
 8001a8c:	49bf      	ldr	r1, [pc, #764]	@ (8001d8c <__aeabi_ddiv+0x380>)
 8001a8e:	00f2      	lsls	r2, r6, #3
 8001a90:	468c      	mov	ip, r1
 8001a92:	4651      	mov	r1, sl
 8001a94:	4463      	add	r3, ip
 8001a96:	1acb      	subs	r3, r1, r3
 8001a98:	469a      	mov	sl, r3
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	9e02      	ldr	r6, [sp, #8]
 8001a9e:	406e      	eors	r6, r5
 8001aa0:	2c0f      	cmp	r4, #15
 8001aa2:	d827      	bhi.n	8001af4 <__aeabi_ddiv+0xe8>
 8001aa4:	49ba      	ldr	r1, [pc, #744]	@ (8001d90 <__aeabi_ddiv+0x384>)
 8001aa6:	00a4      	lsls	r4, r4, #2
 8001aa8:	5909      	ldr	r1, [r1, r4]
 8001aaa:	468f      	mov	pc, r1
 8001aac:	46cb      	mov	fp, r9
 8001aae:	4642      	mov	r2, r8
 8001ab0:	9e02      	ldr	r6, [sp, #8]
 8001ab2:	9b03      	ldr	r3, [sp, #12]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d016      	beq.n	8001ae6 <__aeabi_ddiv+0xda>
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d100      	bne.n	8001abe <__aeabi_ddiv+0xb2>
 8001abc:	e2a6      	b.n	800200c <__aeabi_ddiv+0x600>
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_ddiv+0xb8>
 8001ac2:	e0df      	b.n	8001c84 <__aeabi_ddiv+0x278>
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	2400      	movs	r4, #0
 8001aca:	4690      	mov	r8, r2
 8001acc:	051b      	lsls	r3, r3, #20
 8001ace:	4323      	orrs	r3, r4
 8001ad0:	07f6      	lsls	r6, r6, #31
 8001ad2:	4333      	orrs	r3, r6
 8001ad4:	4640      	mov	r0, r8
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	b007      	add	sp, #28
 8001ada:	bcf0      	pop	{r4, r5, r6, r7}
 8001adc:	46bb      	mov	fp, r7
 8001ade:	46b2      	mov	sl, r6
 8001ae0:	46a9      	mov	r9, r5
 8001ae2:	46a0      	mov	r8, r4
 8001ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2400      	movs	r4, #0
 8001aea:	4690      	mov	r8, r2
 8001aec:	4ba6      	ldr	r3, [pc, #664]	@ (8001d88 <__aeabi_ddiv+0x37c>)
 8001aee:	e7ed      	b.n	8001acc <__aeabi_ddiv+0xc0>
 8001af0:	002e      	movs	r6, r5
 8001af2:	e7df      	b.n	8001ab4 <__aeabi_ddiv+0xa8>
 8001af4:	45cb      	cmp	fp, r9
 8001af6:	d200      	bcs.n	8001afa <__aeabi_ddiv+0xee>
 8001af8:	e1d4      	b.n	8001ea4 <__aeabi_ddiv+0x498>
 8001afa:	d100      	bne.n	8001afe <__aeabi_ddiv+0xf2>
 8001afc:	e1cf      	b.n	8001e9e <__aeabi_ddiv+0x492>
 8001afe:	2301      	movs	r3, #1
 8001b00:	425b      	negs	r3, r3
 8001b02:	469c      	mov	ip, r3
 8001b04:	4644      	mov	r4, r8
 8001b06:	4648      	mov	r0, r9
 8001b08:	2700      	movs	r7, #0
 8001b0a:	44e2      	add	sl, ip
 8001b0c:	465b      	mov	r3, fp
 8001b0e:	0e15      	lsrs	r5, r2, #24
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	431d      	orrs	r5, r3
 8001b14:	0c19      	lsrs	r1, r3, #16
 8001b16:	042b      	lsls	r3, r5, #16
 8001b18:	0212      	lsls	r2, r2, #8
 8001b1a:	9500      	str	r5, [sp, #0]
 8001b1c:	0c1d      	lsrs	r5, r3, #16
 8001b1e:	4691      	mov	r9, r2
 8001b20:	9102      	str	r1, [sp, #8]
 8001b22:	9503      	str	r5, [sp, #12]
 8001b24:	f7fe fb8e 	bl	8000244 <__aeabi_uidivmod>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	436a      	muls	r2, r5
 8001b2c:	040b      	lsls	r3, r1, #16
 8001b2e:	0c21      	lsrs	r1, r4, #16
 8001b30:	4680      	mov	r8, r0
 8001b32:	4319      	orrs	r1, r3
 8001b34:	428a      	cmp	r2, r1
 8001b36:	d909      	bls.n	8001b4c <__aeabi_ddiv+0x140>
 8001b38:	9d00      	ldr	r5, [sp, #0]
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	46ac      	mov	ip, r5
 8001b3e:	425b      	negs	r3, r3
 8001b40:	4461      	add	r1, ip
 8001b42:	469c      	mov	ip, r3
 8001b44:	44e0      	add	r8, ip
 8001b46:	428d      	cmp	r5, r1
 8001b48:	d800      	bhi.n	8001b4c <__aeabi_ddiv+0x140>
 8001b4a:	e1fb      	b.n	8001f44 <__aeabi_ddiv+0x538>
 8001b4c:	1a88      	subs	r0, r1, r2
 8001b4e:	9902      	ldr	r1, [sp, #8]
 8001b50:	f7fe fb78 	bl	8000244 <__aeabi_uidivmod>
 8001b54:	9a03      	ldr	r2, [sp, #12]
 8001b56:	0424      	lsls	r4, r4, #16
 8001b58:	4342      	muls	r2, r0
 8001b5a:	0409      	lsls	r1, r1, #16
 8001b5c:	0c24      	lsrs	r4, r4, #16
 8001b5e:	0003      	movs	r3, r0
 8001b60:	430c      	orrs	r4, r1
 8001b62:	42a2      	cmp	r2, r4
 8001b64:	d906      	bls.n	8001b74 <__aeabi_ddiv+0x168>
 8001b66:	9900      	ldr	r1, [sp, #0]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	468c      	mov	ip, r1
 8001b6c:	4464      	add	r4, ip
 8001b6e:	42a1      	cmp	r1, r4
 8001b70:	d800      	bhi.n	8001b74 <__aeabi_ddiv+0x168>
 8001b72:	e1e1      	b.n	8001f38 <__aeabi_ddiv+0x52c>
 8001b74:	1aa0      	subs	r0, r4, r2
 8001b76:	4642      	mov	r2, r8
 8001b78:	0412      	lsls	r2, r2, #16
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	4693      	mov	fp, r2
 8001b7e:	464b      	mov	r3, r9
 8001b80:	4659      	mov	r1, fp
 8001b82:	0c1b      	lsrs	r3, r3, #16
 8001b84:	001d      	movs	r5, r3
 8001b86:	9304      	str	r3, [sp, #16]
 8001b88:	040b      	lsls	r3, r1, #16
 8001b8a:	4649      	mov	r1, r9
 8001b8c:	0409      	lsls	r1, r1, #16
 8001b8e:	0c09      	lsrs	r1, r1, #16
 8001b90:	000c      	movs	r4, r1
 8001b92:	0c1b      	lsrs	r3, r3, #16
 8001b94:	435c      	muls	r4, r3
 8001b96:	0c12      	lsrs	r2, r2, #16
 8001b98:	436b      	muls	r3, r5
 8001b9a:	4688      	mov	r8, r1
 8001b9c:	4351      	muls	r1, r2
 8001b9e:	436a      	muls	r2, r5
 8001ba0:	0c25      	lsrs	r5, r4, #16
 8001ba2:	46ac      	mov	ip, r5
 8001ba4:	185b      	adds	r3, r3, r1
 8001ba6:	4463      	add	r3, ip
 8001ba8:	4299      	cmp	r1, r3
 8001baa:	d903      	bls.n	8001bb4 <__aeabi_ddiv+0x1a8>
 8001bac:	2180      	movs	r1, #128	@ 0x80
 8001bae:	0249      	lsls	r1, r1, #9
 8001bb0:	468c      	mov	ip, r1
 8001bb2:	4462      	add	r2, ip
 8001bb4:	0c19      	lsrs	r1, r3, #16
 8001bb6:	0424      	lsls	r4, r4, #16
 8001bb8:	041b      	lsls	r3, r3, #16
 8001bba:	0c24      	lsrs	r4, r4, #16
 8001bbc:	188a      	adds	r2, r1, r2
 8001bbe:	191c      	adds	r4, r3, r4
 8001bc0:	4290      	cmp	r0, r2
 8001bc2:	d302      	bcc.n	8001bca <__aeabi_ddiv+0x1be>
 8001bc4:	d116      	bne.n	8001bf4 <__aeabi_ddiv+0x1e8>
 8001bc6:	42a7      	cmp	r7, r4
 8001bc8:	d214      	bcs.n	8001bf4 <__aeabi_ddiv+0x1e8>
 8001bca:	465b      	mov	r3, fp
 8001bcc:	9d00      	ldr	r5, [sp, #0]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	444f      	add	r7, r9
 8001bd2:	9305      	str	r3, [sp, #20]
 8001bd4:	454f      	cmp	r7, r9
 8001bd6:	419b      	sbcs	r3, r3
 8001bd8:	46ac      	mov	ip, r5
 8001bda:	425b      	negs	r3, r3
 8001bdc:	4463      	add	r3, ip
 8001bde:	18c0      	adds	r0, r0, r3
 8001be0:	4285      	cmp	r5, r0
 8001be2:	d300      	bcc.n	8001be6 <__aeabi_ddiv+0x1da>
 8001be4:	e1a1      	b.n	8001f2a <__aeabi_ddiv+0x51e>
 8001be6:	4282      	cmp	r2, r0
 8001be8:	d900      	bls.n	8001bec <__aeabi_ddiv+0x1e0>
 8001bea:	e1f6      	b.n	8001fda <__aeabi_ddiv+0x5ce>
 8001bec:	d100      	bne.n	8001bf0 <__aeabi_ddiv+0x1e4>
 8001bee:	e1f1      	b.n	8001fd4 <__aeabi_ddiv+0x5c8>
 8001bf0:	9b05      	ldr	r3, [sp, #20]
 8001bf2:	469b      	mov	fp, r3
 8001bf4:	1b3c      	subs	r4, r7, r4
 8001bf6:	42a7      	cmp	r7, r4
 8001bf8:	41bf      	sbcs	r7, r7
 8001bfa:	9d00      	ldr	r5, [sp, #0]
 8001bfc:	1a80      	subs	r0, r0, r2
 8001bfe:	427f      	negs	r7, r7
 8001c00:	1bc0      	subs	r0, r0, r7
 8001c02:	4285      	cmp	r5, r0
 8001c04:	d100      	bne.n	8001c08 <__aeabi_ddiv+0x1fc>
 8001c06:	e1d0      	b.n	8001faa <__aeabi_ddiv+0x59e>
 8001c08:	9902      	ldr	r1, [sp, #8]
 8001c0a:	f7fe fb1b 	bl	8000244 <__aeabi_uidivmod>
 8001c0e:	9a03      	ldr	r2, [sp, #12]
 8001c10:	040b      	lsls	r3, r1, #16
 8001c12:	4342      	muls	r2, r0
 8001c14:	0c21      	lsrs	r1, r4, #16
 8001c16:	0007      	movs	r7, r0
 8001c18:	4319      	orrs	r1, r3
 8001c1a:	428a      	cmp	r2, r1
 8001c1c:	d900      	bls.n	8001c20 <__aeabi_ddiv+0x214>
 8001c1e:	e178      	b.n	8001f12 <__aeabi_ddiv+0x506>
 8001c20:	1a88      	subs	r0, r1, r2
 8001c22:	9902      	ldr	r1, [sp, #8]
 8001c24:	f7fe fb0e 	bl	8000244 <__aeabi_uidivmod>
 8001c28:	9a03      	ldr	r2, [sp, #12]
 8001c2a:	0424      	lsls	r4, r4, #16
 8001c2c:	4342      	muls	r2, r0
 8001c2e:	0409      	lsls	r1, r1, #16
 8001c30:	0c24      	lsrs	r4, r4, #16
 8001c32:	0003      	movs	r3, r0
 8001c34:	430c      	orrs	r4, r1
 8001c36:	42a2      	cmp	r2, r4
 8001c38:	d900      	bls.n	8001c3c <__aeabi_ddiv+0x230>
 8001c3a:	e15d      	b.n	8001ef8 <__aeabi_ddiv+0x4ec>
 8001c3c:	4641      	mov	r1, r8
 8001c3e:	1aa4      	subs	r4, r4, r2
 8001c40:	043a      	lsls	r2, r7, #16
 8001c42:	431a      	orrs	r2, r3
 8001c44:	9d04      	ldr	r5, [sp, #16]
 8001c46:	0413      	lsls	r3, r2, #16
 8001c48:	0c1b      	lsrs	r3, r3, #16
 8001c4a:	4359      	muls	r1, r3
 8001c4c:	4647      	mov	r7, r8
 8001c4e:	436b      	muls	r3, r5
 8001c50:	469c      	mov	ip, r3
 8001c52:	0c10      	lsrs	r0, r2, #16
 8001c54:	4347      	muls	r7, r0
 8001c56:	0c0b      	lsrs	r3, r1, #16
 8001c58:	44bc      	add	ip, r7
 8001c5a:	4463      	add	r3, ip
 8001c5c:	4368      	muls	r0, r5
 8001c5e:	429f      	cmp	r7, r3
 8001c60:	d903      	bls.n	8001c6a <__aeabi_ddiv+0x25e>
 8001c62:	2580      	movs	r5, #128	@ 0x80
 8001c64:	026d      	lsls	r5, r5, #9
 8001c66:	46ac      	mov	ip, r5
 8001c68:	4460      	add	r0, ip
 8001c6a:	0c1f      	lsrs	r7, r3, #16
 8001c6c:	0409      	lsls	r1, r1, #16
 8001c6e:	041b      	lsls	r3, r3, #16
 8001c70:	0c09      	lsrs	r1, r1, #16
 8001c72:	183f      	adds	r7, r7, r0
 8001c74:	185b      	adds	r3, r3, r1
 8001c76:	42bc      	cmp	r4, r7
 8001c78:	d200      	bcs.n	8001c7c <__aeabi_ddiv+0x270>
 8001c7a:	e102      	b.n	8001e82 <__aeabi_ddiv+0x476>
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_ddiv+0x274>
 8001c7e:	e0fd      	b.n	8001e7c <__aeabi_ddiv+0x470>
 8001c80:	2301      	movs	r3, #1
 8001c82:	431a      	orrs	r2, r3
 8001c84:	4b43      	ldr	r3, [pc, #268]	@ (8001d94 <__aeabi_ddiv+0x388>)
 8001c86:	4453      	add	r3, sl
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	dc00      	bgt.n	8001c8e <__aeabi_ddiv+0x282>
 8001c8c:	e0ae      	b.n	8001dec <__aeabi_ddiv+0x3e0>
 8001c8e:	0751      	lsls	r1, r2, #29
 8001c90:	d000      	beq.n	8001c94 <__aeabi_ddiv+0x288>
 8001c92:	e198      	b.n	8001fc6 <__aeabi_ddiv+0x5ba>
 8001c94:	4659      	mov	r1, fp
 8001c96:	01c9      	lsls	r1, r1, #7
 8001c98:	d506      	bpl.n	8001ca8 <__aeabi_ddiv+0x29c>
 8001c9a:	4659      	mov	r1, fp
 8001c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d98 <__aeabi_ddiv+0x38c>)
 8001c9e:	4019      	ands	r1, r3
 8001ca0:	2380      	movs	r3, #128	@ 0x80
 8001ca2:	468b      	mov	fp, r1
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4453      	add	r3, sl
 8001ca8:	493c      	ldr	r1, [pc, #240]	@ (8001d9c <__aeabi_ddiv+0x390>)
 8001caa:	428b      	cmp	r3, r1
 8001cac:	dd00      	ble.n	8001cb0 <__aeabi_ddiv+0x2a4>
 8001cae:	e71a      	b.n	8001ae6 <__aeabi_ddiv+0xda>
 8001cb0:	4659      	mov	r1, fp
 8001cb2:	08d2      	lsrs	r2, r2, #3
 8001cb4:	0749      	lsls	r1, r1, #29
 8001cb6:	4311      	orrs	r1, r2
 8001cb8:	465a      	mov	r2, fp
 8001cba:	055b      	lsls	r3, r3, #21
 8001cbc:	0254      	lsls	r4, r2, #9
 8001cbe:	4688      	mov	r8, r1
 8001cc0:	0b24      	lsrs	r4, r4, #12
 8001cc2:	0d5b      	lsrs	r3, r3, #21
 8001cc4:	e702      	b.n	8001acc <__aeabi_ddiv+0xc0>
 8001cc6:	465a      	mov	r2, fp
 8001cc8:	9b00      	ldr	r3, [sp, #0]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_ddiv+0x2c4>
 8001cce:	e07e      	b.n	8001dce <__aeabi_ddiv+0x3c2>
 8001cd0:	465b      	mov	r3, fp
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x2cc>
 8001cd6:	e100      	b.n	8001eda <__aeabi_ddiv+0x4ce>
 8001cd8:	4658      	mov	r0, fp
 8001cda:	f001 fabb 	bl	8003254 <__clzsi2>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	3a0b      	subs	r2, #11
 8001ce4:	271d      	movs	r7, #29
 8001ce6:	9e00      	ldr	r6, [sp, #0]
 8001ce8:	1aba      	subs	r2, r7, r2
 8001cea:	0019      	movs	r1, r3
 8001cec:	4658      	mov	r0, fp
 8001cee:	40d6      	lsrs	r6, r2
 8001cf0:	3908      	subs	r1, #8
 8001cf2:	4088      	lsls	r0, r1
 8001cf4:	0032      	movs	r2, r6
 8001cf6:	4302      	orrs	r2, r0
 8001cf8:	4693      	mov	fp, r2
 8001cfa:	9a00      	ldr	r2, [sp, #0]
 8001cfc:	408a      	lsls	r2, r1
 8001cfe:	4928      	ldr	r1, [pc, #160]	@ (8001da0 <__aeabi_ddiv+0x394>)
 8001d00:	4453      	add	r3, sl
 8001d02:	468a      	mov	sl, r1
 8001d04:	449a      	add	sl, r3
 8001d06:	2300      	movs	r3, #0
 8001d08:	e6c8      	b.n	8001a9c <__aeabi_ddiv+0x90>
 8001d0a:	465b      	mov	r3, fp
 8001d0c:	4303      	orrs	r3, r0
 8001d0e:	4699      	mov	r9, r3
 8001d10:	d056      	beq.n	8001dc0 <__aeabi_ddiv+0x3b4>
 8001d12:	465b      	mov	r3, fp
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d100      	bne.n	8001d1a <__aeabi_ddiv+0x30e>
 8001d18:	e0cd      	b.n	8001eb6 <__aeabi_ddiv+0x4aa>
 8001d1a:	4658      	mov	r0, fp
 8001d1c:	f001 fa9a 	bl	8003254 <__clzsi2>
 8001d20:	230b      	movs	r3, #11
 8001d22:	425b      	negs	r3, r3
 8001d24:	469c      	mov	ip, r3
 8001d26:	0002      	movs	r2, r0
 8001d28:	4484      	add	ip, r0
 8001d2a:	4666      	mov	r6, ip
 8001d2c:	231d      	movs	r3, #29
 8001d2e:	1b9b      	subs	r3, r3, r6
 8001d30:	0026      	movs	r6, r4
 8001d32:	0011      	movs	r1, r2
 8001d34:	4658      	mov	r0, fp
 8001d36:	40de      	lsrs	r6, r3
 8001d38:	3908      	subs	r1, #8
 8001d3a:	4088      	lsls	r0, r1
 8001d3c:	0033      	movs	r3, r6
 8001d3e:	4303      	orrs	r3, r0
 8001d40:	4699      	mov	r9, r3
 8001d42:	0023      	movs	r3, r4
 8001d44:	408b      	lsls	r3, r1
 8001d46:	4698      	mov	r8, r3
 8001d48:	4b16      	ldr	r3, [pc, #88]	@ (8001da4 <__aeabi_ddiv+0x398>)
 8001d4a:	2400      	movs	r4, #0
 8001d4c:	1a9b      	subs	r3, r3, r2
 8001d4e:	469a      	mov	sl, r3
 8001d50:	2300      	movs	r3, #0
 8001d52:	9303      	str	r3, [sp, #12]
 8001d54:	e682      	b.n	8001a5c <__aeabi_ddiv+0x50>
 8001d56:	465a      	mov	r2, fp
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	4691      	mov	r9, r2
 8001d5c:	d12a      	bne.n	8001db4 <__aeabi_ddiv+0x3a8>
 8001d5e:	2200      	movs	r2, #0
 8001d60:	469a      	mov	sl, r3
 8001d62:	2302      	movs	r3, #2
 8001d64:	4690      	mov	r8, r2
 8001d66:	2408      	movs	r4, #8
 8001d68:	9303      	str	r3, [sp, #12]
 8001d6a:	e677      	b.n	8001a5c <__aeabi_ddiv+0x50>
 8001d6c:	465a      	mov	r2, fp
 8001d6e:	9b00      	ldr	r3, [sp, #0]
 8001d70:	431a      	orrs	r2, r3
 8001d72:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <__aeabi_ddiv+0x39c>)
 8001d74:	469c      	mov	ip, r3
 8001d76:	44e2      	add	sl, ip
 8001d78:	2a00      	cmp	r2, #0
 8001d7a:	d117      	bne.n	8001dac <__aeabi_ddiv+0x3a0>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	431c      	orrs	r4, r3
 8001d80:	2300      	movs	r3, #0
 8001d82:	469b      	mov	fp, r3
 8001d84:	3302      	adds	r3, #2
 8001d86:	e689      	b.n	8001a9c <__aeabi_ddiv+0x90>
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	fffffc01 	.word	0xfffffc01
 8001d90:	0800db8c 	.word	0x0800db8c
 8001d94:	000003ff 	.word	0x000003ff
 8001d98:	feffffff 	.word	0xfeffffff
 8001d9c:	000007fe 	.word	0x000007fe
 8001da0:	000003f3 	.word	0x000003f3
 8001da4:	fffffc0d 	.word	0xfffffc0d
 8001da8:	fffff801 	.word	0xfffff801
 8001dac:	2303      	movs	r3, #3
 8001dae:	0032      	movs	r2, r6
 8001db0:	431c      	orrs	r4, r3
 8001db2:	e673      	b.n	8001a9c <__aeabi_ddiv+0x90>
 8001db4:	469a      	mov	sl, r3
 8001db6:	2303      	movs	r3, #3
 8001db8:	46d9      	mov	r9, fp
 8001dba:	240c      	movs	r4, #12
 8001dbc:	9303      	str	r3, [sp, #12]
 8001dbe:	e64d      	b.n	8001a5c <__aeabi_ddiv+0x50>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	4698      	mov	r8, r3
 8001dc4:	469a      	mov	sl, r3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	2404      	movs	r4, #4
 8001dca:	9303      	str	r3, [sp, #12]
 8001dcc:	e646      	b.n	8001a5c <__aeabi_ddiv+0x50>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	431c      	orrs	r4, r3
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	469b      	mov	fp, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	e660      	b.n	8001a9c <__aeabi_ddiv+0x90>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	2480      	movs	r4, #128	@ 0x80
 8001dde:	4698      	mov	r8, r3
 8001de0:	2600      	movs	r6, #0
 8001de2:	4b92      	ldr	r3, [pc, #584]	@ (800202c <__aeabi_ddiv+0x620>)
 8001de4:	0324      	lsls	r4, r4, #12
 8001de6:	e671      	b.n	8001acc <__aeabi_ddiv+0xc0>
 8001de8:	2201      	movs	r2, #1
 8001dea:	4252      	negs	r2, r2
 8001dec:	2101      	movs	r1, #1
 8001dee:	1ac9      	subs	r1, r1, r3
 8001df0:	2938      	cmp	r1, #56	@ 0x38
 8001df2:	dd00      	ble.n	8001df6 <__aeabi_ddiv+0x3ea>
 8001df4:	e666      	b.n	8001ac4 <__aeabi_ddiv+0xb8>
 8001df6:	291f      	cmp	r1, #31
 8001df8:	dc00      	bgt.n	8001dfc <__aeabi_ddiv+0x3f0>
 8001dfa:	e0ab      	b.n	8001f54 <__aeabi_ddiv+0x548>
 8001dfc:	201f      	movs	r0, #31
 8001dfe:	4240      	negs	r0, r0
 8001e00:	1ac3      	subs	r3, r0, r3
 8001e02:	4658      	mov	r0, fp
 8001e04:	40d8      	lsrs	r0, r3
 8001e06:	0003      	movs	r3, r0
 8001e08:	2920      	cmp	r1, #32
 8001e0a:	d004      	beq.n	8001e16 <__aeabi_ddiv+0x40a>
 8001e0c:	4658      	mov	r0, fp
 8001e0e:	4988      	ldr	r1, [pc, #544]	@ (8002030 <__aeabi_ddiv+0x624>)
 8001e10:	4451      	add	r1, sl
 8001e12:	4088      	lsls	r0, r1
 8001e14:	4302      	orrs	r2, r0
 8001e16:	1e51      	subs	r1, r2, #1
 8001e18:	418a      	sbcs	r2, r1
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	2307      	movs	r3, #7
 8001e1e:	0019      	movs	r1, r3
 8001e20:	2400      	movs	r4, #0
 8001e22:	4011      	ands	r1, r2
 8001e24:	4213      	tst	r3, r2
 8001e26:	d00c      	beq.n	8001e42 <__aeabi_ddiv+0x436>
 8001e28:	230f      	movs	r3, #15
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d100      	bne.n	8001e32 <__aeabi_ddiv+0x426>
 8001e30:	e0f9      	b.n	8002026 <__aeabi_ddiv+0x61a>
 8001e32:	1d11      	adds	r1, r2, #4
 8001e34:	4291      	cmp	r1, r2
 8001e36:	419b      	sbcs	r3, r3
 8001e38:	000a      	movs	r2, r1
 8001e3a:	425b      	negs	r3, r3
 8001e3c:	0759      	lsls	r1, r3, #29
 8001e3e:	025b      	lsls	r3, r3, #9
 8001e40:	0b1c      	lsrs	r4, r3, #12
 8001e42:	08d2      	lsrs	r2, r2, #3
 8001e44:	430a      	orrs	r2, r1
 8001e46:	4690      	mov	r8, r2
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e63f      	b.n	8001acc <__aeabi_ddiv+0xc0>
 8001e4c:	2480      	movs	r4, #128	@ 0x80
 8001e4e:	464b      	mov	r3, r9
 8001e50:	0324      	lsls	r4, r4, #12
 8001e52:	4223      	tst	r3, r4
 8001e54:	d009      	beq.n	8001e6a <__aeabi_ddiv+0x45e>
 8001e56:	465b      	mov	r3, fp
 8001e58:	4223      	tst	r3, r4
 8001e5a:	d106      	bne.n	8001e6a <__aeabi_ddiv+0x45e>
 8001e5c:	431c      	orrs	r4, r3
 8001e5e:	0324      	lsls	r4, r4, #12
 8001e60:	002e      	movs	r6, r5
 8001e62:	4690      	mov	r8, r2
 8001e64:	4b71      	ldr	r3, [pc, #452]	@ (800202c <__aeabi_ddiv+0x620>)
 8001e66:	0b24      	lsrs	r4, r4, #12
 8001e68:	e630      	b.n	8001acc <__aeabi_ddiv+0xc0>
 8001e6a:	2480      	movs	r4, #128	@ 0x80
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	0324      	lsls	r4, r4, #12
 8001e70:	431c      	orrs	r4, r3
 8001e72:	0324      	lsls	r4, r4, #12
 8001e74:	9e02      	ldr	r6, [sp, #8]
 8001e76:	4b6d      	ldr	r3, [pc, #436]	@ (800202c <__aeabi_ddiv+0x620>)
 8001e78:	0b24      	lsrs	r4, r4, #12
 8001e7a:	e627      	b.n	8001acc <__aeabi_ddiv+0xc0>
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_ddiv+0x476>
 8001e80:	e700      	b.n	8001c84 <__aeabi_ddiv+0x278>
 8001e82:	9800      	ldr	r0, [sp, #0]
 8001e84:	1e51      	subs	r1, r2, #1
 8001e86:	4684      	mov	ip, r0
 8001e88:	4464      	add	r4, ip
 8001e8a:	4284      	cmp	r4, r0
 8001e8c:	d200      	bcs.n	8001e90 <__aeabi_ddiv+0x484>
 8001e8e:	e084      	b.n	8001f9a <__aeabi_ddiv+0x58e>
 8001e90:	42bc      	cmp	r4, r7
 8001e92:	d200      	bcs.n	8001e96 <__aeabi_ddiv+0x48a>
 8001e94:	e0ae      	b.n	8001ff4 <__aeabi_ddiv+0x5e8>
 8001e96:	d100      	bne.n	8001e9a <__aeabi_ddiv+0x48e>
 8001e98:	e0c1      	b.n	800201e <__aeabi_ddiv+0x612>
 8001e9a:	000a      	movs	r2, r1
 8001e9c:	e6f0      	b.n	8001c80 <__aeabi_ddiv+0x274>
 8001e9e:	4542      	cmp	r2, r8
 8001ea0:	d900      	bls.n	8001ea4 <__aeabi_ddiv+0x498>
 8001ea2:	e62c      	b.n	8001afe <__aeabi_ddiv+0xf2>
 8001ea4:	464b      	mov	r3, r9
 8001ea6:	07dc      	lsls	r4, r3, #31
 8001ea8:	0858      	lsrs	r0, r3, #1
 8001eaa:	4643      	mov	r3, r8
 8001eac:	085b      	lsrs	r3, r3, #1
 8001eae:	431c      	orrs	r4, r3
 8001eb0:	4643      	mov	r3, r8
 8001eb2:	07df      	lsls	r7, r3, #31
 8001eb4:	e62a      	b.n	8001b0c <__aeabi_ddiv+0x100>
 8001eb6:	f001 f9cd 	bl	8003254 <__clzsi2>
 8001eba:	2315      	movs	r3, #21
 8001ebc:	469c      	mov	ip, r3
 8001ebe:	4484      	add	ip, r0
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	4663      	mov	r3, ip
 8001ec4:	3220      	adds	r2, #32
 8001ec6:	2b1c      	cmp	r3, #28
 8001ec8:	dc00      	bgt.n	8001ecc <__aeabi_ddiv+0x4c0>
 8001eca:	e72e      	b.n	8001d2a <__aeabi_ddiv+0x31e>
 8001ecc:	0023      	movs	r3, r4
 8001ece:	3808      	subs	r0, #8
 8001ed0:	4083      	lsls	r3, r0
 8001ed2:	4699      	mov	r9, r3
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	4698      	mov	r8, r3
 8001ed8:	e736      	b.n	8001d48 <__aeabi_ddiv+0x33c>
 8001eda:	f001 f9bb 	bl	8003254 <__clzsi2>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	3215      	adds	r2, #21
 8001ee4:	3320      	adds	r3, #32
 8001ee6:	2a1c      	cmp	r2, #28
 8001ee8:	dc00      	bgt.n	8001eec <__aeabi_ddiv+0x4e0>
 8001eea:	e6fb      	b.n	8001ce4 <__aeabi_ddiv+0x2d8>
 8001eec:	9900      	ldr	r1, [sp, #0]
 8001eee:	3808      	subs	r0, #8
 8001ef0:	4081      	lsls	r1, r0
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	468b      	mov	fp, r1
 8001ef6:	e702      	b.n	8001cfe <__aeabi_ddiv+0x2f2>
 8001ef8:	9900      	ldr	r1, [sp, #0]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	468c      	mov	ip, r1
 8001efe:	4464      	add	r4, ip
 8001f00:	42a1      	cmp	r1, r4
 8001f02:	d900      	bls.n	8001f06 <__aeabi_ddiv+0x4fa>
 8001f04:	e69a      	b.n	8001c3c <__aeabi_ddiv+0x230>
 8001f06:	42a2      	cmp	r2, r4
 8001f08:	d800      	bhi.n	8001f0c <__aeabi_ddiv+0x500>
 8001f0a:	e697      	b.n	8001c3c <__aeabi_ddiv+0x230>
 8001f0c:	1e83      	subs	r3, r0, #2
 8001f0e:	4464      	add	r4, ip
 8001f10:	e694      	b.n	8001c3c <__aeabi_ddiv+0x230>
 8001f12:	46ac      	mov	ip, r5
 8001f14:	4461      	add	r1, ip
 8001f16:	3f01      	subs	r7, #1
 8001f18:	428d      	cmp	r5, r1
 8001f1a:	d900      	bls.n	8001f1e <__aeabi_ddiv+0x512>
 8001f1c:	e680      	b.n	8001c20 <__aeabi_ddiv+0x214>
 8001f1e:	428a      	cmp	r2, r1
 8001f20:	d800      	bhi.n	8001f24 <__aeabi_ddiv+0x518>
 8001f22:	e67d      	b.n	8001c20 <__aeabi_ddiv+0x214>
 8001f24:	1e87      	subs	r7, r0, #2
 8001f26:	4461      	add	r1, ip
 8001f28:	e67a      	b.n	8001c20 <__aeabi_ddiv+0x214>
 8001f2a:	4285      	cmp	r5, r0
 8001f2c:	d000      	beq.n	8001f30 <__aeabi_ddiv+0x524>
 8001f2e:	e65f      	b.n	8001bf0 <__aeabi_ddiv+0x1e4>
 8001f30:	45b9      	cmp	r9, r7
 8001f32:	d900      	bls.n	8001f36 <__aeabi_ddiv+0x52a>
 8001f34:	e65c      	b.n	8001bf0 <__aeabi_ddiv+0x1e4>
 8001f36:	e656      	b.n	8001be6 <__aeabi_ddiv+0x1da>
 8001f38:	42a2      	cmp	r2, r4
 8001f3a:	d800      	bhi.n	8001f3e <__aeabi_ddiv+0x532>
 8001f3c:	e61a      	b.n	8001b74 <__aeabi_ddiv+0x168>
 8001f3e:	1e83      	subs	r3, r0, #2
 8001f40:	4464      	add	r4, ip
 8001f42:	e617      	b.n	8001b74 <__aeabi_ddiv+0x168>
 8001f44:	428a      	cmp	r2, r1
 8001f46:	d800      	bhi.n	8001f4a <__aeabi_ddiv+0x53e>
 8001f48:	e600      	b.n	8001b4c <__aeabi_ddiv+0x140>
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	1e83      	subs	r3, r0, #2
 8001f4e:	4698      	mov	r8, r3
 8001f50:	4461      	add	r1, ip
 8001f52:	e5fb      	b.n	8001b4c <__aeabi_ddiv+0x140>
 8001f54:	4837      	ldr	r0, [pc, #220]	@ (8002034 <__aeabi_ddiv+0x628>)
 8001f56:	0014      	movs	r4, r2
 8001f58:	4450      	add	r0, sl
 8001f5a:	4082      	lsls	r2, r0
 8001f5c:	465b      	mov	r3, fp
 8001f5e:	0017      	movs	r7, r2
 8001f60:	4083      	lsls	r3, r0
 8001f62:	40cc      	lsrs	r4, r1
 8001f64:	1e7a      	subs	r2, r7, #1
 8001f66:	4197      	sbcs	r7, r2
 8001f68:	4323      	orrs	r3, r4
 8001f6a:	433b      	orrs	r3, r7
 8001f6c:	001a      	movs	r2, r3
 8001f6e:	465b      	mov	r3, fp
 8001f70:	40cb      	lsrs	r3, r1
 8001f72:	0751      	lsls	r1, r2, #29
 8001f74:	d009      	beq.n	8001f8a <__aeabi_ddiv+0x57e>
 8001f76:	210f      	movs	r1, #15
 8001f78:	4011      	ands	r1, r2
 8001f7a:	2904      	cmp	r1, #4
 8001f7c:	d005      	beq.n	8001f8a <__aeabi_ddiv+0x57e>
 8001f7e:	1d11      	adds	r1, r2, #4
 8001f80:	4291      	cmp	r1, r2
 8001f82:	4192      	sbcs	r2, r2
 8001f84:	4252      	negs	r2, r2
 8001f86:	189b      	adds	r3, r3, r2
 8001f88:	000a      	movs	r2, r1
 8001f8a:	0219      	lsls	r1, r3, #8
 8001f8c:	d400      	bmi.n	8001f90 <__aeabi_ddiv+0x584>
 8001f8e:	e755      	b.n	8001e3c <__aeabi_ddiv+0x430>
 8001f90:	2200      	movs	r2, #0
 8001f92:	2301      	movs	r3, #1
 8001f94:	2400      	movs	r4, #0
 8001f96:	4690      	mov	r8, r2
 8001f98:	e598      	b.n	8001acc <__aeabi_ddiv+0xc0>
 8001f9a:	000a      	movs	r2, r1
 8001f9c:	42bc      	cmp	r4, r7
 8001f9e:	d000      	beq.n	8001fa2 <__aeabi_ddiv+0x596>
 8001fa0:	e66e      	b.n	8001c80 <__aeabi_ddiv+0x274>
 8001fa2:	454b      	cmp	r3, r9
 8001fa4:	d000      	beq.n	8001fa8 <__aeabi_ddiv+0x59c>
 8001fa6:	e66b      	b.n	8001c80 <__aeabi_ddiv+0x274>
 8001fa8:	e66c      	b.n	8001c84 <__aeabi_ddiv+0x278>
 8001faa:	4b23      	ldr	r3, [pc, #140]	@ (8002038 <__aeabi_ddiv+0x62c>)
 8001fac:	4a23      	ldr	r2, [pc, #140]	@ (800203c <__aeabi_ddiv+0x630>)
 8001fae:	4453      	add	r3, sl
 8001fb0:	4592      	cmp	sl, r2
 8001fb2:	da00      	bge.n	8001fb6 <__aeabi_ddiv+0x5aa>
 8001fb4:	e718      	b.n	8001de8 <__aeabi_ddiv+0x3dc>
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	4249      	negs	r1, r1
 8001fba:	1d0a      	adds	r2, r1, #4
 8001fbc:	428a      	cmp	r2, r1
 8001fbe:	4189      	sbcs	r1, r1
 8001fc0:	4249      	negs	r1, r1
 8001fc2:	448b      	add	fp, r1
 8001fc4:	e666      	b.n	8001c94 <__aeabi_ddiv+0x288>
 8001fc6:	210f      	movs	r1, #15
 8001fc8:	4011      	ands	r1, r2
 8001fca:	2904      	cmp	r1, #4
 8001fcc:	d100      	bne.n	8001fd0 <__aeabi_ddiv+0x5c4>
 8001fce:	e661      	b.n	8001c94 <__aeabi_ddiv+0x288>
 8001fd0:	0011      	movs	r1, r2
 8001fd2:	e7f2      	b.n	8001fba <__aeabi_ddiv+0x5ae>
 8001fd4:	42bc      	cmp	r4, r7
 8001fd6:	d800      	bhi.n	8001fda <__aeabi_ddiv+0x5ce>
 8001fd8:	e60a      	b.n	8001bf0 <__aeabi_ddiv+0x1e4>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	425b      	negs	r3, r3
 8001fde:	469c      	mov	ip, r3
 8001fe0:	9900      	ldr	r1, [sp, #0]
 8001fe2:	444f      	add	r7, r9
 8001fe4:	454f      	cmp	r7, r9
 8001fe6:	419b      	sbcs	r3, r3
 8001fe8:	44e3      	add	fp, ip
 8001fea:	468c      	mov	ip, r1
 8001fec:	425b      	negs	r3, r3
 8001fee:	4463      	add	r3, ip
 8001ff0:	18c0      	adds	r0, r0, r3
 8001ff2:	e5ff      	b.n	8001bf4 <__aeabi_ddiv+0x1e8>
 8001ff4:	4649      	mov	r1, r9
 8001ff6:	9d00      	ldr	r5, [sp, #0]
 8001ff8:	0048      	lsls	r0, r1, #1
 8001ffa:	4548      	cmp	r0, r9
 8001ffc:	4189      	sbcs	r1, r1
 8001ffe:	46ac      	mov	ip, r5
 8002000:	4249      	negs	r1, r1
 8002002:	4461      	add	r1, ip
 8002004:	4681      	mov	r9, r0
 8002006:	3a02      	subs	r2, #2
 8002008:	1864      	adds	r4, r4, r1
 800200a:	e7c7      	b.n	8001f9c <__aeabi_ddiv+0x590>
 800200c:	2480      	movs	r4, #128	@ 0x80
 800200e:	465b      	mov	r3, fp
 8002010:	0324      	lsls	r4, r4, #12
 8002012:	431c      	orrs	r4, r3
 8002014:	0324      	lsls	r4, r4, #12
 8002016:	4690      	mov	r8, r2
 8002018:	4b04      	ldr	r3, [pc, #16]	@ (800202c <__aeabi_ddiv+0x620>)
 800201a:	0b24      	lsrs	r4, r4, #12
 800201c:	e556      	b.n	8001acc <__aeabi_ddiv+0xc0>
 800201e:	4599      	cmp	r9, r3
 8002020:	d3e8      	bcc.n	8001ff4 <__aeabi_ddiv+0x5e8>
 8002022:	000a      	movs	r2, r1
 8002024:	e7bd      	b.n	8001fa2 <__aeabi_ddiv+0x596>
 8002026:	2300      	movs	r3, #0
 8002028:	e708      	b.n	8001e3c <__aeabi_ddiv+0x430>
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	000007ff 	.word	0x000007ff
 8002030:	0000043e 	.word	0x0000043e
 8002034:	0000041e 	.word	0x0000041e
 8002038:	000003ff 	.word	0x000003ff
 800203c:	fffffc02 	.word	0xfffffc02

08002040 <__eqdf2>:
 8002040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002042:	4657      	mov	r7, sl
 8002044:	46de      	mov	lr, fp
 8002046:	464e      	mov	r6, r9
 8002048:	4645      	mov	r5, r8
 800204a:	b5e0      	push	{r5, r6, r7, lr}
 800204c:	000d      	movs	r5, r1
 800204e:	0004      	movs	r4, r0
 8002050:	0fe8      	lsrs	r0, r5, #31
 8002052:	4683      	mov	fp, r0
 8002054:	0309      	lsls	r1, r1, #12
 8002056:	0fd8      	lsrs	r0, r3, #31
 8002058:	0b09      	lsrs	r1, r1, #12
 800205a:	4682      	mov	sl, r0
 800205c:	4819      	ldr	r0, [pc, #100]	@ (80020c4 <__eqdf2+0x84>)
 800205e:	468c      	mov	ip, r1
 8002060:	031f      	lsls	r7, r3, #12
 8002062:	0069      	lsls	r1, r5, #1
 8002064:	005e      	lsls	r6, r3, #1
 8002066:	0d49      	lsrs	r1, r1, #21
 8002068:	0b3f      	lsrs	r7, r7, #12
 800206a:	0d76      	lsrs	r6, r6, #21
 800206c:	4281      	cmp	r1, r0
 800206e:	d018      	beq.n	80020a2 <__eqdf2+0x62>
 8002070:	4286      	cmp	r6, r0
 8002072:	d00f      	beq.n	8002094 <__eqdf2+0x54>
 8002074:	2001      	movs	r0, #1
 8002076:	42b1      	cmp	r1, r6
 8002078:	d10d      	bne.n	8002096 <__eqdf2+0x56>
 800207a:	45bc      	cmp	ip, r7
 800207c:	d10b      	bne.n	8002096 <__eqdf2+0x56>
 800207e:	4294      	cmp	r4, r2
 8002080:	d109      	bne.n	8002096 <__eqdf2+0x56>
 8002082:	45d3      	cmp	fp, sl
 8002084:	d01c      	beq.n	80020c0 <__eqdf2+0x80>
 8002086:	2900      	cmp	r1, #0
 8002088:	d105      	bne.n	8002096 <__eqdf2+0x56>
 800208a:	4660      	mov	r0, ip
 800208c:	4320      	orrs	r0, r4
 800208e:	1e43      	subs	r3, r0, #1
 8002090:	4198      	sbcs	r0, r3
 8002092:	e000      	b.n	8002096 <__eqdf2+0x56>
 8002094:	2001      	movs	r0, #1
 8002096:	bcf0      	pop	{r4, r5, r6, r7}
 8002098:	46bb      	mov	fp, r7
 800209a:	46b2      	mov	sl, r6
 800209c:	46a9      	mov	r9, r5
 800209e:	46a0      	mov	r8, r4
 80020a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a2:	2001      	movs	r0, #1
 80020a4:	428e      	cmp	r6, r1
 80020a6:	d1f6      	bne.n	8002096 <__eqdf2+0x56>
 80020a8:	4661      	mov	r1, ip
 80020aa:	4339      	orrs	r1, r7
 80020ac:	000f      	movs	r7, r1
 80020ae:	4317      	orrs	r7, r2
 80020b0:	4327      	orrs	r7, r4
 80020b2:	d1f0      	bne.n	8002096 <__eqdf2+0x56>
 80020b4:	465b      	mov	r3, fp
 80020b6:	4652      	mov	r2, sl
 80020b8:	1a98      	subs	r0, r3, r2
 80020ba:	1e43      	subs	r3, r0, #1
 80020bc:	4198      	sbcs	r0, r3
 80020be:	e7ea      	b.n	8002096 <__eqdf2+0x56>
 80020c0:	2000      	movs	r0, #0
 80020c2:	e7e8      	b.n	8002096 <__eqdf2+0x56>
 80020c4:	000007ff 	.word	0x000007ff

080020c8 <__gedf2>:
 80020c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ca:	4657      	mov	r7, sl
 80020cc:	464e      	mov	r6, r9
 80020ce:	4645      	mov	r5, r8
 80020d0:	46de      	mov	lr, fp
 80020d2:	b5e0      	push	{r5, r6, r7, lr}
 80020d4:	000d      	movs	r5, r1
 80020d6:	030f      	lsls	r7, r1, #12
 80020d8:	0b39      	lsrs	r1, r7, #12
 80020da:	b083      	sub	sp, #12
 80020dc:	0004      	movs	r4, r0
 80020de:	4680      	mov	r8, r0
 80020e0:	9101      	str	r1, [sp, #4]
 80020e2:	0058      	lsls	r0, r3, #1
 80020e4:	0fe9      	lsrs	r1, r5, #31
 80020e6:	4f31      	ldr	r7, [pc, #196]	@ (80021ac <__gedf2+0xe4>)
 80020e8:	0d40      	lsrs	r0, r0, #21
 80020ea:	468c      	mov	ip, r1
 80020ec:	006e      	lsls	r6, r5, #1
 80020ee:	0319      	lsls	r1, r3, #12
 80020f0:	4682      	mov	sl, r0
 80020f2:	4691      	mov	r9, r2
 80020f4:	0d76      	lsrs	r6, r6, #21
 80020f6:	0b09      	lsrs	r1, r1, #12
 80020f8:	0fd8      	lsrs	r0, r3, #31
 80020fa:	42be      	cmp	r6, r7
 80020fc:	d01f      	beq.n	800213e <__gedf2+0x76>
 80020fe:	45ba      	cmp	sl, r7
 8002100:	d00f      	beq.n	8002122 <__gedf2+0x5a>
 8002102:	2e00      	cmp	r6, #0
 8002104:	d12f      	bne.n	8002166 <__gedf2+0x9e>
 8002106:	4655      	mov	r5, sl
 8002108:	9e01      	ldr	r6, [sp, #4]
 800210a:	4334      	orrs	r4, r6
 800210c:	2d00      	cmp	r5, #0
 800210e:	d127      	bne.n	8002160 <__gedf2+0x98>
 8002110:	430a      	orrs	r2, r1
 8002112:	d03a      	beq.n	800218a <__gedf2+0xc2>
 8002114:	2c00      	cmp	r4, #0
 8002116:	d145      	bne.n	80021a4 <__gedf2+0xdc>
 8002118:	2800      	cmp	r0, #0
 800211a:	d11a      	bne.n	8002152 <__gedf2+0x8a>
 800211c:	2001      	movs	r0, #1
 800211e:	4240      	negs	r0, r0
 8002120:	e017      	b.n	8002152 <__gedf2+0x8a>
 8002122:	4311      	orrs	r1, r2
 8002124:	d13b      	bne.n	800219e <__gedf2+0xd6>
 8002126:	2e00      	cmp	r6, #0
 8002128:	d102      	bne.n	8002130 <__gedf2+0x68>
 800212a:	9f01      	ldr	r7, [sp, #4]
 800212c:	4327      	orrs	r7, r4
 800212e:	d0f3      	beq.n	8002118 <__gedf2+0x50>
 8002130:	4584      	cmp	ip, r0
 8002132:	d109      	bne.n	8002148 <__gedf2+0x80>
 8002134:	4663      	mov	r3, ip
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <__gedf2+0x54>
 800213a:	4660      	mov	r0, ip
 800213c:	e009      	b.n	8002152 <__gedf2+0x8a>
 800213e:	9f01      	ldr	r7, [sp, #4]
 8002140:	4327      	orrs	r7, r4
 8002142:	d12c      	bne.n	800219e <__gedf2+0xd6>
 8002144:	45b2      	cmp	sl, r6
 8002146:	d024      	beq.n	8002192 <__gedf2+0xca>
 8002148:	4663      	mov	r3, ip
 800214a:	2002      	movs	r0, #2
 800214c:	3b01      	subs	r3, #1
 800214e:	4018      	ands	r0, r3
 8002150:	3801      	subs	r0, #1
 8002152:	b003      	add	sp, #12
 8002154:	bcf0      	pop	{r4, r5, r6, r7}
 8002156:	46bb      	mov	fp, r7
 8002158:	46b2      	mov	sl, r6
 800215a:	46a9      	mov	r9, r5
 800215c:	46a0      	mov	r8, r4
 800215e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002160:	2c00      	cmp	r4, #0
 8002162:	d0d9      	beq.n	8002118 <__gedf2+0x50>
 8002164:	e7e4      	b.n	8002130 <__gedf2+0x68>
 8002166:	4654      	mov	r4, sl
 8002168:	2c00      	cmp	r4, #0
 800216a:	d0ed      	beq.n	8002148 <__gedf2+0x80>
 800216c:	4584      	cmp	ip, r0
 800216e:	d1eb      	bne.n	8002148 <__gedf2+0x80>
 8002170:	4556      	cmp	r6, sl
 8002172:	dce9      	bgt.n	8002148 <__gedf2+0x80>
 8002174:	dbde      	blt.n	8002134 <__gedf2+0x6c>
 8002176:	9b01      	ldr	r3, [sp, #4]
 8002178:	428b      	cmp	r3, r1
 800217a:	d8e5      	bhi.n	8002148 <__gedf2+0x80>
 800217c:	d1da      	bne.n	8002134 <__gedf2+0x6c>
 800217e:	45c8      	cmp	r8, r9
 8002180:	d8e2      	bhi.n	8002148 <__gedf2+0x80>
 8002182:	2000      	movs	r0, #0
 8002184:	45c8      	cmp	r8, r9
 8002186:	d2e4      	bcs.n	8002152 <__gedf2+0x8a>
 8002188:	e7d4      	b.n	8002134 <__gedf2+0x6c>
 800218a:	2000      	movs	r0, #0
 800218c:	2c00      	cmp	r4, #0
 800218e:	d0e0      	beq.n	8002152 <__gedf2+0x8a>
 8002190:	e7da      	b.n	8002148 <__gedf2+0x80>
 8002192:	4311      	orrs	r1, r2
 8002194:	d103      	bne.n	800219e <__gedf2+0xd6>
 8002196:	4584      	cmp	ip, r0
 8002198:	d1d6      	bne.n	8002148 <__gedf2+0x80>
 800219a:	2000      	movs	r0, #0
 800219c:	e7d9      	b.n	8002152 <__gedf2+0x8a>
 800219e:	2002      	movs	r0, #2
 80021a0:	4240      	negs	r0, r0
 80021a2:	e7d6      	b.n	8002152 <__gedf2+0x8a>
 80021a4:	4584      	cmp	ip, r0
 80021a6:	d0e6      	beq.n	8002176 <__gedf2+0xae>
 80021a8:	e7ce      	b.n	8002148 <__gedf2+0x80>
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	000007ff 	.word	0x000007ff

080021b0 <__ledf2>:
 80021b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b2:	4657      	mov	r7, sl
 80021b4:	464e      	mov	r6, r9
 80021b6:	4645      	mov	r5, r8
 80021b8:	46de      	mov	lr, fp
 80021ba:	b5e0      	push	{r5, r6, r7, lr}
 80021bc:	000d      	movs	r5, r1
 80021be:	030f      	lsls	r7, r1, #12
 80021c0:	0004      	movs	r4, r0
 80021c2:	4680      	mov	r8, r0
 80021c4:	0fe8      	lsrs	r0, r5, #31
 80021c6:	0b39      	lsrs	r1, r7, #12
 80021c8:	4684      	mov	ip, r0
 80021ca:	b083      	sub	sp, #12
 80021cc:	0058      	lsls	r0, r3, #1
 80021ce:	4f30      	ldr	r7, [pc, #192]	@ (8002290 <__ledf2+0xe0>)
 80021d0:	0d40      	lsrs	r0, r0, #21
 80021d2:	9101      	str	r1, [sp, #4]
 80021d4:	031e      	lsls	r6, r3, #12
 80021d6:	0069      	lsls	r1, r5, #1
 80021d8:	4682      	mov	sl, r0
 80021da:	4691      	mov	r9, r2
 80021dc:	0d49      	lsrs	r1, r1, #21
 80021de:	0b36      	lsrs	r6, r6, #12
 80021e0:	0fd8      	lsrs	r0, r3, #31
 80021e2:	42b9      	cmp	r1, r7
 80021e4:	d020      	beq.n	8002228 <__ledf2+0x78>
 80021e6:	45ba      	cmp	sl, r7
 80021e8:	d00f      	beq.n	800220a <__ledf2+0x5a>
 80021ea:	2900      	cmp	r1, #0
 80021ec:	d12b      	bne.n	8002246 <__ledf2+0x96>
 80021ee:	9901      	ldr	r1, [sp, #4]
 80021f0:	430c      	orrs	r4, r1
 80021f2:	4651      	mov	r1, sl
 80021f4:	2900      	cmp	r1, #0
 80021f6:	d137      	bne.n	8002268 <__ledf2+0xb8>
 80021f8:	4332      	orrs	r2, r6
 80021fa:	d038      	beq.n	800226e <__ledf2+0xbe>
 80021fc:	2c00      	cmp	r4, #0
 80021fe:	d144      	bne.n	800228a <__ledf2+0xda>
 8002200:	2800      	cmp	r0, #0
 8002202:	d119      	bne.n	8002238 <__ledf2+0x88>
 8002204:	2001      	movs	r0, #1
 8002206:	4240      	negs	r0, r0
 8002208:	e016      	b.n	8002238 <__ledf2+0x88>
 800220a:	4316      	orrs	r6, r2
 800220c:	d113      	bne.n	8002236 <__ledf2+0x86>
 800220e:	2900      	cmp	r1, #0
 8002210:	d102      	bne.n	8002218 <__ledf2+0x68>
 8002212:	9f01      	ldr	r7, [sp, #4]
 8002214:	4327      	orrs	r7, r4
 8002216:	d0f3      	beq.n	8002200 <__ledf2+0x50>
 8002218:	4584      	cmp	ip, r0
 800221a:	d020      	beq.n	800225e <__ledf2+0xae>
 800221c:	4663      	mov	r3, ip
 800221e:	2002      	movs	r0, #2
 8002220:	3b01      	subs	r3, #1
 8002222:	4018      	ands	r0, r3
 8002224:	3801      	subs	r0, #1
 8002226:	e007      	b.n	8002238 <__ledf2+0x88>
 8002228:	9f01      	ldr	r7, [sp, #4]
 800222a:	4327      	orrs	r7, r4
 800222c:	d103      	bne.n	8002236 <__ledf2+0x86>
 800222e:	458a      	cmp	sl, r1
 8002230:	d1f4      	bne.n	800221c <__ledf2+0x6c>
 8002232:	4316      	orrs	r6, r2
 8002234:	d01f      	beq.n	8002276 <__ledf2+0xc6>
 8002236:	2002      	movs	r0, #2
 8002238:	b003      	add	sp, #12
 800223a:	bcf0      	pop	{r4, r5, r6, r7}
 800223c:	46bb      	mov	fp, r7
 800223e:	46b2      	mov	sl, r6
 8002240:	46a9      	mov	r9, r5
 8002242:	46a0      	mov	r8, r4
 8002244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002246:	4654      	mov	r4, sl
 8002248:	2c00      	cmp	r4, #0
 800224a:	d0e7      	beq.n	800221c <__ledf2+0x6c>
 800224c:	4584      	cmp	ip, r0
 800224e:	d1e5      	bne.n	800221c <__ledf2+0x6c>
 8002250:	4551      	cmp	r1, sl
 8002252:	dce3      	bgt.n	800221c <__ledf2+0x6c>
 8002254:	db03      	blt.n	800225e <__ledf2+0xae>
 8002256:	9b01      	ldr	r3, [sp, #4]
 8002258:	42b3      	cmp	r3, r6
 800225a:	d8df      	bhi.n	800221c <__ledf2+0x6c>
 800225c:	d00f      	beq.n	800227e <__ledf2+0xce>
 800225e:	4663      	mov	r3, ip
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0cf      	beq.n	8002204 <__ledf2+0x54>
 8002264:	4660      	mov	r0, ip
 8002266:	e7e7      	b.n	8002238 <__ledf2+0x88>
 8002268:	2c00      	cmp	r4, #0
 800226a:	d0c9      	beq.n	8002200 <__ledf2+0x50>
 800226c:	e7d4      	b.n	8002218 <__ledf2+0x68>
 800226e:	2000      	movs	r0, #0
 8002270:	2c00      	cmp	r4, #0
 8002272:	d0e1      	beq.n	8002238 <__ledf2+0x88>
 8002274:	e7d2      	b.n	800221c <__ledf2+0x6c>
 8002276:	4584      	cmp	ip, r0
 8002278:	d1d0      	bne.n	800221c <__ledf2+0x6c>
 800227a:	2000      	movs	r0, #0
 800227c:	e7dc      	b.n	8002238 <__ledf2+0x88>
 800227e:	45c8      	cmp	r8, r9
 8002280:	d8cc      	bhi.n	800221c <__ledf2+0x6c>
 8002282:	2000      	movs	r0, #0
 8002284:	45c8      	cmp	r8, r9
 8002286:	d2d7      	bcs.n	8002238 <__ledf2+0x88>
 8002288:	e7e9      	b.n	800225e <__ledf2+0xae>
 800228a:	4584      	cmp	ip, r0
 800228c:	d0e3      	beq.n	8002256 <__ledf2+0xa6>
 800228e:	e7c5      	b.n	800221c <__ledf2+0x6c>
 8002290:	000007ff 	.word	0x000007ff

08002294 <__aeabi_dmul>:
 8002294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002296:	4657      	mov	r7, sl
 8002298:	46de      	mov	lr, fp
 800229a:	464e      	mov	r6, r9
 800229c:	4645      	mov	r5, r8
 800229e:	b5e0      	push	{r5, r6, r7, lr}
 80022a0:	001f      	movs	r7, r3
 80022a2:	030b      	lsls	r3, r1, #12
 80022a4:	0b1b      	lsrs	r3, r3, #12
 80022a6:	0016      	movs	r6, r2
 80022a8:	469a      	mov	sl, r3
 80022aa:	0fca      	lsrs	r2, r1, #31
 80022ac:	004b      	lsls	r3, r1, #1
 80022ae:	0004      	movs	r4, r0
 80022b0:	4693      	mov	fp, r2
 80022b2:	b087      	sub	sp, #28
 80022b4:	0d5b      	lsrs	r3, r3, #21
 80022b6:	d100      	bne.n	80022ba <__aeabi_dmul+0x26>
 80022b8:	e0d5      	b.n	8002466 <__aeabi_dmul+0x1d2>
 80022ba:	4abb      	ldr	r2, [pc, #748]	@ (80025a8 <__aeabi_dmul+0x314>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d100      	bne.n	80022c2 <__aeabi_dmul+0x2e>
 80022c0:	e0f8      	b.n	80024b4 <__aeabi_dmul+0x220>
 80022c2:	4651      	mov	r1, sl
 80022c4:	0f42      	lsrs	r2, r0, #29
 80022c6:	00c9      	lsls	r1, r1, #3
 80022c8:	430a      	orrs	r2, r1
 80022ca:	2180      	movs	r1, #128	@ 0x80
 80022cc:	0409      	lsls	r1, r1, #16
 80022ce:	4311      	orrs	r1, r2
 80022d0:	00c2      	lsls	r2, r0, #3
 80022d2:	4691      	mov	r9, r2
 80022d4:	4ab5      	ldr	r2, [pc, #724]	@ (80025ac <__aeabi_dmul+0x318>)
 80022d6:	468a      	mov	sl, r1
 80022d8:	189d      	adds	r5, r3, r2
 80022da:	2300      	movs	r3, #0
 80022dc:	4698      	mov	r8, r3
 80022de:	9302      	str	r3, [sp, #8]
 80022e0:	033c      	lsls	r4, r7, #12
 80022e2:	007b      	lsls	r3, r7, #1
 80022e4:	0ffa      	lsrs	r2, r7, #31
 80022e6:	0030      	movs	r0, r6
 80022e8:	0b24      	lsrs	r4, r4, #12
 80022ea:	0d5b      	lsrs	r3, r3, #21
 80022ec:	9200      	str	r2, [sp, #0]
 80022ee:	d100      	bne.n	80022f2 <__aeabi_dmul+0x5e>
 80022f0:	e096      	b.n	8002420 <__aeabi_dmul+0x18c>
 80022f2:	4aad      	ldr	r2, [pc, #692]	@ (80025a8 <__aeabi_dmul+0x314>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d031      	beq.n	800235c <__aeabi_dmul+0xc8>
 80022f8:	0f72      	lsrs	r2, r6, #29
 80022fa:	00e4      	lsls	r4, r4, #3
 80022fc:	4322      	orrs	r2, r4
 80022fe:	2480      	movs	r4, #128	@ 0x80
 8002300:	0424      	lsls	r4, r4, #16
 8002302:	4314      	orrs	r4, r2
 8002304:	4aa9      	ldr	r2, [pc, #676]	@ (80025ac <__aeabi_dmul+0x318>)
 8002306:	00f0      	lsls	r0, r6, #3
 8002308:	4694      	mov	ip, r2
 800230a:	4463      	add	r3, ip
 800230c:	195b      	adds	r3, r3, r5
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	9201      	str	r2, [sp, #4]
 8002312:	4642      	mov	r2, r8
 8002314:	2600      	movs	r6, #0
 8002316:	2a0a      	cmp	r2, #10
 8002318:	dc42      	bgt.n	80023a0 <__aeabi_dmul+0x10c>
 800231a:	465a      	mov	r2, fp
 800231c:	9900      	ldr	r1, [sp, #0]
 800231e:	404a      	eors	r2, r1
 8002320:	4693      	mov	fp, r2
 8002322:	4642      	mov	r2, r8
 8002324:	2a02      	cmp	r2, #2
 8002326:	dc32      	bgt.n	800238e <__aeabi_dmul+0xfa>
 8002328:	3a01      	subs	r2, #1
 800232a:	2a01      	cmp	r2, #1
 800232c:	d900      	bls.n	8002330 <__aeabi_dmul+0x9c>
 800232e:	e149      	b.n	80025c4 <__aeabi_dmul+0x330>
 8002330:	2e02      	cmp	r6, #2
 8002332:	d100      	bne.n	8002336 <__aeabi_dmul+0xa2>
 8002334:	e0ca      	b.n	80024cc <__aeabi_dmul+0x238>
 8002336:	2e01      	cmp	r6, #1
 8002338:	d13d      	bne.n	80023b6 <__aeabi_dmul+0x122>
 800233a:	2300      	movs	r3, #0
 800233c:	2400      	movs	r4, #0
 800233e:	2200      	movs	r2, #0
 8002340:	0010      	movs	r0, r2
 8002342:	465a      	mov	r2, fp
 8002344:	051b      	lsls	r3, r3, #20
 8002346:	4323      	orrs	r3, r4
 8002348:	07d2      	lsls	r2, r2, #31
 800234a:	4313      	orrs	r3, r2
 800234c:	0019      	movs	r1, r3
 800234e:	b007      	add	sp, #28
 8002350:	bcf0      	pop	{r4, r5, r6, r7}
 8002352:	46bb      	mov	fp, r7
 8002354:	46b2      	mov	sl, r6
 8002356:	46a9      	mov	r9, r5
 8002358:	46a0      	mov	r8, r4
 800235a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800235c:	4b92      	ldr	r3, [pc, #584]	@ (80025a8 <__aeabi_dmul+0x314>)
 800235e:	4326      	orrs	r6, r4
 8002360:	18eb      	adds	r3, r5, r3
 8002362:	2e00      	cmp	r6, #0
 8002364:	d100      	bne.n	8002368 <__aeabi_dmul+0xd4>
 8002366:	e0bb      	b.n	80024e0 <__aeabi_dmul+0x24c>
 8002368:	2203      	movs	r2, #3
 800236a:	4641      	mov	r1, r8
 800236c:	4311      	orrs	r1, r2
 800236e:	465a      	mov	r2, fp
 8002370:	4688      	mov	r8, r1
 8002372:	9900      	ldr	r1, [sp, #0]
 8002374:	404a      	eors	r2, r1
 8002376:	2180      	movs	r1, #128	@ 0x80
 8002378:	0109      	lsls	r1, r1, #4
 800237a:	468c      	mov	ip, r1
 800237c:	0029      	movs	r1, r5
 800237e:	4461      	add	r1, ip
 8002380:	9101      	str	r1, [sp, #4]
 8002382:	4641      	mov	r1, r8
 8002384:	290a      	cmp	r1, #10
 8002386:	dd00      	ble.n	800238a <__aeabi_dmul+0xf6>
 8002388:	e233      	b.n	80027f2 <__aeabi_dmul+0x55e>
 800238a:	4693      	mov	fp, r2
 800238c:	2603      	movs	r6, #3
 800238e:	4642      	mov	r2, r8
 8002390:	2701      	movs	r7, #1
 8002392:	4097      	lsls	r7, r2
 8002394:	21a6      	movs	r1, #166	@ 0xa6
 8002396:	003a      	movs	r2, r7
 8002398:	00c9      	lsls	r1, r1, #3
 800239a:	400a      	ands	r2, r1
 800239c:	420f      	tst	r7, r1
 800239e:	d031      	beq.n	8002404 <__aeabi_dmul+0x170>
 80023a0:	9e02      	ldr	r6, [sp, #8]
 80023a2:	2e02      	cmp	r6, #2
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dmul+0x114>
 80023a6:	e235      	b.n	8002814 <__aeabi_dmul+0x580>
 80023a8:	2e03      	cmp	r6, #3
 80023aa:	d100      	bne.n	80023ae <__aeabi_dmul+0x11a>
 80023ac:	e1d2      	b.n	8002754 <__aeabi_dmul+0x4c0>
 80023ae:	4654      	mov	r4, sl
 80023b0:	4648      	mov	r0, r9
 80023b2:	2e01      	cmp	r6, #1
 80023b4:	d0c1      	beq.n	800233a <__aeabi_dmul+0xa6>
 80023b6:	9a01      	ldr	r2, [sp, #4]
 80023b8:	4b7d      	ldr	r3, [pc, #500]	@ (80025b0 <__aeabi_dmul+0x31c>)
 80023ba:	4694      	mov	ip, r2
 80023bc:	4463      	add	r3, ip
 80023be:	2b00      	cmp	r3, #0
 80023c0:	dc00      	bgt.n	80023c4 <__aeabi_dmul+0x130>
 80023c2:	e0c0      	b.n	8002546 <__aeabi_dmul+0x2b2>
 80023c4:	0742      	lsls	r2, r0, #29
 80023c6:	d009      	beq.n	80023dc <__aeabi_dmul+0x148>
 80023c8:	220f      	movs	r2, #15
 80023ca:	4002      	ands	r2, r0
 80023cc:	2a04      	cmp	r2, #4
 80023ce:	d005      	beq.n	80023dc <__aeabi_dmul+0x148>
 80023d0:	1d02      	adds	r2, r0, #4
 80023d2:	4282      	cmp	r2, r0
 80023d4:	4180      	sbcs	r0, r0
 80023d6:	4240      	negs	r0, r0
 80023d8:	1824      	adds	r4, r4, r0
 80023da:	0010      	movs	r0, r2
 80023dc:	01e2      	lsls	r2, r4, #7
 80023de:	d506      	bpl.n	80023ee <__aeabi_dmul+0x15a>
 80023e0:	4b74      	ldr	r3, [pc, #464]	@ (80025b4 <__aeabi_dmul+0x320>)
 80023e2:	9a01      	ldr	r2, [sp, #4]
 80023e4:	401c      	ands	r4, r3
 80023e6:	2380      	movs	r3, #128	@ 0x80
 80023e8:	4694      	mov	ip, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4463      	add	r3, ip
 80023ee:	4a72      	ldr	r2, [pc, #456]	@ (80025b8 <__aeabi_dmul+0x324>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	dc6b      	bgt.n	80024cc <__aeabi_dmul+0x238>
 80023f4:	0762      	lsls	r2, r4, #29
 80023f6:	08c0      	lsrs	r0, r0, #3
 80023f8:	0264      	lsls	r4, r4, #9
 80023fa:	055b      	lsls	r3, r3, #21
 80023fc:	4302      	orrs	r2, r0
 80023fe:	0b24      	lsrs	r4, r4, #12
 8002400:	0d5b      	lsrs	r3, r3, #21
 8002402:	e79d      	b.n	8002340 <__aeabi_dmul+0xac>
 8002404:	2190      	movs	r1, #144	@ 0x90
 8002406:	0089      	lsls	r1, r1, #2
 8002408:	420f      	tst	r7, r1
 800240a:	d163      	bne.n	80024d4 <__aeabi_dmul+0x240>
 800240c:	2288      	movs	r2, #136	@ 0x88
 800240e:	423a      	tst	r2, r7
 8002410:	d100      	bne.n	8002414 <__aeabi_dmul+0x180>
 8002412:	e0d7      	b.n	80025c4 <__aeabi_dmul+0x330>
 8002414:	9b00      	ldr	r3, [sp, #0]
 8002416:	46a2      	mov	sl, r4
 8002418:	469b      	mov	fp, r3
 800241a:	4681      	mov	r9, r0
 800241c:	9602      	str	r6, [sp, #8]
 800241e:	e7bf      	b.n	80023a0 <__aeabi_dmul+0x10c>
 8002420:	0023      	movs	r3, r4
 8002422:	4333      	orrs	r3, r6
 8002424:	d100      	bne.n	8002428 <__aeabi_dmul+0x194>
 8002426:	e07f      	b.n	8002528 <__aeabi_dmul+0x294>
 8002428:	2c00      	cmp	r4, #0
 800242a:	d100      	bne.n	800242e <__aeabi_dmul+0x19a>
 800242c:	e1ad      	b.n	800278a <__aeabi_dmul+0x4f6>
 800242e:	0020      	movs	r0, r4
 8002430:	f000 ff10 	bl	8003254 <__clzsi2>
 8002434:	0002      	movs	r2, r0
 8002436:	0003      	movs	r3, r0
 8002438:	3a0b      	subs	r2, #11
 800243a:	201d      	movs	r0, #29
 800243c:	0019      	movs	r1, r3
 800243e:	1a82      	subs	r2, r0, r2
 8002440:	0030      	movs	r0, r6
 8002442:	3908      	subs	r1, #8
 8002444:	40d0      	lsrs	r0, r2
 8002446:	408c      	lsls	r4, r1
 8002448:	4304      	orrs	r4, r0
 800244a:	0030      	movs	r0, r6
 800244c:	4088      	lsls	r0, r1
 800244e:	4a5b      	ldr	r2, [pc, #364]	@ (80025bc <__aeabi_dmul+0x328>)
 8002450:	1aeb      	subs	r3, r5, r3
 8002452:	4694      	mov	ip, r2
 8002454:	4463      	add	r3, ip
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	9201      	str	r2, [sp, #4]
 800245a:	4642      	mov	r2, r8
 800245c:	2600      	movs	r6, #0
 800245e:	2a0a      	cmp	r2, #10
 8002460:	dc00      	bgt.n	8002464 <__aeabi_dmul+0x1d0>
 8002462:	e75a      	b.n	800231a <__aeabi_dmul+0x86>
 8002464:	e79c      	b.n	80023a0 <__aeabi_dmul+0x10c>
 8002466:	4653      	mov	r3, sl
 8002468:	4303      	orrs	r3, r0
 800246a:	4699      	mov	r9, r3
 800246c:	d054      	beq.n	8002518 <__aeabi_dmul+0x284>
 800246e:	4653      	mov	r3, sl
 8002470:	2b00      	cmp	r3, #0
 8002472:	d100      	bne.n	8002476 <__aeabi_dmul+0x1e2>
 8002474:	e177      	b.n	8002766 <__aeabi_dmul+0x4d2>
 8002476:	4650      	mov	r0, sl
 8002478:	f000 feec 	bl	8003254 <__clzsi2>
 800247c:	230b      	movs	r3, #11
 800247e:	425b      	negs	r3, r3
 8002480:	469c      	mov	ip, r3
 8002482:	0002      	movs	r2, r0
 8002484:	4484      	add	ip, r0
 8002486:	0011      	movs	r1, r2
 8002488:	4650      	mov	r0, sl
 800248a:	3908      	subs	r1, #8
 800248c:	4088      	lsls	r0, r1
 800248e:	231d      	movs	r3, #29
 8002490:	4680      	mov	r8, r0
 8002492:	4660      	mov	r0, ip
 8002494:	1a1b      	subs	r3, r3, r0
 8002496:	0020      	movs	r0, r4
 8002498:	40d8      	lsrs	r0, r3
 800249a:	0003      	movs	r3, r0
 800249c:	4640      	mov	r0, r8
 800249e:	4303      	orrs	r3, r0
 80024a0:	469a      	mov	sl, r3
 80024a2:	0023      	movs	r3, r4
 80024a4:	408b      	lsls	r3, r1
 80024a6:	4699      	mov	r9, r3
 80024a8:	2300      	movs	r3, #0
 80024aa:	4d44      	ldr	r5, [pc, #272]	@ (80025bc <__aeabi_dmul+0x328>)
 80024ac:	4698      	mov	r8, r3
 80024ae:	1aad      	subs	r5, r5, r2
 80024b0:	9302      	str	r3, [sp, #8]
 80024b2:	e715      	b.n	80022e0 <__aeabi_dmul+0x4c>
 80024b4:	4652      	mov	r2, sl
 80024b6:	4302      	orrs	r2, r0
 80024b8:	4691      	mov	r9, r2
 80024ba:	d126      	bne.n	800250a <__aeabi_dmul+0x276>
 80024bc:	2200      	movs	r2, #0
 80024be:	001d      	movs	r5, r3
 80024c0:	2302      	movs	r3, #2
 80024c2:	4692      	mov	sl, r2
 80024c4:	3208      	adds	r2, #8
 80024c6:	4690      	mov	r8, r2
 80024c8:	9302      	str	r3, [sp, #8]
 80024ca:	e709      	b.n	80022e0 <__aeabi_dmul+0x4c>
 80024cc:	2400      	movs	r4, #0
 80024ce:	2200      	movs	r2, #0
 80024d0:	4b35      	ldr	r3, [pc, #212]	@ (80025a8 <__aeabi_dmul+0x314>)
 80024d2:	e735      	b.n	8002340 <__aeabi_dmul+0xac>
 80024d4:	2300      	movs	r3, #0
 80024d6:	2480      	movs	r4, #128	@ 0x80
 80024d8:	469b      	mov	fp, r3
 80024da:	0324      	lsls	r4, r4, #12
 80024dc:	4b32      	ldr	r3, [pc, #200]	@ (80025a8 <__aeabi_dmul+0x314>)
 80024de:	e72f      	b.n	8002340 <__aeabi_dmul+0xac>
 80024e0:	2202      	movs	r2, #2
 80024e2:	4641      	mov	r1, r8
 80024e4:	4311      	orrs	r1, r2
 80024e6:	2280      	movs	r2, #128	@ 0x80
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	4694      	mov	ip, r2
 80024ec:	002a      	movs	r2, r5
 80024ee:	4462      	add	r2, ip
 80024f0:	4688      	mov	r8, r1
 80024f2:	9201      	str	r2, [sp, #4]
 80024f4:	290a      	cmp	r1, #10
 80024f6:	dd00      	ble.n	80024fa <__aeabi_dmul+0x266>
 80024f8:	e752      	b.n	80023a0 <__aeabi_dmul+0x10c>
 80024fa:	465a      	mov	r2, fp
 80024fc:	2000      	movs	r0, #0
 80024fe:	9900      	ldr	r1, [sp, #0]
 8002500:	0004      	movs	r4, r0
 8002502:	404a      	eors	r2, r1
 8002504:	4693      	mov	fp, r2
 8002506:	2602      	movs	r6, #2
 8002508:	e70b      	b.n	8002322 <__aeabi_dmul+0x8e>
 800250a:	220c      	movs	r2, #12
 800250c:	001d      	movs	r5, r3
 800250e:	2303      	movs	r3, #3
 8002510:	4681      	mov	r9, r0
 8002512:	4690      	mov	r8, r2
 8002514:	9302      	str	r3, [sp, #8]
 8002516:	e6e3      	b.n	80022e0 <__aeabi_dmul+0x4c>
 8002518:	2300      	movs	r3, #0
 800251a:	469a      	mov	sl, r3
 800251c:	3304      	adds	r3, #4
 800251e:	4698      	mov	r8, r3
 8002520:	3b03      	subs	r3, #3
 8002522:	2500      	movs	r5, #0
 8002524:	9302      	str	r3, [sp, #8]
 8002526:	e6db      	b.n	80022e0 <__aeabi_dmul+0x4c>
 8002528:	4642      	mov	r2, r8
 800252a:	3301      	adds	r3, #1
 800252c:	431a      	orrs	r2, r3
 800252e:	002b      	movs	r3, r5
 8002530:	4690      	mov	r8, r2
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	9201      	str	r2, [sp, #4]
 8002536:	4642      	mov	r2, r8
 8002538:	2400      	movs	r4, #0
 800253a:	2000      	movs	r0, #0
 800253c:	2601      	movs	r6, #1
 800253e:	2a0a      	cmp	r2, #10
 8002540:	dc00      	bgt.n	8002544 <__aeabi_dmul+0x2b0>
 8002542:	e6ea      	b.n	800231a <__aeabi_dmul+0x86>
 8002544:	e72c      	b.n	80023a0 <__aeabi_dmul+0x10c>
 8002546:	2201      	movs	r2, #1
 8002548:	1ad2      	subs	r2, r2, r3
 800254a:	2a38      	cmp	r2, #56	@ 0x38
 800254c:	dd00      	ble.n	8002550 <__aeabi_dmul+0x2bc>
 800254e:	e6f4      	b.n	800233a <__aeabi_dmul+0xa6>
 8002550:	2a1f      	cmp	r2, #31
 8002552:	dc00      	bgt.n	8002556 <__aeabi_dmul+0x2c2>
 8002554:	e12a      	b.n	80027ac <__aeabi_dmul+0x518>
 8002556:	211f      	movs	r1, #31
 8002558:	4249      	negs	r1, r1
 800255a:	1acb      	subs	r3, r1, r3
 800255c:	0021      	movs	r1, r4
 800255e:	40d9      	lsrs	r1, r3
 8002560:	000b      	movs	r3, r1
 8002562:	2a20      	cmp	r2, #32
 8002564:	d005      	beq.n	8002572 <__aeabi_dmul+0x2de>
 8002566:	4a16      	ldr	r2, [pc, #88]	@ (80025c0 <__aeabi_dmul+0x32c>)
 8002568:	9d01      	ldr	r5, [sp, #4]
 800256a:	4694      	mov	ip, r2
 800256c:	4465      	add	r5, ip
 800256e:	40ac      	lsls	r4, r5
 8002570:	4320      	orrs	r0, r4
 8002572:	1e42      	subs	r2, r0, #1
 8002574:	4190      	sbcs	r0, r2
 8002576:	4318      	orrs	r0, r3
 8002578:	2307      	movs	r3, #7
 800257a:	0019      	movs	r1, r3
 800257c:	2400      	movs	r4, #0
 800257e:	4001      	ands	r1, r0
 8002580:	4203      	tst	r3, r0
 8002582:	d00c      	beq.n	800259e <__aeabi_dmul+0x30a>
 8002584:	230f      	movs	r3, #15
 8002586:	4003      	ands	r3, r0
 8002588:	2b04      	cmp	r3, #4
 800258a:	d100      	bne.n	800258e <__aeabi_dmul+0x2fa>
 800258c:	e140      	b.n	8002810 <__aeabi_dmul+0x57c>
 800258e:	1d03      	adds	r3, r0, #4
 8002590:	4283      	cmp	r3, r0
 8002592:	41a4      	sbcs	r4, r4
 8002594:	0018      	movs	r0, r3
 8002596:	4264      	negs	r4, r4
 8002598:	0761      	lsls	r1, r4, #29
 800259a:	0264      	lsls	r4, r4, #9
 800259c:	0b24      	lsrs	r4, r4, #12
 800259e:	08c2      	lsrs	r2, r0, #3
 80025a0:	2300      	movs	r3, #0
 80025a2:	430a      	orrs	r2, r1
 80025a4:	e6cc      	b.n	8002340 <__aeabi_dmul+0xac>
 80025a6:	46c0      	nop			@ (mov r8, r8)
 80025a8:	000007ff 	.word	0x000007ff
 80025ac:	fffffc01 	.word	0xfffffc01
 80025b0:	000003ff 	.word	0x000003ff
 80025b4:	feffffff 	.word	0xfeffffff
 80025b8:	000007fe 	.word	0x000007fe
 80025bc:	fffffc0d 	.word	0xfffffc0d
 80025c0:	0000043e 	.word	0x0000043e
 80025c4:	4649      	mov	r1, r9
 80025c6:	464a      	mov	r2, r9
 80025c8:	0409      	lsls	r1, r1, #16
 80025ca:	0c09      	lsrs	r1, r1, #16
 80025cc:	000d      	movs	r5, r1
 80025ce:	0c16      	lsrs	r6, r2, #16
 80025d0:	0c02      	lsrs	r2, r0, #16
 80025d2:	0400      	lsls	r0, r0, #16
 80025d4:	0c00      	lsrs	r0, r0, #16
 80025d6:	4345      	muls	r5, r0
 80025d8:	46ac      	mov	ip, r5
 80025da:	0005      	movs	r5, r0
 80025dc:	4375      	muls	r5, r6
 80025de:	46a8      	mov	r8, r5
 80025e0:	0015      	movs	r5, r2
 80025e2:	000f      	movs	r7, r1
 80025e4:	4375      	muls	r5, r6
 80025e6:	9200      	str	r2, [sp, #0]
 80025e8:	9502      	str	r5, [sp, #8]
 80025ea:	002a      	movs	r2, r5
 80025ec:	9d00      	ldr	r5, [sp, #0]
 80025ee:	436f      	muls	r7, r5
 80025f0:	4665      	mov	r5, ip
 80025f2:	0c2d      	lsrs	r5, r5, #16
 80025f4:	46a9      	mov	r9, r5
 80025f6:	4447      	add	r7, r8
 80025f8:	444f      	add	r7, r9
 80025fa:	45b8      	cmp	r8, r7
 80025fc:	d905      	bls.n	800260a <__aeabi_dmul+0x376>
 80025fe:	0015      	movs	r5, r2
 8002600:	2280      	movs	r2, #128	@ 0x80
 8002602:	0252      	lsls	r2, r2, #9
 8002604:	4690      	mov	r8, r2
 8002606:	4445      	add	r5, r8
 8002608:	9502      	str	r5, [sp, #8]
 800260a:	0c3d      	lsrs	r5, r7, #16
 800260c:	9503      	str	r5, [sp, #12]
 800260e:	4665      	mov	r5, ip
 8002610:	042d      	lsls	r5, r5, #16
 8002612:	043f      	lsls	r7, r7, #16
 8002614:	0c2d      	lsrs	r5, r5, #16
 8002616:	46ac      	mov	ip, r5
 8002618:	003d      	movs	r5, r7
 800261a:	4465      	add	r5, ip
 800261c:	9504      	str	r5, [sp, #16]
 800261e:	0c25      	lsrs	r5, r4, #16
 8002620:	0424      	lsls	r4, r4, #16
 8002622:	0c24      	lsrs	r4, r4, #16
 8002624:	46ac      	mov	ip, r5
 8002626:	0025      	movs	r5, r4
 8002628:	4375      	muls	r5, r6
 800262a:	46a8      	mov	r8, r5
 800262c:	4665      	mov	r5, ip
 800262e:	000f      	movs	r7, r1
 8002630:	4369      	muls	r1, r5
 8002632:	4441      	add	r1, r8
 8002634:	4689      	mov	r9, r1
 8002636:	4367      	muls	r7, r4
 8002638:	0c39      	lsrs	r1, r7, #16
 800263a:	4449      	add	r1, r9
 800263c:	436e      	muls	r6, r5
 800263e:	4588      	cmp	r8, r1
 8002640:	d903      	bls.n	800264a <__aeabi_dmul+0x3b6>
 8002642:	2280      	movs	r2, #128	@ 0x80
 8002644:	0252      	lsls	r2, r2, #9
 8002646:	4690      	mov	r8, r2
 8002648:	4446      	add	r6, r8
 800264a:	0c0d      	lsrs	r5, r1, #16
 800264c:	46a8      	mov	r8, r5
 800264e:	0035      	movs	r5, r6
 8002650:	4445      	add	r5, r8
 8002652:	9505      	str	r5, [sp, #20]
 8002654:	9d03      	ldr	r5, [sp, #12]
 8002656:	043f      	lsls	r7, r7, #16
 8002658:	46a8      	mov	r8, r5
 800265a:	0c3f      	lsrs	r7, r7, #16
 800265c:	0409      	lsls	r1, r1, #16
 800265e:	19c9      	adds	r1, r1, r7
 8002660:	4488      	add	r8, r1
 8002662:	4645      	mov	r5, r8
 8002664:	9503      	str	r5, [sp, #12]
 8002666:	4655      	mov	r5, sl
 8002668:	042e      	lsls	r6, r5, #16
 800266a:	0c36      	lsrs	r6, r6, #16
 800266c:	0c2f      	lsrs	r7, r5, #16
 800266e:	0035      	movs	r5, r6
 8002670:	4345      	muls	r5, r0
 8002672:	4378      	muls	r0, r7
 8002674:	4681      	mov	r9, r0
 8002676:	0038      	movs	r0, r7
 8002678:	46a8      	mov	r8, r5
 800267a:	0c2d      	lsrs	r5, r5, #16
 800267c:	46aa      	mov	sl, r5
 800267e:	9a00      	ldr	r2, [sp, #0]
 8002680:	4350      	muls	r0, r2
 8002682:	4372      	muls	r2, r6
 8002684:	444a      	add	r2, r9
 8002686:	4452      	add	r2, sl
 8002688:	4591      	cmp	r9, r2
 800268a:	d903      	bls.n	8002694 <__aeabi_dmul+0x400>
 800268c:	2580      	movs	r5, #128	@ 0x80
 800268e:	026d      	lsls	r5, r5, #9
 8002690:	46a9      	mov	r9, r5
 8002692:	4448      	add	r0, r9
 8002694:	0c15      	lsrs	r5, r2, #16
 8002696:	46a9      	mov	r9, r5
 8002698:	4645      	mov	r5, r8
 800269a:	042d      	lsls	r5, r5, #16
 800269c:	0c2d      	lsrs	r5, r5, #16
 800269e:	46a8      	mov	r8, r5
 80026a0:	4665      	mov	r5, ip
 80026a2:	437d      	muls	r5, r7
 80026a4:	0412      	lsls	r2, r2, #16
 80026a6:	4448      	add	r0, r9
 80026a8:	4490      	add	r8, r2
 80026aa:	46a9      	mov	r9, r5
 80026ac:	0032      	movs	r2, r6
 80026ae:	4665      	mov	r5, ip
 80026b0:	4362      	muls	r2, r4
 80026b2:	436e      	muls	r6, r5
 80026b4:	437c      	muls	r4, r7
 80026b6:	0c17      	lsrs	r7, r2, #16
 80026b8:	1936      	adds	r6, r6, r4
 80026ba:	19bf      	adds	r7, r7, r6
 80026bc:	42bc      	cmp	r4, r7
 80026be:	d903      	bls.n	80026c8 <__aeabi_dmul+0x434>
 80026c0:	2480      	movs	r4, #128	@ 0x80
 80026c2:	0264      	lsls	r4, r4, #9
 80026c4:	46a4      	mov	ip, r4
 80026c6:	44e1      	add	r9, ip
 80026c8:	9c02      	ldr	r4, [sp, #8]
 80026ca:	9e03      	ldr	r6, [sp, #12]
 80026cc:	46a4      	mov	ip, r4
 80026ce:	9d05      	ldr	r5, [sp, #20]
 80026d0:	4466      	add	r6, ip
 80026d2:	428e      	cmp	r6, r1
 80026d4:	4189      	sbcs	r1, r1
 80026d6:	46ac      	mov	ip, r5
 80026d8:	0412      	lsls	r2, r2, #16
 80026da:	043c      	lsls	r4, r7, #16
 80026dc:	0c12      	lsrs	r2, r2, #16
 80026de:	18a2      	adds	r2, r4, r2
 80026e0:	4462      	add	r2, ip
 80026e2:	4249      	negs	r1, r1
 80026e4:	1854      	adds	r4, r2, r1
 80026e6:	4446      	add	r6, r8
 80026e8:	46a4      	mov	ip, r4
 80026ea:	4546      	cmp	r6, r8
 80026ec:	41a4      	sbcs	r4, r4
 80026ee:	4682      	mov	sl, r0
 80026f0:	4264      	negs	r4, r4
 80026f2:	46a0      	mov	r8, r4
 80026f4:	42aa      	cmp	r2, r5
 80026f6:	4192      	sbcs	r2, r2
 80026f8:	458c      	cmp	ip, r1
 80026fa:	4189      	sbcs	r1, r1
 80026fc:	44e2      	add	sl, ip
 80026fe:	44d0      	add	r8, sl
 8002700:	4249      	negs	r1, r1
 8002702:	4252      	negs	r2, r2
 8002704:	430a      	orrs	r2, r1
 8002706:	45a0      	cmp	r8, r4
 8002708:	41a4      	sbcs	r4, r4
 800270a:	4582      	cmp	sl, r0
 800270c:	4189      	sbcs	r1, r1
 800270e:	4264      	negs	r4, r4
 8002710:	4249      	negs	r1, r1
 8002712:	430c      	orrs	r4, r1
 8002714:	4641      	mov	r1, r8
 8002716:	0c3f      	lsrs	r7, r7, #16
 8002718:	19d2      	adds	r2, r2, r7
 800271a:	1912      	adds	r2, r2, r4
 800271c:	0dcc      	lsrs	r4, r1, #23
 800271e:	9904      	ldr	r1, [sp, #16]
 8002720:	0270      	lsls	r0, r6, #9
 8002722:	4308      	orrs	r0, r1
 8002724:	1e41      	subs	r1, r0, #1
 8002726:	4188      	sbcs	r0, r1
 8002728:	4641      	mov	r1, r8
 800272a:	444a      	add	r2, r9
 800272c:	0df6      	lsrs	r6, r6, #23
 800272e:	0252      	lsls	r2, r2, #9
 8002730:	4330      	orrs	r0, r6
 8002732:	0249      	lsls	r1, r1, #9
 8002734:	4314      	orrs	r4, r2
 8002736:	4308      	orrs	r0, r1
 8002738:	01d2      	lsls	r2, r2, #7
 800273a:	d535      	bpl.n	80027a8 <__aeabi_dmul+0x514>
 800273c:	2201      	movs	r2, #1
 800273e:	0843      	lsrs	r3, r0, #1
 8002740:	4002      	ands	r2, r0
 8002742:	4313      	orrs	r3, r2
 8002744:	07e0      	lsls	r0, r4, #31
 8002746:	4318      	orrs	r0, r3
 8002748:	0864      	lsrs	r4, r4, #1
 800274a:	e634      	b.n	80023b6 <__aeabi_dmul+0x122>
 800274c:	9b00      	ldr	r3, [sp, #0]
 800274e:	46a2      	mov	sl, r4
 8002750:	469b      	mov	fp, r3
 8002752:	4681      	mov	r9, r0
 8002754:	2480      	movs	r4, #128	@ 0x80
 8002756:	4653      	mov	r3, sl
 8002758:	0324      	lsls	r4, r4, #12
 800275a:	431c      	orrs	r4, r3
 800275c:	0324      	lsls	r4, r4, #12
 800275e:	464a      	mov	r2, r9
 8002760:	4b2e      	ldr	r3, [pc, #184]	@ (800281c <__aeabi_dmul+0x588>)
 8002762:	0b24      	lsrs	r4, r4, #12
 8002764:	e5ec      	b.n	8002340 <__aeabi_dmul+0xac>
 8002766:	f000 fd75 	bl	8003254 <__clzsi2>
 800276a:	2315      	movs	r3, #21
 800276c:	469c      	mov	ip, r3
 800276e:	4484      	add	ip, r0
 8002770:	0002      	movs	r2, r0
 8002772:	4663      	mov	r3, ip
 8002774:	3220      	adds	r2, #32
 8002776:	2b1c      	cmp	r3, #28
 8002778:	dc00      	bgt.n	800277c <__aeabi_dmul+0x4e8>
 800277a:	e684      	b.n	8002486 <__aeabi_dmul+0x1f2>
 800277c:	2300      	movs	r3, #0
 800277e:	4699      	mov	r9, r3
 8002780:	0023      	movs	r3, r4
 8002782:	3808      	subs	r0, #8
 8002784:	4083      	lsls	r3, r0
 8002786:	469a      	mov	sl, r3
 8002788:	e68e      	b.n	80024a8 <__aeabi_dmul+0x214>
 800278a:	f000 fd63 	bl	8003254 <__clzsi2>
 800278e:	0002      	movs	r2, r0
 8002790:	0003      	movs	r3, r0
 8002792:	3215      	adds	r2, #21
 8002794:	3320      	adds	r3, #32
 8002796:	2a1c      	cmp	r2, #28
 8002798:	dc00      	bgt.n	800279c <__aeabi_dmul+0x508>
 800279a:	e64e      	b.n	800243a <__aeabi_dmul+0x1a6>
 800279c:	0002      	movs	r2, r0
 800279e:	0034      	movs	r4, r6
 80027a0:	3a08      	subs	r2, #8
 80027a2:	2000      	movs	r0, #0
 80027a4:	4094      	lsls	r4, r2
 80027a6:	e652      	b.n	800244e <__aeabi_dmul+0x1ba>
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	e604      	b.n	80023b6 <__aeabi_dmul+0x122>
 80027ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <__aeabi_dmul+0x58c>)
 80027ae:	0021      	movs	r1, r4
 80027b0:	469c      	mov	ip, r3
 80027b2:	0003      	movs	r3, r0
 80027b4:	9d01      	ldr	r5, [sp, #4]
 80027b6:	40d3      	lsrs	r3, r2
 80027b8:	4465      	add	r5, ip
 80027ba:	40a9      	lsls	r1, r5
 80027bc:	4319      	orrs	r1, r3
 80027be:	0003      	movs	r3, r0
 80027c0:	40ab      	lsls	r3, r5
 80027c2:	1e58      	subs	r0, r3, #1
 80027c4:	4183      	sbcs	r3, r0
 80027c6:	4319      	orrs	r1, r3
 80027c8:	0008      	movs	r0, r1
 80027ca:	40d4      	lsrs	r4, r2
 80027cc:	074b      	lsls	r3, r1, #29
 80027ce:	d009      	beq.n	80027e4 <__aeabi_dmul+0x550>
 80027d0:	230f      	movs	r3, #15
 80027d2:	400b      	ands	r3, r1
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d005      	beq.n	80027e4 <__aeabi_dmul+0x550>
 80027d8:	1d0b      	adds	r3, r1, #4
 80027da:	428b      	cmp	r3, r1
 80027dc:	4180      	sbcs	r0, r0
 80027de:	4240      	negs	r0, r0
 80027e0:	1824      	adds	r4, r4, r0
 80027e2:	0018      	movs	r0, r3
 80027e4:	0223      	lsls	r3, r4, #8
 80027e6:	d400      	bmi.n	80027ea <__aeabi_dmul+0x556>
 80027e8:	e6d6      	b.n	8002598 <__aeabi_dmul+0x304>
 80027ea:	2301      	movs	r3, #1
 80027ec:	2400      	movs	r4, #0
 80027ee:	2200      	movs	r2, #0
 80027f0:	e5a6      	b.n	8002340 <__aeabi_dmul+0xac>
 80027f2:	290f      	cmp	r1, #15
 80027f4:	d1aa      	bne.n	800274c <__aeabi_dmul+0x4b8>
 80027f6:	2380      	movs	r3, #128	@ 0x80
 80027f8:	4652      	mov	r2, sl
 80027fa:	031b      	lsls	r3, r3, #12
 80027fc:	421a      	tst	r2, r3
 80027fe:	d0a9      	beq.n	8002754 <__aeabi_dmul+0x4c0>
 8002800:	421c      	tst	r4, r3
 8002802:	d1a7      	bne.n	8002754 <__aeabi_dmul+0x4c0>
 8002804:	431c      	orrs	r4, r3
 8002806:	9b00      	ldr	r3, [sp, #0]
 8002808:	0002      	movs	r2, r0
 800280a:	469b      	mov	fp, r3
 800280c:	4b03      	ldr	r3, [pc, #12]	@ (800281c <__aeabi_dmul+0x588>)
 800280e:	e597      	b.n	8002340 <__aeabi_dmul+0xac>
 8002810:	2400      	movs	r4, #0
 8002812:	e6c1      	b.n	8002598 <__aeabi_dmul+0x304>
 8002814:	2400      	movs	r4, #0
 8002816:	4b01      	ldr	r3, [pc, #4]	@ (800281c <__aeabi_dmul+0x588>)
 8002818:	0022      	movs	r2, r4
 800281a:	e591      	b.n	8002340 <__aeabi_dmul+0xac>
 800281c:	000007ff 	.word	0x000007ff
 8002820:	0000041e 	.word	0x0000041e

08002824 <__aeabi_dsub>:
 8002824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002826:	464e      	mov	r6, r9
 8002828:	4645      	mov	r5, r8
 800282a:	46de      	mov	lr, fp
 800282c:	4657      	mov	r7, sl
 800282e:	b5e0      	push	{r5, r6, r7, lr}
 8002830:	b085      	sub	sp, #20
 8002832:	9000      	str	r0, [sp, #0]
 8002834:	9101      	str	r1, [sp, #4]
 8002836:	030c      	lsls	r4, r1, #12
 8002838:	004f      	lsls	r7, r1, #1
 800283a:	0fce      	lsrs	r6, r1, #31
 800283c:	0a61      	lsrs	r1, r4, #9
 800283e:	9c00      	ldr	r4, [sp, #0]
 8002840:	46b0      	mov	r8, r6
 8002842:	0f64      	lsrs	r4, r4, #29
 8002844:	430c      	orrs	r4, r1
 8002846:	9900      	ldr	r1, [sp, #0]
 8002848:	0d7f      	lsrs	r7, r7, #21
 800284a:	00c8      	lsls	r0, r1, #3
 800284c:	0011      	movs	r1, r2
 800284e:	001a      	movs	r2, r3
 8002850:	031b      	lsls	r3, r3, #12
 8002852:	469c      	mov	ip, r3
 8002854:	9100      	str	r1, [sp, #0]
 8002856:	9201      	str	r2, [sp, #4]
 8002858:	0051      	lsls	r1, r2, #1
 800285a:	0d4b      	lsrs	r3, r1, #21
 800285c:	4699      	mov	r9, r3
 800285e:	9b01      	ldr	r3, [sp, #4]
 8002860:	9d00      	ldr	r5, [sp, #0]
 8002862:	0fd9      	lsrs	r1, r3, #31
 8002864:	4663      	mov	r3, ip
 8002866:	0f6a      	lsrs	r2, r5, #29
 8002868:	0a5b      	lsrs	r3, r3, #9
 800286a:	4313      	orrs	r3, r2
 800286c:	00ea      	lsls	r2, r5, #3
 800286e:	4694      	mov	ip, r2
 8002870:	4693      	mov	fp, r2
 8002872:	4ac1      	ldr	r2, [pc, #772]	@ (8002b78 <__aeabi_dsub+0x354>)
 8002874:	9003      	str	r0, [sp, #12]
 8002876:	9302      	str	r3, [sp, #8]
 8002878:	4591      	cmp	r9, r2
 800287a:	d100      	bne.n	800287e <__aeabi_dsub+0x5a>
 800287c:	e0cd      	b.n	8002a1a <__aeabi_dsub+0x1f6>
 800287e:	2501      	movs	r5, #1
 8002880:	4069      	eors	r1, r5
 8002882:	464d      	mov	r5, r9
 8002884:	1b7d      	subs	r5, r7, r5
 8002886:	46aa      	mov	sl, r5
 8002888:	428e      	cmp	r6, r1
 800288a:	d100      	bne.n	800288e <__aeabi_dsub+0x6a>
 800288c:	e080      	b.n	8002990 <__aeabi_dsub+0x16c>
 800288e:	2d00      	cmp	r5, #0
 8002890:	dc00      	bgt.n	8002894 <__aeabi_dsub+0x70>
 8002892:	e335      	b.n	8002f00 <__aeabi_dsub+0x6dc>
 8002894:	4649      	mov	r1, r9
 8002896:	2900      	cmp	r1, #0
 8002898:	d100      	bne.n	800289c <__aeabi_dsub+0x78>
 800289a:	e0df      	b.n	8002a5c <__aeabi_dsub+0x238>
 800289c:	4297      	cmp	r7, r2
 800289e:	d100      	bne.n	80028a2 <__aeabi_dsub+0x7e>
 80028a0:	e194      	b.n	8002bcc <__aeabi_dsub+0x3a8>
 80028a2:	4652      	mov	r2, sl
 80028a4:	2501      	movs	r5, #1
 80028a6:	2a38      	cmp	r2, #56	@ 0x38
 80028a8:	dc19      	bgt.n	80028de <__aeabi_dsub+0xba>
 80028aa:	2280      	movs	r2, #128	@ 0x80
 80028ac:	9b02      	ldr	r3, [sp, #8]
 80028ae:	0412      	lsls	r2, r2, #16
 80028b0:	4313      	orrs	r3, r2
 80028b2:	9302      	str	r3, [sp, #8]
 80028b4:	4652      	mov	r2, sl
 80028b6:	2a1f      	cmp	r2, #31
 80028b8:	dd00      	ble.n	80028bc <__aeabi_dsub+0x98>
 80028ba:	e1e3      	b.n	8002c84 <__aeabi_dsub+0x460>
 80028bc:	4653      	mov	r3, sl
 80028be:	2220      	movs	r2, #32
 80028c0:	4661      	mov	r1, ip
 80028c2:	9d02      	ldr	r5, [sp, #8]
 80028c4:	1ad2      	subs	r2, r2, r3
 80028c6:	4095      	lsls	r5, r2
 80028c8:	40d9      	lsrs	r1, r3
 80028ca:	430d      	orrs	r5, r1
 80028cc:	4661      	mov	r1, ip
 80028ce:	4091      	lsls	r1, r2
 80028d0:	000a      	movs	r2, r1
 80028d2:	1e51      	subs	r1, r2, #1
 80028d4:	418a      	sbcs	r2, r1
 80028d6:	4315      	orrs	r5, r2
 80028d8:	9a02      	ldr	r2, [sp, #8]
 80028da:	40da      	lsrs	r2, r3
 80028dc:	1aa4      	subs	r4, r4, r2
 80028de:	1b45      	subs	r5, r0, r5
 80028e0:	42a8      	cmp	r0, r5
 80028e2:	4180      	sbcs	r0, r0
 80028e4:	4240      	negs	r0, r0
 80028e6:	1a24      	subs	r4, r4, r0
 80028e8:	0223      	lsls	r3, r4, #8
 80028ea:	d400      	bmi.n	80028ee <__aeabi_dsub+0xca>
 80028ec:	e13d      	b.n	8002b6a <__aeabi_dsub+0x346>
 80028ee:	0264      	lsls	r4, r4, #9
 80028f0:	0a64      	lsrs	r4, r4, #9
 80028f2:	2c00      	cmp	r4, #0
 80028f4:	d100      	bne.n	80028f8 <__aeabi_dsub+0xd4>
 80028f6:	e147      	b.n	8002b88 <__aeabi_dsub+0x364>
 80028f8:	0020      	movs	r0, r4
 80028fa:	f000 fcab 	bl	8003254 <__clzsi2>
 80028fe:	0003      	movs	r3, r0
 8002900:	3b08      	subs	r3, #8
 8002902:	2120      	movs	r1, #32
 8002904:	0028      	movs	r0, r5
 8002906:	1aca      	subs	r2, r1, r3
 8002908:	40d0      	lsrs	r0, r2
 800290a:	409c      	lsls	r4, r3
 800290c:	0002      	movs	r2, r0
 800290e:	409d      	lsls	r5, r3
 8002910:	4322      	orrs	r2, r4
 8002912:	429f      	cmp	r7, r3
 8002914:	dd00      	ble.n	8002918 <__aeabi_dsub+0xf4>
 8002916:	e177      	b.n	8002c08 <__aeabi_dsub+0x3e4>
 8002918:	1bd8      	subs	r0, r3, r7
 800291a:	3001      	adds	r0, #1
 800291c:	1a09      	subs	r1, r1, r0
 800291e:	002c      	movs	r4, r5
 8002920:	408d      	lsls	r5, r1
 8002922:	40c4      	lsrs	r4, r0
 8002924:	1e6b      	subs	r3, r5, #1
 8002926:	419d      	sbcs	r5, r3
 8002928:	0013      	movs	r3, r2
 800292a:	40c2      	lsrs	r2, r0
 800292c:	408b      	lsls	r3, r1
 800292e:	4325      	orrs	r5, r4
 8002930:	2700      	movs	r7, #0
 8002932:	0014      	movs	r4, r2
 8002934:	431d      	orrs	r5, r3
 8002936:	076b      	lsls	r3, r5, #29
 8002938:	d009      	beq.n	800294e <__aeabi_dsub+0x12a>
 800293a:	230f      	movs	r3, #15
 800293c:	402b      	ands	r3, r5
 800293e:	2b04      	cmp	r3, #4
 8002940:	d005      	beq.n	800294e <__aeabi_dsub+0x12a>
 8002942:	1d2b      	adds	r3, r5, #4
 8002944:	42ab      	cmp	r3, r5
 8002946:	41ad      	sbcs	r5, r5
 8002948:	426d      	negs	r5, r5
 800294a:	1964      	adds	r4, r4, r5
 800294c:	001d      	movs	r5, r3
 800294e:	0223      	lsls	r3, r4, #8
 8002950:	d400      	bmi.n	8002954 <__aeabi_dsub+0x130>
 8002952:	e140      	b.n	8002bd6 <__aeabi_dsub+0x3b2>
 8002954:	4a88      	ldr	r2, [pc, #544]	@ (8002b78 <__aeabi_dsub+0x354>)
 8002956:	3701      	adds	r7, #1
 8002958:	4297      	cmp	r7, r2
 800295a:	d100      	bne.n	800295e <__aeabi_dsub+0x13a>
 800295c:	e101      	b.n	8002b62 <__aeabi_dsub+0x33e>
 800295e:	2601      	movs	r6, #1
 8002960:	4643      	mov	r3, r8
 8002962:	4986      	ldr	r1, [pc, #536]	@ (8002b7c <__aeabi_dsub+0x358>)
 8002964:	08ed      	lsrs	r5, r5, #3
 8002966:	4021      	ands	r1, r4
 8002968:	074a      	lsls	r2, r1, #29
 800296a:	432a      	orrs	r2, r5
 800296c:	057c      	lsls	r4, r7, #21
 800296e:	024d      	lsls	r5, r1, #9
 8002970:	0b2d      	lsrs	r5, r5, #12
 8002972:	0d64      	lsrs	r4, r4, #21
 8002974:	401e      	ands	r6, r3
 8002976:	0524      	lsls	r4, r4, #20
 8002978:	432c      	orrs	r4, r5
 800297a:	07f6      	lsls	r6, r6, #31
 800297c:	4334      	orrs	r4, r6
 800297e:	0010      	movs	r0, r2
 8002980:	0021      	movs	r1, r4
 8002982:	b005      	add	sp, #20
 8002984:	bcf0      	pop	{r4, r5, r6, r7}
 8002986:	46bb      	mov	fp, r7
 8002988:	46b2      	mov	sl, r6
 800298a:	46a9      	mov	r9, r5
 800298c:	46a0      	mov	r8, r4
 800298e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002990:	2d00      	cmp	r5, #0
 8002992:	dc00      	bgt.n	8002996 <__aeabi_dsub+0x172>
 8002994:	e2d0      	b.n	8002f38 <__aeabi_dsub+0x714>
 8002996:	4649      	mov	r1, r9
 8002998:	2900      	cmp	r1, #0
 800299a:	d000      	beq.n	800299e <__aeabi_dsub+0x17a>
 800299c:	e0d4      	b.n	8002b48 <__aeabi_dsub+0x324>
 800299e:	4661      	mov	r1, ip
 80029a0:	9b02      	ldr	r3, [sp, #8]
 80029a2:	4319      	orrs	r1, r3
 80029a4:	d100      	bne.n	80029a8 <__aeabi_dsub+0x184>
 80029a6:	e12b      	b.n	8002c00 <__aeabi_dsub+0x3dc>
 80029a8:	1e69      	subs	r1, r5, #1
 80029aa:	2d01      	cmp	r5, #1
 80029ac:	d100      	bne.n	80029b0 <__aeabi_dsub+0x18c>
 80029ae:	e1d9      	b.n	8002d64 <__aeabi_dsub+0x540>
 80029b0:	4295      	cmp	r5, r2
 80029b2:	d100      	bne.n	80029b6 <__aeabi_dsub+0x192>
 80029b4:	e10a      	b.n	8002bcc <__aeabi_dsub+0x3a8>
 80029b6:	2501      	movs	r5, #1
 80029b8:	2938      	cmp	r1, #56	@ 0x38
 80029ba:	dc17      	bgt.n	80029ec <__aeabi_dsub+0x1c8>
 80029bc:	468a      	mov	sl, r1
 80029be:	4653      	mov	r3, sl
 80029c0:	2b1f      	cmp	r3, #31
 80029c2:	dd00      	ble.n	80029c6 <__aeabi_dsub+0x1a2>
 80029c4:	e1e7      	b.n	8002d96 <__aeabi_dsub+0x572>
 80029c6:	2220      	movs	r2, #32
 80029c8:	1ad2      	subs	r2, r2, r3
 80029ca:	9b02      	ldr	r3, [sp, #8]
 80029cc:	4661      	mov	r1, ip
 80029ce:	4093      	lsls	r3, r2
 80029d0:	001d      	movs	r5, r3
 80029d2:	4653      	mov	r3, sl
 80029d4:	40d9      	lsrs	r1, r3
 80029d6:	4663      	mov	r3, ip
 80029d8:	4093      	lsls	r3, r2
 80029da:	001a      	movs	r2, r3
 80029dc:	430d      	orrs	r5, r1
 80029de:	1e51      	subs	r1, r2, #1
 80029e0:	418a      	sbcs	r2, r1
 80029e2:	4653      	mov	r3, sl
 80029e4:	4315      	orrs	r5, r2
 80029e6:	9a02      	ldr	r2, [sp, #8]
 80029e8:	40da      	lsrs	r2, r3
 80029ea:	18a4      	adds	r4, r4, r2
 80029ec:	182d      	adds	r5, r5, r0
 80029ee:	4285      	cmp	r5, r0
 80029f0:	4180      	sbcs	r0, r0
 80029f2:	4240      	negs	r0, r0
 80029f4:	1824      	adds	r4, r4, r0
 80029f6:	0223      	lsls	r3, r4, #8
 80029f8:	d400      	bmi.n	80029fc <__aeabi_dsub+0x1d8>
 80029fa:	e0b6      	b.n	8002b6a <__aeabi_dsub+0x346>
 80029fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002b78 <__aeabi_dsub+0x354>)
 80029fe:	3701      	adds	r7, #1
 8002a00:	429f      	cmp	r7, r3
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dsub+0x1e2>
 8002a04:	e0ad      	b.n	8002b62 <__aeabi_dsub+0x33e>
 8002a06:	2101      	movs	r1, #1
 8002a08:	4b5c      	ldr	r3, [pc, #368]	@ (8002b7c <__aeabi_dsub+0x358>)
 8002a0a:	086a      	lsrs	r2, r5, #1
 8002a0c:	401c      	ands	r4, r3
 8002a0e:	4029      	ands	r1, r5
 8002a10:	430a      	orrs	r2, r1
 8002a12:	07e5      	lsls	r5, r4, #31
 8002a14:	4315      	orrs	r5, r2
 8002a16:	0864      	lsrs	r4, r4, #1
 8002a18:	e78d      	b.n	8002936 <__aeabi_dsub+0x112>
 8002a1a:	4a59      	ldr	r2, [pc, #356]	@ (8002b80 <__aeabi_dsub+0x35c>)
 8002a1c:	9b02      	ldr	r3, [sp, #8]
 8002a1e:	4692      	mov	sl, r2
 8002a20:	4662      	mov	r2, ip
 8002a22:	44ba      	add	sl, r7
 8002a24:	431a      	orrs	r2, r3
 8002a26:	d02c      	beq.n	8002a82 <__aeabi_dsub+0x25e>
 8002a28:	428e      	cmp	r6, r1
 8002a2a:	d02e      	beq.n	8002a8a <__aeabi_dsub+0x266>
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	2a00      	cmp	r2, #0
 8002a30:	d060      	beq.n	8002af4 <__aeabi_dsub+0x2d0>
 8002a32:	2f00      	cmp	r7, #0
 8002a34:	d100      	bne.n	8002a38 <__aeabi_dsub+0x214>
 8002a36:	e0db      	b.n	8002bf0 <__aeabi_dsub+0x3cc>
 8002a38:	4663      	mov	r3, ip
 8002a3a:	000e      	movs	r6, r1
 8002a3c:	9c02      	ldr	r4, [sp, #8]
 8002a3e:	08d8      	lsrs	r0, r3, #3
 8002a40:	0762      	lsls	r2, r4, #29
 8002a42:	4302      	orrs	r2, r0
 8002a44:	08e4      	lsrs	r4, r4, #3
 8002a46:	0013      	movs	r3, r2
 8002a48:	4323      	orrs	r3, r4
 8002a4a:	d100      	bne.n	8002a4e <__aeabi_dsub+0x22a>
 8002a4c:	e254      	b.n	8002ef8 <__aeabi_dsub+0x6d4>
 8002a4e:	2580      	movs	r5, #128	@ 0x80
 8002a50:	032d      	lsls	r5, r5, #12
 8002a52:	4325      	orrs	r5, r4
 8002a54:	032d      	lsls	r5, r5, #12
 8002a56:	4c48      	ldr	r4, [pc, #288]	@ (8002b78 <__aeabi_dsub+0x354>)
 8002a58:	0b2d      	lsrs	r5, r5, #12
 8002a5a:	e78c      	b.n	8002976 <__aeabi_dsub+0x152>
 8002a5c:	4661      	mov	r1, ip
 8002a5e:	9b02      	ldr	r3, [sp, #8]
 8002a60:	4319      	orrs	r1, r3
 8002a62:	d100      	bne.n	8002a66 <__aeabi_dsub+0x242>
 8002a64:	e0cc      	b.n	8002c00 <__aeabi_dsub+0x3dc>
 8002a66:	0029      	movs	r1, r5
 8002a68:	3901      	subs	r1, #1
 8002a6a:	2d01      	cmp	r5, #1
 8002a6c:	d100      	bne.n	8002a70 <__aeabi_dsub+0x24c>
 8002a6e:	e188      	b.n	8002d82 <__aeabi_dsub+0x55e>
 8002a70:	4295      	cmp	r5, r2
 8002a72:	d100      	bne.n	8002a76 <__aeabi_dsub+0x252>
 8002a74:	e0aa      	b.n	8002bcc <__aeabi_dsub+0x3a8>
 8002a76:	2501      	movs	r5, #1
 8002a78:	2938      	cmp	r1, #56	@ 0x38
 8002a7a:	dd00      	ble.n	8002a7e <__aeabi_dsub+0x25a>
 8002a7c:	e72f      	b.n	80028de <__aeabi_dsub+0xba>
 8002a7e:	468a      	mov	sl, r1
 8002a80:	e718      	b.n	80028b4 <__aeabi_dsub+0x90>
 8002a82:	2201      	movs	r2, #1
 8002a84:	4051      	eors	r1, r2
 8002a86:	428e      	cmp	r6, r1
 8002a88:	d1d0      	bne.n	8002a2c <__aeabi_dsub+0x208>
 8002a8a:	4653      	mov	r3, sl
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d100      	bne.n	8002a92 <__aeabi_dsub+0x26e>
 8002a90:	e0be      	b.n	8002c10 <__aeabi_dsub+0x3ec>
 8002a92:	2f00      	cmp	r7, #0
 8002a94:	d000      	beq.n	8002a98 <__aeabi_dsub+0x274>
 8002a96:	e138      	b.n	8002d0a <__aeabi_dsub+0x4e6>
 8002a98:	46ca      	mov	sl, r9
 8002a9a:	0022      	movs	r2, r4
 8002a9c:	4302      	orrs	r2, r0
 8002a9e:	d100      	bne.n	8002aa2 <__aeabi_dsub+0x27e>
 8002aa0:	e1e2      	b.n	8002e68 <__aeabi_dsub+0x644>
 8002aa2:	4653      	mov	r3, sl
 8002aa4:	1e59      	subs	r1, r3, #1
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d100      	bne.n	8002aac <__aeabi_dsub+0x288>
 8002aaa:	e20d      	b.n	8002ec8 <__aeabi_dsub+0x6a4>
 8002aac:	4a32      	ldr	r2, [pc, #200]	@ (8002b78 <__aeabi_dsub+0x354>)
 8002aae:	4592      	cmp	sl, r2
 8002ab0:	d100      	bne.n	8002ab4 <__aeabi_dsub+0x290>
 8002ab2:	e1d2      	b.n	8002e5a <__aeabi_dsub+0x636>
 8002ab4:	2701      	movs	r7, #1
 8002ab6:	2938      	cmp	r1, #56	@ 0x38
 8002ab8:	dc13      	bgt.n	8002ae2 <__aeabi_dsub+0x2be>
 8002aba:	291f      	cmp	r1, #31
 8002abc:	dd00      	ble.n	8002ac0 <__aeabi_dsub+0x29c>
 8002abe:	e1ee      	b.n	8002e9e <__aeabi_dsub+0x67a>
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	9b02      	ldr	r3, [sp, #8]
 8002ac4:	1a52      	subs	r2, r2, r1
 8002ac6:	0025      	movs	r5, r4
 8002ac8:	0007      	movs	r7, r0
 8002aca:	469a      	mov	sl, r3
 8002acc:	40cc      	lsrs	r4, r1
 8002ace:	4090      	lsls	r0, r2
 8002ad0:	4095      	lsls	r5, r2
 8002ad2:	40cf      	lsrs	r7, r1
 8002ad4:	44a2      	add	sl, r4
 8002ad6:	1e42      	subs	r2, r0, #1
 8002ad8:	4190      	sbcs	r0, r2
 8002ada:	4653      	mov	r3, sl
 8002adc:	432f      	orrs	r7, r5
 8002ade:	4307      	orrs	r7, r0
 8002ae0:	9302      	str	r3, [sp, #8]
 8002ae2:	003d      	movs	r5, r7
 8002ae4:	4465      	add	r5, ip
 8002ae6:	4565      	cmp	r5, ip
 8002ae8:	4192      	sbcs	r2, r2
 8002aea:	9b02      	ldr	r3, [sp, #8]
 8002aec:	4252      	negs	r2, r2
 8002aee:	464f      	mov	r7, r9
 8002af0:	18d4      	adds	r4, r2, r3
 8002af2:	e780      	b.n	80029f6 <__aeabi_dsub+0x1d2>
 8002af4:	4a23      	ldr	r2, [pc, #140]	@ (8002b84 <__aeabi_dsub+0x360>)
 8002af6:	1c7d      	adds	r5, r7, #1
 8002af8:	4215      	tst	r5, r2
 8002afa:	d000      	beq.n	8002afe <__aeabi_dsub+0x2da>
 8002afc:	e0aa      	b.n	8002c54 <__aeabi_dsub+0x430>
 8002afe:	4662      	mov	r2, ip
 8002b00:	0025      	movs	r5, r4
 8002b02:	9b02      	ldr	r3, [sp, #8]
 8002b04:	4305      	orrs	r5, r0
 8002b06:	431a      	orrs	r2, r3
 8002b08:	2f00      	cmp	r7, #0
 8002b0a:	d000      	beq.n	8002b0e <__aeabi_dsub+0x2ea>
 8002b0c:	e0f5      	b.n	8002cfa <__aeabi_dsub+0x4d6>
 8002b0e:	2d00      	cmp	r5, #0
 8002b10:	d100      	bne.n	8002b14 <__aeabi_dsub+0x2f0>
 8002b12:	e16b      	b.n	8002dec <__aeabi_dsub+0x5c8>
 8002b14:	2a00      	cmp	r2, #0
 8002b16:	d100      	bne.n	8002b1a <__aeabi_dsub+0x2f6>
 8002b18:	e152      	b.n	8002dc0 <__aeabi_dsub+0x59c>
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	1ac5      	subs	r5, r0, r3
 8002b1e:	9b02      	ldr	r3, [sp, #8]
 8002b20:	1ae2      	subs	r2, r4, r3
 8002b22:	42a8      	cmp	r0, r5
 8002b24:	419b      	sbcs	r3, r3
 8002b26:	425b      	negs	r3, r3
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	021a      	lsls	r2, r3, #8
 8002b2c:	d400      	bmi.n	8002b30 <__aeabi_dsub+0x30c>
 8002b2e:	e1d5      	b.n	8002edc <__aeabi_dsub+0x6b8>
 8002b30:	4663      	mov	r3, ip
 8002b32:	1a1d      	subs	r5, r3, r0
 8002b34:	45ac      	cmp	ip, r5
 8002b36:	4192      	sbcs	r2, r2
 8002b38:	2601      	movs	r6, #1
 8002b3a:	9b02      	ldr	r3, [sp, #8]
 8002b3c:	4252      	negs	r2, r2
 8002b3e:	1b1c      	subs	r4, r3, r4
 8002b40:	4688      	mov	r8, r1
 8002b42:	1aa4      	subs	r4, r4, r2
 8002b44:	400e      	ands	r6, r1
 8002b46:	e6f6      	b.n	8002936 <__aeabi_dsub+0x112>
 8002b48:	4297      	cmp	r7, r2
 8002b4a:	d03f      	beq.n	8002bcc <__aeabi_dsub+0x3a8>
 8002b4c:	4652      	mov	r2, sl
 8002b4e:	2501      	movs	r5, #1
 8002b50:	2a38      	cmp	r2, #56	@ 0x38
 8002b52:	dd00      	ble.n	8002b56 <__aeabi_dsub+0x332>
 8002b54:	e74a      	b.n	80029ec <__aeabi_dsub+0x1c8>
 8002b56:	2280      	movs	r2, #128	@ 0x80
 8002b58:	9b02      	ldr	r3, [sp, #8]
 8002b5a:	0412      	lsls	r2, r2, #16
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	9302      	str	r3, [sp, #8]
 8002b60:	e72d      	b.n	80029be <__aeabi_dsub+0x19a>
 8002b62:	003c      	movs	r4, r7
 8002b64:	2500      	movs	r5, #0
 8002b66:	2200      	movs	r2, #0
 8002b68:	e705      	b.n	8002976 <__aeabi_dsub+0x152>
 8002b6a:	2307      	movs	r3, #7
 8002b6c:	402b      	ands	r3, r5
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d000      	beq.n	8002b74 <__aeabi_dsub+0x350>
 8002b72:	e6e2      	b.n	800293a <__aeabi_dsub+0x116>
 8002b74:	e06b      	b.n	8002c4e <__aeabi_dsub+0x42a>
 8002b76:	46c0      	nop			@ (mov r8, r8)
 8002b78:	000007ff 	.word	0x000007ff
 8002b7c:	ff7fffff 	.word	0xff7fffff
 8002b80:	fffff801 	.word	0xfffff801
 8002b84:	000007fe 	.word	0x000007fe
 8002b88:	0028      	movs	r0, r5
 8002b8a:	f000 fb63 	bl	8003254 <__clzsi2>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	3318      	adds	r3, #24
 8002b92:	2b1f      	cmp	r3, #31
 8002b94:	dc00      	bgt.n	8002b98 <__aeabi_dsub+0x374>
 8002b96:	e6b4      	b.n	8002902 <__aeabi_dsub+0xde>
 8002b98:	002a      	movs	r2, r5
 8002b9a:	3808      	subs	r0, #8
 8002b9c:	4082      	lsls	r2, r0
 8002b9e:	429f      	cmp	r7, r3
 8002ba0:	dd00      	ble.n	8002ba4 <__aeabi_dsub+0x380>
 8002ba2:	e0b9      	b.n	8002d18 <__aeabi_dsub+0x4f4>
 8002ba4:	1bdb      	subs	r3, r3, r7
 8002ba6:	1c58      	adds	r0, r3, #1
 8002ba8:	281f      	cmp	r0, #31
 8002baa:	dc00      	bgt.n	8002bae <__aeabi_dsub+0x38a>
 8002bac:	e1a0      	b.n	8002ef0 <__aeabi_dsub+0x6cc>
 8002bae:	0015      	movs	r5, r2
 8002bb0:	3b1f      	subs	r3, #31
 8002bb2:	40dd      	lsrs	r5, r3
 8002bb4:	2820      	cmp	r0, #32
 8002bb6:	d005      	beq.n	8002bc4 <__aeabi_dsub+0x3a0>
 8002bb8:	2340      	movs	r3, #64	@ 0x40
 8002bba:	1a1b      	subs	r3, r3, r0
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	1e53      	subs	r3, r2, #1
 8002bc0:	419a      	sbcs	r2, r3
 8002bc2:	4315      	orrs	r5, r2
 8002bc4:	2307      	movs	r3, #7
 8002bc6:	2700      	movs	r7, #0
 8002bc8:	402b      	ands	r3, r5
 8002bca:	e7d0      	b.n	8002b6e <__aeabi_dsub+0x34a>
 8002bcc:	08c0      	lsrs	r0, r0, #3
 8002bce:	0762      	lsls	r2, r4, #29
 8002bd0:	4302      	orrs	r2, r0
 8002bd2:	08e4      	lsrs	r4, r4, #3
 8002bd4:	e737      	b.n	8002a46 <__aeabi_dsub+0x222>
 8002bd6:	08ea      	lsrs	r2, r5, #3
 8002bd8:	0763      	lsls	r3, r4, #29
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	4bd3      	ldr	r3, [pc, #844]	@ (8002f2c <__aeabi_dsub+0x708>)
 8002bde:	08e4      	lsrs	r4, r4, #3
 8002be0:	429f      	cmp	r7, r3
 8002be2:	d100      	bne.n	8002be6 <__aeabi_dsub+0x3c2>
 8002be4:	e72f      	b.n	8002a46 <__aeabi_dsub+0x222>
 8002be6:	0324      	lsls	r4, r4, #12
 8002be8:	0b25      	lsrs	r5, r4, #12
 8002bea:	057c      	lsls	r4, r7, #21
 8002bec:	0d64      	lsrs	r4, r4, #21
 8002bee:	e6c2      	b.n	8002976 <__aeabi_dsub+0x152>
 8002bf0:	46ca      	mov	sl, r9
 8002bf2:	0022      	movs	r2, r4
 8002bf4:	4302      	orrs	r2, r0
 8002bf6:	d158      	bne.n	8002caa <__aeabi_dsub+0x486>
 8002bf8:	4663      	mov	r3, ip
 8002bfa:	000e      	movs	r6, r1
 8002bfc:	9c02      	ldr	r4, [sp, #8]
 8002bfe:	9303      	str	r3, [sp, #12]
 8002c00:	9b03      	ldr	r3, [sp, #12]
 8002c02:	4657      	mov	r7, sl
 8002c04:	08da      	lsrs	r2, r3, #3
 8002c06:	e7e7      	b.n	8002bd8 <__aeabi_dsub+0x3b4>
 8002c08:	4cc9      	ldr	r4, [pc, #804]	@ (8002f30 <__aeabi_dsub+0x70c>)
 8002c0a:	1aff      	subs	r7, r7, r3
 8002c0c:	4014      	ands	r4, r2
 8002c0e:	e692      	b.n	8002936 <__aeabi_dsub+0x112>
 8002c10:	4dc8      	ldr	r5, [pc, #800]	@ (8002f34 <__aeabi_dsub+0x710>)
 8002c12:	1c7a      	adds	r2, r7, #1
 8002c14:	422a      	tst	r2, r5
 8002c16:	d000      	beq.n	8002c1a <__aeabi_dsub+0x3f6>
 8002c18:	e084      	b.n	8002d24 <__aeabi_dsub+0x500>
 8002c1a:	0022      	movs	r2, r4
 8002c1c:	4302      	orrs	r2, r0
 8002c1e:	2f00      	cmp	r7, #0
 8002c20:	d000      	beq.n	8002c24 <__aeabi_dsub+0x400>
 8002c22:	e0ef      	b.n	8002e04 <__aeabi_dsub+0x5e0>
 8002c24:	2a00      	cmp	r2, #0
 8002c26:	d100      	bne.n	8002c2a <__aeabi_dsub+0x406>
 8002c28:	e0e5      	b.n	8002df6 <__aeabi_dsub+0x5d2>
 8002c2a:	4662      	mov	r2, ip
 8002c2c:	9902      	ldr	r1, [sp, #8]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	d100      	bne.n	8002c34 <__aeabi_dsub+0x410>
 8002c32:	e0c5      	b.n	8002dc0 <__aeabi_dsub+0x59c>
 8002c34:	4663      	mov	r3, ip
 8002c36:	18c5      	adds	r5, r0, r3
 8002c38:	468c      	mov	ip, r1
 8002c3a:	4285      	cmp	r5, r0
 8002c3c:	4180      	sbcs	r0, r0
 8002c3e:	4464      	add	r4, ip
 8002c40:	4240      	negs	r0, r0
 8002c42:	1824      	adds	r4, r4, r0
 8002c44:	0223      	lsls	r3, r4, #8
 8002c46:	d502      	bpl.n	8002c4e <__aeabi_dsub+0x42a>
 8002c48:	4bb9      	ldr	r3, [pc, #740]	@ (8002f30 <__aeabi_dsub+0x70c>)
 8002c4a:	3701      	adds	r7, #1
 8002c4c:	401c      	ands	r4, r3
 8002c4e:	46ba      	mov	sl, r7
 8002c50:	9503      	str	r5, [sp, #12]
 8002c52:	e7d5      	b.n	8002c00 <__aeabi_dsub+0x3dc>
 8002c54:	4662      	mov	r2, ip
 8002c56:	1a85      	subs	r5, r0, r2
 8002c58:	42a8      	cmp	r0, r5
 8002c5a:	4192      	sbcs	r2, r2
 8002c5c:	4252      	negs	r2, r2
 8002c5e:	4691      	mov	r9, r2
 8002c60:	9b02      	ldr	r3, [sp, #8]
 8002c62:	1ae3      	subs	r3, r4, r3
 8002c64:	001a      	movs	r2, r3
 8002c66:	464b      	mov	r3, r9
 8002c68:	1ad2      	subs	r2, r2, r3
 8002c6a:	0013      	movs	r3, r2
 8002c6c:	4691      	mov	r9, r2
 8002c6e:	021a      	lsls	r2, r3, #8
 8002c70:	d46c      	bmi.n	8002d4c <__aeabi_dsub+0x528>
 8002c72:	464a      	mov	r2, r9
 8002c74:	464c      	mov	r4, r9
 8002c76:	432a      	orrs	r2, r5
 8002c78:	d000      	beq.n	8002c7c <__aeabi_dsub+0x458>
 8002c7a:	e63a      	b.n	80028f2 <__aeabi_dsub+0xce>
 8002c7c:	2600      	movs	r6, #0
 8002c7e:	2400      	movs	r4, #0
 8002c80:	2500      	movs	r5, #0
 8002c82:	e678      	b.n	8002976 <__aeabi_dsub+0x152>
 8002c84:	9902      	ldr	r1, [sp, #8]
 8002c86:	4653      	mov	r3, sl
 8002c88:	000d      	movs	r5, r1
 8002c8a:	3a20      	subs	r2, #32
 8002c8c:	40d5      	lsrs	r5, r2
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	d006      	beq.n	8002ca0 <__aeabi_dsub+0x47c>
 8002c92:	2240      	movs	r2, #64	@ 0x40
 8002c94:	1ad2      	subs	r2, r2, r3
 8002c96:	000b      	movs	r3, r1
 8002c98:	4093      	lsls	r3, r2
 8002c9a:	4662      	mov	r2, ip
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	4693      	mov	fp, r2
 8002ca0:	465b      	mov	r3, fp
 8002ca2:	1e5a      	subs	r2, r3, #1
 8002ca4:	4193      	sbcs	r3, r2
 8002ca6:	431d      	orrs	r5, r3
 8002ca8:	e619      	b.n	80028de <__aeabi_dsub+0xba>
 8002caa:	4653      	mov	r3, sl
 8002cac:	1e5a      	subs	r2, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d100      	bne.n	8002cb4 <__aeabi_dsub+0x490>
 8002cb2:	e0c6      	b.n	8002e42 <__aeabi_dsub+0x61e>
 8002cb4:	4e9d      	ldr	r6, [pc, #628]	@ (8002f2c <__aeabi_dsub+0x708>)
 8002cb6:	45b2      	cmp	sl, r6
 8002cb8:	d100      	bne.n	8002cbc <__aeabi_dsub+0x498>
 8002cba:	e6bd      	b.n	8002a38 <__aeabi_dsub+0x214>
 8002cbc:	4688      	mov	r8, r1
 8002cbe:	000e      	movs	r6, r1
 8002cc0:	2501      	movs	r5, #1
 8002cc2:	2a38      	cmp	r2, #56	@ 0x38
 8002cc4:	dc10      	bgt.n	8002ce8 <__aeabi_dsub+0x4c4>
 8002cc6:	2a1f      	cmp	r2, #31
 8002cc8:	dc7f      	bgt.n	8002dca <__aeabi_dsub+0x5a6>
 8002cca:	2120      	movs	r1, #32
 8002ccc:	0025      	movs	r5, r4
 8002cce:	1a89      	subs	r1, r1, r2
 8002cd0:	0007      	movs	r7, r0
 8002cd2:	4088      	lsls	r0, r1
 8002cd4:	408d      	lsls	r5, r1
 8002cd6:	40d7      	lsrs	r7, r2
 8002cd8:	40d4      	lsrs	r4, r2
 8002cda:	1e41      	subs	r1, r0, #1
 8002cdc:	4188      	sbcs	r0, r1
 8002cde:	9b02      	ldr	r3, [sp, #8]
 8002ce0:	433d      	orrs	r5, r7
 8002ce2:	1b1b      	subs	r3, r3, r4
 8002ce4:	4305      	orrs	r5, r0
 8002ce6:	9302      	str	r3, [sp, #8]
 8002ce8:	4662      	mov	r2, ip
 8002cea:	1b55      	subs	r5, r2, r5
 8002cec:	45ac      	cmp	ip, r5
 8002cee:	4192      	sbcs	r2, r2
 8002cf0:	9b02      	ldr	r3, [sp, #8]
 8002cf2:	4252      	negs	r2, r2
 8002cf4:	464f      	mov	r7, r9
 8002cf6:	1a9c      	subs	r4, r3, r2
 8002cf8:	e5f6      	b.n	80028e8 <__aeabi_dsub+0xc4>
 8002cfa:	2d00      	cmp	r5, #0
 8002cfc:	d000      	beq.n	8002d00 <__aeabi_dsub+0x4dc>
 8002cfe:	e0b7      	b.n	8002e70 <__aeabi_dsub+0x64c>
 8002d00:	2a00      	cmp	r2, #0
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x4e2>
 8002d04:	e0f0      	b.n	8002ee8 <__aeabi_dsub+0x6c4>
 8002d06:	2601      	movs	r6, #1
 8002d08:	400e      	ands	r6, r1
 8002d0a:	4663      	mov	r3, ip
 8002d0c:	9802      	ldr	r0, [sp, #8]
 8002d0e:	08d9      	lsrs	r1, r3, #3
 8002d10:	0742      	lsls	r2, r0, #29
 8002d12:	430a      	orrs	r2, r1
 8002d14:	08c4      	lsrs	r4, r0, #3
 8002d16:	e696      	b.n	8002a46 <__aeabi_dsub+0x222>
 8002d18:	4c85      	ldr	r4, [pc, #532]	@ (8002f30 <__aeabi_dsub+0x70c>)
 8002d1a:	1aff      	subs	r7, r7, r3
 8002d1c:	4014      	ands	r4, r2
 8002d1e:	0762      	lsls	r2, r4, #29
 8002d20:	08e4      	lsrs	r4, r4, #3
 8002d22:	e760      	b.n	8002be6 <__aeabi_dsub+0x3c2>
 8002d24:	4981      	ldr	r1, [pc, #516]	@ (8002f2c <__aeabi_dsub+0x708>)
 8002d26:	428a      	cmp	r2, r1
 8002d28:	d100      	bne.n	8002d2c <__aeabi_dsub+0x508>
 8002d2a:	e0c9      	b.n	8002ec0 <__aeabi_dsub+0x69c>
 8002d2c:	4663      	mov	r3, ip
 8002d2e:	18c1      	adds	r1, r0, r3
 8002d30:	4281      	cmp	r1, r0
 8002d32:	4180      	sbcs	r0, r0
 8002d34:	9b02      	ldr	r3, [sp, #8]
 8002d36:	4240      	negs	r0, r0
 8002d38:	18e3      	adds	r3, r4, r3
 8002d3a:	181b      	adds	r3, r3, r0
 8002d3c:	07dd      	lsls	r5, r3, #31
 8002d3e:	085c      	lsrs	r4, r3, #1
 8002d40:	2307      	movs	r3, #7
 8002d42:	0849      	lsrs	r1, r1, #1
 8002d44:	430d      	orrs	r5, r1
 8002d46:	0017      	movs	r7, r2
 8002d48:	402b      	ands	r3, r5
 8002d4a:	e710      	b.n	8002b6e <__aeabi_dsub+0x34a>
 8002d4c:	4663      	mov	r3, ip
 8002d4e:	1a1d      	subs	r5, r3, r0
 8002d50:	45ac      	cmp	ip, r5
 8002d52:	4192      	sbcs	r2, r2
 8002d54:	2601      	movs	r6, #1
 8002d56:	9b02      	ldr	r3, [sp, #8]
 8002d58:	4252      	negs	r2, r2
 8002d5a:	1b1c      	subs	r4, r3, r4
 8002d5c:	4688      	mov	r8, r1
 8002d5e:	1aa4      	subs	r4, r4, r2
 8002d60:	400e      	ands	r6, r1
 8002d62:	e5c6      	b.n	80028f2 <__aeabi_dsub+0xce>
 8002d64:	4663      	mov	r3, ip
 8002d66:	18c5      	adds	r5, r0, r3
 8002d68:	9b02      	ldr	r3, [sp, #8]
 8002d6a:	4285      	cmp	r5, r0
 8002d6c:	4180      	sbcs	r0, r0
 8002d6e:	469c      	mov	ip, r3
 8002d70:	4240      	negs	r0, r0
 8002d72:	4464      	add	r4, ip
 8002d74:	1824      	adds	r4, r4, r0
 8002d76:	2701      	movs	r7, #1
 8002d78:	0223      	lsls	r3, r4, #8
 8002d7a:	d400      	bmi.n	8002d7e <__aeabi_dsub+0x55a>
 8002d7c:	e6f5      	b.n	8002b6a <__aeabi_dsub+0x346>
 8002d7e:	2702      	movs	r7, #2
 8002d80:	e641      	b.n	8002a06 <__aeabi_dsub+0x1e2>
 8002d82:	4663      	mov	r3, ip
 8002d84:	1ac5      	subs	r5, r0, r3
 8002d86:	42a8      	cmp	r0, r5
 8002d88:	4180      	sbcs	r0, r0
 8002d8a:	9b02      	ldr	r3, [sp, #8]
 8002d8c:	4240      	negs	r0, r0
 8002d8e:	1ae4      	subs	r4, r4, r3
 8002d90:	2701      	movs	r7, #1
 8002d92:	1a24      	subs	r4, r4, r0
 8002d94:	e5a8      	b.n	80028e8 <__aeabi_dsub+0xc4>
 8002d96:	9d02      	ldr	r5, [sp, #8]
 8002d98:	4652      	mov	r2, sl
 8002d9a:	002b      	movs	r3, r5
 8002d9c:	3a20      	subs	r2, #32
 8002d9e:	40d3      	lsrs	r3, r2
 8002da0:	0019      	movs	r1, r3
 8002da2:	4653      	mov	r3, sl
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d006      	beq.n	8002db6 <__aeabi_dsub+0x592>
 8002da8:	2240      	movs	r2, #64	@ 0x40
 8002daa:	1ad2      	subs	r2, r2, r3
 8002dac:	002b      	movs	r3, r5
 8002dae:	4093      	lsls	r3, r2
 8002db0:	4662      	mov	r2, ip
 8002db2:	431a      	orrs	r2, r3
 8002db4:	4693      	mov	fp, r2
 8002db6:	465d      	mov	r5, fp
 8002db8:	1e6b      	subs	r3, r5, #1
 8002dba:	419d      	sbcs	r5, r3
 8002dbc:	430d      	orrs	r5, r1
 8002dbe:	e615      	b.n	80029ec <__aeabi_dsub+0x1c8>
 8002dc0:	0762      	lsls	r2, r4, #29
 8002dc2:	08c0      	lsrs	r0, r0, #3
 8002dc4:	4302      	orrs	r2, r0
 8002dc6:	08e4      	lsrs	r4, r4, #3
 8002dc8:	e70d      	b.n	8002be6 <__aeabi_dsub+0x3c2>
 8002dca:	0011      	movs	r1, r2
 8002dcc:	0027      	movs	r7, r4
 8002dce:	3920      	subs	r1, #32
 8002dd0:	40cf      	lsrs	r7, r1
 8002dd2:	2a20      	cmp	r2, #32
 8002dd4:	d005      	beq.n	8002de2 <__aeabi_dsub+0x5be>
 8002dd6:	2140      	movs	r1, #64	@ 0x40
 8002dd8:	1a8a      	subs	r2, r1, r2
 8002dda:	4094      	lsls	r4, r2
 8002ddc:	0025      	movs	r5, r4
 8002dde:	4305      	orrs	r5, r0
 8002de0:	9503      	str	r5, [sp, #12]
 8002de2:	9d03      	ldr	r5, [sp, #12]
 8002de4:	1e6a      	subs	r2, r5, #1
 8002de6:	4195      	sbcs	r5, r2
 8002de8:	433d      	orrs	r5, r7
 8002dea:	e77d      	b.n	8002ce8 <__aeabi_dsub+0x4c4>
 8002dec:	2a00      	cmp	r2, #0
 8002dee:	d100      	bne.n	8002df2 <__aeabi_dsub+0x5ce>
 8002df0:	e744      	b.n	8002c7c <__aeabi_dsub+0x458>
 8002df2:	2601      	movs	r6, #1
 8002df4:	400e      	ands	r6, r1
 8002df6:	4663      	mov	r3, ip
 8002df8:	08d9      	lsrs	r1, r3, #3
 8002dfa:	9b02      	ldr	r3, [sp, #8]
 8002dfc:	075a      	lsls	r2, r3, #29
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	08dc      	lsrs	r4, r3, #3
 8002e02:	e6f0      	b.n	8002be6 <__aeabi_dsub+0x3c2>
 8002e04:	2a00      	cmp	r2, #0
 8002e06:	d028      	beq.n	8002e5a <__aeabi_dsub+0x636>
 8002e08:	4662      	mov	r2, ip
 8002e0a:	9f02      	ldr	r7, [sp, #8]
 8002e0c:	08c0      	lsrs	r0, r0, #3
 8002e0e:	433a      	orrs	r2, r7
 8002e10:	d100      	bne.n	8002e14 <__aeabi_dsub+0x5f0>
 8002e12:	e6dc      	b.n	8002bce <__aeabi_dsub+0x3aa>
 8002e14:	0762      	lsls	r2, r4, #29
 8002e16:	4310      	orrs	r0, r2
 8002e18:	2280      	movs	r2, #128	@ 0x80
 8002e1a:	08e4      	lsrs	r4, r4, #3
 8002e1c:	0312      	lsls	r2, r2, #12
 8002e1e:	4214      	tst	r4, r2
 8002e20:	d009      	beq.n	8002e36 <__aeabi_dsub+0x612>
 8002e22:	08fd      	lsrs	r5, r7, #3
 8002e24:	4215      	tst	r5, r2
 8002e26:	d106      	bne.n	8002e36 <__aeabi_dsub+0x612>
 8002e28:	4663      	mov	r3, ip
 8002e2a:	2601      	movs	r6, #1
 8002e2c:	002c      	movs	r4, r5
 8002e2e:	08d8      	lsrs	r0, r3, #3
 8002e30:	077b      	lsls	r3, r7, #29
 8002e32:	4318      	orrs	r0, r3
 8002e34:	400e      	ands	r6, r1
 8002e36:	0f42      	lsrs	r2, r0, #29
 8002e38:	00c0      	lsls	r0, r0, #3
 8002e3a:	08c0      	lsrs	r0, r0, #3
 8002e3c:	0752      	lsls	r2, r2, #29
 8002e3e:	4302      	orrs	r2, r0
 8002e40:	e601      	b.n	8002a46 <__aeabi_dsub+0x222>
 8002e42:	4663      	mov	r3, ip
 8002e44:	1a1d      	subs	r5, r3, r0
 8002e46:	45ac      	cmp	ip, r5
 8002e48:	4192      	sbcs	r2, r2
 8002e4a:	9b02      	ldr	r3, [sp, #8]
 8002e4c:	4252      	negs	r2, r2
 8002e4e:	1b1c      	subs	r4, r3, r4
 8002e50:	000e      	movs	r6, r1
 8002e52:	4688      	mov	r8, r1
 8002e54:	2701      	movs	r7, #1
 8002e56:	1aa4      	subs	r4, r4, r2
 8002e58:	e546      	b.n	80028e8 <__aeabi_dsub+0xc4>
 8002e5a:	4663      	mov	r3, ip
 8002e5c:	08d9      	lsrs	r1, r3, #3
 8002e5e:	9b02      	ldr	r3, [sp, #8]
 8002e60:	075a      	lsls	r2, r3, #29
 8002e62:	430a      	orrs	r2, r1
 8002e64:	08dc      	lsrs	r4, r3, #3
 8002e66:	e5ee      	b.n	8002a46 <__aeabi_dsub+0x222>
 8002e68:	4663      	mov	r3, ip
 8002e6a:	9c02      	ldr	r4, [sp, #8]
 8002e6c:	9303      	str	r3, [sp, #12]
 8002e6e:	e6c7      	b.n	8002c00 <__aeabi_dsub+0x3dc>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	2a00      	cmp	r2, #0
 8002e74:	d100      	bne.n	8002e78 <__aeabi_dsub+0x654>
 8002e76:	e6aa      	b.n	8002bce <__aeabi_dsub+0x3aa>
 8002e78:	0762      	lsls	r2, r4, #29
 8002e7a:	4310      	orrs	r0, r2
 8002e7c:	2280      	movs	r2, #128	@ 0x80
 8002e7e:	08e4      	lsrs	r4, r4, #3
 8002e80:	0312      	lsls	r2, r2, #12
 8002e82:	4214      	tst	r4, r2
 8002e84:	d0d7      	beq.n	8002e36 <__aeabi_dsub+0x612>
 8002e86:	9f02      	ldr	r7, [sp, #8]
 8002e88:	08fd      	lsrs	r5, r7, #3
 8002e8a:	4215      	tst	r5, r2
 8002e8c:	d1d3      	bne.n	8002e36 <__aeabi_dsub+0x612>
 8002e8e:	4663      	mov	r3, ip
 8002e90:	2601      	movs	r6, #1
 8002e92:	08d8      	lsrs	r0, r3, #3
 8002e94:	077b      	lsls	r3, r7, #29
 8002e96:	002c      	movs	r4, r5
 8002e98:	4318      	orrs	r0, r3
 8002e9a:	400e      	ands	r6, r1
 8002e9c:	e7cb      	b.n	8002e36 <__aeabi_dsub+0x612>
 8002e9e:	000a      	movs	r2, r1
 8002ea0:	0027      	movs	r7, r4
 8002ea2:	3a20      	subs	r2, #32
 8002ea4:	40d7      	lsrs	r7, r2
 8002ea6:	2920      	cmp	r1, #32
 8002ea8:	d005      	beq.n	8002eb6 <__aeabi_dsub+0x692>
 8002eaa:	2240      	movs	r2, #64	@ 0x40
 8002eac:	1a52      	subs	r2, r2, r1
 8002eae:	4094      	lsls	r4, r2
 8002eb0:	0025      	movs	r5, r4
 8002eb2:	4305      	orrs	r5, r0
 8002eb4:	9503      	str	r5, [sp, #12]
 8002eb6:	9d03      	ldr	r5, [sp, #12]
 8002eb8:	1e6a      	subs	r2, r5, #1
 8002eba:	4195      	sbcs	r5, r2
 8002ebc:	432f      	orrs	r7, r5
 8002ebe:	e610      	b.n	8002ae2 <__aeabi_dsub+0x2be>
 8002ec0:	0014      	movs	r4, r2
 8002ec2:	2500      	movs	r5, #0
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	e556      	b.n	8002976 <__aeabi_dsub+0x152>
 8002ec8:	9b02      	ldr	r3, [sp, #8]
 8002eca:	4460      	add	r0, ip
 8002ecc:	4699      	mov	r9, r3
 8002ece:	4560      	cmp	r0, ip
 8002ed0:	4192      	sbcs	r2, r2
 8002ed2:	444c      	add	r4, r9
 8002ed4:	4252      	negs	r2, r2
 8002ed6:	0005      	movs	r5, r0
 8002ed8:	18a4      	adds	r4, r4, r2
 8002eda:	e74c      	b.n	8002d76 <__aeabi_dsub+0x552>
 8002edc:	001a      	movs	r2, r3
 8002ede:	001c      	movs	r4, r3
 8002ee0:	432a      	orrs	r2, r5
 8002ee2:	d000      	beq.n	8002ee6 <__aeabi_dsub+0x6c2>
 8002ee4:	e6b3      	b.n	8002c4e <__aeabi_dsub+0x42a>
 8002ee6:	e6c9      	b.n	8002c7c <__aeabi_dsub+0x458>
 8002ee8:	2480      	movs	r4, #128	@ 0x80
 8002eea:	2600      	movs	r6, #0
 8002eec:	0324      	lsls	r4, r4, #12
 8002eee:	e5ae      	b.n	8002a4e <__aeabi_dsub+0x22a>
 8002ef0:	2120      	movs	r1, #32
 8002ef2:	2500      	movs	r5, #0
 8002ef4:	1a09      	subs	r1, r1, r0
 8002ef6:	e517      	b.n	8002928 <__aeabi_dsub+0x104>
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2500      	movs	r5, #0
 8002efc:	4c0b      	ldr	r4, [pc, #44]	@ (8002f2c <__aeabi_dsub+0x708>)
 8002efe:	e53a      	b.n	8002976 <__aeabi_dsub+0x152>
 8002f00:	2d00      	cmp	r5, #0
 8002f02:	d100      	bne.n	8002f06 <__aeabi_dsub+0x6e2>
 8002f04:	e5f6      	b.n	8002af4 <__aeabi_dsub+0x2d0>
 8002f06:	464b      	mov	r3, r9
 8002f08:	1bda      	subs	r2, r3, r7
 8002f0a:	4692      	mov	sl, r2
 8002f0c:	2f00      	cmp	r7, #0
 8002f0e:	d100      	bne.n	8002f12 <__aeabi_dsub+0x6ee>
 8002f10:	e66f      	b.n	8002bf2 <__aeabi_dsub+0x3ce>
 8002f12:	2a38      	cmp	r2, #56	@ 0x38
 8002f14:	dc05      	bgt.n	8002f22 <__aeabi_dsub+0x6fe>
 8002f16:	2680      	movs	r6, #128	@ 0x80
 8002f18:	0436      	lsls	r6, r6, #16
 8002f1a:	4334      	orrs	r4, r6
 8002f1c:	4688      	mov	r8, r1
 8002f1e:	000e      	movs	r6, r1
 8002f20:	e6d1      	b.n	8002cc6 <__aeabi_dsub+0x4a2>
 8002f22:	4688      	mov	r8, r1
 8002f24:	000e      	movs	r6, r1
 8002f26:	2501      	movs	r5, #1
 8002f28:	e6de      	b.n	8002ce8 <__aeabi_dsub+0x4c4>
 8002f2a:	46c0      	nop			@ (mov r8, r8)
 8002f2c:	000007ff 	.word	0x000007ff
 8002f30:	ff7fffff 	.word	0xff7fffff
 8002f34:	000007fe 	.word	0x000007fe
 8002f38:	2d00      	cmp	r5, #0
 8002f3a:	d100      	bne.n	8002f3e <__aeabi_dsub+0x71a>
 8002f3c:	e668      	b.n	8002c10 <__aeabi_dsub+0x3ec>
 8002f3e:	464b      	mov	r3, r9
 8002f40:	1bd9      	subs	r1, r3, r7
 8002f42:	2f00      	cmp	r7, #0
 8002f44:	d101      	bne.n	8002f4a <__aeabi_dsub+0x726>
 8002f46:	468a      	mov	sl, r1
 8002f48:	e5a7      	b.n	8002a9a <__aeabi_dsub+0x276>
 8002f4a:	2701      	movs	r7, #1
 8002f4c:	2938      	cmp	r1, #56	@ 0x38
 8002f4e:	dd00      	ble.n	8002f52 <__aeabi_dsub+0x72e>
 8002f50:	e5c7      	b.n	8002ae2 <__aeabi_dsub+0x2be>
 8002f52:	2280      	movs	r2, #128	@ 0x80
 8002f54:	0412      	lsls	r2, r2, #16
 8002f56:	4314      	orrs	r4, r2
 8002f58:	e5af      	b.n	8002aba <__aeabi_dsub+0x296>
 8002f5a:	46c0      	nop			@ (mov r8, r8)

08002f5c <__aeabi_dcmpun>:
 8002f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5e:	46c6      	mov	lr, r8
 8002f60:	031e      	lsls	r6, r3, #12
 8002f62:	0b36      	lsrs	r6, r6, #12
 8002f64:	46b0      	mov	r8, r6
 8002f66:	4e0d      	ldr	r6, [pc, #52]	@ (8002f9c <__aeabi_dcmpun+0x40>)
 8002f68:	030c      	lsls	r4, r1, #12
 8002f6a:	004d      	lsls	r5, r1, #1
 8002f6c:	005f      	lsls	r7, r3, #1
 8002f6e:	b500      	push	{lr}
 8002f70:	0b24      	lsrs	r4, r4, #12
 8002f72:	0d6d      	lsrs	r5, r5, #21
 8002f74:	0d7f      	lsrs	r7, r7, #21
 8002f76:	42b5      	cmp	r5, r6
 8002f78:	d00b      	beq.n	8002f92 <__aeabi_dcmpun+0x36>
 8002f7a:	4908      	ldr	r1, [pc, #32]	@ (8002f9c <__aeabi_dcmpun+0x40>)
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	428f      	cmp	r7, r1
 8002f80:	d104      	bne.n	8002f8c <__aeabi_dcmpun+0x30>
 8002f82:	4646      	mov	r6, r8
 8002f84:	4316      	orrs	r6, r2
 8002f86:	0030      	movs	r0, r6
 8002f88:	1e43      	subs	r3, r0, #1
 8002f8a:	4198      	sbcs	r0, r3
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	46b8      	mov	r8, r7
 8002f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f92:	4304      	orrs	r4, r0
 8002f94:	2001      	movs	r0, #1
 8002f96:	2c00      	cmp	r4, #0
 8002f98:	d1f8      	bne.n	8002f8c <__aeabi_dcmpun+0x30>
 8002f9a:	e7ee      	b.n	8002f7a <__aeabi_dcmpun+0x1e>
 8002f9c:	000007ff 	.word	0x000007ff

08002fa0 <__aeabi_d2iz>:
 8002fa0:	000b      	movs	r3, r1
 8002fa2:	0002      	movs	r2, r0
 8002fa4:	b570      	push	{r4, r5, r6, lr}
 8002fa6:	4d16      	ldr	r5, [pc, #88]	@ (8003000 <__aeabi_d2iz+0x60>)
 8002fa8:	030c      	lsls	r4, r1, #12
 8002faa:	b082      	sub	sp, #8
 8002fac:	0049      	lsls	r1, r1, #1
 8002fae:	2000      	movs	r0, #0
 8002fb0:	9200      	str	r2, [sp, #0]
 8002fb2:	9301      	str	r3, [sp, #4]
 8002fb4:	0b24      	lsrs	r4, r4, #12
 8002fb6:	0d49      	lsrs	r1, r1, #21
 8002fb8:	0fde      	lsrs	r6, r3, #31
 8002fba:	42a9      	cmp	r1, r5
 8002fbc:	dd04      	ble.n	8002fc8 <__aeabi_d2iz+0x28>
 8002fbe:	4811      	ldr	r0, [pc, #68]	@ (8003004 <__aeabi_d2iz+0x64>)
 8002fc0:	4281      	cmp	r1, r0
 8002fc2:	dd03      	ble.n	8002fcc <__aeabi_d2iz+0x2c>
 8002fc4:	4b10      	ldr	r3, [pc, #64]	@ (8003008 <__aeabi_d2iz+0x68>)
 8002fc6:	18f0      	adds	r0, r6, r3
 8002fc8:	b002      	add	sp, #8
 8002fca:	bd70      	pop	{r4, r5, r6, pc}
 8002fcc:	2080      	movs	r0, #128	@ 0x80
 8002fce:	0340      	lsls	r0, r0, #13
 8002fd0:	4320      	orrs	r0, r4
 8002fd2:	4c0e      	ldr	r4, [pc, #56]	@ (800300c <__aeabi_d2iz+0x6c>)
 8002fd4:	1a64      	subs	r4, r4, r1
 8002fd6:	2c1f      	cmp	r4, #31
 8002fd8:	dd08      	ble.n	8002fec <__aeabi_d2iz+0x4c>
 8002fda:	4b0d      	ldr	r3, [pc, #52]	@ (8003010 <__aeabi_d2iz+0x70>)
 8002fdc:	1a5b      	subs	r3, r3, r1
 8002fde:	40d8      	lsrs	r0, r3
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	4258      	negs	r0, r3
 8002fe4:	2e00      	cmp	r6, #0
 8002fe6:	d1ef      	bne.n	8002fc8 <__aeabi_d2iz+0x28>
 8002fe8:	0018      	movs	r0, r3
 8002fea:	e7ed      	b.n	8002fc8 <__aeabi_d2iz+0x28>
 8002fec:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <__aeabi_d2iz+0x74>)
 8002fee:	9a00      	ldr	r2, [sp, #0]
 8002ff0:	469c      	mov	ip, r3
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	4461      	add	r1, ip
 8002ff6:	408b      	lsls	r3, r1
 8002ff8:	40e2      	lsrs	r2, r4
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	e7f1      	b.n	8002fe2 <__aeabi_d2iz+0x42>
 8002ffe:	46c0      	nop			@ (mov r8, r8)
 8003000:	000003fe 	.word	0x000003fe
 8003004:	0000041d 	.word	0x0000041d
 8003008:	7fffffff 	.word	0x7fffffff
 800300c:	00000433 	.word	0x00000433
 8003010:	00000413 	.word	0x00000413
 8003014:	fffffbed 	.word	0xfffffbed

08003018 <__aeabi_i2d>:
 8003018:	b570      	push	{r4, r5, r6, lr}
 800301a:	2800      	cmp	r0, #0
 800301c:	d016      	beq.n	800304c <__aeabi_i2d+0x34>
 800301e:	17c3      	asrs	r3, r0, #31
 8003020:	18c5      	adds	r5, r0, r3
 8003022:	405d      	eors	r5, r3
 8003024:	0fc4      	lsrs	r4, r0, #31
 8003026:	0028      	movs	r0, r5
 8003028:	f000 f914 	bl	8003254 <__clzsi2>
 800302c:	4b10      	ldr	r3, [pc, #64]	@ (8003070 <__aeabi_i2d+0x58>)
 800302e:	1a1b      	subs	r3, r3, r0
 8003030:	055b      	lsls	r3, r3, #21
 8003032:	0d5b      	lsrs	r3, r3, #21
 8003034:	280a      	cmp	r0, #10
 8003036:	dc14      	bgt.n	8003062 <__aeabi_i2d+0x4a>
 8003038:	0002      	movs	r2, r0
 800303a:	002e      	movs	r6, r5
 800303c:	3215      	adds	r2, #21
 800303e:	4096      	lsls	r6, r2
 8003040:	220b      	movs	r2, #11
 8003042:	1a12      	subs	r2, r2, r0
 8003044:	40d5      	lsrs	r5, r2
 8003046:	032d      	lsls	r5, r5, #12
 8003048:	0b2d      	lsrs	r5, r5, #12
 800304a:	e003      	b.n	8003054 <__aeabi_i2d+0x3c>
 800304c:	2400      	movs	r4, #0
 800304e:	2300      	movs	r3, #0
 8003050:	2500      	movs	r5, #0
 8003052:	2600      	movs	r6, #0
 8003054:	051b      	lsls	r3, r3, #20
 8003056:	432b      	orrs	r3, r5
 8003058:	07e4      	lsls	r4, r4, #31
 800305a:	4323      	orrs	r3, r4
 800305c:	0030      	movs	r0, r6
 800305e:	0019      	movs	r1, r3
 8003060:	bd70      	pop	{r4, r5, r6, pc}
 8003062:	380b      	subs	r0, #11
 8003064:	4085      	lsls	r5, r0
 8003066:	032d      	lsls	r5, r5, #12
 8003068:	2600      	movs	r6, #0
 800306a:	0b2d      	lsrs	r5, r5, #12
 800306c:	e7f2      	b.n	8003054 <__aeabi_i2d+0x3c>
 800306e:	46c0      	nop			@ (mov r8, r8)
 8003070:	0000041e 	.word	0x0000041e

08003074 <__aeabi_ui2d>:
 8003074:	b510      	push	{r4, lr}
 8003076:	1e04      	subs	r4, r0, #0
 8003078:	d010      	beq.n	800309c <__aeabi_ui2d+0x28>
 800307a:	f000 f8eb 	bl	8003254 <__clzsi2>
 800307e:	4b0e      	ldr	r3, [pc, #56]	@ (80030b8 <__aeabi_ui2d+0x44>)
 8003080:	1a1b      	subs	r3, r3, r0
 8003082:	055b      	lsls	r3, r3, #21
 8003084:	0d5b      	lsrs	r3, r3, #21
 8003086:	280a      	cmp	r0, #10
 8003088:	dc0f      	bgt.n	80030aa <__aeabi_ui2d+0x36>
 800308a:	220b      	movs	r2, #11
 800308c:	0021      	movs	r1, r4
 800308e:	1a12      	subs	r2, r2, r0
 8003090:	40d1      	lsrs	r1, r2
 8003092:	3015      	adds	r0, #21
 8003094:	030a      	lsls	r2, r1, #12
 8003096:	4084      	lsls	r4, r0
 8003098:	0b12      	lsrs	r2, r2, #12
 800309a:	e001      	b.n	80030a0 <__aeabi_ui2d+0x2c>
 800309c:	2300      	movs	r3, #0
 800309e:	2200      	movs	r2, #0
 80030a0:	051b      	lsls	r3, r3, #20
 80030a2:	4313      	orrs	r3, r2
 80030a4:	0020      	movs	r0, r4
 80030a6:	0019      	movs	r1, r3
 80030a8:	bd10      	pop	{r4, pc}
 80030aa:	0022      	movs	r2, r4
 80030ac:	380b      	subs	r0, #11
 80030ae:	4082      	lsls	r2, r0
 80030b0:	0312      	lsls	r2, r2, #12
 80030b2:	2400      	movs	r4, #0
 80030b4:	0b12      	lsrs	r2, r2, #12
 80030b6:	e7f3      	b.n	80030a0 <__aeabi_ui2d+0x2c>
 80030b8:	0000041e 	.word	0x0000041e

080030bc <__aeabi_f2d>:
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	0242      	lsls	r2, r0, #9
 80030c0:	0043      	lsls	r3, r0, #1
 80030c2:	0fc4      	lsrs	r4, r0, #31
 80030c4:	20fe      	movs	r0, #254	@ 0xfe
 80030c6:	0e1b      	lsrs	r3, r3, #24
 80030c8:	1c59      	adds	r1, r3, #1
 80030ca:	0a55      	lsrs	r5, r2, #9
 80030cc:	4208      	tst	r0, r1
 80030ce:	d00c      	beq.n	80030ea <__aeabi_f2d+0x2e>
 80030d0:	21e0      	movs	r1, #224	@ 0xe0
 80030d2:	0089      	lsls	r1, r1, #2
 80030d4:	468c      	mov	ip, r1
 80030d6:	076d      	lsls	r5, r5, #29
 80030d8:	0b12      	lsrs	r2, r2, #12
 80030da:	4463      	add	r3, ip
 80030dc:	051b      	lsls	r3, r3, #20
 80030de:	4313      	orrs	r3, r2
 80030e0:	07e4      	lsls	r4, r4, #31
 80030e2:	4323      	orrs	r3, r4
 80030e4:	0028      	movs	r0, r5
 80030e6:	0019      	movs	r1, r3
 80030e8:	bd70      	pop	{r4, r5, r6, pc}
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d114      	bne.n	8003118 <__aeabi_f2d+0x5c>
 80030ee:	2d00      	cmp	r5, #0
 80030f0:	d01b      	beq.n	800312a <__aeabi_f2d+0x6e>
 80030f2:	0028      	movs	r0, r5
 80030f4:	f000 f8ae 	bl	8003254 <__clzsi2>
 80030f8:	280a      	cmp	r0, #10
 80030fa:	dc1c      	bgt.n	8003136 <__aeabi_f2d+0x7a>
 80030fc:	230b      	movs	r3, #11
 80030fe:	002a      	movs	r2, r5
 8003100:	1a1b      	subs	r3, r3, r0
 8003102:	40da      	lsrs	r2, r3
 8003104:	0003      	movs	r3, r0
 8003106:	3315      	adds	r3, #21
 8003108:	409d      	lsls	r5, r3
 800310a:	4b0e      	ldr	r3, [pc, #56]	@ (8003144 <__aeabi_f2d+0x88>)
 800310c:	0312      	lsls	r2, r2, #12
 800310e:	1a1b      	subs	r3, r3, r0
 8003110:	055b      	lsls	r3, r3, #21
 8003112:	0b12      	lsrs	r2, r2, #12
 8003114:	0d5b      	lsrs	r3, r3, #21
 8003116:	e7e1      	b.n	80030dc <__aeabi_f2d+0x20>
 8003118:	2d00      	cmp	r5, #0
 800311a:	d009      	beq.n	8003130 <__aeabi_f2d+0x74>
 800311c:	0b13      	lsrs	r3, r2, #12
 800311e:	2280      	movs	r2, #128	@ 0x80
 8003120:	0312      	lsls	r2, r2, #12
 8003122:	431a      	orrs	r2, r3
 8003124:	076d      	lsls	r5, r5, #29
 8003126:	4b08      	ldr	r3, [pc, #32]	@ (8003148 <__aeabi_f2d+0x8c>)
 8003128:	e7d8      	b.n	80030dc <__aeabi_f2d+0x20>
 800312a:	2300      	movs	r3, #0
 800312c:	2200      	movs	r2, #0
 800312e:	e7d5      	b.n	80030dc <__aeabi_f2d+0x20>
 8003130:	2200      	movs	r2, #0
 8003132:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <__aeabi_f2d+0x8c>)
 8003134:	e7d2      	b.n	80030dc <__aeabi_f2d+0x20>
 8003136:	0003      	movs	r3, r0
 8003138:	002a      	movs	r2, r5
 800313a:	3b0b      	subs	r3, #11
 800313c:	409a      	lsls	r2, r3
 800313e:	2500      	movs	r5, #0
 8003140:	e7e3      	b.n	800310a <__aeabi_f2d+0x4e>
 8003142:	46c0      	nop			@ (mov r8, r8)
 8003144:	00000389 	.word	0x00000389
 8003148:	000007ff 	.word	0x000007ff

0800314c <__aeabi_d2f>:
 800314c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800314e:	004b      	lsls	r3, r1, #1
 8003150:	030f      	lsls	r7, r1, #12
 8003152:	0d5b      	lsrs	r3, r3, #21
 8003154:	4c3b      	ldr	r4, [pc, #236]	@ (8003244 <__aeabi_d2f+0xf8>)
 8003156:	0f45      	lsrs	r5, r0, #29
 8003158:	b083      	sub	sp, #12
 800315a:	0a7f      	lsrs	r7, r7, #9
 800315c:	1c5e      	adds	r6, r3, #1
 800315e:	432f      	orrs	r7, r5
 8003160:	9000      	str	r0, [sp, #0]
 8003162:	9101      	str	r1, [sp, #4]
 8003164:	0fca      	lsrs	r2, r1, #31
 8003166:	00c5      	lsls	r5, r0, #3
 8003168:	4226      	tst	r6, r4
 800316a:	d00b      	beq.n	8003184 <__aeabi_d2f+0x38>
 800316c:	4936      	ldr	r1, [pc, #216]	@ (8003248 <__aeabi_d2f+0xfc>)
 800316e:	185c      	adds	r4, r3, r1
 8003170:	2cfe      	cmp	r4, #254	@ 0xfe
 8003172:	dd13      	ble.n	800319c <__aeabi_d2f+0x50>
 8003174:	20ff      	movs	r0, #255	@ 0xff
 8003176:	2300      	movs	r3, #0
 8003178:	05c0      	lsls	r0, r0, #23
 800317a:	4318      	orrs	r0, r3
 800317c:	07d2      	lsls	r2, r2, #31
 800317e:	4310      	orrs	r0, r2
 8003180:	b003      	add	sp, #12
 8003182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003184:	2b00      	cmp	r3, #0
 8003186:	d102      	bne.n	800318e <__aeabi_d2f+0x42>
 8003188:	2000      	movs	r0, #0
 800318a:	2300      	movs	r3, #0
 800318c:	e7f4      	b.n	8003178 <__aeabi_d2f+0x2c>
 800318e:	433d      	orrs	r5, r7
 8003190:	d0f0      	beq.n	8003174 <__aeabi_d2f+0x28>
 8003192:	2380      	movs	r3, #128	@ 0x80
 8003194:	03db      	lsls	r3, r3, #15
 8003196:	20ff      	movs	r0, #255	@ 0xff
 8003198:	433b      	orrs	r3, r7
 800319a:	e7ed      	b.n	8003178 <__aeabi_d2f+0x2c>
 800319c:	2c00      	cmp	r4, #0
 800319e:	dd14      	ble.n	80031ca <__aeabi_d2f+0x7e>
 80031a0:	9b00      	ldr	r3, [sp, #0]
 80031a2:	00ff      	lsls	r7, r7, #3
 80031a4:	019b      	lsls	r3, r3, #6
 80031a6:	1e58      	subs	r0, r3, #1
 80031a8:	4183      	sbcs	r3, r0
 80031aa:	0f69      	lsrs	r1, r5, #29
 80031ac:	433b      	orrs	r3, r7
 80031ae:	430b      	orrs	r3, r1
 80031b0:	0759      	lsls	r1, r3, #29
 80031b2:	d041      	beq.n	8003238 <__aeabi_d2f+0xec>
 80031b4:	210f      	movs	r1, #15
 80031b6:	4019      	ands	r1, r3
 80031b8:	2904      	cmp	r1, #4
 80031ba:	d028      	beq.n	800320e <__aeabi_d2f+0xc2>
 80031bc:	3304      	adds	r3, #4
 80031be:	0159      	lsls	r1, r3, #5
 80031c0:	d525      	bpl.n	800320e <__aeabi_d2f+0xc2>
 80031c2:	3401      	adds	r4, #1
 80031c4:	2300      	movs	r3, #0
 80031c6:	b2e0      	uxtb	r0, r4
 80031c8:	e7d6      	b.n	8003178 <__aeabi_d2f+0x2c>
 80031ca:	0021      	movs	r1, r4
 80031cc:	3117      	adds	r1, #23
 80031ce:	dbdb      	blt.n	8003188 <__aeabi_d2f+0x3c>
 80031d0:	2180      	movs	r1, #128	@ 0x80
 80031d2:	201e      	movs	r0, #30
 80031d4:	0409      	lsls	r1, r1, #16
 80031d6:	4339      	orrs	r1, r7
 80031d8:	1b00      	subs	r0, r0, r4
 80031da:	281f      	cmp	r0, #31
 80031dc:	dd1b      	ble.n	8003216 <__aeabi_d2f+0xca>
 80031de:	2602      	movs	r6, #2
 80031e0:	4276      	negs	r6, r6
 80031e2:	1b34      	subs	r4, r6, r4
 80031e4:	000e      	movs	r6, r1
 80031e6:	40e6      	lsrs	r6, r4
 80031e8:	0034      	movs	r4, r6
 80031ea:	2820      	cmp	r0, #32
 80031ec:	d004      	beq.n	80031f8 <__aeabi_d2f+0xac>
 80031ee:	4817      	ldr	r0, [pc, #92]	@ (800324c <__aeabi_d2f+0x100>)
 80031f0:	4684      	mov	ip, r0
 80031f2:	4463      	add	r3, ip
 80031f4:	4099      	lsls	r1, r3
 80031f6:	430d      	orrs	r5, r1
 80031f8:	002b      	movs	r3, r5
 80031fa:	1e59      	subs	r1, r3, #1
 80031fc:	418b      	sbcs	r3, r1
 80031fe:	4323      	orrs	r3, r4
 8003200:	0759      	lsls	r1, r3, #29
 8003202:	d015      	beq.n	8003230 <__aeabi_d2f+0xe4>
 8003204:	210f      	movs	r1, #15
 8003206:	2400      	movs	r4, #0
 8003208:	4019      	ands	r1, r3
 800320a:	2904      	cmp	r1, #4
 800320c:	d117      	bne.n	800323e <__aeabi_d2f+0xf2>
 800320e:	019b      	lsls	r3, r3, #6
 8003210:	0a5b      	lsrs	r3, r3, #9
 8003212:	b2e0      	uxtb	r0, r4
 8003214:	e7b0      	b.n	8003178 <__aeabi_d2f+0x2c>
 8003216:	4c0e      	ldr	r4, [pc, #56]	@ (8003250 <__aeabi_d2f+0x104>)
 8003218:	191c      	adds	r4, r3, r4
 800321a:	002b      	movs	r3, r5
 800321c:	40a5      	lsls	r5, r4
 800321e:	40c3      	lsrs	r3, r0
 8003220:	40a1      	lsls	r1, r4
 8003222:	1e68      	subs	r0, r5, #1
 8003224:	4185      	sbcs	r5, r0
 8003226:	4329      	orrs	r1, r5
 8003228:	430b      	orrs	r3, r1
 800322a:	2400      	movs	r4, #0
 800322c:	0759      	lsls	r1, r3, #29
 800322e:	d1c1      	bne.n	80031b4 <__aeabi_d2f+0x68>
 8003230:	019b      	lsls	r3, r3, #6
 8003232:	2000      	movs	r0, #0
 8003234:	0a5b      	lsrs	r3, r3, #9
 8003236:	e79f      	b.n	8003178 <__aeabi_d2f+0x2c>
 8003238:	08db      	lsrs	r3, r3, #3
 800323a:	b2e0      	uxtb	r0, r4
 800323c:	e79c      	b.n	8003178 <__aeabi_d2f+0x2c>
 800323e:	3304      	adds	r3, #4
 8003240:	e7e5      	b.n	800320e <__aeabi_d2f+0xc2>
 8003242:	46c0      	nop			@ (mov r8, r8)
 8003244:	000007fe 	.word	0x000007fe
 8003248:	fffffc80 	.word	0xfffffc80
 800324c:	fffffca2 	.word	0xfffffca2
 8003250:	fffffc82 	.word	0xfffffc82

08003254 <__clzsi2>:
 8003254:	211c      	movs	r1, #28
 8003256:	2301      	movs	r3, #1
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	4298      	cmp	r0, r3
 800325c:	d301      	bcc.n	8003262 <__clzsi2+0xe>
 800325e:	0c00      	lsrs	r0, r0, #16
 8003260:	3910      	subs	r1, #16
 8003262:	0a1b      	lsrs	r3, r3, #8
 8003264:	4298      	cmp	r0, r3
 8003266:	d301      	bcc.n	800326c <__clzsi2+0x18>
 8003268:	0a00      	lsrs	r0, r0, #8
 800326a:	3908      	subs	r1, #8
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	4298      	cmp	r0, r3
 8003270:	d301      	bcc.n	8003276 <__clzsi2+0x22>
 8003272:	0900      	lsrs	r0, r0, #4
 8003274:	3904      	subs	r1, #4
 8003276:	a202      	add	r2, pc, #8	@ (adr r2, 8003280 <__clzsi2+0x2c>)
 8003278:	5c10      	ldrb	r0, [r2, r0]
 800327a:	1840      	adds	r0, r0, r1
 800327c:	4770      	bx	lr
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	02020304 	.word	0x02020304
 8003284:	01010101 	.word	0x01010101
	...

08003290 <ds3231_settime>:
uint8_t _dec_to_bcd(int dec);
void _ds3231_setreg(uint8_t addr, uint8_t val);
uint8_t _ds3231_getreg(uint8_t addr);

// function to set time
void ds3231_settime(DateTime* t) {
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b089      	sub	sp, #36	@ 0x24
 8003294:	af04      	add	r7, sp, #16
 8003296:	6078      	str	r0, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = _dec_to_bcd(t->sec);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	799b      	ldrb	r3, [r3, #6]
 800329c:	0018      	movs	r0, r3
 800329e:	f000 f84f 	bl	8003340 <_dec_to_bcd>
 80032a2:	0003      	movs	r3, r0
 80032a4:	001a      	movs	r2, r3
 80032a6:	2408      	movs	r4, #8
 80032a8:	193b      	adds	r3, r7, r4
 80032aa:	701a      	strb	r2, [r3, #0]
	set_time[1] = _dec_to_bcd(t->min);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	795b      	ldrb	r3, [r3, #5]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f000 f845 	bl	8003340 <_dec_to_bcd>
 80032b6:	0003      	movs	r3, r0
 80032b8:	001a      	movs	r2, r3
 80032ba:	193b      	adds	r3, r7, r4
 80032bc:	705a      	strb	r2, [r3, #1]
	set_time[2] = _dec_to_bcd(t->hr);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	791b      	ldrb	r3, [r3, #4]
 80032c2:	0018      	movs	r0, r3
 80032c4:	f000 f83c 	bl	8003340 <_dec_to_bcd>
 80032c8:	0003      	movs	r3, r0
 80032ca:	001a      	movs	r2, r3
 80032cc:	193b      	adds	r3, r7, r4
 80032ce:	709a      	strb	r2, [r3, #2]
	set_time[3] = _dec_to_bcd(t->dow);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	789b      	ldrb	r3, [r3, #2]
 80032d4:	0018      	movs	r0, r3
 80032d6:	f000 f833 	bl	8003340 <_dec_to_bcd>
 80032da:	0003      	movs	r3, r0
 80032dc:	001a      	movs	r2, r3
 80032de:	193b      	adds	r3, r7, r4
 80032e0:	70da      	strb	r2, [r3, #3]
	set_time[4] = _dec_to_bcd(t->day);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	0018      	movs	r0, r3
 80032e8:	f000 f82a 	bl	8003340 <_dec_to_bcd>
 80032ec:	0003      	movs	r3, r0
 80032ee:	001a      	movs	r2, r3
 80032f0:	193b      	adds	r3, r7, r4
 80032f2:	711a      	strb	r2, [r3, #4]
	set_time[5] = _dec_to_bcd(t->month);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	785b      	ldrb	r3, [r3, #1]
 80032f8:	0018      	movs	r0, r3
 80032fa:	f000 f821 	bl	8003340 <_dec_to_bcd>
 80032fe:	0003      	movs	r3, r0
 8003300:	001a      	movs	r2, r3
 8003302:	193b      	adds	r3, r7, r4
 8003304:	715a      	strb	r2, [r3, #5]
	set_time[6] = _dec_to_bcd(t->year);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	78db      	ldrb	r3, [r3, #3]
 800330a:	0018      	movs	r0, r3
 800330c:	f000 f818 	bl	8003340 <_dec_to_bcd>
 8003310:	0003      	movs	r3, r0
 8003312:	001a      	movs	r2, r3
 8003314:	193b      	adds	r3, r7, r4
 8003316:	719a      	strb	r2, [r3, #6]

	HAL_I2C_Mem_Write(_ds3231_hi2c, ((DS3231_ADDRESS << 1) | 1), 0x00, 1, set_time, 7, 1000);
 8003318:	4b08      	ldr	r3, [pc, #32]	@ (800333c <ds3231_settime+0xac>)
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	23fa      	movs	r3, #250	@ 0xfa
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	9302      	str	r3, [sp, #8]
 8003322:	2307      	movs	r3, #7
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	193b      	adds	r3, r7, r4
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	2301      	movs	r3, #1
 800332c:	2200      	movs	r2, #0
 800332e:	21d1      	movs	r1, #209	@ 0xd1
 8003330:	f004 f8c4 	bl	80074bc <HAL_I2C_Mem_Write>
}
 8003334:	46c0      	nop			@ (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	b005      	add	sp, #20
 800333a:	bd90      	pop	{r4, r7, pc}
 800333c:	2000000c 	.word	0x2000000c

08003340 <_dec_to_bcd>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t _dec_to_bcd(int val) {
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	return (uint8_t)((val/10*16) + (val%10) );
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	210a      	movs	r1, #10
 800334c:	0018      	movs	r0, r3
 800334e:	f7fc ff7d 	bl	800024c <__divsi3>
 8003352:	0003      	movs	r3, r0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	b2dc      	uxtb	r4, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	210a      	movs	r1, #10
 800335e:	0018      	movs	r0, r3
 8003360:	f7fd f85a 	bl	8000418 <__aeabi_idivmod>
 8003364:	000b      	movs	r3, r1
 8003366:	b2db      	uxtb	r3, r3
 8003368:	18e3      	adds	r3, r4, r3
 800336a:	b2db      	uxtb	r3, r3
}
 800336c:	0018      	movs	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	b003      	add	sp, #12
 8003372:	bd90      	pop	{r4, r7, pc}

08003374 <HAL_ADC_ConvCpltCallback>:
	CUR,
	TEMP,
} adc_param;

uint8_t period = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003374:	b5b0      	push	{r4, r5, r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	static uint32_t adc_avg[ADC_CHANNEL_COUNT] = {};
	static uint16_t sample_count = 0;
	if(sample_count >= ADC_SAMPLE_COUNT) {
 800337c:	4b40      	ldr	r3, [pc, #256]	@ (8003480 <HAL_ADC_ConvCpltCallback+0x10c>)
 800337e:	881a      	ldrh	r2, [r3, #0]
 8003380:	23fa      	movs	r3, #250	@ 0xfa
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	429a      	cmp	r2, r3
 8003386:	d34f      	bcc.n	8003428 <HAL_ADC_ConvCpltCallback+0xb4>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8003388:	230f      	movs	r3, #15
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e041      	b.n	8003416 <HAL_ADC_ConvCpltCallback+0xa2>
			adc_avg[i] = adc_avg[i] / ADC_SAMPLE_COUNT;
 8003392:	250f      	movs	r5, #15
 8003394:	197b      	adds	r3, r7, r5
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	4b3a      	ldr	r3, [pc, #232]	@ (8003484 <HAL_ADC_ConvCpltCallback+0x110>)
 800339a:	0092      	lsls	r2, r2, #2
 800339c:	58d2      	ldr	r2, [r2, r3]
 800339e:	197b      	adds	r3, r7, r5
 80033a0:	781c      	ldrb	r4, [r3, #0]
 80033a2:	23fa      	movs	r3, #250	@ 0xfa
 80033a4:	0059      	lsls	r1, r3, #1
 80033a6:	0010      	movs	r0, r2
 80033a8:	f7fc fec6 	bl	8000138 <__udivsi3>
 80033ac:	0003      	movs	r3, r0
 80033ae:	0019      	movs	r1, r3
 80033b0:	4b34      	ldr	r3, [pc, #208]	@ (8003484 <HAL_ADC_ConvCpltCallback+0x110>)
 80033b2:	00a2      	lsls	r2, r4, #2
 80033b4:	50d1      	str	r1, [r2, r3]
			if(adc_avg[i] < 100) adc_avg[i] = 0;
 80033b6:	197b      	adds	r3, r7, r5
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	4b32      	ldr	r3, [pc, #200]	@ (8003484 <HAL_ADC_ConvCpltCallback+0x110>)
 80033bc:	0092      	lsls	r2, r2, #2
 80033be:	58d3      	ldr	r3, [r2, r3]
 80033c0:	2b63      	cmp	r3, #99	@ 0x63
 80033c2:	d805      	bhi.n	80033d0 <HAL_ADC_ConvCpltCallback+0x5c>
 80033c4:	197b      	adds	r3, r7, r5
 80033c6:	781a      	ldrb	r2, [r3, #0]
 80033c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003484 <HAL_ADC_ConvCpltCallback+0x110>)
 80033ca:	0092      	lsls	r2, r2, #2
 80033cc:	2100      	movs	r1, #0
 80033ce:	50d1      	str	r1, [r2, r3]
			adc_arr[i] = (float)adc_avg[i] * adc_conv_fact[i];
 80033d0:	250f      	movs	r5, #15
 80033d2:	197b      	adds	r3, r7, r5
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003484 <HAL_ADC_ConvCpltCallback+0x110>)
 80033d8:	0092      	lsls	r2, r2, #2
 80033da:	58d3      	ldr	r3, [r2, r3]
 80033dc:	0018      	movs	r0, r3
 80033de:	f7fd ff6f 	bl	80012c0 <__aeabi_ui2f>
 80033e2:	197b      	adds	r3, r7, r5
 80033e4:	781a      	ldrb	r2, [r3, #0]
 80033e6:	4b28      	ldr	r3, [pc, #160]	@ (8003488 <HAL_ADC_ConvCpltCallback+0x114>)
 80033e8:	0092      	lsls	r2, r2, #2
 80033ea:	58d2      	ldr	r2, [r2, r3]
 80033ec:	197b      	adds	r3, r7, r5
 80033ee:	781c      	ldrb	r4, [r3, #0]
 80033f0:	1c11      	adds	r1, r2, #0
 80033f2:	f7fd fc17 	bl	8000c24 <__aeabi_fmul>
 80033f6:	1c03      	adds	r3, r0, #0
 80033f8:	1c19      	adds	r1, r3, #0
 80033fa:	4b24      	ldr	r3, [pc, #144]	@ (800348c <HAL_ADC_ConvCpltCallback+0x118>)
 80033fc:	00a2      	lsls	r2, r4, #2
 80033fe:	50d1      	str	r1, [r2, r3]
			adc_avg[i] = 0;
 8003400:	197b      	adds	r3, r7, r5
 8003402:	781a      	ldrb	r2, [r3, #0]
 8003404:	4b1f      	ldr	r3, [pc, #124]	@ (8003484 <HAL_ADC_ConvCpltCallback+0x110>)
 8003406:	0092      	lsls	r2, r2, #2
 8003408:	2100      	movs	r1, #0
 800340a:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 800340c:	197b      	adds	r3, r7, r5
 800340e:	781a      	ldrb	r2, [r3, #0]
 8003410:	197b      	adds	r3, r7, r5
 8003412:	3201      	adds	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	230f      	movs	r3, #15
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d9b8      	bls.n	8003392 <HAL_ADC_ConvCpltCallback+0x1e>
		}
		sample_count = 0;
 8003420:	4b17      	ldr	r3, [pc, #92]	@ (8003480 <HAL_ADC_ConvCpltCallback+0x10c>)
 8003422:	2200      	movs	r2, #0
 8003424:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
			adc_avg[i] += adc_raw[i];
		}
		sample_count++;
	}
}
 8003426:	e026      	b.n	8003476 <HAL_ADC_ConvCpltCallback+0x102>
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8003428:	230e      	movs	r3, #14
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
 8003430:	e016      	b.n	8003460 <HAL_ADC_ConvCpltCallback+0xec>
			adc_avg[i] += adc_raw[i];
 8003432:	200e      	movs	r0, #14
 8003434:	183b      	adds	r3, r7, r0
 8003436:	781a      	ldrb	r2, [r3, #0]
 8003438:	4b12      	ldr	r3, [pc, #72]	@ (8003484 <HAL_ADC_ConvCpltCallback+0x110>)
 800343a:	0092      	lsls	r2, r2, #2
 800343c:	58d3      	ldr	r3, [r2, r3]
 800343e:	183a      	adds	r2, r7, r0
 8003440:	7811      	ldrb	r1, [r2, #0]
 8003442:	4a13      	ldr	r2, [pc, #76]	@ (8003490 <HAL_ADC_ConvCpltCallback+0x11c>)
 8003444:	0049      	lsls	r1, r1, #1
 8003446:	5a8a      	ldrh	r2, [r1, r2]
 8003448:	0011      	movs	r1, r2
 800344a:	183a      	adds	r2, r7, r0
 800344c:	7812      	ldrb	r2, [r2, #0]
 800344e:	1859      	adds	r1, r3, r1
 8003450:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <HAL_ADC_ConvCpltCallback+0x110>)
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	50d1      	str	r1, [r2, r3]
		for(uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 8003456:	183b      	adds	r3, r7, r0
 8003458:	781a      	ldrb	r2, [r3, #0]
 800345a:	183b      	adds	r3, r7, r0
 800345c:	3201      	adds	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	230e      	movs	r3, #14
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d9e3      	bls.n	8003432 <HAL_ADC_ConvCpltCallback+0xbe>
		sample_count++;
 800346a:	4b05      	ldr	r3, [pc, #20]	@ (8003480 <HAL_ADC_ConvCpltCallback+0x10c>)
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	3301      	adds	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	4b03      	ldr	r3, [pc, #12]	@ (8003480 <HAL_ADC_ConvCpltCallback+0x10c>)
 8003474:	801a      	strh	r2, [r3, #0]
}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	46bd      	mov	sp, r7
 800347a:	b004      	add	sp, #16
 800347c:	bdb0      	pop	{r4, r5, r7, pc}
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	200004f8 	.word	0x200004f8
 8003484:	200004fc 	.word	0x200004fc
 8003488:	20000000 	.word	0x20000000
 800348c:	200004ac 	.word	0x200004ac
 8003490:	200004b8 	.word	0x200004b8

08003494 <HAL_GPIO_EXTI_Falling_Callback>:

uint32_t tim = 0;
uint16_t triac_on_time;
uint8_t triac_dim_enable = 0;
uint8_t zcd_enable = 0;
void HAL_GPIO_EXTI_Falling_Callback(uint16_t pin) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	0002      	movs	r2, r0
 800349c:	1dbb      	adds	r3, r7, #6
 800349e:	801a      	strh	r2, [r3, #0]
	// TODO pin check
	if(pin == GPIO_PIN_4) {
 80034a0:	1dbb      	adds	r3, r7, #6
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d11d      	bne.n	80034e4 <HAL_GPIO_EXTI_Falling_Callback+0x50>
		/* zero crossing detection */
		if(zcd_enable) {
 80034a8:	4b10      	ldr	r3, [pc, #64]	@ (80034ec <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d013      	beq.n	80034d8 <HAL_GPIO_EXTI_Falling_Callback+0x44>
			triac_timer = 0;
 80034b0:	4b0f      	ldr	r3, [pc, #60]	@ (80034f0 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
			triac_dim_enable = 1;
 80034b6:	4b0f      	ldr	r3, [pc, #60]	@ (80034f4 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	701a      	strb	r2, [r3, #0]
			TRIAC1_SET(0); /* turn on bulb */
 80034bc:	4b0e      	ldr	r3, [pc, #56]	@ (80034f8 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 80034be:	2200      	movs	r2, #0
 80034c0:	2101      	movs	r1, #1
 80034c2:	0018      	movs	r0, r3
 80034c4:	f003 fdd9 	bl	800707a <HAL_GPIO_WritePin>
			TRIAC2_SET(0);
 80034c8:	2380      	movs	r3, #128	@ 0x80
 80034ca:	019b      	lsls	r3, r3, #6
 80034cc:	480b      	ldr	r0, [pc, #44]	@ (80034fc <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	0019      	movs	r1, r3
 80034d2:	f003 fdd2 	bl	800707a <HAL_GPIO_WritePin>
		else {
			triac_timer = 0;
			triac_dim_enable = 0;
		}
	}
}
 80034d6:	e005      	b.n	80034e4 <HAL_GPIO_EXTI_Falling_Callback+0x50>
			triac_timer = 0;
 80034d8:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
			triac_dim_enable = 0;
 80034de:	4b05      	ldr	r3, [pc, #20]	@ (80034f4 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
}
 80034e4:	46c0      	nop			@ (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b002      	add	sp, #8
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	200004cb 	.word	0x200004cb
 80034f0:	200004c0 	.word	0x200004c0
 80034f4:	200004ca 	.word	0x200004ca
 80034f8:	50001400 	.word	0x50001400
 80034fc:	50000800 	.word	0x50000800

08003500 <btn1_read>:
uint16_t btn1_timer, btn2_timer, btn3_timer;
uint8_t btn1_stat;
uint8_t btn2_stat;
uint8_t btn3_stat;

uint8_t btn1_read(uint8_t is_long) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	0002      	movs	r2, r0
 8003508:	1dfb      	adds	r3, r7, #7
 800350a:	701a      	strb	r2, [r3, #0]
	if(BTN3_READ() == 0) {
 800350c:	4b13      	ldr	r3, [pc, #76]	@ (800355c <btn1_read+0x5c>)
 800350e:	2180      	movs	r1, #128	@ 0x80
 8003510:	0018      	movs	r0, r3
 8003512:	f003 fd95 	bl	8007040 <HAL_GPIO_ReadPin>
 8003516:	1e03      	subs	r3, r0, #0
 8003518:	d117      	bne.n	800354a <btn1_read+0x4a>
		btn1_flag = 1;
 800351a:	4b11      	ldr	r3, [pc, #68]	@ (8003560 <btn1_read+0x60>)
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]
		if(btn1_flag && btn1_timer > (is_long ? 10000: 1100)) {
 8003520:	4b0f      	ldr	r3, [pc, #60]	@ (8003560 <btn1_read+0x60>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d013      	beq.n	8003550 <btn1_read+0x50>
 8003528:	4b0e      	ldr	r3, [pc, #56]	@ (8003564 <btn1_read+0x64>)
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	001a      	movs	r2, r3
 800352e:	1dfb      	adds	r3, r7, #7
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <btn1_read+0x3a>
 8003536:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <btn1_read+0x68>)
 8003538:	e000      	b.n	800353c <btn1_read+0x3c>
 800353a:	4b0c      	ldr	r3, [pc, #48]	@ (800356c <btn1_read+0x6c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	da07      	bge.n	8003550 <btn1_read+0x50>
			btn1_timer = 0;
 8003540:	4b08      	ldr	r3, [pc, #32]	@ (8003564 <btn1_read+0x64>)
 8003542:	2200      	movs	r2, #0
 8003544:	801a      	strh	r2, [r3, #0]
			return 1;
 8003546:	2301      	movs	r3, #1
 8003548:	e003      	b.n	8003552 <btn1_read+0x52>
		}
	}
	else btn1_flag = 0;
 800354a:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <btn1_read+0x60>)
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]
	return 0;
 8003550:	2300      	movs	r3, #0
}
 8003552:	0018      	movs	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	b002      	add	sp, #8
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	50000400 	.word	0x50000400
 8003560:	200004cc 	.word	0x200004cc
 8003564:	200004d0 	.word	0x200004d0
 8003568:	00002710 	.word	0x00002710
 800356c:	0000044c 	.word	0x0000044c

08003570 <btn2_read>:
uint8_t btn2_read() {
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
	if(BTN2_READ() == 0) {
 8003574:	2380      	movs	r3, #128	@ 0x80
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4a0f      	ldr	r2, [pc, #60]	@ (80035b8 <btn2_read+0x48>)
 800357a:	0019      	movs	r1, r3
 800357c:	0010      	movs	r0, r2
 800357e:	f003 fd5f 	bl	8007040 <HAL_GPIO_ReadPin>
 8003582:	1e03      	subs	r3, r0, #0
 8003584:	d110      	bne.n	80035a8 <btn2_read+0x38>
		btn2_flag = 1;
 8003586:	4b0d      	ldr	r3, [pc, #52]	@ (80035bc <btn2_read+0x4c>)
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
		if(btn2_flag && btn2_timer > 1100) {
 800358c:	4b0b      	ldr	r3, [pc, #44]	@ (80035bc <btn2_read+0x4c>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00c      	beq.n	80035ae <btn2_read+0x3e>
 8003594:	4b0a      	ldr	r3, [pc, #40]	@ (80035c0 <btn2_read+0x50>)
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	4a0a      	ldr	r2, [pc, #40]	@ (80035c4 <btn2_read+0x54>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d907      	bls.n	80035ae <btn2_read+0x3e>
			btn2_timer = 0;
 800359e:	4b08      	ldr	r3, [pc, #32]	@ (80035c0 <btn2_read+0x50>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	801a      	strh	r2, [r3, #0]
			return 1;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e003      	b.n	80035b0 <btn2_read+0x40>
		}
	}
	else btn2_flag = 0;
 80035a8:	4b04      	ldr	r3, [pc, #16]	@ (80035bc <btn2_read+0x4c>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
	return 0;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	50000400 	.word	0x50000400
 80035bc:	200004cd 	.word	0x200004cd
 80035c0:	200004d2 	.word	0x200004d2
 80035c4:	0000044c 	.word	0x0000044c

080035c8 <btn3_read>:
uint8_t btn3_read(uint8_t is_long) {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	0002      	movs	r2, r0
 80035d0:	1dfb      	adds	r3, r7, #7
 80035d2:	701a      	strb	r2, [r3, #0]
	if(BTN1_READ() == 0) {
 80035d4:	2380      	movs	r3, #128	@ 0x80
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4a13      	ldr	r2, [pc, #76]	@ (8003628 <btn3_read+0x60>)
 80035da:	0019      	movs	r1, r3
 80035dc:	0010      	movs	r0, r2
 80035de:	f003 fd2f 	bl	8007040 <HAL_GPIO_ReadPin>
 80035e2:	1e03      	subs	r3, r0, #0
 80035e4:	d117      	bne.n	8003616 <btn3_read+0x4e>
		btn3_flag = 1;
 80035e6:	4b11      	ldr	r3, [pc, #68]	@ (800362c <btn3_read+0x64>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
		if(btn3_flag && btn3_timer > (is_long ? 10000: 1100)) {
 80035ec:	4b0f      	ldr	r3, [pc, #60]	@ (800362c <btn3_read+0x64>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d013      	beq.n	800361c <btn3_read+0x54>
 80035f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003630 <btn3_read+0x68>)
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	001a      	movs	r2, r3
 80035fa:	1dfb      	adds	r3, r7, #7
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <btn3_read+0x3e>
 8003602:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <btn3_read+0x6c>)
 8003604:	e000      	b.n	8003608 <btn3_read+0x40>
 8003606:	4b0c      	ldr	r3, [pc, #48]	@ (8003638 <btn3_read+0x70>)
 8003608:	4293      	cmp	r3, r2
 800360a:	da07      	bge.n	800361c <btn3_read+0x54>
			btn3_timer = 0;
 800360c:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <btn3_read+0x68>)
 800360e:	2200      	movs	r2, #0
 8003610:	801a      	strh	r2, [r3, #0]
			return 1;
 8003612:	2301      	movs	r3, #1
 8003614:	e003      	b.n	800361e <btn3_read+0x56>
		}
	}
	else btn3_flag = 0;
 8003616:	4b05      	ldr	r3, [pc, #20]	@ (800362c <btn3_read+0x64>)
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
	return 0;
 800361c:	2300      	movs	r3, #0
}
 800361e:	0018      	movs	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	b002      	add	sp, #8
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	50000400 	.word	0x50000400
 800362c:	200004ce 	.word	0x200004ce
 8003630:	200004d4 	.word	0x200004d4
 8003634:	00002710 	.word	0x00002710
 8003638:	0000044c 	.word	0x0000044c

0800363c <HAL_TIM_PeriodElapsedCallback>:
uint32_t ms;
uint8_t sec;
uint32_t min;
uint16_t hr;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16) {
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a59      	ldr	r2, [pc, #356]	@ (80037b0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d000      	beq.n	8003650 <HAL_TIM_PeriodElapsedCallback+0x14>
 800364e:	e0ab      	b.n	80037a8 <HAL_TIM_PeriodElapsedCallback+0x16c>
		if(ms > 10000) {
 8003650:	4b58      	ldr	r3, [pc, #352]	@ (80037b4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a58      	ldr	r2, [pc, #352]	@ (80037b8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d93c      	bls.n	80036d4 <HAL_TIM_PeriodElapsedCallback+0x98>
			if(sec > 60) {
 800365a:	4b58      	ldr	r3, [pc, #352]	@ (80037bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b3c      	cmp	r3, #60	@ 0x3c
 8003660:	d916      	bls.n	8003690 <HAL_TIM_PeriodElapsedCallback+0x54>
				if(min > 60) {
 8003662:	4b57      	ldr	r3, [pc, #348]	@ (80037c0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b3c      	cmp	r3, #60	@ 0x3c
 8003668:	d909      	bls.n	800367e <HAL_TIM_PeriodElapsedCallback+0x42>
					min = 0;
 800366a:	4b55      	ldr	r3, [pc, #340]	@ (80037c0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
					hr++;
 8003670:	4b54      	ldr	r3, [pc, #336]	@ (80037c4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	3301      	adds	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	4b52      	ldr	r3, [pc, #328]	@ (80037c4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800367a:	801a      	strh	r2, [r3, #0]
 800367c:	e004      	b.n	8003688 <HAL_TIM_PeriodElapsedCallback+0x4c>
				}
				else min++;
 800367e:	4b50      	ldr	r3, [pc, #320]	@ (80037c0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	4b4e      	ldr	r3, [pc, #312]	@ (80037c0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003686:	601a      	str	r2, [r3, #0]
				sec = 0;
 8003688:	4b4c      	ldr	r3, [pc, #304]	@ (80037bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e005      	b.n	800369c <HAL_TIM_PeriodElapsedCallback+0x60>
			} else sec++;
 8003690:	4b4a      	ldr	r3, [pc, #296]	@ (80037bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	b2da      	uxtb	r2, r3
 8003698:	4b48      	ldr	r3, [pc, #288]	@ (80037bc <HAL_TIM_PeriodElapsedCallback+0x180>)
 800369a:	701a      	strb	r2, [r3, #0]
			ms = 0;
 800369c:	4b45      	ldr	r3, [pc, #276]	@ (80037b4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
			triac_cutoff_timer = triac_cutoff_flag ? triac_cutoff_timer + 1: 0;
 80036a2:	4b49      	ldr	r3, [pc, #292]	@ (80037c8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d004      	beq.n	80036b4 <HAL_TIM_PeriodElapsedCallback+0x78>
 80036aa:	4b48      	ldr	r3, [pc, #288]	@ (80037cc <HAL_TIM_PeriodElapsedCallback+0x190>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	3301      	adds	r3, #1
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	e000      	b.n	80036b6 <HAL_TIM_PeriodElapsedCallback+0x7a>
 80036b4:	2200      	movs	r2, #0
 80036b6:	4b45      	ldr	r3, [pc, #276]	@ (80037cc <HAL_TIM_PeriodElapsedCallback+0x190>)
 80036b8:	701a      	strb	r2, [r3, #0]
			triac_turnon_timer = triac_turnon_flag ? triac_turnon_timer + 1: 0;
 80036ba:	4b45      	ldr	r3, [pc, #276]	@ (80037d0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d004      	beq.n	80036cc <HAL_TIM_PeriodElapsedCallback+0x90>
 80036c2:	4b44      	ldr	r3, [pc, #272]	@ (80037d4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	3301      	adds	r3, #1
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	e000      	b.n	80036ce <HAL_TIM_PeriodElapsedCallback+0x92>
 80036cc:	2200      	movs	r2, #0
 80036ce:	4b41      	ldr	r3, [pc, #260]	@ (80037d4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	e004      	b.n	80036de <HAL_TIM_PeriodElapsedCallback+0xa2>
		} else ms++;
 80036d4:	4b37      	ldr	r3, [pc, #220]	@ (80037b4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	4b36      	ldr	r3, [pc, #216]	@ (80037b4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80036dc:	601a      	str	r2, [r3, #0]
		if(ms % 5000 == 0)
 80036de:	4b35      	ldr	r3, [pc, #212]	@ (80037b4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	493d      	ldr	r1, [pc, #244]	@ (80037d8 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80036e4:	0018      	movs	r0, r3
 80036e6:	f7fc fdad 	bl	8000244 <__aeabi_uidivmod>
 80036ea:	1e0b      	subs	r3, r1, #0
 80036ec:	d102      	bne.n	80036f4 <HAL_TIM_PeriodElapsedCallback+0xb8>
			sensor_refresh_flag = 1;
 80036ee:	4b3b      	ldr	r3, [pc, #236]	@ (80037dc <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
		btn1_timer = btn1_flag ? btn1_timer + 1: 0;
 80036f4:	4b3a      	ldr	r3, [pc, #232]	@ (80037e0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d004      	beq.n	8003706 <HAL_TIM_PeriodElapsedCallback+0xca>
 80036fc:	4b39      	ldr	r3, [pc, #228]	@ (80037e4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	3301      	adds	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	e000      	b.n	8003708 <HAL_TIM_PeriodElapsedCallback+0xcc>
 8003706:	2200      	movs	r2, #0
 8003708:	4b36      	ldr	r3, [pc, #216]	@ (80037e4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800370a:	801a      	strh	r2, [r3, #0]
		btn2_timer = btn2_flag ? btn2_timer + 1: 0;
 800370c:	4b36      	ldr	r3, [pc, #216]	@ (80037e8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <HAL_TIM_PeriodElapsedCallback+0xe2>
 8003714:	4b35      	ldr	r3, [pc, #212]	@ (80037ec <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	3301      	adds	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	e000      	b.n	8003720 <HAL_TIM_PeriodElapsedCallback+0xe4>
 800371e:	2200      	movs	r2, #0
 8003720:	4b32      	ldr	r3, [pc, #200]	@ (80037ec <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8003722:	801a      	strh	r2, [r3, #0]
		btn3_timer = btn3_flag ? btn3_timer + 1: 0;
 8003724:	4b32      	ldr	r3, [pc, #200]	@ (80037f0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d004      	beq.n	8003736 <HAL_TIM_PeriodElapsedCallback+0xfa>
 800372c:	4b31      	ldr	r3, [pc, #196]	@ (80037f4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	3301      	adds	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	e000      	b.n	8003738 <HAL_TIM_PeriodElapsedCallback+0xfc>
 8003736:	2200      	movs	r2, #0
 8003738:	4b2e      	ldr	r3, [pc, #184]	@ (80037f4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800373a:	801a      	strh	r2, [r3, #0]
		if(triac_timer >= triac_on_time * 10) {
 800373c:	4b2e      	ldr	r3, [pc, #184]	@ (80037f8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	001a      	movs	r2, r3
 8003742:	0013      	movs	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	189b      	adds	r3, r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	0018      	movs	r0, r3
 800374c:	f7fd fd6c 	bl	8001228 <__aeabi_i2f>
 8003750:	1c02      	adds	r2, r0, #0
 8003752:	4b2a      	ldr	r3, [pc, #168]	@ (80037fc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	1c19      	adds	r1, r3, #0
 8003758:	1c10      	adds	r0, r2, #0
 800375a:	f7fc febd 	bl	80004d8 <__aeabi_fcmple>
 800375e:	1e03      	subs	r3, r0, #0
 8003760:	d013      	beq.n	800378a <HAL_TIM_PeriodElapsedCallback+0x14e>
			triac_timer = 0;
 8003762:	4b26      	ldr	r3, [pc, #152]	@ (80037fc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
			triac_dim_enable = 0;
 8003768:	4b25      	ldr	r3, [pc, #148]	@ (8003800 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
			TRIAC1_SET(1);
 800376e:	4b25      	ldr	r3, [pc, #148]	@ (8003804 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003770:	2201      	movs	r2, #1
 8003772:	2101      	movs	r1, #1
 8003774:	0018      	movs	r0, r3
 8003776:	f003 fc80 	bl	800707a <HAL_GPIO_WritePin>
			TRIAC2_SET(1);
 800377a:	2380      	movs	r3, #128	@ 0x80
 800377c:	019b      	lsls	r3, r3, #6
 800377e:	4822      	ldr	r0, [pc, #136]	@ (8003808 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003780:	2201      	movs	r2, #1
 8003782:	0019      	movs	r1, r3
 8003784:	f003 fc79 	bl	800707a <HAL_GPIO_WritePin>
//		else {
//			if(triac_dim_enable) triac_timer = triac_timer + 1; /* add 10us */
//		}
//		triac_timer_1 = triac_timer_1 + 1;
//	}
}
 8003788:	e00e      	b.n	80037a8 <HAL_TIM_PeriodElapsedCallback+0x16c>
			if(triac_dim_enable) triac_timer = triac_timer + 1; /* add 10us */
 800378a:	4b1d      	ldr	r3, [pc, #116]	@ (8003800 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8003792:	4b1a      	ldr	r3, [pc, #104]	@ (80037fc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	21fe      	movs	r1, #254	@ 0xfe
 8003798:	0589      	lsls	r1, r1, #22
 800379a:	1c18      	adds	r0, r3, #0
 800379c:	f7fc fed2 	bl	8000544 <__aeabi_fadd>
 80037a0:	1c03      	adds	r3, r0, #0
 80037a2:	1c1a      	adds	r2, r3, #0
 80037a4:	4b15      	ldr	r3, [pc, #84]	@ (80037fc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80037a6:	601a      	str	r2, [r3, #0]
}
 80037a8:	46c0      	nop			@ (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b002      	add	sp, #8
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40014400 	.word	0x40014400
 80037b4:	200004dc 	.word	0x200004dc
 80037b8:	00002710 	.word	0x00002710
 80037bc:	200004e0 	.word	0x200004e0
 80037c0:	200004e4 	.word	0x200004e4
 80037c4:	200004e8 	.word	0x200004e8
 80037c8:	200004c4 	.word	0x200004c4
 80037cc:	200004c6 	.word	0x200004c6
 80037d0:	200004c5 	.word	0x200004c5
 80037d4:	200004c7 	.word	0x200004c7
 80037d8:	00001388 	.word	0x00001388
 80037dc:	200004d9 	.word	0x200004d9
 80037e0:	200004cc 	.word	0x200004cc
 80037e4:	200004d0 	.word	0x200004d0
 80037e8:	200004cd 	.word	0x200004cd
 80037ec:	200004d2 	.word	0x200004d2
 80037f0:	200004ce 	.word	0x200004ce
 80037f4:	200004d4 	.word	0x200004d4
 80037f8:	200004c8 	.word	0x200004c8
 80037fc:	200004c0 	.word	0x200004c0
 8003800:	200004ca 	.word	0x200004ca
 8003804:	50001400 	.word	0x50001400
 8003808:	50000800 	.word	0x50000800

0800380c <modem_cmd>:

uint8_t modem_cmd(char *cmd, char *op_check, uint16_t wtime) {
 800380c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800380e:	4c2b      	ldr	r4, [pc, #172]	@ (80038bc <modem_cmd+0xb0>)
 8003810:	44a5      	add	sp, r4
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	4b29      	ldr	r3, [pc, #164]	@ (80038c0 <modem_cmd+0xb4>)
 800381a:	258a      	movs	r5, #138	@ 0x8a
 800381c:	00ad      	lsls	r5, r5, #2
 800381e:	195b      	adds	r3, r3, r5
 8003820:	19db      	adds	r3, r3, r7
 8003822:	801a      	strh	r2, [r3, #0]
	uint8_t res = 0;
 8003824:	4b27      	ldr	r3, [pc, #156]	@ (80038c4 <modem_cmd+0xb8>)
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
	char cmd_string[500], buffer[30];
	memset(cmd_string, 0, 20);
 800382c:	2430      	movs	r4, #48	@ 0x30
 800382e:	193b      	adds	r3, r7, r4
 8003830:	2214      	movs	r2, #20
 8003832:	2100      	movs	r1, #0
 8003834:	0018      	movs	r0, r3
 8003836:	f007 fef5 	bl	800b624 <memset>
	memset(buffer, 0, 30);
 800383a:	2610      	movs	r6, #16
 800383c:	19bb      	adds	r3, r7, r6
 800383e:	221e      	movs	r2, #30
 8003840:	2100      	movs	r1, #0
 8003842:	0018      	movs	r0, r3
 8003844:	f007 feee 	bl	800b624 <memset>
	sprintf(cmd_string, "%s%s", cmd, "\r\n" );
 8003848:	4b1f      	ldr	r3, [pc, #124]	@ (80038c8 <modem_cmd+0xbc>)
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	491f      	ldr	r1, [pc, #124]	@ (80038cc <modem_cmd+0xc0>)
 800384e:	1938      	adds	r0, r7, r4
 8003850:	f007 fe7c 	bl	800b54c <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t *)cmd_string, strlen(cmd_string), wtime);
 8003854:	193b      	adds	r3, r7, r4
 8003856:	0018      	movs	r0, r3
 8003858:	f7fc fc52 	bl	8000100 <strlen>
 800385c:	0003      	movs	r3, r0
 800385e:	b29a      	uxth	r2, r3
 8003860:	4b17      	ldr	r3, [pc, #92]	@ (80038c0 <modem_cmd+0xb4>)
 8003862:	1959      	adds	r1, r3, r5
 8003864:	19cb      	adds	r3, r1, r7
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	1939      	adds	r1, r7, r4
 800386a:	4819      	ldr	r0, [pc, #100]	@ (80038d0 <modem_cmd+0xc4>)
 800386c:	f006 f948 	bl	8009b00 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)buffer, 30, wtime);
 8003870:	4b13      	ldr	r3, [pc, #76]	@ (80038c0 <modem_cmd+0xb4>)
 8003872:	195a      	adds	r2, r3, r5
 8003874:	19d3      	adds	r3, r2, r7
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	19b9      	adds	r1, r7, r6
 800387a:	4815      	ldr	r0, [pc, #84]	@ (80038d0 <modem_cmd+0xc4>)
 800387c:	221e      	movs	r2, #30
 800387e:	f006 f9e3 	bl	8009c48 <HAL_UART_Receive>
	HAL_Delay(1000);
 8003882:	23fa      	movs	r3, #250	@ 0xfa
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	0018      	movs	r0, r3
 8003888:	f001 ff5c 	bl	8005744 <HAL_Delay>
	if(strstr((char *)buffer, op_check)){
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	19bb      	adds	r3, r7, r6
 8003890:	0011      	movs	r1, r2
 8003892:	0018      	movs	r0, r3
 8003894:	f007 fece 	bl	800b634 <strstr>
 8003898:	1e03      	subs	r3, r0, #0
 800389a:	d003      	beq.n	80038a4 <modem_cmd+0x98>
		res = 1;
 800389c:	4b09      	ldr	r3, [pc, #36]	@ (80038c4 <modem_cmd+0xb8>)
 800389e:	18fb      	adds	r3, r7, r3
 80038a0:	2201      	movs	r2, #1
 80038a2:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(100);
 80038a4:	2064      	movs	r0, #100	@ 0x64
 80038a6:	f001 ff4d 	bl	8005744 <HAL_Delay>
	return res;
 80038aa:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <modem_cmd+0xb8>)
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	781b      	ldrb	r3, [r3, #0]
}
 80038b0:	0018      	movs	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	238b      	movs	r3, #139	@ 0x8b
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	449d      	add	sp, r3
 80038ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038bc:	fffffdd4 	.word	0xfffffdd4
 80038c0:	fffffdde 	.word	0xfffffdde
 80038c4:	00000227 	.word	0x00000227
 80038c8:	0800d950 	.word	0x0800d950
 80038cc:	0800d954 	.word	0x0800d954
 80038d0:	20000418 	.word	0x20000418

080038d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038d6:	b0cf      	sub	sp, #316	@ 0x13c
 80038d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038da:	f001 fead 	bl	8005638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038de:	f000 ff7d 	bl	80047dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038e2:	f001 f99b 	bl	8004c1c <MX_GPIO_Init>
  MX_DMA_Init();
 80038e6:	f001 f97b 	bl	8004be0 <MX_DMA_Init>
  MX_SPI2_Init();
 80038ea:	f001 f8df 	bl	8004aac <MX_SPI2_Init>
  MX_I2C2_Init();
 80038ee:	f001 f89d 	bl	8004a2c <MX_I2C2_Init>
  MX_TIM16_Init();
 80038f2:	f001 f91b 	bl	8004b2c <MX_TIM16_Init>
  MX_I2C1_Init();
 80038f6:	f001 f859 	bl	80049ac <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80038fa:	f001 f93d 	bl	8004b78 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80038fe:	f000 ffc7 	bl	8004890 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  adc_raw[0] = 0;
 8003902:	4bf4      	ldr	r3, [pc, #976]	@ (8003cd4 <main+0x400>)
 8003904:	2200      	movs	r2, #0
 8003906:	801a      	strh	r2, [r3, #0]
  adc_raw[1] = 0;
 8003908:	4bf2      	ldr	r3, [pc, #968]	@ (8003cd4 <main+0x400>)
 800390a:	2200      	movs	r2, #0
 800390c:	805a      	strh	r2, [r3, #2]
  adc_raw[2] = 0;
 800390e:	4bf1      	ldr	r3, [pc, #964]	@ (8003cd4 <main+0x400>)
 8003910:	2200      	movs	r2, #0
 8003912:	809a      	strh	r2, [r3, #4]

  triac_on_time = 30;
 8003914:	4bf0      	ldr	r3, [pc, #960]	@ (8003cd8 <main+0x404>)
 8003916:	221e      	movs	r2, #30
 8003918:	801a      	strh	r2, [r3, #0]
  triac_dim_enable = 0;
 800391a:	4bf0      	ldr	r3, [pc, #960]	@ (8003cdc <main+0x408>)
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
  zcd_enable = 0;
 8003920:	4bef      	ldr	r3, [pc, #956]	@ (8003ce0 <main+0x40c>)
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]
  TRIAC1_SET(0);
 8003926:	4bef      	ldr	r3, [pc, #956]	@ (8003ce4 <main+0x410>)
 8003928:	2200      	movs	r2, #0
 800392a:	2101      	movs	r1, #1
 800392c:	0018      	movs	r0, r3
 800392e:	f003 fba4 	bl	800707a <HAL_GPIO_WritePin>
  TRIAC2_SET(0);
 8003932:	2380      	movs	r3, #128	@ 0x80
 8003934:	019b      	lsls	r3, r3, #6
 8003936:	48ec      	ldr	r0, [pc, #944]	@ (8003ce8 <main+0x414>)
 8003938:	2200      	movs	r2, #0
 800393a:	0019      	movs	r1, r3
 800393c:	f003 fb9d 	bl	800707a <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc1, adc_raw, 3);
 8003940:	49e4      	ldr	r1, [pc, #912]	@ (8003cd4 <main+0x400>)
 8003942:	4bea      	ldr	r3, [pc, #936]	@ (8003cec <main+0x418>)
 8003944:	2203      	movs	r2, #3
 8003946:	0018      	movs	r0, r3
 8003948:	f002 fa1c 	bl	8005d84 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t sdo[2] = { 0, 0 };
 800394c:	2386      	movs	r3, #134	@ 0x86
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	2200      	movs	r2, #0
 8003954:	801a      	strh	r2, [r3, #0]
  uint16_t temp_word;
  uint8_t temp_state = 0;
 8003956:	232e      	movs	r3, #46	@ 0x2e
 8003958:	33ff      	adds	r3, #255	@ 0xff
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
  uint16_t temp12b = 0;
 8003960:	2395      	movs	r3, #149	@ 0x95
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	2200      	movs	r2, #0
 8003968:	801a      	strh	r2, [r3, #0]

  I2C_LCD_Init(LCD1);
 800396a:	2000      	movs	r0, #0
 800396c:	f006 ff4c 	bl	800a808 <I2C_LCD_Init>
  I2C_LCD_SetCursor(LCD1, 0, 0);
 8003970:	2200      	movs	r2, #0
 8003972:	2100      	movs	r1, #0
 8003974:	2000      	movs	r0, #0
 8003976:	f007 f857 	bl	800aa28 <I2C_LCD_SetCursor>
  I2C_LCD_WriteString(LCD1, "Zeta Cooking");
 800397a:	4bdd      	ldr	r3, [pc, #884]	@ (8003cf0 <main+0x41c>)
 800397c:	0019      	movs	r1, r3
 800397e:	2000      	movs	r0, #0
 8003980:	f007 f8a2 	bl	800aac8 <I2C_LCD_WriteString>
  I2C_LCD_SetCursor(LCD1, 0, 1);
 8003984:	2201      	movs	r2, #1
 8003986:	2100      	movs	r1, #0
 8003988:	2000      	movs	r0, #0
 800398a:	f007 f84d 	bl	800aa28 <I2C_LCD_SetCursor>
  I2C_LCD_WriteString(LCD1, "Device");
 800398e:	4bd9      	ldr	r3, [pc, #868]	@ (8003cf4 <main+0x420>)
 8003990:	0019      	movs	r1, r3
 8003992:	2000      	movs	r0, #0
 8003994:	f007 f898 	bl	800aac8 <I2C_LCD_WriteString>
  HAL_Delay(500);
 8003998:	23fa      	movs	r3, #250	@ 0xfa
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	0018      	movs	r0, r3
 800399e:	f001 fed1 	bl	8005744 <HAL_Delay>

  /* GSM test on UART */
  /* Pwrkey dance */
  HAL_GPIO_WritePin(MCU_RESET_GPIO_Port,MCU_RESET_Pin,GPIO_PIN_RESET);
 80039a2:	23a0      	movs	r3, #160	@ 0xa0
 80039a4:	05db      	lsls	r3, r3, #23
 80039a6:	2200      	movs	r2, #0
 80039a8:	2140      	movs	r1, #64	@ 0x40
 80039aa:	0018      	movs	r0, r3
 80039ac:	f003 fb65 	bl	800707a <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 80039b0:	23fa      	movs	r3, #250	@ 0xfa
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	0018      	movs	r0, r3
 80039b6:	f001 fec5 	bl	8005744 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_RESET_GPIO_Port,MCU_RESET_Pin,GPIO_PIN_SET);
 80039ba:	23a0      	movs	r3, #160	@ 0xa0
 80039bc:	05db      	lsls	r3, r3, #23
 80039be:	2201      	movs	r2, #1
 80039c0:	2140      	movs	r1, #64	@ 0x40
 80039c2:	0018      	movs	r0, r3
 80039c4:	f003 fb59 	bl	800707a <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80039c8:	20c8      	movs	r0, #200	@ 0xc8
 80039ca:	f001 febb 	bl	8005744 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_SET);
 80039ce:	23a0      	movs	r3, #160	@ 0xa0
 80039d0:	05db      	lsls	r3, r3, #23
 80039d2:	2201      	movs	r2, #1
 80039d4:	2180      	movs	r1, #128	@ 0x80
 80039d6:	0018      	movs	r0, r3
 80039d8:	f003 fb4f 	bl	800707a <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80039dc:	20c8      	movs	r0, #200	@ 0xc8
 80039de:	f001 feb1 	bl	8005744 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_RESET);
 80039e2:	23a0      	movs	r3, #160	@ 0xa0
 80039e4:	05db      	lsls	r3, r3, #23
 80039e6:	2200      	movs	r2, #0
 80039e8:	2180      	movs	r1, #128	@ 0x80
 80039ea:	0018      	movs	r0, r3
 80039ec:	f003 fb45 	bl	800707a <HAL_GPIO_WritePin>
  HAL_Delay(700);
 80039f0:	23af      	movs	r3, #175	@ 0xaf
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	0018      	movs	r0, r3
 80039f6:	f001 fea5 	bl	8005744 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_PWRKEY_GPIO_Port,MCU_PWRKEY_Pin,GPIO_PIN_SET);
 80039fa:	23a0      	movs	r3, #160	@ 0xa0
 80039fc:	05db      	lsls	r3, r3, #23
 80039fe:	2201      	movs	r2, #1
 8003a00:	2180      	movs	r1, #128	@ 0x80
 8003a02:	0018      	movs	r0, r3
 8003a04:	f003 fb39 	bl	800707a <HAL_GPIO_WritePin>
  HAL_Delay(15000);
 8003a08:	4bbb      	ldr	r3, [pc, #748]	@ (8003cf8 <main+0x424>)
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f001 fe9a 	bl	8005744 <HAL_Delay>

  TEMP1_CS(1);
 8003a10:	4bba      	ldr	r3, [pc, #744]	@ (8003cfc <main+0x428>)
 8003a12:	2280      	movs	r2, #128	@ 0x80
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	619a      	str	r2, [r3, #24]
  TEMP2_CS(1);
 8003a18:	4bb8      	ldr	r3, [pc, #736]	@ (8003cfc <main+0x428>)
 8003a1a:	2280      	movs	r2, #128	@ 0x80
 8003a1c:	0152      	lsls	r2, r2, #5
 8003a1e:	619a      	str	r2, [r3, #24]
  TEMP3_CS(1);
 8003a20:	4bb6      	ldr	r3, [pc, #728]	@ (8003cfc <main+0x428>)
 8003a22:	2280      	movs	r2, #128	@ 0x80
 8003a24:	0192      	lsls	r2, r2, #6
 8003a26:	619a      	str	r2, [r3, #24]
  TEMP4_CS(1);
 8003a28:	4bb4      	ldr	r3, [pc, #720]	@ (8003cfc <main+0x428>)
 8003a2a:	2280      	movs	r2, #128	@ 0x80
 8003a2c:	01d2      	lsls	r2, r2, #7
 8003a2e:	619a      	str	r2, [r3, #24]
  TEMP5_CS(1);
 8003a30:	4bb2      	ldr	r3, [pc, #712]	@ (8003cfc <main+0x428>)
 8003a32:	2280      	movs	r2, #128	@ 0x80
 8003a34:	0212      	lsls	r2, r2, #8
 8003a36:	619a      	str	r2, [r3, #24]
  TEMP6_CS(1);
 8003a38:	23a0      	movs	r3, #160	@ 0xa0
 8003a3a:	05db      	lsls	r3, r3, #23
 8003a3c:	2280      	movs	r2, #128	@ 0x80
 8003a3e:	0052      	lsls	r2, r2, #1
 8003a40:	619a      	str	r2, [r3, #24]
  TEMP1_CS(0);
 8003a42:	4bae      	ldr	r3, [pc, #696]	@ (8003cfc <main+0x428>)
 8003a44:	2280      	movs	r2, #128	@ 0x80
 8003a46:	0112      	lsls	r2, r2, #4
 8003a48:	629a      	str	r2, [r3, #40]	@ 0x28
  char temp_str[15] = "";
 8003a4a:	23fc      	movs	r3, #252	@ 0xfc
 8003a4c:	18fb      	adds	r3, r7, r3
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	3304      	adds	r3, #4
 8003a54:	220b      	movs	r2, #11
 8003a56:	2100      	movs	r1, #0
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f007 fde3 	bl	800b624 <memset>
  sensor_idx = 1;
 8003a5e:	4ba8      	ldr	r3, [pc, #672]	@ (8003d00 <main+0x42c>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	701a      	strb	r2, [r3, #0]
//  float rtc_temp = 0;
//  DateTime time;

  uint8_t upload_flag = 0;
 8003a64:	2338      	movs	r3, #56	@ 0x38
 8003a66:	33ff      	adds	r3, #255	@ 0xff
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	701a      	strb	r2, [r3, #0]
  char content_string[200] = "";
 8003a6e:	4ba5      	ldr	r3, [pc, #660]	@ (8003d04 <main+0x430>)
 8003a70:	269c      	movs	r6, #156	@ 0x9c
 8003a72:	0076      	lsls	r6, r6, #1
 8003a74:	199b      	adds	r3, r3, r6
 8003a76:	19db      	adds	r3, r3, r7
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	22c4      	movs	r2, #196	@ 0xc4
 8003a80:	2100      	movs	r1, #0
 8003a82:	0018      	movs	r0, r3
 8003a84:	f007 fdce 	bl	800b624 <memset>
  char api_key[20] = "01VH0OM4JU4KG9KN"; /* ThingSpeak API key */
 8003a88:	4b9f      	ldr	r3, [pc, #636]	@ (8003d08 <main+0x434>)
 8003a8a:	199b      	adds	r3, r3, r6
 8003a8c:	19d9      	adds	r1, r3, r7
 8003a8e:	4a9f      	ldr	r2, [pc, #636]	@ (8003d0c <main+0x438>)
 8003a90:	000b      	movs	r3, r1
 8003a92:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003a94:	c331      	stmia	r3!, {r0, r4, r5}
 8003a96:	6810      	ldr	r0, [r2, #0]
 8003a98:	6018      	str	r0, [r3, #0]
 8003a9a:	7912      	ldrb	r2, [r2, #4]
 8003a9c:	711a      	strb	r2, [r3, #4]
 8003a9e:	2311      	movs	r3, #17
 8003aa0:	18cb      	adds	r3, r1, r3
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f007 fdbc 	bl	800b624 <memset>

  DateTime ti;
  ti.day = 14;
 8003aac:	4b98      	ldr	r3, [pc, #608]	@ (8003d10 <main+0x43c>)
 8003aae:	0034      	movs	r4, r6
 8003ab0:	191b      	adds	r3, r3, r4
 8003ab2:	19db      	adds	r3, r3, r7
 8003ab4:	220e      	movs	r2, #14
 8003ab6:	701a      	strb	r2, [r3, #0]
  ti.month = 11;
 8003ab8:	4b95      	ldr	r3, [pc, #596]	@ (8003d10 <main+0x43c>)
 8003aba:	191b      	adds	r3, r3, r4
 8003abc:	19db      	adds	r3, r3, r7
 8003abe:	220b      	movs	r2, #11
 8003ac0:	705a      	strb	r2, [r3, #1]
  ti.year = 24;
 8003ac2:	4b93      	ldr	r3, [pc, #588]	@ (8003d10 <main+0x43c>)
 8003ac4:	191b      	adds	r3, r3, r4
 8003ac6:	19db      	adds	r3, r3, r7
 8003ac8:	2218      	movs	r2, #24
 8003aca:	70da      	strb	r2, [r3, #3]
  ti.dow = 2;
 8003acc:	4b90      	ldr	r3, [pc, #576]	@ (8003d10 <main+0x43c>)
 8003ace:	191b      	adds	r3, r3, r4
 8003ad0:	19db      	adds	r3, r3, r7
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	709a      	strb	r2, [r3, #2]
  ti.hr = 21;
 8003ad6:	4b8e      	ldr	r3, [pc, #568]	@ (8003d10 <main+0x43c>)
 8003ad8:	191b      	adds	r3, r3, r4
 8003ada:	19db      	adds	r3, r3, r7
 8003adc:	2215      	movs	r2, #21
 8003ade:	711a      	strb	r2, [r3, #4]
  ti.min = 14;
 8003ae0:	4b8b      	ldr	r3, [pc, #556]	@ (8003d10 <main+0x43c>)
 8003ae2:	191b      	adds	r3, r3, r4
 8003ae4:	19db      	adds	r3, r3, r7
 8003ae6:	220e      	movs	r2, #14
 8003ae8:	715a      	strb	r2, [r3, #5]
  ti.sec = 0;
 8003aea:	4b89      	ldr	r3, [pc, #548]	@ (8003d10 <main+0x43c>)
 8003aec:	191b      	adds	r3, r3, r4
 8003aee:	19db      	adds	r3, r3, r7
 8003af0:	2200      	movs	r2, #0
 8003af2:	719a      	strb	r2, [r3, #6]
  btn1_stat = 0;
 8003af4:	4b87      	ldr	r3, [pc, #540]	@ (8003d14 <main+0x440>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
  ds3231_settime(&ti);
 8003afa:	2318      	movs	r3, #24
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	0018      	movs	r0, r3
 8003b00:	f7ff fbc6 	bl	8003290 <ds3231_settime>

  float KP = 1.0;
 8003b04:	23fe      	movs	r3, #254	@ 0xfe
 8003b06:	059b      	lsls	r3, r3, #22
 8003b08:	2292      	movs	r2, #146	@ 0x92
 8003b0a:	0052      	lsls	r2, r2, #1
 8003b0c:	18ba      	adds	r2, r7, r2
 8003b0e:	6013      	str	r3, [r2, #0]
  float conv_factor_time = 1000;
 8003b10:	4b81      	ldr	r3, [pc, #516]	@ (8003d18 <main+0x444>)
 8003b12:	2290      	movs	r2, #144	@ 0x90
 8003b14:	0052      	lsls	r2, r2, #1
 8003b16:	18ba      	adds	r2, r7, r2
 8003b18:	6013      	str	r3, [r2, #0]
  float sp = 25;
 8003b1a:	4b80      	ldr	r3, [pc, #512]	@ (8003d1c <main+0x448>)
 8003b1c:	228e      	movs	r2, #142	@ 0x8e
 8003b1e:	0052      	lsls	r2, r2, #1
 8003b20:	18ba      	adds	r2, r7, r2
 8003b22:	6013      	str	r3, [r2, #0]
  float error = 0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	228c      	movs	r2, #140	@ 0x8c
 8003b28:	0052      	lsls	r2, r2, #1
 8003b2a:	18ba      	adds	r2, r7, r2
 8003b2c:	6013      	str	r3, [r2, #0]
  uint8_t refresh_flag = 1;
 8003b2e:	239b      	movs	r3, #155	@ 0x9b
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	2201      	movs	r2, #1
 8003b36:	701a      	strb	r2, [r3, #0]
  uint8_t menu_mode = 1;
 8003b38:	2336      	movs	r3, #54	@ 0x36
 8003b3a:	33ff      	adds	r3, #255	@ 0xff
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	2201      	movs	r2, #1
 8003b40:	701a      	strb	r2, [r3, #0]
  uint8_t prev_mode = 0;
 8003b42:	239a      	movs	r3, #154	@ 0x9a
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
  uint8_t prev_idx = 1;
 8003b4c:	2334      	movs	r3, #52	@ 0x34
 8003b4e:	33ff      	adds	r3, #255	@ 0xff
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	2201      	movs	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]

  /* key variables */
  uint8_t active_sensor_idx = 0;
 8003b56:	2399      	movs	r3, #153	@ 0x99
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	701a      	strb	r2, [r3, #0]
  uint16_t set_point = 0;
 8003b60:	238b      	movs	r3, #139	@ 0x8b
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	2200      	movs	r2, #0
 8003b68:	801a      	strh	r2, [r3, #0]
  uint8_t set_flag = 0;
 8003b6a:	2332      	movs	r3, #50	@ 0x32
 8003b6c:	33ff      	adds	r3, #255	@ 0xff
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
  uint8_t mode = 0;
 8003b74:	2398      	movs	r3, #152	@ 0x98
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8003b7e:	2330      	movs	r3, #48	@ 0x30
 8003b80:	33ff      	adds	r3, #255	@ 0xff
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
  uint8_t upload_pending_flag = 0;
 8003b88:	2397      	movs	r3, #151	@ 0x97
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	18fb      	adds	r3, r7, r3
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]

  /* Initialization */
  uint16_t set_points[3] = { 20, 30, 40 }; /* TODO fix this */
 8003b92:	4b63      	ldr	r3, [pc, #396]	@ (8003d20 <main+0x44c>)
 8003b94:	191b      	adds	r3, r3, r4
 8003b96:	19db      	adds	r3, r3, r7
 8003b98:	4a62      	ldr	r2, [pc, #392]	@ (8003d24 <main+0x450>)
 8003b9a:	6811      	ldr	r1, [r2, #0]
 8003b9c:	6019      	str	r1, [r3, #0]
 8003b9e:	8892      	ldrh	r2, [r2, #4]
 8003ba0:	809a      	strh	r2, [r3, #4]
  HAL_TIM_Base_Start_IT(&htim16);
 8003ba2:	4b61      	ldr	r3, [pc, #388]	@ (8003d28 <main+0x454>)
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f005 fd3b 	bl	8009620 <HAL_TIM_Base_Start_IT>


  while (1)
  {
	/* Sensor read */
	if(sensor_refresh_flag == 1) {
 8003baa:	4b60      	ldr	r3, [pc, #384]	@ (8003d2c <main+0x458>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d168      	bne.n	8003c84 <main+0x3b0>
		sensor_rx_select(sensor_idx);
 8003bb2:	4b53      	ldr	r3, [pc, #332]	@ (8003d00 <main+0x42c>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f001 fcc4 	bl	8005544 <sensor_rx_select>
		HAL_SPI_Receive(&hspi2, (uint8_t *)sdo, 2, 100);
 8003bbc:	2486      	movs	r4, #134	@ 0x86
 8003bbe:	0064      	lsls	r4, r4, #1
 8003bc0:	1939      	adds	r1, r7, r4
 8003bc2:	485b      	ldr	r0, [pc, #364]	@ (8003d30 <main+0x45c>)
 8003bc4:	2364      	movs	r3, #100	@ 0x64
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f004 ffca 	bl	8008b60 <HAL_SPI_Receive>
		sensor_rx_disable(); // Disables all IC comms
 8003bcc:	f001 fc9a 	bl	8005504 <sensor_rx_disable>
		temp_state = (((sdo[0] | (sdo[1] << 8)) >> 2) & 0x0001);
 8003bd0:	0020      	movs	r0, r4
 8003bd2:	183b      	adds	r3, r7, r0
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	001a      	movs	r2, r3
 8003bd8:	183b      	adds	r3, r7, r0
 8003bda:	785b      	ldrb	r3, [r3, #1]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	4313      	orrs	r3, r2
 8003be0:	109b      	asrs	r3, r3, #2
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	242e      	movs	r4, #46	@ 0x2e
 8003be6:	34ff      	adds	r4, #255	@ 0xff
 8003be8:	193b      	adds	r3, r7, r4
 8003bea:	2101      	movs	r1, #1
 8003bec:	400a      	ands	r2, r1
 8003bee:	701a      	strb	r2, [r3, #0]
		temp_word = (sdo[0] | sdo[1] << 8);
 8003bf0:	183b      	adds	r3, r7, r0
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	b21a      	sxth	r2, r3
 8003bf6:	183b      	adds	r3, r7, r0
 8003bf8:	785b      	ldrb	r3, [r3, #1]
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	b21a      	sxth	r2, r3
 8003c02:	218a      	movs	r1, #138	@ 0x8a
 8003c04:	0049      	lsls	r1, r1, #1
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	801a      	strh	r2, [r3, #0]
		temp12b = (temp_word & 0b111111111000) >> 3;
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	10db      	asrs	r3, r3, #3
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	2395      	movs	r3, #149	@ 0x95
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	05d2      	lsls	r2, r2, #23
 8003c1a:	0dd2      	lsrs	r2, r2, #23
 8003c1c:	801a      	strh	r2, [r3, #0]
		/* store the temp */
		if(temp_state == 1) {
 8003c1e:	193b      	adds	r3, r7, r4
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d107      	bne.n	8003c36 <main+0x362>
			temperatures[sensor_idx - 1] = -99;
 8003c26:	4b36      	ldr	r3, [pc, #216]	@ (8003d00 <main+0x42c>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	1e5a      	subs	r2, r3, #1
 8003c2c:	4b41      	ldr	r3, [pc, #260]	@ (8003d34 <main+0x460>)
 8003c2e:	0092      	lsls	r2, r2, #2
 8003c30:	4941      	ldr	r1, [pc, #260]	@ (8003d38 <main+0x464>)
 8003c32:	50d1      	str	r1, [r2, r3]
 8003c34:	e017      	b.n	8003c66 <main+0x392>
		}
		else {
			temperatures[sensor_idx - 1] = (float)(temp12b*0.25);
 8003c36:	2395      	movs	r3, #149	@ 0x95
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7ff f9ea 	bl	8003018 <__aeabi_i2d>
 8003c44:	2200      	movs	r2, #0
 8003c46:	4b3d      	ldr	r3, [pc, #244]	@ (8003d3c <main+0x468>)
 8003c48:	f7fe fb24 	bl	8002294 <__aeabi_dmul>
 8003c4c:	0002      	movs	r2, r0
 8003c4e:	000b      	movs	r3, r1
 8003c50:	492b      	ldr	r1, [pc, #172]	@ (8003d00 <main+0x42c>)
 8003c52:	7809      	ldrb	r1, [r1, #0]
 8003c54:	1e4c      	subs	r4, r1, #1
 8003c56:	0010      	movs	r0, r2
 8003c58:	0019      	movs	r1, r3
 8003c5a:	f7ff fa77 	bl	800314c <__aeabi_d2f>
 8003c5e:	1c01      	adds	r1, r0, #0
 8003c60:	4b34      	ldr	r3, [pc, #208]	@ (8003d34 <main+0x460>)
 8003c62:	00a2      	lsls	r2, r4, #2
 8003c64:	50d1      	str	r1, [r2, r3]
		}
		sensor_idx = sensor_idx >= SENSOR_COUNT ? 1 : sensor_idx + 1;
 8003c66:	4b26      	ldr	r3, [pc, #152]	@ (8003d00 <main+0x42c>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d804      	bhi.n	8003c78 <main+0x3a4>
 8003c6e:	4b24      	ldr	r3, [pc, #144]	@ (8003d00 <main+0x42c>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	e000      	b.n	8003c7a <main+0x3a6>
 8003c78:	2201      	movs	r2, #1
 8003c7a:	4b21      	ldr	r3, [pc, #132]	@ (8003d00 <main+0x42c>)
 8003c7c:	701a      	strb	r2, [r3, #0]
		sensor_refresh_flag = 0;
 8003c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003d2c <main+0x458>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
	}
	/* read two sensors, average it if both are working */
	if(temperatures[0] != -99 && temperatures[1] != -99) {
 8003c84:	4b2b      	ldr	r3, [pc, #172]	@ (8003d34 <main+0x460>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	492b      	ldr	r1, [pc, #172]	@ (8003d38 <main+0x464>)
 8003c8a:	1c18      	adds	r0, r3, #0
 8003c8c:	f7fc fc14 	bl	80004b8 <__aeabi_fcmpeq>
 8003c90:	1e03      	subs	r3, r0, #0
 8003c92:	d155      	bne.n	8003d40 <main+0x46c>
 8003c94:	4b27      	ldr	r3, [pc, #156]	@ (8003d34 <main+0x460>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4927      	ldr	r1, [pc, #156]	@ (8003d38 <main+0x464>)
 8003c9a:	1c18      	adds	r0, r3, #0
 8003c9c:	f7fc fc0c 	bl	80004b8 <__aeabi_fcmpeq>
 8003ca0:	1e03      	subs	r3, r0, #0
 8003ca2:	d14d      	bne.n	8003d40 <main+0x46c>
		temperatures[2] = (temperatures[0] + temperatures[1])/2;
 8003ca4:	4b23      	ldr	r3, [pc, #140]	@ (8003d34 <main+0x460>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	4b22      	ldr	r3, [pc, #136]	@ (8003d34 <main+0x460>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	1c19      	adds	r1, r3, #0
 8003cae:	1c10      	adds	r0, r2, #0
 8003cb0:	f7fc fc48 	bl	8000544 <__aeabi_fadd>
 8003cb4:	1c03      	adds	r3, r0, #0
 8003cb6:	2180      	movs	r1, #128	@ 0x80
 8003cb8:	05c9      	lsls	r1, r1, #23
 8003cba:	1c18      	adds	r0, r3, #0
 8003cbc:	f7fc fdcc 	bl	8000858 <__aeabi_fdiv>
 8003cc0:	1c03      	adds	r3, r0, #0
 8003cc2:	1c1a      	adds	r2, r3, #0
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d34 <main+0x460>)
 8003cc6:	609a      	str	r2, [r3, #8]
		active_sensor_idx = 2;
 8003cc8:	2399      	movs	r3, #153	@ 0x99
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	2202      	movs	r2, #2
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	e069      	b.n	8003da8 <main+0x4d4>
 8003cd4:	200004b8 	.word	0x200004b8
 8003cd8:	200004c8 	.word	0x200004c8
 8003cdc:	200004ca 	.word	0x200004ca
 8003ce0:	200004cb 	.word	0x200004cb
 8003ce4:	50001400 	.word	0x50001400
 8003ce8:	50000800 	.word	0x50000800
 8003cec:	20000200 	.word	0x20000200
 8003cf0:	0800d95c 	.word	0x0800d95c
 8003cf4:	0800d96c 	.word	0x0800d96c
 8003cf8:	00003a98 	.word	0x00003a98
 8003cfc:	50000400 	.word	0x50000400
 8003d00:	200004d8 	.word	0x200004d8
 8003d04:	fffffefc 	.word	0xfffffefc
 8003d08:	fffffee8 	.word	0xfffffee8
 8003d0c:	0800dae4 	.word	0x0800dae4
 8003d10:	fffffee0 	.word	0xfffffee0
 8003d14:	200004d6 	.word	0x200004d6
 8003d18:	447a0000 	.word	0x447a0000
 8003d1c:	41c80000 	.word	0x41c80000
 8003d20:	fffffed8 	.word	0xfffffed8
 8003d24:	0800daf8 	.word	0x0800daf8
 8003d28:	200003cc 	.word	0x200003cc
 8003d2c:	200004d9 	.word	0x200004d9
 8003d30:	20000368 	.word	0x20000368
 8003d34:	200004ec 	.word	0x200004ec
 8003d38:	c2c60000 	.word	0xc2c60000
 8003d3c:	3fd00000 	.word	0x3fd00000
	}
	else if(temperatures[0] != -99 && temperatures[1] == -99) {
 8003d40:	4bca      	ldr	r3, [pc, #808]	@ (800406c <main+0x798>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	49ca      	ldr	r1, [pc, #808]	@ (8004070 <main+0x79c>)
 8003d46:	1c18      	adds	r0, r3, #0
 8003d48:	f7fc fbb6 	bl	80004b8 <__aeabi_fcmpeq>
 8003d4c:	1e03      	subs	r3, r0, #0
 8003d4e:	d10d      	bne.n	8003d6c <main+0x498>
 8003d50:	4bc6      	ldr	r3, [pc, #792]	@ (800406c <main+0x798>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	49c6      	ldr	r1, [pc, #792]	@ (8004070 <main+0x79c>)
 8003d56:	1c18      	adds	r0, r3, #0
 8003d58:	f7fc fbae 	bl	80004b8 <__aeabi_fcmpeq>
 8003d5c:	1e03      	subs	r3, r0, #0
 8003d5e:	d005      	beq.n	8003d6c <main+0x498>
		active_sensor_idx = 0;
 8003d60:	2399      	movs	r3, #153	@ 0x99
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	e01d      	b.n	8003da8 <main+0x4d4>
	}
	else if(temperatures[0] == -99 && temperatures[1] != -99) {
 8003d6c:	4bbf      	ldr	r3, [pc, #764]	@ (800406c <main+0x798>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	49bf      	ldr	r1, [pc, #764]	@ (8004070 <main+0x79c>)
 8003d72:	1c18      	adds	r0, r3, #0
 8003d74:	f7fc fba0 	bl	80004b8 <__aeabi_fcmpeq>
 8003d78:	1e03      	subs	r3, r0, #0
 8003d7a:	d00d      	beq.n	8003d98 <main+0x4c4>
 8003d7c:	4bbb      	ldr	r3, [pc, #748]	@ (800406c <main+0x798>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	49bb      	ldr	r1, [pc, #748]	@ (8004070 <main+0x79c>)
 8003d82:	1c18      	adds	r0, r3, #0
 8003d84:	f7fc fb98 	bl	80004b8 <__aeabi_fcmpeq>
 8003d88:	1e03      	subs	r3, r0, #0
 8003d8a:	d105      	bne.n	8003d98 <main+0x4c4>
		active_sensor_idx = 1;
 8003d8c:	2399      	movs	r3, #153	@ 0x99
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	2201      	movs	r2, #1
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	e007      	b.n	8003da8 <main+0x4d4>
	}
	else {
		temperatures[2] = -99;
 8003d98:	4bb4      	ldr	r3, [pc, #720]	@ (800406c <main+0x798>)
 8003d9a:	4ab5      	ldr	r2, [pc, #724]	@ (8004070 <main+0x79c>)
 8003d9c:	609a      	str	r2, [r3, #8]
		active_sensor_idx = 2;
 8003d9e:	2399      	movs	r3, #153	@ 0x99
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	18fb      	adds	r3, r7, r3
 8003da4:	2202      	movs	r2, #2
 8003da6:	701a      	strb	r2, [r3, #0]
	}
//	/* control action */
  zcd_enable = 1;
 8003da8:	4bb2      	ldr	r3, [pc, #712]	@ (8004074 <main+0x7a0>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]
	if(mode == 3 || temperatures[active_sensor_idx] == -99) {
 8003dae:	2398      	movs	r3, #152	@ 0x98
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d00c      	beq.n	8003dd4 <main+0x500>
 8003dba:	2399      	movs	r3, #153	@ 0x99
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	4baa      	ldr	r3, [pc, #680]	@ (800406c <main+0x798>)
 8003dc4:	0092      	lsls	r2, r2, #2
 8003dc6:	58d3      	ldr	r3, [r2, r3]
 8003dc8:	49a9      	ldr	r1, [pc, #676]	@ (8004070 <main+0x79c>)
 8003dca:	1c18      	adds	r0, r3, #0
 8003dcc:	f7fc fb74 	bl	80004b8 <__aeabi_fcmpeq>
 8003dd0:	1e03      	subs	r3, r0, #0
 8003dd2:	d003      	beq.n	8003ddc <main+0x508>
		triac_on_time = 30;
 8003dd4:	4ba8      	ldr	r3, [pc, #672]	@ (8004078 <main+0x7a4>)
 8003dd6:	221e      	movs	r2, #30
 8003dd8:	801a      	strh	r2, [r3, #0]
 8003dda:	e096      	b.n	8003f0a <main+0x636>
	}
	else {
		set_point = set_points[mode];
 8003ddc:	2398      	movs	r3, #152	@ 0x98
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	18fb      	adds	r3, r7, r3
 8003de2:	7819      	ldrb	r1, [r3, #0]
 8003de4:	208b      	movs	r0, #139	@ 0x8b
 8003de6:	0040      	lsls	r0, r0, #1
 8003de8:	183b      	adds	r3, r7, r0
 8003dea:	4aa4      	ldr	r2, [pc, #656]	@ (800407c <main+0x7a8>)
 8003dec:	249c      	movs	r4, #156	@ 0x9c
 8003dee:	0064      	lsls	r4, r4, #1
 8003df0:	1912      	adds	r2, r2, r4
 8003df2:	19d2      	adds	r2, r2, r7
 8003df4:	0049      	lsls	r1, r1, #1
 8003df6:	5a8a      	ldrh	r2, [r1, r2]
 8003df8:	801a      	strh	r2, [r3, #0]
		if(triac_on_time >= 30) {
 8003dfa:	4b9f      	ldr	r3, [pc, #636]	@ (8004078 <main+0x7a4>)
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	2b1d      	cmp	r3, #29
 8003e00:	d928      	bls.n	8003e54 <main+0x580>
			if(temperatures[active_sensor_idx] < set_point - DBAND - 5) {
 8003e02:	2399      	movs	r3, #153	@ 0x99
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	781a      	ldrb	r2, [r3, #0]
 8003e0a:	4b98      	ldr	r3, [pc, #608]	@ (800406c <main+0x798>)
 8003e0c:	0092      	lsls	r2, r2, #2
 8003e0e:	58d4      	ldr	r4, [r2, r3]
 8003e10:	183b      	adds	r3, r7, r0
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	3b0a      	subs	r3, #10
 8003e16:	0018      	movs	r0, r3
 8003e18:	f7fd fa06 	bl	8001228 <__aeabi_i2f>
 8003e1c:	1c03      	adds	r3, r0, #0
 8003e1e:	1c19      	adds	r1, r3, #0
 8003e20:	1c20      	adds	r0, r4, #0
 8003e22:	f7fc fb4f 	bl	80004c4 <__aeabi_fcmplt>
 8003e26:	1e03      	subs	r3, r0, #0
 8003e28:	d00d      	beq.n	8003e46 <main+0x572>
				triac_turnon_flag = 1;
 8003e2a:	4b95      	ldr	r3, [pc, #596]	@ (8004080 <main+0x7ac>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
				if(triac_turnon_timer > 5) {
 8003e30:	4b94      	ldr	r3, [pc, #592]	@ (8004084 <main+0x7b0>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b05      	cmp	r3, #5
 8003e36:	d968      	bls.n	8003f0a <main+0x636>
					triac_on_time = 0;
 8003e38:	4b8f      	ldr	r3, [pc, #572]	@ (8004078 <main+0x7a4>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	801a      	strh	r2, [r3, #0]
					triac_turnon_flag = 0;
 8003e3e:	4b90      	ldr	r3, [pc, #576]	@ (8004080 <main+0x7ac>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
 8003e44:	e061      	b.n	8003f0a <main+0x636>
				}
			}
			else {
				triac_on_time = 30;
 8003e46:	4b8c      	ldr	r3, [pc, #560]	@ (8004078 <main+0x7a4>)
 8003e48:	221e      	movs	r2, #30
 8003e4a:	801a      	strh	r2, [r3, #0]
				triac_turnon_flag = 0;
 8003e4c:	4b8c      	ldr	r3, [pc, #560]	@ (8004080 <main+0x7ac>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	e05a      	b.n	8003f0a <main+0x636>
			}
		} else if(triac_on_time != 30) {
 8003e54:	4b88      	ldr	r3, [pc, #544]	@ (8004078 <main+0x7a4>)
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	2b1e      	cmp	r3, #30
 8003e5a:	d056      	beq.n	8003f0a <main+0x636>
			if(temperatures[active_sensor_idx] >= set_point) {
 8003e5c:	2399      	movs	r3, #153	@ 0x99
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	781a      	ldrb	r2, [r3, #0]
 8003e64:	4b81      	ldr	r3, [pc, #516]	@ (800406c <main+0x798>)
 8003e66:	0092      	lsls	r2, r2, #2
 8003e68:	58d4      	ldr	r4, [r2, r3]
 8003e6a:	238b      	movs	r3, #139	@ 0x8b
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	0018      	movs	r0, r3
 8003e74:	f7fd f9d8 	bl	8001228 <__aeabi_i2f>
 8003e78:	1c03      	adds	r3, r0, #0
 8003e7a:	1c19      	adds	r1, r3, #0
 8003e7c:	1c20      	adds	r0, r4, #0
 8003e7e:	f7fc fb3f 	bl	8000500 <__aeabi_fcmpge>
 8003e82:	1e03      	subs	r3, r0, #0
 8003e84:	d00d      	beq.n	8003ea2 <main+0x5ce>
				triac_cutoff_flag = 1;
 8003e86:	4b80      	ldr	r3, [pc, #512]	@ (8004088 <main+0x7b4>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	701a      	strb	r2, [r3, #0]
				if(triac_cutoff_timer > 5) {
 8003e8c:	4b7f      	ldr	r3, [pc, #508]	@ (800408c <main+0x7b8>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d93a      	bls.n	8003f0a <main+0x636>
					triac_on_time = 30;
 8003e94:	4b78      	ldr	r3, [pc, #480]	@ (8004078 <main+0x7a4>)
 8003e96:	221e      	movs	r2, #30
 8003e98:	801a      	strh	r2, [r3, #0]
					triac_cutoff_flag = 0;
 8003e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8004088 <main+0x7b4>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
 8003ea0:	e033      	b.n	8003f0a <main+0x636>
				}
			}
			else if(temperatures[active_sensor_idx] > (set_point - DBAND) && temperatures[active_sensor_idx] < set_point) {
 8003ea2:	2599      	movs	r5, #153	@ 0x99
 8003ea4:	006d      	lsls	r5, r5, #1
 8003ea6:	197b      	adds	r3, r7, r5
 8003ea8:	781a      	ldrb	r2, [r3, #0]
 8003eaa:	4b70      	ldr	r3, [pc, #448]	@ (800406c <main+0x798>)
 8003eac:	0092      	lsls	r2, r2, #2
 8003eae:	58d4      	ldr	r4, [r2, r3]
 8003eb0:	268b      	movs	r6, #139	@ 0x8b
 8003eb2:	0076      	lsls	r6, r6, #1
 8003eb4:	19bb      	adds	r3, r7, r6
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	3b05      	subs	r3, #5
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f7fd f9b4 	bl	8001228 <__aeabi_i2f>
 8003ec0:	1c03      	adds	r3, r0, #0
 8003ec2:	1c19      	adds	r1, r3, #0
 8003ec4:	1c20      	adds	r0, r4, #0
 8003ec6:	f7fc fb11 	bl	80004ec <__aeabi_fcmpgt>
 8003eca:	1e03      	subs	r3, r0, #0
 8003ecc:	d017      	beq.n	8003efe <main+0x62a>
 8003ece:	197b      	adds	r3, r7, r5
 8003ed0:	781a      	ldrb	r2, [r3, #0]
 8003ed2:	4b66      	ldr	r3, [pc, #408]	@ (800406c <main+0x798>)
 8003ed4:	0092      	lsls	r2, r2, #2
 8003ed6:	58d4      	ldr	r4, [r2, r3]
 8003ed8:	19bb      	adds	r3, r7, r6
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7fd f9a3 	bl	8001228 <__aeabi_i2f>
 8003ee2:	1c03      	adds	r3, r0, #0
 8003ee4:	1c19      	adds	r1, r3, #0
 8003ee6:	1c20      	adds	r0, r4, #0
 8003ee8:	f7fc faec 	bl	80004c4 <__aeabi_fcmplt>
 8003eec:	1e03      	subs	r3, r0, #0
 8003eee:	d006      	beq.n	8003efe <main+0x62a>
				triac_on_time = 16;
 8003ef0:	4b61      	ldr	r3, [pc, #388]	@ (8004078 <main+0x7a4>)
 8003ef2:	2210      	movs	r2, #16
 8003ef4:	801a      	strh	r2, [r3, #0]
				triac_cutoff_flag = 0;
 8003ef6:	4b64      	ldr	r3, [pc, #400]	@ (8004088 <main+0x7b4>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	e005      	b.n	8003f0a <main+0x636>
			}
			else {
				triac_on_time = 0;
 8003efe:	4b5e      	ldr	r3, [pc, #376]	@ (8004078 <main+0x7a4>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	801a      	strh	r2, [r3, #0]
				triac_cutoff_flag = 0;
 8003f04:	4b60      	ldr	r3, [pc, #384]	@ (8004088 <main+0x7b4>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	uint32_t kwh = adc_arr[0] * adc_arr[1] * hr;
 8003f0a:	4b61      	ldr	r3, [pc, #388]	@ (8004090 <main+0x7bc>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b60      	ldr	r3, [pc, #384]	@ (8004090 <main+0x7bc>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	1c19      	adds	r1, r3, #0
 8003f14:	1c10      	adds	r0, r2, #0
 8003f16:	f7fc fe85 	bl	8000c24 <__aeabi_fmul>
 8003f1a:	1c03      	adds	r3, r0, #0
 8003f1c:	1c1c      	adds	r4, r3, #0
 8003f1e:	4b5d      	ldr	r3, [pc, #372]	@ (8004094 <main+0x7c0>)
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	0018      	movs	r0, r3
 8003f24:	f7fd f980 	bl	8001228 <__aeabi_i2f>
 8003f28:	1c03      	adds	r3, r0, #0
 8003f2a:	1c19      	adds	r1, r3, #0
 8003f2c:	1c20      	adds	r0, r4, #0
 8003f2e:	f7fc fe79 	bl	8000c24 <__aeabi_fmul>
 8003f32:	1c03      	adds	r3, r0, #0
 8003f34:	1c18      	adds	r0, r3, #0
 8003f36:	f7fc faed 	bl	8000514 <__aeabi_f2uiz>
 8003f3a:	0003      	movs	r3, r0
 8003f3c:	2288      	movs	r2, #136	@ 0x88
 8003f3e:	0052      	lsls	r2, r2, #1
 8003f40:	18ba      	adds	r2, r7, r2
 8003f42:	6013      	str	r3, [r2, #0]

	if(menu_mode == MENU_PROG) {
 8003f44:	2336      	movs	r3, #54	@ 0x36
 8003f46:	33ff      	adds	r3, #255	@ 0xff
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d000      	beq.n	8003f52 <main+0x67e>
 8003f50:	e1be      	b.n	80042d0 <main+0x9fc>
		if(prev_mode != MENU_PROG) {
 8003f52:	249a      	movs	r4, #154	@ 0x9a
 8003f54:	0064      	lsls	r4, r4, #1
 8003f56:	193b      	adds	r3, r7, r4
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d005      	beq.n	8003f6a <main+0x696>
			I2C_LCD_Clear(LCD1);
 8003f5e:	2000      	movs	r0, #0
 8003f60:	f006 fd1e 	bl	800a9a0 <I2C_LCD_Clear>
			prev_mode = MENU_PROG;
 8003f64:	193b      	adds	r3, r7, r4
 8003f66:	2203      	movs	r2, #3
 8003f68:	701a      	strb	r2, [r3, #0]
		}
		if(idx != prev_idx) {
 8003f6a:	2130      	movs	r1, #48	@ 0x30
 8003f6c:	31ff      	adds	r1, #255	@ 0xff
 8003f6e:	187a      	adds	r2, r7, r1
 8003f70:	2334      	movs	r3, #52	@ 0x34
 8003f72:	33ff      	adds	r3, #255	@ 0xff
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	7812      	ldrb	r2, [r2, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d100      	bne.n	8003f80 <main+0x6ac>
 8003f7e:	e0e4      	b.n	800414a <main+0x876>
			switch(idx) {
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d100      	bne.n	8003f8a <main+0x6b6>
 8003f88:	e0c2      	b.n	8004110 <main+0x83c>
 8003f8a:	dd00      	ble.n	8003f8e <main+0x6ba>
 8003f8c:	e0dd      	b.n	800414a <main+0x876>
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d100      	bne.n	8003f94 <main+0x6c0>
 8003f92:	e08b      	b.n	80040ac <main+0x7d8>
 8003f94:	dd00      	ble.n	8003f98 <main+0x6c4>
 8003f96:	e0d8      	b.n	800414a <main+0x876>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <main+0x6ce>
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d032      	beq.n	8004006 <main+0x732>
 8003fa0:	e0d3      	b.n	800414a <main+0x876>
			case 0:
				I2C_LCD_SetCursor(LCD1, 0, 0);
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	f006 fd3e 	bl	800aa28 <I2C_LCD_SetCursor>
				I2C_LCD_WriteString(LCD1, "Mode 1");
 8003fac:	4b3a      	ldr	r3, [pc, #232]	@ (8004098 <main+0x7c4>)
 8003fae:	0019      	movs	r1, r3
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f006 fd89 	bl	800aac8 <I2C_LCD_WriteString>
				I2C_LCD_SetCursor(LCD1, 0, 1);
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	2100      	movs	r1, #0
 8003fba:	2000      	movs	r0, #0
 8003fbc:	f006 fd34 	bl	800aa28 <I2C_LCD_SetCursor>
				sprintf(temp_str, "%d %s    ", set_points[0], set_flag ? "<" : "");
 8003fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800407c <main+0x7a8>)
 8003fc2:	229c      	movs	r2, #156	@ 0x9c
 8003fc4:	0052      	lsls	r2, r2, #1
 8003fc6:	189b      	adds	r3, r3, r2
 8003fc8:	19db      	adds	r3, r3, r7
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	001a      	movs	r2, r3
 8003fce:	2332      	movs	r3, #50	@ 0x32
 8003fd0:	33ff      	adds	r3, #255	@ 0xff
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <main+0x70a>
 8003fda:	4b30      	ldr	r3, [pc, #192]	@ (800409c <main+0x7c8>)
 8003fdc:	e000      	b.n	8003fe0 <main+0x70c>
 8003fde:	4b30      	ldr	r3, [pc, #192]	@ (80040a0 <main+0x7cc>)
 8003fe0:	4930      	ldr	r1, [pc, #192]	@ (80040a4 <main+0x7d0>)
 8003fe2:	24fc      	movs	r4, #252	@ 0xfc
 8003fe4:	1938      	adds	r0, r7, r4
 8003fe6:	f007 fab1 	bl	800b54c <siprintf>
				I2C_LCD_WriteString(LCD1, temp_str);
 8003fea:	193b      	adds	r3, r7, r4
 8003fec:	0019      	movs	r1, r3
 8003fee:	2000      	movs	r0, #0
 8003ff0:	f006 fd6a 	bl	800aac8 <I2C_LCD_WriteString>
				prev_idx = idx;
 8003ff4:	2334      	movs	r3, #52	@ 0x34
 8003ff6:	33ff      	adds	r3, #255	@ 0xff
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	2230      	movs	r2, #48	@ 0x30
 8003ffc:	32ff      	adds	r2, #255	@ 0xff
 8003ffe:	18ba      	adds	r2, r7, r2
 8004000:	7812      	ldrb	r2, [r2, #0]
 8004002:	701a      	strb	r2, [r3, #0]
				break;
 8004004:	e0a1      	b.n	800414a <main+0x876>
			case 1:
				I2C_LCD_SetCursor(LCD1, 0, 0);
 8004006:	2200      	movs	r2, #0
 8004008:	2100      	movs	r1, #0
 800400a:	2000      	movs	r0, #0
 800400c:	f006 fd0c 	bl	800aa28 <I2C_LCD_SetCursor>
				I2C_LCD_WriteString(LCD1, "Mode 2");
 8004010:	4b25      	ldr	r3, [pc, #148]	@ (80040a8 <main+0x7d4>)
 8004012:	0019      	movs	r1, r3
 8004014:	2000      	movs	r0, #0
 8004016:	f006 fd57 	bl	800aac8 <I2C_LCD_WriteString>
				I2C_LCD_SetCursor(LCD1, 0, 1);
 800401a:	2201      	movs	r2, #1
 800401c:	2100      	movs	r1, #0
 800401e:	2000      	movs	r0, #0
 8004020:	f006 fd02 	bl	800aa28 <I2C_LCD_SetCursor>
				sprintf(temp_str, "%d %s    ", set_points[1], set_flag ? "<" : "");
 8004024:	4b15      	ldr	r3, [pc, #84]	@ (800407c <main+0x7a8>)
 8004026:	229c      	movs	r2, #156	@ 0x9c
 8004028:	0052      	lsls	r2, r2, #1
 800402a:	189b      	adds	r3, r3, r2
 800402c:	19db      	adds	r3, r3, r7
 800402e:	885b      	ldrh	r3, [r3, #2]
 8004030:	001a      	movs	r2, r3
 8004032:	2332      	movs	r3, #50	@ 0x32
 8004034:	33ff      	adds	r3, #255	@ 0xff
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <main+0x76e>
 800403e:	4b17      	ldr	r3, [pc, #92]	@ (800409c <main+0x7c8>)
 8004040:	e000      	b.n	8004044 <main+0x770>
 8004042:	4b17      	ldr	r3, [pc, #92]	@ (80040a0 <main+0x7cc>)
 8004044:	4917      	ldr	r1, [pc, #92]	@ (80040a4 <main+0x7d0>)
 8004046:	24fc      	movs	r4, #252	@ 0xfc
 8004048:	1938      	adds	r0, r7, r4
 800404a:	f007 fa7f 	bl	800b54c <siprintf>
				I2C_LCD_WriteString(LCD1, temp_str);
 800404e:	193b      	adds	r3, r7, r4
 8004050:	0019      	movs	r1, r3
 8004052:	2000      	movs	r0, #0
 8004054:	f006 fd38 	bl	800aac8 <I2C_LCD_WriteString>
				prev_idx = idx;
 8004058:	2334      	movs	r3, #52	@ 0x34
 800405a:	33ff      	adds	r3, #255	@ 0xff
 800405c:	18fb      	adds	r3, r7, r3
 800405e:	2230      	movs	r2, #48	@ 0x30
 8004060:	32ff      	adds	r2, #255	@ 0xff
 8004062:	18ba      	adds	r2, r7, r2
 8004064:	7812      	ldrb	r2, [r2, #0]
 8004066:	701a      	strb	r2, [r3, #0]
				break;
 8004068:	e06f      	b.n	800414a <main+0x876>
 800406a:	46c0      	nop			@ (mov r8, r8)
 800406c:	200004ec 	.word	0x200004ec
 8004070:	c2c60000 	.word	0xc2c60000
 8004074:	200004cb 	.word	0x200004cb
 8004078:	200004c8 	.word	0x200004c8
 800407c:	fffffed8 	.word	0xfffffed8
 8004080:	200004c5 	.word	0x200004c5
 8004084:	200004c7 	.word	0x200004c7
 8004088:	200004c4 	.word	0x200004c4
 800408c:	200004c6 	.word	0x200004c6
 8004090:	200004ac 	.word	0x200004ac
 8004094:	200004e8 	.word	0x200004e8
 8004098:	0800d974 	.word	0x0800d974
 800409c:	0800d97c 	.word	0x0800d97c
 80040a0:	0800d980 	.word	0x0800d980
 80040a4:	0800d984 	.word	0x0800d984
 80040a8:	0800d990 	.word	0x0800d990
			case 2:
				I2C_LCD_SetCursor(LCD1, 0, 0);
 80040ac:	2200      	movs	r2, #0
 80040ae:	2100      	movs	r1, #0
 80040b0:	2000      	movs	r0, #0
 80040b2:	f006 fcb9 	bl	800aa28 <I2C_LCD_SetCursor>
				I2C_LCD_WriteString(LCD1, "Mode 3");
 80040b6:	4bc7      	ldr	r3, [pc, #796]	@ (80043d4 <main+0xb00>)
 80040b8:	0019      	movs	r1, r3
 80040ba:	2000      	movs	r0, #0
 80040bc:	f006 fd04 	bl	800aac8 <I2C_LCD_WriteString>
				I2C_LCD_SetCursor(LCD1, 0, 1);
 80040c0:	2201      	movs	r2, #1
 80040c2:	2100      	movs	r1, #0
 80040c4:	2000      	movs	r0, #0
 80040c6:	f006 fcaf 	bl	800aa28 <I2C_LCD_SetCursor>
				sprintf(temp_str, "%d %s    ", set_points[2], set_flag ? "<" : "");
 80040ca:	4bc3      	ldr	r3, [pc, #780]	@ (80043d8 <main+0xb04>)
 80040cc:	229c      	movs	r2, #156	@ 0x9c
 80040ce:	0052      	lsls	r2, r2, #1
 80040d0:	189b      	adds	r3, r3, r2
 80040d2:	19db      	adds	r3, r3, r7
 80040d4:	889b      	ldrh	r3, [r3, #4]
 80040d6:	001a      	movs	r2, r3
 80040d8:	2332      	movs	r3, #50	@ 0x32
 80040da:	33ff      	adds	r3, #255	@ 0xff
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <main+0x814>
 80040e4:	4bbd      	ldr	r3, [pc, #756]	@ (80043dc <main+0xb08>)
 80040e6:	e000      	b.n	80040ea <main+0x816>
 80040e8:	4bbd      	ldr	r3, [pc, #756]	@ (80043e0 <main+0xb0c>)
 80040ea:	49be      	ldr	r1, [pc, #760]	@ (80043e4 <main+0xb10>)
 80040ec:	24fc      	movs	r4, #252	@ 0xfc
 80040ee:	1938      	adds	r0, r7, r4
 80040f0:	f007 fa2c 	bl	800b54c <siprintf>
				I2C_LCD_WriteString(LCD1, temp_str);
 80040f4:	193b      	adds	r3, r7, r4
 80040f6:	0019      	movs	r1, r3
 80040f8:	2000      	movs	r0, #0
 80040fa:	f006 fce5 	bl	800aac8 <I2C_LCD_WriteString>
				prev_idx = idx;
 80040fe:	2334      	movs	r3, #52	@ 0x34
 8004100:	33ff      	adds	r3, #255	@ 0xff
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	2230      	movs	r2, #48	@ 0x30
 8004106:	32ff      	adds	r2, #255	@ 0xff
 8004108:	18ba      	adds	r2, r7, r2
 800410a:	7812      	ldrb	r2, [r2, #0]
 800410c:	701a      	strb	r2, [r3, #0]
				break;
 800410e:	e01c      	b.n	800414a <main+0x876>
			case 3:
				I2C_LCD_SetCursor(LCD1, 0, 0);
 8004110:	2200      	movs	r2, #0
 8004112:	2100      	movs	r1, #0
 8004114:	2000      	movs	r0, #0
 8004116:	f006 fc87 	bl	800aa28 <I2C_LCD_SetCursor>
				I2C_LCD_WriteString(LCD1, "Save &");
 800411a:	4bb3      	ldr	r3, [pc, #716]	@ (80043e8 <main+0xb14>)
 800411c:	0019      	movs	r1, r3
 800411e:	2000      	movs	r0, #0
 8004120:	f006 fcd2 	bl	800aac8 <I2C_LCD_WriteString>
				I2C_LCD_SetCursor(LCD1, 0, 1);
 8004124:	2201      	movs	r2, #1
 8004126:	2100      	movs	r1, #0
 8004128:	2000      	movs	r0, #0
 800412a:	f006 fc7d 	bl	800aa28 <I2C_LCD_SetCursor>
				I2C_LCD_WriteString(LCD1, "Exit          ");
 800412e:	4baf      	ldr	r3, [pc, #700]	@ (80043ec <main+0xb18>)
 8004130:	0019      	movs	r1, r3
 8004132:	2000      	movs	r0, #0
 8004134:	f006 fcc8 	bl	800aac8 <I2C_LCD_WriteString>
				prev_idx = idx;
 8004138:	2334      	movs	r3, #52	@ 0x34
 800413a:	33ff      	adds	r3, #255	@ 0xff
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	2230      	movs	r2, #48	@ 0x30
 8004140:	32ff      	adds	r2, #255	@ 0xff
 8004142:	18ba      	adds	r2, r7, r2
 8004144:	7812      	ldrb	r2, [r2, #0]
 8004146:	701a      	strb	r2, [r3, #0]
				break;
 8004148:	46c0      	nop			@ (mov r8, r8)
			}
		}
		if(set_flag == 0) {
 800414a:	2332      	movs	r3, #50	@ 0x32
 800414c:	33ff      	adds	r3, #255	@ 0xff
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d14c      	bne.n	80041f0 <main+0x91c>
			if(btn1_read(0)) {
 8004156:	2000      	movs	r0, #0
 8004158:	f7ff f9d2 	bl	8003500 <btn1_read>
 800415c:	1e03      	subs	r3, r0, #0
 800415e:	d01b      	beq.n	8004198 <main+0x8c4>
				if(idx == 3) {
 8004160:	2430      	movs	r4, #48	@ 0x30
 8004162:	34ff      	adds	r4, #255	@ 0xff
 8004164:	193b      	adds	r3, r7, r4
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b03      	cmp	r3, #3
 800416a:	d10b      	bne.n	8004184 <main+0x8b0>
					menu_mode = MENU_OP;
 800416c:	2336      	movs	r3, #54	@ 0x36
 800416e:	33ff      	adds	r3, #255	@ 0xff
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	2201      	movs	r2, #1
 8004174:	701a      	strb	r2, [r3, #0]
					I2C_LCD_Clear(LCD1);
 8004176:	2000      	movs	r0, #0
 8004178:	f006 fc12 	bl	800a9a0 <I2C_LCD_Clear>
					idx = 0;
 800417c:	193b      	adds	r3, r7, r4
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e009      	b.n	8004198 <main+0x8c4>
				}
				else {
					set_flag = 1;
 8004184:	2332      	movs	r3, #50	@ 0x32
 8004186:	33ff      	adds	r3, #255	@ 0xff
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	2201      	movs	r2, #1
 800418c:	701a      	strb	r2, [r3, #0]
					prev_idx = 99;
 800418e:	2334      	movs	r3, #52	@ 0x34
 8004190:	33ff      	adds	r3, #255	@ 0xff
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	2263      	movs	r2, #99	@ 0x63
 8004196:	701a      	strb	r2, [r3, #0]
				}
			}
			if(btn2_read()) {
 8004198:	f7ff f9ea 	bl	8003570 <btn2_read>
 800419c:	1e03      	subs	r3, r0, #0
 800419e:	d010      	beq.n	80041c2 <main+0x8ee>
				idx = idx >= 3 ? 0 : idx + 1;
 80041a0:	2230      	movs	r2, #48	@ 0x30
 80041a2:	32ff      	adds	r2, #255	@ 0xff
 80041a4:	18bb      	adds	r3, r7, r2
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d804      	bhi.n	80041b6 <main+0x8e2>
 80041ac:	18bb      	adds	r3, r7, r2
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	3301      	adds	r3, #1
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	e000      	b.n	80041b8 <main+0x8e4>
 80041b6:	2200      	movs	r2, #0
 80041b8:	2330      	movs	r3, #48	@ 0x30
 80041ba:	33ff      	adds	r3, #255	@ 0xff
 80041bc:	18fb      	adds	r3, r7, r3
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	e086      	b.n	80042d0 <main+0x9fc>
			}
			else if(btn3_read(0)) {
 80041c2:	2000      	movs	r0, #0
 80041c4:	f7ff fa00 	bl	80035c8 <btn3_read>
 80041c8:	1e03      	subs	r3, r0, #0
 80041ca:	d100      	bne.n	80041ce <main+0x8fa>
 80041cc:	e080      	b.n	80042d0 <main+0x9fc>
				idx = idx == 0 ? 3 : idx - 1;
 80041ce:	2230      	movs	r2, #48	@ 0x30
 80041d0:	32ff      	adds	r2, #255	@ 0xff
 80041d2:	18bb      	adds	r3, r7, r2
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <main+0x910>
 80041da:	18bb      	adds	r3, r7, r2
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	3b01      	subs	r3, #1
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	e000      	b.n	80041e6 <main+0x912>
 80041e4:	2203      	movs	r2, #3
 80041e6:	2330      	movs	r3, #48	@ 0x30
 80041e8:	33ff      	adds	r3, #255	@ 0xff
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e06f      	b.n	80042d0 <main+0x9fc>
			}
		}
		else if(set_flag == 1) {
 80041f0:	2432      	movs	r4, #50	@ 0x32
 80041f2:	34ff      	adds	r4, #255	@ 0xff
 80041f4:	193b      	adds	r3, r7, r4
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d169      	bne.n	80042d0 <main+0x9fc>
			if(btn1_read(0)) {
 80041fc:	2000      	movs	r0, #0
 80041fe:	f7ff f97f 	bl	8003500 <btn1_read>
 8004202:	1e03      	subs	r3, r0, #0
 8004204:	d007      	beq.n	8004216 <main+0x942>
				set_flag = 0;
 8004206:	193b      	adds	r3, r7, r4
 8004208:	2200      	movs	r2, #0
 800420a:	701a      	strb	r2, [r3, #0]
				prev_idx = 99;
 800420c:	2334      	movs	r3, #52	@ 0x34
 800420e:	33ff      	adds	r3, #255	@ 0xff
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	2263      	movs	r2, #99	@ 0x63
 8004214:	701a      	strb	r2, [r3, #0]
			}
			if(btn2_read()) {
 8004216:	f7ff f9ab 	bl	8003570 <btn2_read>
 800421a:	1e03      	subs	r3, r0, #0
 800421c:	d02a      	beq.n	8004274 <main+0x9a0>
				set_points[idx] = set_points[idx] > 700 ? 0 : set_points[idx] + 1;
 800421e:	2130      	movs	r1, #48	@ 0x30
 8004220:	31ff      	adds	r1, #255	@ 0xff
 8004222:	187b      	adds	r3, r7, r1
 8004224:	781a      	ldrb	r2, [r3, #0]
 8004226:	4b6c      	ldr	r3, [pc, #432]	@ (80043d8 <main+0xb04>)
 8004228:	209c      	movs	r0, #156	@ 0x9c
 800422a:	0040      	lsls	r0, r0, #1
 800422c:	181b      	adds	r3, r3, r0
 800422e:	19db      	adds	r3, r3, r7
 8004230:	0052      	lsls	r2, r2, #1
 8004232:	5ad2      	ldrh	r2, [r2, r3]
 8004234:	23af      	movs	r3, #175	@ 0xaf
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	429a      	cmp	r2, r3
 800423a:	d809      	bhi.n	8004250 <main+0x97c>
 800423c:	187b      	adds	r3, r7, r1
 800423e:	781a      	ldrb	r2, [r3, #0]
 8004240:	4b65      	ldr	r3, [pc, #404]	@ (80043d8 <main+0xb04>)
 8004242:	181b      	adds	r3, r3, r0
 8004244:	19db      	adds	r3, r3, r7
 8004246:	0052      	lsls	r2, r2, #1
 8004248:	5ad3      	ldrh	r3, [r2, r3]
 800424a:	3301      	adds	r3, #1
 800424c:	b299      	uxth	r1, r3
 800424e:	e000      	b.n	8004252 <main+0x97e>
 8004250:	2100      	movs	r1, #0
 8004252:	2330      	movs	r3, #48	@ 0x30
 8004254:	33ff      	adds	r3, #255	@ 0xff
 8004256:	18fb      	adds	r3, r7, r3
 8004258:	781a      	ldrb	r2, [r3, #0]
 800425a:	4b5f      	ldr	r3, [pc, #380]	@ (80043d8 <main+0xb04>)
 800425c:	209c      	movs	r0, #156	@ 0x9c
 800425e:	0040      	lsls	r0, r0, #1
 8004260:	181b      	adds	r3, r3, r0
 8004262:	19db      	adds	r3, r3, r7
 8004264:	0052      	lsls	r2, r2, #1
 8004266:	52d1      	strh	r1, [r2, r3]
				prev_idx = 99;
 8004268:	2334      	movs	r3, #52	@ 0x34
 800426a:	33ff      	adds	r3, #255	@ 0xff
 800426c:	18fb      	adds	r3, r7, r3
 800426e:	2263      	movs	r2, #99	@ 0x63
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	e02d      	b.n	80042d0 <main+0x9fc>
			}
			else if(btn3_read(0)) {
 8004274:	2000      	movs	r0, #0
 8004276:	f7ff f9a7 	bl	80035c8 <btn3_read>
 800427a:	1e03      	subs	r3, r0, #0
 800427c:	d028      	beq.n	80042d0 <main+0x9fc>
				set_points[idx] = set_points[idx] <= 0 ? 700 : set_points[idx] - 1;
 800427e:	2130      	movs	r1, #48	@ 0x30
 8004280:	31ff      	adds	r1, #255	@ 0xff
 8004282:	187b      	adds	r3, r7, r1
 8004284:	781a      	ldrb	r2, [r3, #0]
 8004286:	4b54      	ldr	r3, [pc, #336]	@ (80043d8 <main+0xb04>)
 8004288:	209c      	movs	r0, #156	@ 0x9c
 800428a:	0040      	lsls	r0, r0, #1
 800428c:	181b      	adds	r3, r3, r0
 800428e:	19db      	adds	r3, r3, r7
 8004290:	0052      	lsls	r2, r2, #1
 8004292:	5ad3      	ldrh	r3, [r2, r3]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d009      	beq.n	80042ac <main+0x9d8>
 8004298:	187b      	adds	r3, r7, r1
 800429a:	781a      	ldrb	r2, [r3, #0]
 800429c:	4b4e      	ldr	r3, [pc, #312]	@ (80043d8 <main+0xb04>)
 800429e:	181b      	adds	r3, r3, r0
 80042a0:	19db      	adds	r3, r3, r7
 80042a2:	0052      	lsls	r2, r2, #1
 80042a4:	5ad3      	ldrh	r3, [r2, r3]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	e001      	b.n	80042b0 <main+0x9dc>
 80042ac:	23af      	movs	r3, #175	@ 0xaf
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	2230      	movs	r2, #48	@ 0x30
 80042b2:	32ff      	adds	r2, #255	@ 0xff
 80042b4:	18ba      	adds	r2, r7, r2
 80042b6:	7811      	ldrb	r1, [r2, #0]
 80042b8:	4a47      	ldr	r2, [pc, #284]	@ (80043d8 <main+0xb04>)
 80042ba:	209c      	movs	r0, #156	@ 0x9c
 80042bc:	0040      	lsls	r0, r0, #1
 80042be:	1812      	adds	r2, r2, r0
 80042c0:	19d2      	adds	r2, r2, r7
 80042c2:	0049      	lsls	r1, r1, #1
 80042c4:	528b      	strh	r3, [r1, r2]
				prev_idx = 99;
 80042c6:	2334      	movs	r3, #52	@ 0x34
 80042c8:	33ff      	adds	r3, #255	@ 0xff
 80042ca:	18fb      	adds	r3, r7, r3
 80042cc:	2263      	movs	r2, #99	@ 0x63
 80042ce:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (menu_mode == MENU_OP) {
 80042d0:	2336      	movs	r3, #54	@ 0x36
 80042d2:	33ff      	adds	r3, #255	@ 0xff
 80042d4:	18fb      	adds	r3, r7, r3
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d158      	bne.n	800438e <main+0xaba>
		btn2_stat = btn2_read();
 80042dc:	f7ff f948 	bl	8003570 <btn2_read>
 80042e0:	0003      	movs	r3, r0
 80042e2:	001a      	movs	r2, r3
 80042e4:	4b42      	ldr	r3, [pc, #264]	@ (80043f0 <main+0xb1c>)
 80042e6:	701a      	strb	r2, [r3, #0]
		if(btn2_stat) {
 80042e8:	4b41      	ldr	r3, [pc, #260]	@ (80043f0 <main+0xb1c>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00f      	beq.n	8004310 <main+0xa3c>
			mode = mode >= 3 ? 0 : mode + 1;
 80042f0:	2298      	movs	r2, #152	@ 0x98
 80042f2:	0052      	lsls	r2, r2, #1
 80042f4:	18bb      	adds	r3, r7, r2
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d804      	bhi.n	8004306 <main+0xa32>
 80042fc:	18bb      	adds	r3, r7, r2
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	b2da      	uxtb	r2, r3
 8004304:	e000      	b.n	8004308 <main+0xa34>
 8004306:	2200      	movs	r2, #0
 8004308:	2398      	movs	r3, #152	@ 0x98
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	701a      	strb	r2, [r3, #0]
//			upload_flag = 0;
		}
		btn1_stat = btn1_read(1); /* TODO Print mode on LCD */
 8004310:	2001      	movs	r0, #1
 8004312:	f7ff f8f5 	bl	8003500 <btn1_read>
 8004316:	0003      	movs	r3, r0
 8004318:	001a      	movs	r2, r3
 800431a:	4b36      	ldr	r3, [pc, #216]	@ (80043f4 <main+0xb20>)
 800431c:	701a      	strb	r2, [r3, #0]
		if(btn1_stat) {
 800431e:	4b35      	ldr	r3, [pc, #212]	@ (80043f4 <main+0xb20>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <main+0xa66>
			menu_mode = MENU_PROG;
 8004326:	2336      	movs	r3, #54	@ 0x36
 8004328:	33ff      	adds	r3, #255	@ 0xff
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	2203      	movs	r2, #3
 800432e:	701a      	strb	r2, [r3, #0]
			prev_idx = 1;
 8004330:	2334      	movs	r3, #52	@ 0x34
 8004332:	33ff      	adds	r3, #255	@ 0xff
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	2201      	movs	r2, #1
 8004338:	701a      	strb	r2, [r3, #0]
		}
		if(btn3_read(1)) {
 800433a:	2001      	movs	r0, #1
 800433c:	f7ff f944 	bl	80035c8 <btn3_read>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d004      	beq.n	800434e <main+0xa7a>
			menu_mode = MENU_DISP;
 8004344:	2336      	movs	r3, #54	@ 0x36
 8004346:	33ff      	adds	r3, #255	@ 0xff
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	2202      	movs	r2, #2
 800434c:	701a      	strb	r2, [r3, #0]
		}
		if(prev_mode != MENU_OP) {
 800434e:	249a      	movs	r4, #154	@ 0x9a
 8004350:	0064      	lsls	r4, r4, #1
 8004352:	193b      	adds	r3, r7, r4
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d019      	beq.n	800438e <main+0xaba>
			I2C_LCD_Clear(LCD1);
 800435a:	2000      	movs	r0, #0
 800435c:	f006 fb20 	bl	800a9a0 <I2C_LCD_Clear>
			I2C_LCD_SetCursor(LCD1, 0, 0);
 8004360:	2200      	movs	r2, #0
 8004362:	2100      	movs	r1, #0
 8004364:	2000      	movs	r0, #0
 8004366:	f006 fb5f 	bl	800aa28 <I2C_LCD_SetCursor>
			I2C_LCD_WriteString(LCD1, "Mode: ");
 800436a:	4b23      	ldr	r3, [pc, #140]	@ (80043f8 <main+0xb24>)
 800436c:	0019      	movs	r1, r3
 800436e:	2000      	movs	r0, #0
 8004370:	f006 fbaa 	bl	800aac8 <I2C_LCD_WriteString>
			I2C_LCD_SetCursor(LCD1, 0, 1);
 8004374:	2201      	movs	r2, #1
 8004376:	2100      	movs	r1, #0
 8004378:	2000      	movs	r0, #0
 800437a:	f006 fb55 	bl	800aa28 <I2C_LCD_SetCursor>
			I2C_LCD_WriteString(LCD1, "Temp: ");
 800437e:	4b1f      	ldr	r3, [pc, #124]	@ (80043fc <main+0xb28>)
 8004380:	0019      	movs	r1, r3
 8004382:	2000      	movs	r0, #0
 8004384:	f006 fba0 	bl	800aac8 <I2C_LCD_WriteString>
			prev_mode = MENU_OP;
 8004388:	193b      	adds	r3, r7, r4
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
		}
	}
	if(menu_mode == MENU_DISP) {
 800438e:	2436      	movs	r4, #54	@ 0x36
 8004390:	34ff      	adds	r4, #255	@ 0xff
 8004392:	193b      	adds	r3, r7, r4
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b02      	cmp	r3, #2
 8004398:	d107      	bne.n	80043aa <main+0xad6>
		if(btn3_read(1)) {
 800439a:	2001      	movs	r0, #1
 800439c:	f7ff f914 	bl	80035c8 <btn3_read>
 80043a0:	1e03      	subs	r3, r0, #0
 80043a2:	d002      	beq.n	80043aa <main+0xad6>
			menu_mode = MENU_OP;
 80043a4:	193b      	adds	r3, r7, r4
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]
		}
	}

	/* MODEM upload */
	if(min % 2 == 0 && min != 0) {
 80043aa:	4b15      	ldr	r3, [pc, #84]	@ (8004400 <main+0xb2c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2201      	movs	r2, #1
 80043b0:	4013      	ands	r3, r2
 80043b2:	d127      	bne.n	8004404 <main+0xb30>
 80043b4:	4b12      	ldr	r3, [pc, #72]	@ (8004400 <main+0xb2c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d023      	beq.n	8004404 <main+0xb30>
		if(upload_flag == 0) { /* upload every 2 mins */
 80043bc:	2338      	movs	r3, #56	@ 0x38
 80043be:	33ff      	adds	r3, #255	@ 0xff
 80043c0:	18fb      	adds	r3, r7, r3
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d122      	bne.n	800440e <main+0xb3a>
			upload_pending_flag = 1;
 80043c8:	2397      	movs	r3, #151	@ 0x97
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]
		if(upload_flag == 0) { /* upload every 2 mins */
 80043d2:	e01c      	b.n	800440e <main+0xb3a>
 80043d4:	0800d998 	.word	0x0800d998
 80043d8:	fffffed8 	.word	0xfffffed8
 80043dc:	0800d97c 	.word	0x0800d97c
 80043e0:	0800d980 	.word	0x0800d980
 80043e4:	0800d984 	.word	0x0800d984
 80043e8:	0800d9a0 	.word	0x0800d9a0
 80043ec:	0800d9a8 	.word	0x0800d9a8
 80043f0:	200004d7 	.word	0x200004d7
 80043f4:	200004d6 	.word	0x200004d6
 80043f8:	0800d9b8 	.word	0x0800d9b8
 80043fc:	0800d9c0 	.word	0x0800d9c0
 8004400:	200004e4 	.word	0x200004e4
		}
	}
	else upload_flag = 0;
 8004404:	2338      	movs	r3, #56	@ 0x38
 8004406:	33ff      	adds	r3, #255	@ 0xff
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
	if(menu_mode == MENU_OP && upload_pending_flag) {
 800440e:	2336      	movs	r3, #54	@ 0x36
 8004410:	33ff      	adds	r3, #255	@ 0xff
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d000      	beq.n	800441c <main+0xb48>
 800441a:	e091      	b.n	8004540 <main+0xc6c>
 800441c:	2697      	movs	r6, #151	@ 0x97
 800441e:	0076      	lsls	r6, r6, #1
 8004420:	19bb      	adds	r3, r7, r6
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d100      	bne.n	800442a <main+0xb56>
 8004428:	e08a      	b.n	8004540 <main+0xc6c>
		uint8_t res = 0;
 800442a:	2510      	movs	r5, #16
 800442c:	35ff      	adds	r5, #255	@ 0xff
 800442e:	197b      	adds	r3, r7, r5
 8004430:	2200      	movs	r2, #0
 8004432:	701a      	strb	r2, [r3, #0]
		res = modem_cmd("AT+NETCLOSE","OK",1000);
 8004434:	197c      	adds	r4, r7, r5
 8004436:	23fa      	movs	r3, #250	@ 0xfa
 8004438:	009a      	lsls	r2, r3, #2
 800443a:	49ca      	ldr	r1, [pc, #808]	@ (8004764 <main+0xe90>)
 800443c:	4bca      	ldr	r3, [pc, #808]	@ (8004768 <main+0xe94>)
 800443e:	0018      	movs	r0, r3
 8004440:	f7ff f9e4 	bl	800380c <modem_cmd>
 8004444:	0003      	movs	r3, r0
 8004446:	7023      	strb	r3, [r4, #0]
		res = modem_cmd("AT+CIPMODE=0","OK",1000);
 8004448:	197c      	adds	r4, r7, r5
 800444a:	23fa      	movs	r3, #250	@ 0xfa
 800444c:	009a      	lsls	r2, r3, #2
 800444e:	49c5      	ldr	r1, [pc, #788]	@ (8004764 <main+0xe90>)
 8004450:	4bc6      	ldr	r3, [pc, #792]	@ (800476c <main+0xe98>)
 8004452:	0018      	movs	r0, r3
 8004454:	f7ff f9da 	bl	800380c <modem_cmd>
 8004458:	0003      	movs	r3, r0
 800445a:	7023      	strb	r3, [r4, #0]
		res = modem_cmd("AT+NETOPEN","OK",1000);
 800445c:	197c      	adds	r4, r7, r5
 800445e:	23fa      	movs	r3, #250	@ 0xfa
 8004460:	009a      	lsls	r2, r3, #2
 8004462:	49c0      	ldr	r1, [pc, #768]	@ (8004764 <main+0xe90>)
 8004464:	4bc2      	ldr	r3, [pc, #776]	@ (8004770 <main+0xe9c>)
 8004466:	0018      	movs	r0, r3
 8004468:	f7ff f9d0 	bl	800380c <modem_cmd>
 800446c:	0003      	movs	r3, r0
 800446e:	7023      	strb	r3, [r4, #0]
		res = modem_cmd("AT+CSTT=\"Vi LTE\"", "OK", 1000);
 8004470:	197c      	adds	r4, r7, r5
 8004472:	23fa      	movs	r3, #250	@ 0xfa
 8004474:	009a      	lsls	r2, r3, #2
 8004476:	49bb      	ldr	r1, [pc, #748]	@ (8004764 <main+0xe90>)
 8004478:	4bbe      	ldr	r3, [pc, #760]	@ (8004774 <main+0xea0>)
 800447a:	0018      	movs	r0, r3
 800447c:	f7ff f9c6 	bl	800380c <modem_cmd>
 8004480:	0003      	movs	r3, r0
 8004482:	7023      	strb	r3, [r4, #0]
		res = modem_cmd("AT+CGATT=1","OK",1000);
 8004484:	197c      	adds	r4, r7, r5
 8004486:	23fa      	movs	r3, #250	@ 0xfa
 8004488:	009a      	lsls	r2, r3, #2
 800448a:	49b6      	ldr	r1, [pc, #728]	@ (8004764 <main+0xe90>)
 800448c:	4bba      	ldr	r3, [pc, #744]	@ (8004778 <main+0xea4>)
 800448e:	0018      	movs	r0, r3
 8004490:	f7ff f9bc 	bl	800380c <modem_cmd>
 8004494:	0003      	movs	r3, r0
 8004496:	7023      	strb	r3, [r4, #0]
		res = modem_cmd("AT+CGACT=1,1","OK",1000);
 8004498:	197c      	adds	r4, r7, r5
 800449a:	23fa      	movs	r3, #250	@ 0xfa
 800449c:	009a      	lsls	r2, r3, #2
 800449e:	49b1      	ldr	r1, [pc, #708]	@ (8004764 <main+0xe90>)
 80044a0:	4bb6      	ldr	r3, [pc, #728]	@ (800477c <main+0xea8>)
 80044a2:	0018      	movs	r0, r3
 80044a4:	f7ff f9b2 	bl	800380c <modem_cmd>
 80044a8:	0003      	movs	r3, r0
 80044aa:	7023      	strb	r3, [r4, #0]
		/* Make content string */
		sprintf(content_string, "AT+HTTPPARA=\"URL\",\"https://api.thingspeak.com/update?api_key=%s&field1=%d\"", \
				api_key, (int)temperatures[0]);
 80044ac:	4bb4      	ldr	r3, [pc, #720]	@ (8004780 <main+0xeac>)
 80044ae:	681b      	ldr	r3, [r3, #0]
		sprintf(content_string, "AT+HTTPPARA=\"URL\",\"https://api.thingspeak.com/update?api_key=%s&field1=%d\"", \
 80044b0:	1c18      	adds	r0, r3, #0
 80044b2:	f7fc fe99 	bl	80011e8 <__aeabi_f2iz>
 80044b6:	0003      	movs	r3, r0
 80044b8:	2220      	movs	r2, #32
 80044ba:	18ba      	adds	r2, r7, r2
 80044bc:	49b1      	ldr	r1, [pc, #708]	@ (8004784 <main+0xeb0>)
 80044be:	2034      	movs	r0, #52	@ 0x34
 80044c0:	1838      	adds	r0, r7, r0
 80044c2:	f007 f843 	bl	800b54c <siprintf>

		/* HTTP */
		res = modem_cmd("AT+HTTPINIT", "OK", 2000);
 80044c6:	197c      	adds	r4, r7, r5
 80044c8:	23fa      	movs	r3, #250	@ 0xfa
 80044ca:	00da      	lsls	r2, r3, #3
 80044cc:	49a5      	ldr	r1, [pc, #660]	@ (8004764 <main+0xe90>)
 80044ce:	4bae      	ldr	r3, [pc, #696]	@ (8004788 <main+0xeb4>)
 80044d0:	0018      	movs	r0, r3
 80044d2:	f7ff f99b 	bl	800380c <modem_cmd>
 80044d6:	0003      	movs	r3, r0
 80044d8:	7023      	strb	r3, [r4, #0]
		res = modem_cmd(content_string, "OK", 5000);
 80044da:	197c      	adds	r4, r7, r5
 80044dc:	4aab      	ldr	r2, [pc, #684]	@ (800478c <main+0xeb8>)
 80044de:	49a1      	ldr	r1, [pc, #644]	@ (8004764 <main+0xe90>)
 80044e0:	2034      	movs	r0, #52	@ 0x34
 80044e2:	183b      	adds	r3, r7, r0
 80044e4:	0018      	movs	r0, r3
 80044e6:	f7ff f991 	bl	800380c <modem_cmd>
 80044ea:	0003      	movs	r3, r0
 80044ec:	7023      	strb	r3, [r4, #0]
		res = modem_cmd("AT+HTTPACTION=0", "OK", 3000);
 80044ee:	197c      	adds	r4, r7, r5
 80044f0:	4aa7      	ldr	r2, [pc, #668]	@ (8004790 <main+0xebc>)
 80044f2:	499c      	ldr	r1, [pc, #624]	@ (8004764 <main+0xe90>)
 80044f4:	4ba7      	ldr	r3, [pc, #668]	@ (8004794 <main+0xec0>)
 80044f6:	0018      	movs	r0, r3
 80044f8:	f7ff f988 	bl	800380c <modem_cmd>
 80044fc:	0003      	movs	r3, r0
 80044fe:	7023      	strb	r3, [r4, #0]
		res = modem_cmd("AT+HTTPTERM", "OK", 3000);
 8004500:	197c      	adds	r4, r7, r5
 8004502:	4aa3      	ldr	r2, [pc, #652]	@ (8004790 <main+0xebc>)
 8004504:	4997      	ldr	r1, [pc, #604]	@ (8004764 <main+0xe90>)
 8004506:	4ba4      	ldr	r3, [pc, #656]	@ (8004798 <main+0xec4>)
 8004508:	0018      	movs	r0, r3
 800450a:	f7ff f97f 	bl	800380c <modem_cmd>
 800450e:	0003      	movs	r3, r0
 8004510:	7023      	strb	r3, [r4, #0]
		HAL_GPIO_WritePin(UP_LED_GPIO_Port, UP_LED_Pin, GPIO_PIN_SET);
 8004512:	4ba2      	ldr	r3, [pc, #648]	@ (800479c <main+0xec8>)
 8004514:	2201      	movs	r2, #1
 8004516:	2102      	movs	r1, #2
 8004518:	0018      	movs	r0, r3
 800451a:	f002 fdae 	bl	800707a <HAL_GPIO_WritePin>
		HAL_Delay(200);
 800451e:	20c8      	movs	r0, #200	@ 0xc8
 8004520:	f001 f910 	bl	8005744 <HAL_Delay>
		HAL_GPIO_WritePin(UP_LED_GPIO_Port, UP_LED_Pin, GPIO_PIN_RESET);
 8004524:	4b9d      	ldr	r3, [pc, #628]	@ (800479c <main+0xec8>)
 8004526:	2200      	movs	r2, #0
 8004528:	2102      	movs	r1, #2
 800452a:	0018      	movs	r0, r3
 800452c:	f002 fda5 	bl	800707a <HAL_GPIO_WritePin>
		upload_pending_flag = 0;
 8004530:	19bb      	adds	r3, r7, r6
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
		upload_flag = 1;
 8004536:	2338      	movs	r3, #56	@ 0x38
 8004538:	33ff      	adds	r3, #255	@ 0xff
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]
	}

	if(sec % 2 == 0) {
 8004540:	4b97      	ldr	r3, [pc, #604]	@ (80047a0 <main+0xecc>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2201      	movs	r2, #1
 8004546:	4013      	ands	r3, r2
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d000      	beq.n	8004550 <main+0xc7c>
 800454e:	e0c5      	b.n	80046dc <main+0xe08>
		if(refresh_flag) {
 8004550:	239b      	movs	r3, #155	@ 0x9b
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d100      	bne.n	800455e <main+0xc8a>
 800455c:	e0c3      	b.n	80046e6 <main+0xe12>
			char temp_str[10] = "";
 800455e:	4b91      	ldr	r3, [pc, #580]	@ (80047a4 <main+0xed0>)
 8004560:	229c      	movs	r2, #156	@ 0x9c
 8004562:	0052      	lsls	r2, r2, #1
 8004564:	189b      	adds	r3, r3, r2
 8004566:	19db      	adds	r3, r3, r7
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	3304      	adds	r3, #4
 800456e:	2206      	movs	r2, #6
 8004570:	2100      	movs	r1, #0
 8004572:	0018      	movs	r0, r3
 8004574:	f007 f856 	bl	800b624 <memset>
			switch(menu_mode) {
 8004578:	2336      	movs	r3, #54	@ 0x36
 800457a:	33ff      	adds	r3, #255	@ 0xff
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d071      	beq.n	8004668 <main+0xd94>
 8004584:	2b02      	cmp	r3, #2
 8004586:	d000      	beq.n	800458a <main+0xcb6>
 8004588:	e0ad      	b.n	80046e6 <main+0xe12>
			case MENU_DISP:
				if(prev_mode != MENU_DISP) {
 800458a:	239a      	movs	r3, #154	@ 0x9a
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	18fb      	adds	r3, r7, r3
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d020      	beq.n	80045d8 <main+0xd04>
					/* initialize */
					I2C_LCD_Clear(LCD1);
 8004596:	2000      	movs	r0, #0
 8004598:	f006 fa02 	bl	800a9a0 <I2C_LCD_Clear>
					I2C_LCD_SetCursor(LCD1, 0, 0);
 800459c:	2200      	movs	r2, #0
 800459e:	2100      	movs	r1, #0
 80045a0:	2000      	movs	r0, #0
 80045a2:	f006 fa41 	bl	800aa28 <I2C_LCD_SetCursor>
					I2C_LCD_WriteString(LCD1, "kWh: ");
 80045a6:	4b80      	ldr	r3, [pc, #512]	@ (80047a8 <main+0xed4>)
 80045a8:	0019      	movs	r1, r3
 80045aa:	2000      	movs	r0, #0
 80045ac:	f006 fa8c 	bl	800aac8 <I2C_LCD_WriteString>
					I2C_LCD_SetCursor(LCD1, 0, 1);
 80045b0:	2201      	movs	r2, #1
 80045b2:	2100      	movs	r1, #0
 80045b4:	2000      	movs	r0, #0
 80045b6:	f006 fa37 	bl	800aa28 <I2C_LCD_SetCursor>
					I2C_LCD_WriteString(LCD1, "V: ");
 80045ba:	4b7c      	ldr	r3, [pc, #496]	@ (80047ac <main+0xed8>)
 80045bc:	0019      	movs	r1, r3
 80045be:	2000      	movs	r0, #0
 80045c0:	f006 fa82 	bl	800aac8 <I2C_LCD_WriteString>
					I2C_LCD_SetCursor(LCD1, 7, 1);
 80045c4:	2201      	movs	r2, #1
 80045c6:	2107      	movs	r1, #7
 80045c8:	2000      	movs	r0, #0
 80045ca:	f006 fa2d 	bl	800aa28 <I2C_LCD_SetCursor>
					I2C_LCD_WriteString(LCD1, "A: ");
 80045ce:	4b78      	ldr	r3, [pc, #480]	@ (80047b0 <main+0xedc>)
 80045d0:	0019      	movs	r1, r3
 80045d2:	2000      	movs	r0, #0
 80045d4:	f006 fa78 	bl	800aac8 <I2C_LCD_WriteString>
				}
				I2C_LCD_SetCursor(LCD1, 3, 1);
 80045d8:	2201      	movs	r2, #1
 80045da:	2103      	movs	r1, #3
 80045dc:	2000      	movs	r0, #0
 80045de:	f006 fa23 	bl	800aa28 <I2C_LCD_SetCursor>
				sprintf(temp_str, "%d", (int)adc_arr[0]);
 80045e2:	4b74      	ldr	r3, [pc, #464]	@ (80047b4 <main+0xee0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	1c18      	adds	r0, r3, #0
 80045e8:	f7fc fdfe 	bl	80011e8 <__aeabi_f2iz>
 80045ec:	0002      	movs	r2, r0
 80045ee:	4972      	ldr	r1, [pc, #456]	@ (80047b8 <main+0xee4>)
 80045f0:	1d3b      	adds	r3, r7, #4
 80045f2:	0018      	movs	r0, r3
 80045f4:	f006 ffaa 	bl	800b54c <siprintf>
				I2C_LCD_WriteString(LCD1, temp_str);
 80045f8:	1d3b      	adds	r3, r7, #4
 80045fa:	0019      	movs	r1, r3
 80045fc:	2000      	movs	r0, #0
 80045fe:	f006 fa63 	bl	800aac8 <I2C_LCD_WriteString>
				I2C_LCD_SetCursor(LCD1, 10, 1);
 8004602:	2201      	movs	r2, #1
 8004604:	210a      	movs	r1, #10
 8004606:	2000      	movs	r0, #0
 8004608:	f006 fa0e 	bl	800aa28 <I2C_LCD_SetCursor>
				sprintf(temp_str, "%.1f", adc_arr[1]);
 800460c:	4b69      	ldr	r3, [pc, #420]	@ (80047b4 <main+0xee0>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	1c18      	adds	r0, r3, #0
 8004612:	f7fe fd53 	bl	80030bc <__aeabi_f2d>
 8004616:	0002      	movs	r2, r0
 8004618:	000b      	movs	r3, r1
 800461a:	4968      	ldr	r1, [pc, #416]	@ (80047bc <main+0xee8>)
 800461c:	1d38      	adds	r0, r7, #4
 800461e:	f006 ff95 	bl	800b54c <siprintf>
				I2C_LCD_WriteString(LCD1, temp_str);
 8004622:	1d3b      	adds	r3, r7, #4
 8004624:	0019      	movs	r1, r3
 8004626:	2000      	movs	r0, #0
 8004628:	f006 fa4e 	bl	800aac8 <I2C_LCD_WriteString>
				refresh_flag = 0;
 800462c:	239b      	movs	r3, #155	@ 0x9b
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
				sprintf(temp_str, "%d", (int)kwh);
 8004636:	2388      	movs	r3, #136	@ 0x88
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	18fb      	adds	r3, r7, r3
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	495e      	ldr	r1, [pc, #376]	@ (80047b8 <main+0xee4>)
 8004640:	1d3b      	adds	r3, r7, #4
 8004642:	0018      	movs	r0, r3
 8004644:	f006 ff82 	bl	800b54c <siprintf>
				I2C_LCD_SetCursor(LCD1, 5, 0);
 8004648:	2200      	movs	r2, #0
 800464a:	2105      	movs	r1, #5
 800464c:	2000      	movs	r0, #0
 800464e:	f006 f9eb 	bl	800aa28 <I2C_LCD_SetCursor>
				I2C_LCD_WriteString(LCD1, temp_str);
 8004652:	1d3b      	adds	r3, r7, #4
 8004654:	0019      	movs	r1, r3
 8004656:	2000      	movs	r0, #0
 8004658:	f006 fa36 	bl	800aac8 <I2C_LCD_WriteString>
				prev_mode = MENU_DISP;
 800465c:	239a      	movs	r3, #154	@ 0x9a
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	18fb      	adds	r3, r7, r3
 8004662:	2202      	movs	r2, #2
 8004664:	701a      	strb	r2, [r3, #0]
				break;
 8004666:	e03e      	b.n	80046e6 <main+0xe12>
			case MENU_OP:
				I2C_LCD_SetCursor(LCD1, 6, 1);
 8004668:	2201      	movs	r2, #1
 800466a:	2106      	movs	r1, #6
 800466c:	2000      	movs	r0, #0
 800466e:	f006 f9db 	bl	800aa28 <I2C_LCD_SetCursor>
				char val_str[4] = "";
 8004672:	4b53      	ldr	r3, [pc, #332]	@ (80047c0 <main+0xeec>)
 8004674:	229c      	movs	r2, #156	@ 0x9c
 8004676:	0052      	lsls	r2, r2, #1
 8004678:	189b      	adds	r3, r3, r2
 800467a:	19db      	adds	r3, r3, r7
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
				sprintf(val_str, "%d", (int)temperatures[active_sensor_idx]);
 8004680:	2499      	movs	r4, #153	@ 0x99
 8004682:	0064      	lsls	r4, r4, #1
 8004684:	193b      	adds	r3, r7, r4
 8004686:	781a      	ldrb	r2, [r3, #0]
 8004688:	4b3d      	ldr	r3, [pc, #244]	@ (8004780 <main+0xeac>)
 800468a:	0092      	lsls	r2, r2, #2
 800468c:	58d3      	ldr	r3, [r2, r3]
 800468e:	1c18      	adds	r0, r3, #0
 8004690:	f7fc fdaa 	bl	80011e8 <__aeabi_f2iz>
 8004694:	0002      	movs	r2, r0
 8004696:	4948      	ldr	r1, [pc, #288]	@ (80047b8 <main+0xee4>)
 8004698:	003b      	movs	r3, r7
 800469a:	0018      	movs	r0, r3
 800469c:	f006 ff56 	bl	800b54c <siprintf>
				sprintf(temp_str, "%s      ", temperatures[active_sensor_idx] == -99 ? "Open" : val_str);
 80046a0:	193b      	adds	r3, r7, r4
 80046a2:	781a      	ldrb	r2, [r3, #0]
 80046a4:	4b36      	ldr	r3, [pc, #216]	@ (8004780 <main+0xeac>)
 80046a6:	0092      	lsls	r2, r2, #2
 80046a8:	58d3      	ldr	r3, [r2, r3]
 80046aa:	4946      	ldr	r1, [pc, #280]	@ (80047c4 <main+0xef0>)
 80046ac:	1c18      	adds	r0, r3, #0
 80046ae:	f7fb ff03 	bl	80004b8 <__aeabi_fcmpeq>
 80046b2:	1e03      	subs	r3, r0, #0
 80046b4:	d101      	bne.n	80046ba <main+0xde6>
 80046b6:	003b      	movs	r3, r7
 80046b8:	e000      	b.n	80046bc <main+0xde8>
 80046ba:	4b43      	ldr	r3, [pc, #268]	@ (80047c8 <main+0xef4>)
 80046bc:	4943      	ldr	r1, [pc, #268]	@ (80047cc <main+0xef8>)
 80046be:	1d38      	adds	r0, r7, #4
 80046c0:	001a      	movs	r2, r3
 80046c2:	f006 ff43 	bl	800b54c <siprintf>
				I2C_LCD_WriteString(LCD1, temp_str);
 80046c6:	1d3b      	adds	r3, r7, #4
 80046c8:	0019      	movs	r1, r3
 80046ca:	2000      	movs	r0, #0
 80046cc:	f006 f9fc 	bl	800aac8 <I2C_LCD_WriteString>
				prev_mode = MENU_OP;
 80046d0:	239a      	movs	r3, #154	@ 0x9a
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
				break;
 80046da:	e004      	b.n	80046e6 <main+0xe12>
			}
		}
	}
	else refresh_flag = 1;
 80046dc:	239b      	movs	r3, #155	@ 0x9b
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
	if(menu_mode == MENU_OP) {
 80046e6:	2336      	movs	r3, #54	@ 0x36
 80046e8:	33ff      	adds	r3, #255	@ 0xff
 80046ea:	18fb      	adds	r3, r7, r3
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d123      	bne.n	800473a <main+0xe66>
		I2C_LCD_SetCursor(LCD1, 6, 0);
 80046f2:	2200      	movs	r2, #0
 80046f4:	2106      	movs	r1, #6
 80046f6:	2000      	movs	r0, #0
 80046f8:	f006 f996 	bl	800aa28 <I2C_LCD_SetCursor>
		if(mode == 3)
 80046fc:	2398      	movs	r3, #152	@ 0x98
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	18fb      	adds	r3, r7, r3
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b03      	cmp	r3, #3
 8004706:	d107      	bne.n	8004718 <main+0xe44>
			sprintf(temp_str, "%s         ", "Off");
 8004708:	4a31      	ldr	r2, [pc, #196]	@ (80047d0 <main+0xefc>)
 800470a:	4932      	ldr	r1, [pc, #200]	@ (80047d4 <main+0xf00>)
 800470c:	23fc      	movs	r3, #252	@ 0xfc
 800470e:	18fb      	adds	r3, r7, r3
 8004710:	0018      	movs	r0, r3
 8004712:	f006 ff1b 	bl	800b54c <siprintf>
 8004716:	e00a      	b.n	800472e <main+0xe5a>
		else
			sprintf(temp_str, "%d         ", (mode + 1));
 8004718:	2398      	movs	r3, #152	@ 0x98
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	492d      	ldr	r1, [pc, #180]	@ (80047d8 <main+0xf04>)
 8004724:	23fc      	movs	r3, #252	@ 0xfc
 8004726:	18fb      	adds	r3, r7, r3
 8004728:	0018      	movs	r0, r3
 800472a:	f006 ff0f 	bl	800b54c <siprintf>
		I2C_LCD_WriteString(LCD1, temp_str);
 800472e:	23fc      	movs	r3, #252	@ 0xfc
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	0019      	movs	r1, r3
 8004734:	2000      	movs	r0, #0
 8004736:	f006 f9c7 	bl	800aac8 <I2C_LCD_WriteString>
//	I2C_LCD_SetCursor(LCD1, 7, 0);
//	sprintf(text_str, "%d: %s", sensor_idx, \
//			temp_state ? "Open" : temp_str);
//	I2C_LCD_WriteString(LCD1, text_str);
//
	sdo[0] = 0;
 800473a:	2186      	movs	r1, #134	@ 0x86
 800473c:	0049      	lsls	r1, r1, #1
 800473e:	187b      	adds	r3, r7, r1
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
	sdo[1] = 0;
 8004744:	187b      	adds	r3, r7, r1
 8004746:	2200      	movs	r2, #0
 8004748:	705a      	strb	r2, [r3, #1]
	temp_word = 0;
 800474a:	238a      	movs	r3, #138	@ 0x8a
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	2200      	movs	r2, #0
 8004752:	801a      	strh	r2, [r3, #0]
	temp12b = 0;
 8004754:	2395      	movs	r3, #149	@ 0x95
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	18fb      	adds	r3, r7, r3
 800475a:	2200      	movs	r2, #0
 800475c:	801a      	strh	r2, [r3, #0]
  {
 800475e:	f7ff fa24 	bl	8003baa <main+0x2d6>
 8004762:	46c0      	nop			@ (mov r8, r8)
 8004764:	0800d9c8 	.word	0x0800d9c8
 8004768:	0800d9cc 	.word	0x0800d9cc
 800476c:	0800d9d8 	.word	0x0800d9d8
 8004770:	0800d9e8 	.word	0x0800d9e8
 8004774:	0800d9f4 	.word	0x0800d9f4
 8004778:	0800da08 	.word	0x0800da08
 800477c:	0800da14 	.word	0x0800da14
 8004780:	200004ec 	.word	0x200004ec
 8004784:	0800da24 	.word	0x0800da24
 8004788:	0800da70 	.word	0x0800da70
 800478c:	00001388 	.word	0x00001388
 8004790:	00000bb8 	.word	0x00000bb8
 8004794:	0800da7c 	.word	0x0800da7c
 8004798:	0800da8c 	.word	0x0800da8c
 800479c:	50001400 	.word	0x50001400
 80047a0:	200004e0 	.word	0x200004e0
 80047a4:	fffffecc 	.word	0xfffffecc
 80047a8:	0800da98 	.word	0x0800da98
 80047ac:	0800daa0 	.word	0x0800daa0
 80047b0:	0800daa4 	.word	0x0800daa4
 80047b4:	200004ac 	.word	0x200004ac
 80047b8:	0800daa8 	.word	0x0800daa8
 80047bc:	0800daac 	.word	0x0800daac
 80047c0:	fffffec8 	.word	0xfffffec8
 80047c4:	c2c60000 	.word	0xc2c60000
 80047c8:	0800dab4 	.word	0x0800dab4
 80047cc:	0800dabc 	.word	0x0800dabc
 80047d0:	0800dac8 	.word	0x0800dac8
 80047d4:	0800dacc 	.word	0x0800dacc
 80047d8:	0800dad8 	.word	0x0800dad8

080047dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047dc:	b590      	push	{r4, r7, lr}
 80047de:	b093      	sub	sp, #76	@ 0x4c
 80047e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047e2:	2414      	movs	r4, #20
 80047e4:	193b      	adds	r3, r7, r4
 80047e6:	0018      	movs	r0, r3
 80047e8:	2334      	movs	r3, #52	@ 0x34
 80047ea:	001a      	movs	r2, r3
 80047ec:	2100      	movs	r1, #0
 80047ee:	f006 ff19 	bl	800b624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047f2:	1d3b      	adds	r3, r7, #4
 80047f4:	0018      	movs	r0, r3
 80047f6:	2310      	movs	r3, #16
 80047f8:	001a      	movs	r2, r3
 80047fa:	2100      	movs	r1, #0
 80047fc:	f006 ff12 	bl	800b624 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004800:	2380      	movs	r3, #128	@ 0x80
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	0018      	movs	r0, r3
 8004806:	f003 fab9 	bl	8007d7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800480a:	193b      	adds	r3, r7, r4
 800480c:	2202      	movs	r2, #2
 800480e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004810:	193b      	adds	r3, r7, r4
 8004812:	2280      	movs	r2, #128	@ 0x80
 8004814:	0052      	lsls	r2, r2, #1
 8004816:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004818:	0021      	movs	r1, r4
 800481a:	187b      	adds	r3, r7, r1
 800481c:	2200      	movs	r2, #0
 800481e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004820:	187b      	adds	r3, r7, r1
 8004822:	2240      	movs	r2, #64	@ 0x40
 8004824:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004826:	187b      	adds	r3, r7, r1
 8004828:	2202      	movs	r2, #2
 800482a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800482c:	187b      	adds	r3, r7, r1
 800482e:	2202      	movs	r2, #2
 8004830:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004832:	187b      	adds	r3, r7, r1
 8004834:	2200      	movs	r2, #0
 8004836:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004838:	187b      	adds	r3, r7, r1
 800483a:	2208      	movs	r2, #8
 800483c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 800483e:	187b      	adds	r3, r7, r1
 8004840:	22b0      	movs	r2, #176	@ 0xb0
 8004842:	0352      	lsls	r2, r2, #13
 8004844:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8004846:	187b      	adds	r3, r7, r1
 8004848:	22c0      	movs	r2, #192	@ 0xc0
 800484a:	05d2      	lsls	r2, r2, #23
 800484c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800484e:	187b      	adds	r3, r7, r1
 8004850:	0018      	movs	r0, r3
 8004852:	f003 fadf 	bl	8007e14 <HAL_RCC_OscConfig>
 8004856:	1e03      	subs	r3, r0, #0
 8004858:	d001      	beq.n	800485e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800485a:	f000 faf7 	bl	8004e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800485e:	1d3b      	adds	r3, r7, #4
 8004860:	2207      	movs	r2, #7
 8004862:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004864:	1d3b      	adds	r3, r7, #4
 8004866:	2202      	movs	r2, #2
 8004868:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800486a:	1d3b      	adds	r3, r7, #4
 800486c:	2200      	movs	r2, #0
 800486e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004870:	1d3b      	adds	r3, r7, #4
 8004872:	2200      	movs	r2, #0
 8004874:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004876:	1d3b      	adds	r3, r7, #4
 8004878:	2101      	movs	r1, #1
 800487a:	0018      	movs	r0, r3
 800487c:	f003 fdda 	bl	8008434 <HAL_RCC_ClockConfig>
 8004880:	1e03      	subs	r3, r0, #0
 8004882:	d001      	beq.n	8004888 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8004884:	f000 fae2 	bl	8004e4c <Error_Handler>
  }
}
 8004888:	46c0      	nop			@ (mov r8, r8)
 800488a:	46bd      	mov	sp, r7
 800488c:	b013      	add	sp, #76	@ 0x4c
 800488e:	bd90      	pop	{r4, r7, pc}

08004890 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004896:	1d3b      	adds	r3, r7, #4
 8004898:	0018      	movs	r0, r3
 800489a:	230c      	movs	r3, #12
 800489c:	001a      	movs	r2, r3
 800489e:	2100      	movs	r1, #0
 80048a0:	f006 fec0 	bl	800b624 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80048a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004998 <MX_ADC1_Init+0x108>)
 80048a6:	4a3d      	ldr	r2, [pc, #244]	@ (800499c <MX_ADC1_Init+0x10c>)
 80048a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 80048aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004998 <MX_ADC1_Init+0x108>)
 80048ac:	22c0      	movs	r2, #192	@ 0xc0
 80048ae:	0312      	lsls	r2, r2, #12
 80048b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80048b2:	4b39      	ldr	r3, [pc, #228]	@ (8004998 <MX_ADC1_Init+0x108>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80048b8:	4b37      	ldr	r3, [pc, #220]	@ (8004998 <MX_ADC1_Init+0x108>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80048be:	4b36      	ldr	r3, [pc, #216]	@ (8004998 <MX_ADC1_Init+0x108>)
 80048c0:	2280      	movs	r2, #128	@ 0x80
 80048c2:	0392      	lsls	r2, r2, #14
 80048c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80048c6:	4b34      	ldr	r3, [pc, #208]	@ (8004998 <MX_ADC1_Init+0x108>)
 80048c8:	2204      	movs	r2, #4
 80048ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80048cc:	4b32      	ldr	r3, [pc, #200]	@ (8004998 <MX_ADC1_Init+0x108>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80048d2:	4b31      	ldr	r3, [pc, #196]	@ (8004998 <MX_ADC1_Init+0x108>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80048d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004998 <MX_ADC1_Init+0x108>)
 80048da:	2201      	movs	r2, #1
 80048dc:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 80048de:	4b2e      	ldr	r3, [pc, #184]	@ (8004998 <MX_ADC1_Init+0x108>)
 80048e0:	2203      	movs	r2, #3
 80048e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80048e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004998 <MX_ADC1_Init+0x108>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80048ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004998 <MX_ADC1_Init+0x108>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80048f0:	4b29      	ldr	r3, [pc, #164]	@ (8004998 <MX_ADC1_Init+0x108>)
 80048f2:	222c      	movs	r2, #44	@ 0x2c
 80048f4:	2101      	movs	r1, #1
 80048f6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80048f8:	4b27      	ldr	r3, [pc, #156]	@ (8004998 <MX_ADC1_Init+0x108>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80048fe:	4b26      	ldr	r3, [pc, #152]	@ (8004998 <MX_ADC1_Init+0x108>)
 8004900:	2200      	movs	r2, #0
 8004902:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8004904:	4b24      	ldr	r3, [pc, #144]	@ (8004998 <MX_ADC1_Init+0x108>)
 8004906:	2200      	movs	r2, #0
 8004908:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800490a:	4b23      	ldr	r3, [pc, #140]	@ (8004998 <MX_ADC1_Init+0x108>)
 800490c:	223c      	movs	r2, #60	@ 0x3c
 800490e:	2100      	movs	r1, #0
 8004910:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004912:	4b21      	ldr	r3, [pc, #132]	@ (8004998 <MX_ADC1_Init+0x108>)
 8004914:	2200      	movs	r2, #0
 8004916:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004918:	4b1f      	ldr	r3, [pc, #124]	@ (8004998 <MX_ADC1_Init+0x108>)
 800491a:	0018      	movs	r0, r3
 800491c:	f001 f88a 	bl	8005a34 <HAL_ADC_Init>
 8004920:	1e03      	subs	r3, r0, #0
 8004922:	d001      	beq.n	8004928 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004924:	f000 fa92 	bl	8004e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004928:	1d3b      	adds	r3, r7, #4
 800492a:	4a1d      	ldr	r2, [pc, #116]	@ (80049a0 <MX_ADC1_Init+0x110>)
 800492c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800492e:	1d3b      	adds	r3, r7, #4
 8004930:	2200      	movs	r2, #0
 8004932:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8004934:	1d3b      	adds	r3, r7, #4
 8004936:	2200      	movs	r2, #0
 8004938:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800493a:	1d3a      	adds	r2, r7, #4
 800493c:	4b16      	ldr	r3, [pc, #88]	@ (8004998 <MX_ADC1_Init+0x108>)
 800493e:	0011      	movs	r1, r2
 8004940:	0018      	movs	r0, r3
 8004942:	f001 fbdd 	bl	8006100 <HAL_ADC_ConfigChannel>
 8004946:	1e03      	subs	r3, r0, #0
 8004948:	d001      	beq.n	800494e <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800494a:	f000 fa7f 	bl	8004e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800494e:	1d3b      	adds	r3, r7, #4
 8004950:	4a14      	ldr	r2, [pc, #80]	@ (80049a4 <MX_ADC1_Init+0x114>)
 8004952:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004954:	1d3b      	adds	r3, r7, #4
 8004956:	2204      	movs	r2, #4
 8004958:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800495a:	1d3a      	adds	r2, r7, #4
 800495c:	4b0e      	ldr	r3, [pc, #56]	@ (8004998 <MX_ADC1_Init+0x108>)
 800495e:	0011      	movs	r1, r2
 8004960:	0018      	movs	r0, r3
 8004962:	f001 fbcd 	bl	8006100 <HAL_ADC_ConfigChannel>
 8004966:	1e03      	subs	r3, r0, #0
 8004968:	d001      	beq.n	800496e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800496a:	f000 fa6f 	bl	8004e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800496e:	1d3b      	adds	r3, r7, #4
 8004970:	4a0d      	ldr	r2, [pc, #52]	@ (80049a8 <MX_ADC1_Init+0x118>)
 8004972:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004974:	1d3b      	adds	r3, r7, #4
 8004976:	2208      	movs	r2, #8
 8004978:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800497a:	1d3a      	adds	r2, r7, #4
 800497c:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <MX_ADC1_Init+0x108>)
 800497e:	0011      	movs	r1, r2
 8004980:	0018      	movs	r0, r3
 8004982:	f001 fbbd 	bl	8006100 <HAL_ADC_ConfigChannel>
 8004986:	1e03      	subs	r3, r0, #0
 8004988:	d001      	beq.n	800498e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800498a:	f000 fa5f 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800498e:	46c0      	nop			@ (mov r8, r8)
 8004990:	46bd      	mov	sp, r7
 8004992:	b004      	add	sp, #16
 8004994:	bd80      	pop	{r7, pc}
 8004996:	46c0      	nop			@ (mov r8, r8)
 8004998:	20000200 	.word	0x20000200
 800499c:	40012400 	.word	0x40012400
 80049a0:	08000004 	.word	0x08000004
 80049a4:	0c000008 	.word	0x0c000008
 80049a8:	b0001000 	.word	0xb0001000

080049ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80049b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a20 <MX_I2C1_Init+0x74>)
 80049b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a24 <MX_I2C1_Init+0x78>)
 80049b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 80049b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a20 <MX_I2C1_Init+0x74>)
 80049b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004a28 <MX_I2C1_Init+0x7c>)
 80049ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80049bc:	4b18      	ldr	r3, [pc, #96]	@ (8004a20 <MX_I2C1_Init+0x74>)
 80049be:	2200      	movs	r2, #0
 80049c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049c2:	4b17      	ldr	r3, [pc, #92]	@ (8004a20 <MX_I2C1_Init+0x74>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049c8:	4b15      	ldr	r3, [pc, #84]	@ (8004a20 <MX_I2C1_Init+0x74>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80049ce:	4b14      	ldr	r3, [pc, #80]	@ (8004a20 <MX_I2C1_Init+0x74>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80049d4:	4b12      	ldr	r3, [pc, #72]	@ (8004a20 <MX_I2C1_Init+0x74>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049da:	4b11      	ldr	r3, [pc, #68]	@ (8004a20 <MX_I2C1_Init+0x74>)
 80049dc:	2200      	movs	r2, #0
 80049de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004a20 <MX_I2C1_Init+0x74>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80049e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004a20 <MX_I2C1_Init+0x74>)
 80049e8:	0018      	movs	r0, r3
 80049ea:	f002 fb97 	bl	800711c <HAL_I2C_Init>
 80049ee:	1e03      	subs	r3, r0, #0
 80049f0:	d001      	beq.n	80049f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80049f2:	f000 fa2b 	bl	8004e4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80049f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004a20 <MX_I2C1_Init+0x74>)
 80049f8:	2100      	movs	r1, #0
 80049fa:	0018      	movs	r0, r3
 80049fc:	f003 f926 	bl	8007c4c <HAL_I2CEx_ConfigAnalogFilter>
 8004a00:	1e03      	subs	r3, r0, #0
 8004a02:	d001      	beq.n	8004a08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004a04:	f000 fa22 	bl	8004e4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004a08:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <MX_I2C1_Init+0x74>)
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f003 f969 	bl	8007ce4 <HAL_I2CEx_ConfigDigitalFilter>
 8004a12:	1e03      	subs	r3, r0, #0
 8004a14:	d001      	beq.n	8004a1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004a16:	f000 fa19 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004a1a:	46c0      	nop			@ (mov r8, r8)
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	200002c0 	.word	0x200002c0
 8004a24:	40005400 	.word	0x40005400
 8004a28:	0060112f 	.word	0x0060112f

08004a2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004a30:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa0 <MX_I2C2_Init+0x74>)
 8004a32:	4a1c      	ldr	r2, [pc, #112]	@ (8004aa4 <MX_I2C2_Init+0x78>)
 8004a34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B07CB4;
 8004a36:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa0 <MX_I2C2_Init+0x74>)
 8004a38:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa8 <MX_I2C2_Init+0x7c>)
 8004a3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 78;
 8004a3c:	4b18      	ldr	r3, [pc, #96]	@ (8004aa0 <MX_I2C2_Init+0x74>)
 8004a3e:	224e      	movs	r2, #78	@ 0x4e
 8004a40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a42:	4b17      	ldr	r3, [pc, #92]	@ (8004aa0 <MX_I2C2_Init+0x74>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a48:	4b15      	ldr	r3, [pc, #84]	@ (8004aa0 <MX_I2C2_Init+0x74>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004a4e:	4b14      	ldr	r3, [pc, #80]	@ (8004aa0 <MX_I2C2_Init+0x74>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004a54:	4b12      	ldr	r3, [pc, #72]	@ (8004aa0 <MX_I2C2_Init+0x74>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a5a:	4b11      	ldr	r3, [pc, #68]	@ (8004aa0 <MX_I2C2_Init+0x74>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a60:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa0 <MX_I2C2_Init+0x74>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004a66:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa0 <MX_I2C2_Init+0x74>)
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f002 fb57 	bl	800711c <HAL_I2C_Init>
 8004a6e:	1e03      	subs	r3, r0, #0
 8004a70:	d001      	beq.n	8004a76 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004a72:	f000 f9eb 	bl	8004e4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004a76:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa0 <MX_I2C2_Init+0x74>)
 8004a78:	2100      	movs	r1, #0
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f003 f8e6 	bl	8007c4c <HAL_I2CEx_ConfigAnalogFilter>
 8004a80:	1e03      	subs	r3, r0, #0
 8004a82:	d001      	beq.n	8004a88 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004a84:	f000 f9e2 	bl	8004e4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004a88:	4b05      	ldr	r3, [pc, #20]	@ (8004aa0 <MX_I2C2_Init+0x74>)
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f003 f929 	bl	8007ce4 <HAL_I2CEx_ConfigDigitalFilter>
 8004a92:	1e03      	subs	r3, r0, #0
 8004a94:	d001      	beq.n	8004a9a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004a96:	f000 f9d9 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20000314 	.word	0x20000314
 8004aa4:	40005800 	.word	0x40005800
 8004aa8:	00b07cb4 	.word	0x00b07cb4

08004aac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8004b24 <MX_SPI2_Init+0x78>)
 8004ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b28 <MX_SPI2_Init+0x7c>)
 8004ab4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b24 <MX_SPI2_Init+0x78>)
 8004ab8:	2282      	movs	r2, #130	@ 0x82
 8004aba:	0052      	lsls	r2, r2, #1
 8004abc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004abe:	4b19      	ldr	r3, [pc, #100]	@ (8004b24 <MX_SPI2_Init+0x78>)
 8004ac0:	2280      	movs	r2, #128	@ 0x80
 8004ac2:	00d2      	lsls	r2, r2, #3
 8004ac4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004ac6:	4b17      	ldr	r3, [pc, #92]	@ (8004b24 <MX_SPI2_Init+0x78>)
 8004ac8:	22f0      	movs	r2, #240	@ 0xf0
 8004aca:	0112      	lsls	r2, r2, #4
 8004acc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ace:	4b15      	ldr	r3, [pc, #84]	@ (8004b24 <MX_SPI2_Init+0x78>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ad4:	4b13      	ldr	r3, [pc, #76]	@ (8004b24 <MX_SPI2_Init+0x78>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004ada:	4b12      	ldr	r3, [pc, #72]	@ (8004b24 <MX_SPI2_Init+0x78>)
 8004adc:	2280      	movs	r2, #128	@ 0x80
 8004ade:	0092      	lsls	r2, r2, #2
 8004ae0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004ae2:	4b10      	ldr	r3, [pc, #64]	@ (8004b24 <MX_SPI2_Init+0x78>)
 8004ae4:	2238      	movs	r2, #56	@ 0x38
 8004ae6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8004b24 <MX_SPI2_Init+0x78>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004aee:	4b0d      	ldr	r3, [pc, #52]	@ (8004b24 <MX_SPI2_Init+0x78>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004af4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b24 <MX_SPI2_Init+0x78>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004afa:	4b0a      	ldr	r3, [pc, #40]	@ (8004b24 <MX_SPI2_Init+0x78>)
 8004afc:	2207      	movs	r2, #7
 8004afe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004b00:	4b08      	ldr	r3, [pc, #32]	@ (8004b24 <MX_SPI2_Init+0x78>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004b06:	4b07      	ldr	r3, [pc, #28]	@ (8004b24 <MX_SPI2_Init+0x78>)
 8004b08:	2208      	movs	r2, #8
 8004b0a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004b0c:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <MX_SPI2_Init+0x78>)
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f003 ff6e 	bl	80089f0 <HAL_SPI_Init>
 8004b14:	1e03      	subs	r3, r0, #0
 8004b16:	d001      	beq.n	8004b1c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8004b18:	f000 f998 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004b1c:	46c0      	nop			@ (mov r8, r8)
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	20000368 	.word	0x20000368
 8004b28:	40003800 	.word	0x40003800

08004b2c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004b30:	4b0f      	ldr	r3, [pc, #60]	@ (8004b70 <MX_TIM16_Init+0x44>)
 8004b32:	4a10      	ldr	r2, [pc, #64]	@ (8004b74 <MX_TIM16_Init+0x48>)
 8004b34:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 32;
 8004b36:	4b0e      	ldr	r3, [pc, #56]	@ (8004b70 <MX_TIM16_Init+0x44>)
 8004b38:	2220      	movs	r2, #32
 8004b3a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b70 <MX_TIM16_Init+0x44>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8004b42:	4b0b      	ldr	r3, [pc, #44]	@ (8004b70 <MX_TIM16_Init+0x44>)
 8004b44:	2264      	movs	r2, #100	@ 0x64
 8004b46:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b48:	4b09      	ldr	r3, [pc, #36]	@ (8004b70 <MX_TIM16_Init+0x44>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004b4e:	4b08      	ldr	r3, [pc, #32]	@ (8004b70 <MX_TIM16_Init+0x44>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b54:	4b06      	ldr	r3, [pc, #24]	@ (8004b70 <MX_TIM16_Init+0x44>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004b5a:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <MX_TIM16_Init+0x44>)
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f004 fd07 	bl	8009570 <HAL_TIM_Base_Init>
 8004b62:	1e03      	subs	r3, r0, #0
 8004b64:	d001      	beq.n	8004b6a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8004b66:	f000 f971 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004b6a:	46c0      	nop			@ (mov r8, r8)
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	200003cc 	.word	0x200003cc
 8004b74:	40014400 	.word	0x40014400

08004b78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004b7c:	4b16      	ldr	r3, [pc, #88]	@ (8004bd8 <MX_USART3_UART_Init+0x60>)
 8004b7e:	4a17      	ldr	r2, [pc, #92]	@ (8004bdc <MX_USART3_UART_Init+0x64>)
 8004b80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004b82:	4b15      	ldr	r3, [pc, #84]	@ (8004bd8 <MX_USART3_UART_Init+0x60>)
 8004b84:	22e1      	movs	r2, #225	@ 0xe1
 8004b86:	0252      	lsls	r2, r2, #9
 8004b88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b8a:	4b13      	ldr	r3, [pc, #76]	@ (8004bd8 <MX_USART3_UART_Init+0x60>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b90:	4b11      	ldr	r3, [pc, #68]	@ (8004bd8 <MX_USART3_UART_Init+0x60>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b96:	4b10      	ldr	r3, [pc, #64]	@ (8004bd8 <MX_USART3_UART_Init+0x60>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004bd8 <MX_USART3_UART_Init+0x60>)
 8004b9e:	220c      	movs	r2, #12
 8004ba0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd8 <MX_USART3_UART_Init+0x60>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd8 <MX_USART3_UART_Init+0x60>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bae:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd8 <MX_USART3_UART_Init+0x60>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004bb4:	4b08      	ldr	r3, [pc, #32]	@ (8004bd8 <MX_USART3_UART_Init+0x60>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bba:	4b07      	ldr	r3, [pc, #28]	@ (8004bd8 <MX_USART3_UART_Init+0x60>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004bc0:	4b05      	ldr	r3, [pc, #20]	@ (8004bd8 <MX_USART3_UART_Init+0x60>)
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f004 ff46 	bl	8009a54 <HAL_UART_Init>
 8004bc8:	1e03      	subs	r3, r0, #0
 8004bca:	d001      	beq.n	8004bd0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004bcc:	f000 f93e 	bl	8004e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004bd0:	46c0      	nop			@ (mov r8, r8)
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	46c0      	nop			@ (mov r8, r8)
 8004bd8:	20000418 	.word	0x20000418
 8004bdc:	40004800 	.word	0x40004800

08004be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004be6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c18 <MX_DMA_Init+0x38>)
 8004be8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bea:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <MX_DMA_Init+0x38>)
 8004bec:	2101      	movs	r1, #1
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	639a      	str	r2, [r3, #56]	@ 0x38
 8004bf2:	4b09      	ldr	r3, [pc, #36]	@ (8004c18 <MX_DMA_Init+0x38>)
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	607b      	str	r3, [r7, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004bfe:	2200      	movs	r2, #0
 8004c00:	2100      	movs	r1, #0
 8004c02:	2009      	movs	r0, #9
 8004c04:	f001 fe34 	bl	8006870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004c08:	2009      	movs	r0, #9
 8004c0a:	f001 fe46 	bl	800689a <HAL_NVIC_EnableIRQ>

}
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	46bd      	mov	sp, r7
 8004c12:	b002      	add	sp, #8
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	46c0      	nop			@ (mov r8, r8)
 8004c18:	40021000 	.word	0x40021000

08004c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c1c:	b590      	push	{r4, r7, lr}
 8004c1e:	b08b      	sub	sp, #44	@ 0x2c
 8004c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c22:	2414      	movs	r4, #20
 8004c24:	193b      	adds	r3, r7, r4
 8004c26:	0018      	movs	r0, r3
 8004c28:	2314      	movs	r3, #20
 8004c2a:	001a      	movs	r2, r3
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	f006 fcf9 	bl	800b624 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c32:	4b81      	ldr	r3, [pc, #516]	@ (8004e38 <MX_GPIO_Init+0x21c>)
 8004c34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c36:	4b80      	ldr	r3, [pc, #512]	@ (8004e38 <MX_GPIO_Init+0x21c>)
 8004c38:	2104      	movs	r1, #4
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c3e:	4b7e      	ldr	r3, [pc, #504]	@ (8004e38 <MX_GPIO_Init+0x21c>)
 8004c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c42:	2204      	movs	r2, #4
 8004c44:	4013      	ands	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8004e38 <MX_GPIO_Init+0x21c>)
 8004c4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004e38 <MX_GPIO_Init+0x21c>)
 8004c50:	2120      	movs	r1, #32
 8004c52:	430a      	orrs	r2, r1
 8004c54:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c56:	4b78      	ldr	r3, [pc, #480]	@ (8004e38 <MX_GPIO_Init+0x21c>)
 8004c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c62:	4b75      	ldr	r3, [pc, #468]	@ (8004e38 <MX_GPIO_Init+0x21c>)
 8004c64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c66:	4b74      	ldr	r3, [pc, #464]	@ (8004e38 <MX_GPIO_Init+0x21c>)
 8004c68:	2101      	movs	r1, #1
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c6e:	4b72      	ldr	r3, [pc, #456]	@ (8004e38 <MX_GPIO_Init+0x21c>)
 8004c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c72:	2201      	movs	r2, #1
 8004c74:	4013      	ands	r3, r2
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c7a:	4b6f      	ldr	r3, [pc, #444]	@ (8004e38 <MX_GPIO_Init+0x21c>)
 8004c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c7e:	4b6e      	ldr	r3, [pc, #440]	@ (8004e38 <MX_GPIO_Init+0x21c>)
 8004c80:	2102      	movs	r1, #2
 8004c82:	430a      	orrs	r2, r1
 8004c84:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c86:	4b6c      	ldr	r3, [pc, #432]	@ (8004e38 <MX_GPIO_Init+0x21c>)
 8004c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c92:	4b69      	ldr	r3, [pc, #420]	@ (8004e38 <MX_GPIO_Init+0x21c>)
 8004c94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c96:	4b68      	ldr	r3, [pc, #416]	@ (8004e38 <MX_GPIO_Init+0x21c>)
 8004c98:	2108      	movs	r1, #8
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c9e:	4b66      	ldr	r3, [pc, #408]	@ (8004e38 <MX_GPIO_Init+0x21c>)
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca2:	2208      	movs	r2, #8
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8004caa:	23e0      	movs	r3, #224	@ 0xe0
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	4863      	ldr	r0, [pc, #396]	@ (8004e3c <MX_GPIO_Init+0x220>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	0019      	movs	r1, r3
 8004cb4:	f002 f9e1 	bl	800707a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, TRIAC1_Pin|UP_LED_Pin, GPIO_PIN_RESET);
 8004cb8:	4b61      	ldr	r3, [pc, #388]	@ (8004e40 <MX_GPIO_Init+0x224>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2103      	movs	r1, #3
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	f002 f9db 	bl	800707a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin, GPIO_PIN_RESET);
 8004cc4:	23e0      	movs	r3, #224	@ 0xe0
 8004cc6:	0059      	lsls	r1, r3, #1
 8004cc8:	23a0      	movs	r3, #160	@ 0xa0
 8004cca:	05db      	lsls	r3, r3, #23
 8004ccc:	2200      	movs	r2, #0
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f002 f9d3 	bl	800707a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_TC1_Pin|CS_TC2_Pin|CS_TC3_Pin|CS_TC4_Pin
 8004cd4:	23f8      	movs	r3, #248	@ 0xf8
 8004cd6:	021b      	lsls	r3, r3, #8
 8004cd8:	485a      	ldr	r0, [pc, #360]	@ (8004e44 <MX_GPIO_Init+0x228>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	0019      	movs	r1, r3
 8004cde:	f002 f9cc 	bl	800707a <HAL_GPIO_WritePin>
                          |CS_TC5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8004ce2:	4b59      	ldr	r3, [pc, #356]	@ (8004e48 <MX_GPIO_Init+0x22c>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2108      	movs	r1, #8
 8004ce8:	0018      	movs	r0, r3
 8004cea:	f002 f9c6 	bl	800707a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TRIAC2_Pin PC14 PC15 */
  GPIO_InitStruct.Pin = TRIAC2_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8004cee:	193b      	adds	r3, r7, r4
 8004cf0:	22e0      	movs	r2, #224	@ 0xe0
 8004cf2:	0212      	lsls	r2, r2, #8
 8004cf4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cf6:	193b      	adds	r3, r7, r4
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfc:	193b      	adds	r3, r7, r4
 8004cfe:	2200      	movs	r2, #0
 8004d00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d02:	193b      	adds	r3, r7, r4
 8004d04:	2200      	movs	r2, #0
 8004d06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d08:	193b      	adds	r3, r7, r4
 8004d0a:	4a4c      	ldr	r2, [pc, #304]	@ (8004e3c <MX_GPIO_Init+0x220>)
 8004d0c:	0019      	movs	r1, r3
 8004d0e:	0010      	movs	r0, r2
 8004d10:	f002 f832 	bl	8006d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIAC1_Pin UP_LED_Pin */
  GPIO_InitStruct.Pin = TRIAC1_Pin|UP_LED_Pin;
 8004d14:	193b      	adds	r3, r7, r4
 8004d16:	2203      	movs	r2, #3
 8004d18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d1a:	193b      	adds	r3, r7, r4
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d20:	193b      	adds	r3, r7, r4
 8004d22:	2200      	movs	r2, #0
 8004d24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d26:	193b      	adds	r3, r7, r4
 8004d28:	2200      	movs	r2, #0
 8004d2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004d2c:	193b      	adds	r3, r7, r4
 8004d2e:	4a44      	ldr	r2, [pc, #272]	@ (8004e40 <MX_GPIO_Init+0x224>)
 8004d30:	0019      	movs	r1, r3
 8004d32:	0010      	movs	r0, r2
 8004d34:	f002 f820 	bl	8006d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCD_Pin */
  GPIO_InitStruct.Pin = ZCD_Pin;
 8004d38:	193b      	adds	r3, r7, r4
 8004d3a:	2210      	movs	r2, #16
 8004d3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004d3e:	193b      	adds	r3, r7, r4
 8004d40:	2284      	movs	r2, #132	@ 0x84
 8004d42:	0392      	lsls	r2, r2, #14
 8004d44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d46:	193b      	adds	r3, r7, r4
 8004d48:	2201      	movs	r2, #1
 8004d4a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ZCD_GPIO_Port, &GPIO_InitStruct);
 8004d4c:	193a      	adds	r2, r7, r4
 8004d4e:	23a0      	movs	r3, #160	@ 0xa0
 8004d50:	05db      	lsls	r3, r3, #23
 8004d52:	0011      	movs	r1, r2
 8004d54:	0018      	movs	r0, r3
 8004d56:	f002 f80f 	bl	8006d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_RESET_Pin MCU_PWRKEY_Pin CS_TC6_Pin */
  GPIO_InitStruct.Pin = MCU_RESET_Pin|MCU_PWRKEY_Pin|CS_TC6_Pin;
 8004d5a:	0021      	movs	r1, r4
 8004d5c:	187b      	adds	r3, r7, r1
 8004d5e:	22e0      	movs	r2, #224	@ 0xe0
 8004d60:	0052      	lsls	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d64:	000c      	movs	r4, r1
 8004d66:	193b      	adds	r3, r7, r4
 8004d68:	2201      	movs	r2, #1
 8004d6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6c:	193b      	adds	r3, r7, r4
 8004d6e:	2200      	movs	r2, #0
 8004d70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d72:	193b      	adds	r3, r7, r4
 8004d74:	2200      	movs	r2, #0
 8004d76:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d78:	193a      	adds	r2, r7, r4
 8004d7a:	23a0      	movs	r3, #160	@ 0xa0
 8004d7c:	05db      	lsls	r3, r3, #23
 8004d7e:	0011      	movs	r1, r2
 8004d80:	0018      	movs	r0, r3
 8004d82:	f001 fff9 	bl	8006d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_TC1_Pin CS_TC2_Pin CS_TC3_Pin CS_TC4_Pin
                           CS_TC5_Pin */
  GPIO_InitStruct.Pin = CS_TC1_Pin|CS_TC2_Pin|CS_TC3_Pin|CS_TC4_Pin
 8004d86:	0021      	movs	r1, r4
 8004d88:	187b      	adds	r3, r7, r1
 8004d8a:	22f8      	movs	r2, #248	@ 0xf8
 8004d8c:	0212      	lsls	r2, r2, #8
 8004d8e:	601a      	str	r2, [r3, #0]
                          |CS_TC5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d90:	000c      	movs	r4, r1
 8004d92:	193b      	adds	r3, r7, r4
 8004d94:	2201      	movs	r2, #1
 8004d96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d98:	193b      	adds	r3, r7, r4
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d9e:	193b      	adds	r3, r7, r4
 8004da0:	2200      	movs	r2, #0
 8004da2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004da4:	193b      	adds	r3, r7, r4
 8004da6:	4a27      	ldr	r2, [pc, #156]	@ (8004e44 <MX_GPIO_Init+0x228>)
 8004da8:	0019      	movs	r1, r3
 8004daa:	0010      	movs	r0, r2
 8004dac:	f001 ffe4 	bl	8006d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8004db0:	193b      	adds	r3, r7, r4
 8004db2:	2208      	movs	r2, #8
 8004db4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004db6:	193b      	adds	r3, r7, r4
 8004db8:	2201      	movs	r2, #1
 8004dba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dbc:	193b      	adds	r3, r7, r4
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc2:	193b      	adds	r3, r7, r4
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8004dc8:	193b      	adds	r3, r7, r4
 8004dca:	4a1f      	ldr	r2, [pc, #124]	@ (8004e48 <MX_GPIO_Init+0x22c>)
 8004dcc:	0019      	movs	r1, r3
 8004dce:	0010      	movs	r0, r2
 8004dd0:	f001 ffd2 	bl	8006d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004dd4:	193b      	adds	r3, r7, r4
 8004dd6:	2208      	movs	r2, #8
 8004dd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dda:	193b      	adds	r3, r7, r4
 8004ddc:	2202      	movs	r2, #2
 8004dde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de0:	193b      	adds	r3, r7, r4
 8004de2:	2200      	movs	r2, #0
 8004de4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004de6:	193b      	adds	r3, r7, r4
 8004de8:	2200      	movs	r2, #0
 8004dea:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004dec:	193b      	adds	r3, r7, r4
 8004dee:	2200      	movs	r2, #0
 8004df0:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004df2:	193b      	adds	r3, r7, r4
 8004df4:	4a13      	ldr	r2, [pc, #76]	@ (8004e44 <MX_GPIO_Init+0x228>)
 8004df6:	0019      	movs	r1, r3
 8004df8:	0010      	movs	r0, r2
 8004dfa:	f001 ffbd 	bl	8006d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN3_IN_Pin BTN2_IN_Pin BTN1_IN_Pin */
  GPIO_InitStruct.Pin = BTN3_IN_Pin|BTN2_IN_Pin|BTN1_IN_Pin;
 8004dfe:	0021      	movs	r1, r4
 8004e00:	187b      	adds	r3, r7, r1
 8004e02:	22e0      	movs	r2, #224	@ 0xe0
 8004e04:	0092      	lsls	r2, r2, #2
 8004e06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e08:	187b      	adds	r3, r7, r1
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0e:	187b      	adds	r3, r7, r1
 8004e10:	2200      	movs	r2, #0
 8004e12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e14:	187b      	adds	r3, r7, r1
 8004e16:	4a0b      	ldr	r2, [pc, #44]	@ (8004e44 <MX_GPIO_Init+0x228>)
 8004e18:	0019      	movs	r1, r3
 8004e1a:	0010      	movs	r0, r2
 8004e1c:	f001 ffac 	bl	8006d78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004e20:	2200      	movs	r2, #0
 8004e22:	2100      	movs	r1, #0
 8004e24:	2007      	movs	r0, #7
 8004e26:	f001 fd23 	bl	8006870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004e2a:	2007      	movs	r0, #7
 8004e2c:	f001 fd35 	bl	800689a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004e30:	46c0      	nop			@ (mov r8, r8)
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b00b      	add	sp, #44	@ 0x2c
 8004e36:	bd90      	pop	{r4, r7, pc}
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	50000800 	.word	0x50000800
 8004e40:	50001400 	.word	0x50001400
 8004e44:	50000400 	.word	0x50000400
 8004e48:	50000c00 	.word	0x50000c00

08004e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e50:	b672      	cpsid	i
}
 8004e52:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e54:	46c0      	nop			@ (mov r8, r8)
 8004e56:	e7fd      	b.n	8004e54 <Error_Handler+0x8>

08004e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004e9c <HAL_MspInit+0x44>)
 8004e60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e62:	4b0e      	ldr	r3, [pc, #56]	@ (8004e9c <HAL_MspInit+0x44>)
 8004e64:	2101      	movs	r1, #1
 8004e66:	430a      	orrs	r2, r1
 8004e68:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e9c <HAL_MspInit+0x44>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	2201      	movs	r2, #1
 8004e70:	4013      	ands	r3, r2
 8004e72:	607b      	str	r3, [r7, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e76:	4b09      	ldr	r3, [pc, #36]	@ (8004e9c <HAL_MspInit+0x44>)
 8004e78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e7a:	4b08      	ldr	r3, [pc, #32]	@ (8004e9c <HAL_MspInit+0x44>)
 8004e7c:	2180      	movs	r1, #128	@ 0x80
 8004e7e:	0549      	lsls	r1, r1, #21
 8004e80:	430a      	orrs	r2, r1
 8004e82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e84:	4b05      	ldr	r3, [pc, #20]	@ (8004e9c <HAL_MspInit+0x44>)
 8004e86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e88:	2380      	movs	r3, #128	@ 0x80
 8004e8a:	055b      	lsls	r3, r3, #21
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e92:	46c0      	nop			@ (mov r8, r8)
 8004e94:	46bd      	mov	sp, r7
 8004e96:	b002      	add	sp, #8
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	46c0      	nop			@ (mov r8, r8)
 8004e9c:	40021000 	.word	0x40021000

08004ea0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ea0:	b590      	push	{r4, r7, lr}
 8004ea2:	b091      	sub	sp, #68	@ 0x44
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea8:	232c      	movs	r3, #44	@ 0x2c
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	0018      	movs	r0, r3
 8004eae:	2314      	movs	r3, #20
 8004eb0:	001a      	movs	r2, r3
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	f006 fbb6 	bl	800b624 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004eb8:	2410      	movs	r4, #16
 8004eba:	193b      	adds	r3, r7, r4
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	231c      	movs	r3, #28
 8004ec0:	001a      	movs	r2, r3
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	f006 fbae 	bl	800b624 <memset>
  if(hadc->Instance==ADC1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a3a      	ldr	r2, [pc, #232]	@ (8004fb8 <HAL_ADC_MspInit+0x118>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d16d      	bne.n	8004fae <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004ed2:	193b      	adds	r3, r7, r4
 8004ed4:	2280      	movs	r2, #128	@ 0x80
 8004ed6:	01d2      	lsls	r2, r2, #7
 8004ed8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 8004eda:	193b      	adds	r3, r7, r4
 8004edc:	2280      	movs	r2, #128	@ 0x80
 8004ede:	05d2      	lsls	r2, r2, #23
 8004ee0:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ee2:	193b      	adds	r3, r7, r4
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f003 fc4f 	bl	8008788 <HAL_RCCEx_PeriphCLKConfig>
 8004eea:	1e03      	subs	r3, r0, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8004eee:	f7ff ffad 	bl	8004e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004ef2:	4b32      	ldr	r3, [pc, #200]	@ (8004fbc <HAL_ADC_MspInit+0x11c>)
 8004ef4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ef6:	4b31      	ldr	r3, [pc, #196]	@ (8004fbc <HAL_ADC_MspInit+0x11c>)
 8004ef8:	2180      	movs	r1, #128	@ 0x80
 8004efa:	0349      	lsls	r1, r1, #13
 8004efc:	430a      	orrs	r2, r1
 8004efe:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f00:	4b2e      	ldr	r3, [pc, #184]	@ (8004fbc <HAL_ADC_MspInit+0x11c>)
 8004f02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f04:	2380      	movs	r3, #128	@ 0x80
 8004f06:	035b      	lsls	r3, r3, #13
 8004f08:	4013      	ands	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8004fbc <HAL_ADC_MspInit+0x11c>)
 8004f10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f12:	4b2a      	ldr	r3, [pc, #168]	@ (8004fbc <HAL_ADC_MspInit+0x11c>)
 8004f14:	2101      	movs	r1, #1
 8004f16:	430a      	orrs	r2, r1
 8004f18:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f1a:	4b28      	ldr	r3, [pc, #160]	@ (8004fbc <HAL_ADC_MspInit+0x11c>)
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1e:	2201      	movs	r2, #1
 8004f20:	4013      	ands	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004f26:	212c      	movs	r1, #44	@ 0x2c
 8004f28:	187b      	adds	r3, r7, r1
 8004f2a:	220c      	movs	r2, #12
 8004f2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f2e:	187b      	adds	r3, r7, r1
 8004f30:	2203      	movs	r2, #3
 8004f32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f34:	187b      	adds	r3, r7, r1
 8004f36:	2200      	movs	r2, #0
 8004f38:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f3a:	187a      	adds	r2, r7, r1
 8004f3c:	23a0      	movs	r3, #160	@ 0xa0
 8004f3e:	05db      	lsls	r3, r3, #23
 8004f40:	0011      	movs	r1, r2
 8004f42:	0018      	movs	r0, r3
 8004f44:	f001 ff18 	bl	8006d78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004f48:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc0 <HAL_ADC_MspInit+0x120>)
 8004f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8004fc4 <HAL_ADC_MspInit+0x124>)
 8004f4c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8004fc0 <HAL_ADC_MspInit+0x120>)
 8004f50:	2205      	movs	r2, #5
 8004f52:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f54:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc0 <HAL_ADC_MspInit+0x120>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f5a:	4b19      	ldr	r3, [pc, #100]	@ (8004fc0 <HAL_ADC_MspInit+0x120>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004f60:	4b17      	ldr	r3, [pc, #92]	@ (8004fc0 <HAL_ADC_MspInit+0x120>)
 8004f62:	2280      	movs	r2, #128	@ 0x80
 8004f64:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004f66:	4b16      	ldr	r3, [pc, #88]	@ (8004fc0 <HAL_ADC_MspInit+0x120>)
 8004f68:	2280      	movs	r2, #128	@ 0x80
 8004f6a:	0052      	lsls	r2, r2, #1
 8004f6c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004f6e:	4b14      	ldr	r3, [pc, #80]	@ (8004fc0 <HAL_ADC_MspInit+0x120>)
 8004f70:	2280      	movs	r2, #128	@ 0x80
 8004f72:	00d2      	lsls	r2, r2, #3
 8004f74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004f76:	4b12      	ldr	r3, [pc, #72]	@ (8004fc0 <HAL_ADC_MspInit+0x120>)
 8004f78:	2220      	movs	r2, #32
 8004f7a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004f7c:	4b10      	ldr	r3, [pc, #64]	@ (8004fc0 <HAL_ADC_MspInit+0x120>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004f82:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc0 <HAL_ADC_MspInit+0x120>)
 8004f84:	0018      	movs	r0, r3
 8004f86:	f001 fca5 	bl	80068d4 <HAL_DMA_Init>
 8004f8a:	1e03      	subs	r3, r0, #0
 8004f8c:	d001      	beq.n	8004f92 <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8004f8e:	f7ff ff5d 	bl	8004e4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc0 <HAL_ADC_MspInit+0x120>)
 8004f96:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f98:	4b09      	ldr	r3, [pc, #36]	@ (8004fc0 <HAL_ADC_MspInit+0x120>)
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	200c      	movs	r0, #12
 8004fa4:	f001 fc64 	bl	8006870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004fa8:	200c      	movs	r0, #12
 8004faa:	f001 fc76 	bl	800689a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004fae:	46c0      	nop			@ (mov r8, r8)
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	b011      	add	sp, #68	@ 0x44
 8004fb4:	bd90      	pop	{r4, r7, pc}
 8004fb6:	46c0      	nop			@ (mov r8, r8)
 8004fb8:	40012400 	.word	0x40012400
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	20000264 	.word	0x20000264
 8004fc4:	40020008 	.word	0x40020008

08004fc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b093      	sub	sp, #76	@ 0x4c
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd0:	2334      	movs	r3, #52	@ 0x34
 8004fd2:	18fb      	adds	r3, r7, r3
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	2314      	movs	r3, #20
 8004fd8:	001a      	movs	r2, r3
 8004fda:	2100      	movs	r1, #0
 8004fdc:	f006 fb22 	bl	800b624 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fe0:	2418      	movs	r4, #24
 8004fe2:	193b      	adds	r3, r7, r4
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	231c      	movs	r3, #28
 8004fe8:	001a      	movs	r2, r3
 8004fea:	2100      	movs	r1, #0
 8004fec:	f006 fb1a 	bl	800b624 <memset>
  if(hi2c->Instance==I2C1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a3f      	ldr	r2, [pc, #252]	@ (80050f4 <HAL_I2C_MspInit+0x12c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d140      	bne.n	800507c <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004ffa:	193b      	adds	r3, r7, r4
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005000:	193b      	adds	r3, r7, r4
 8005002:	2200      	movs	r2, #0
 8005004:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005006:	193b      	adds	r3, r7, r4
 8005008:	0018      	movs	r0, r3
 800500a:	f003 fbbd 	bl	8008788 <HAL_RCCEx_PeriphCLKConfig>
 800500e:	1e03      	subs	r3, r0, #0
 8005010:	d001      	beq.n	8005016 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005012:	f7ff ff1b 	bl	8004e4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005016:	4b38      	ldr	r3, [pc, #224]	@ (80050f8 <HAL_I2C_MspInit+0x130>)
 8005018:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800501a:	4b37      	ldr	r3, [pc, #220]	@ (80050f8 <HAL_I2C_MspInit+0x130>)
 800501c:	2101      	movs	r1, #1
 800501e:	430a      	orrs	r2, r1
 8005020:	635a      	str	r2, [r3, #52]	@ 0x34
 8005022:	4b35      	ldr	r3, [pc, #212]	@ (80050f8 <HAL_I2C_MspInit+0x130>)
 8005024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005026:	2201      	movs	r2, #1
 8005028:	4013      	ands	r3, r2
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800502e:	2134      	movs	r1, #52	@ 0x34
 8005030:	187b      	adds	r3, r7, r1
 8005032:	22c0      	movs	r2, #192	@ 0xc0
 8005034:	00d2      	lsls	r2, r2, #3
 8005036:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005038:	187b      	adds	r3, r7, r1
 800503a:	2212      	movs	r2, #18
 800503c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503e:	187b      	adds	r3, r7, r1
 8005040:	2200      	movs	r2, #0
 8005042:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005044:	187b      	adds	r3, r7, r1
 8005046:	2200      	movs	r2, #0
 8005048:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800504a:	187b      	adds	r3, r7, r1
 800504c:	2206      	movs	r2, #6
 800504e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005050:	187a      	adds	r2, r7, r1
 8005052:	23a0      	movs	r3, #160	@ 0xa0
 8005054:	05db      	lsls	r3, r3, #23
 8005056:	0011      	movs	r1, r2
 8005058:	0018      	movs	r0, r3
 800505a:	f001 fe8d 	bl	8006d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800505e:	4b26      	ldr	r3, [pc, #152]	@ (80050f8 <HAL_I2C_MspInit+0x130>)
 8005060:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005062:	4b25      	ldr	r3, [pc, #148]	@ (80050f8 <HAL_I2C_MspInit+0x130>)
 8005064:	2180      	movs	r1, #128	@ 0x80
 8005066:	0389      	lsls	r1, r1, #14
 8005068:	430a      	orrs	r2, r1
 800506a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800506c:	4b22      	ldr	r3, [pc, #136]	@ (80050f8 <HAL_I2C_MspInit+0x130>)
 800506e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005070:	2380      	movs	r3, #128	@ 0x80
 8005072:	039b      	lsls	r3, r3, #14
 8005074:	4013      	ands	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800507a:	e036      	b.n	80050ea <HAL_I2C_MspInit+0x122>
  else if(hi2c->Instance==I2C2)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1e      	ldr	r2, [pc, #120]	@ (80050fc <HAL_I2C_MspInit+0x134>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d131      	bne.n	80050ea <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005086:	4b1c      	ldr	r3, [pc, #112]	@ (80050f8 <HAL_I2C_MspInit+0x130>)
 8005088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800508a:	4b1b      	ldr	r3, [pc, #108]	@ (80050f8 <HAL_I2C_MspInit+0x130>)
 800508c:	2101      	movs	r1, #1
 800508e:	430a      	orrs	r2, r1
 8005090:	635a      	str	r2, [r3, #52]	@ 0x34
 8005092:	4b19      	ldr	r3, [pc, #100]	@ (80050f8 <HAL_I2C_MspInit+0x130>)
 8005094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005096:	2201      	movs	r2, #1
 8005098:	4013      	ands	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800509e:	2134      	movs	r1, #52	@ 0x34
 80050a0:	187b      	adds	r3, r7, r1
 80050a2:	22c0      	movs	r2, #192	@ 0xc0
 80050a4:	0152      	lsls	r2, r2, #5
 80050a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050a8:	187b      	adds	r3, r7, r1
 80050aa:	2212      	movs	r2, #18
 80050ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ae:	187b      	adds	r3, r7, r1
 80050b0:	2200      	movs	r2, #0
 80050b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050b4:	187b      	adds	r3, r7, r1
 80050b6:	2200      	movs	r2, #0
 80050b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80050ba:	187b      	adds	r3, r7, r1
 80050bc:	2206      	movs	r2, #6
 80050be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c0:	187a      	adds	r2, r7, r1
 80050c2:	23a0      	movs	r3, #160	@ 0xa0
 80050c4:	05db      	lsls	r3, r3, #23
 80050c6:	0011      	movs	r1, r2
 80050c8:	0018      	movs	r0, r3
 80050ca:	f001 fe55 	bl	8006d78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80050ce:	4b0a      	ldr	r3, [pc, #40]	@ (80050f8 <HAL_I2C_MspInit+0x130>)
 80050d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050d2:	4b09      	ldr	r3, [pc, #36]	@ (80050f8 <HAL_I2C_MspInit+0x130>)
 80050d4:	2180      	movs	r1, #128	@ 0x80
 80050d6:	03c9      	lsls	r1, r1, #15
 80050d8:	430a      	orrs	r2, r1
 80050da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80050dc:	4b06      	ldr	r3, [pc, #24]	@ (80050f8 <HAL_I2C_MspInit+0x130>)
 80050de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050e0:	2380      	movs	r3, #128	@ 0x80
 80050e2:	03db      	lsls	r3, r3, #15
 80050e4:	4013      	ands	r3, r2
 80050e6:	60bb      	str	r3, [r7, #8]
 80050e8:	68bb      	ldr	r3, [r7, #8]
}
 80050ea:	46c0      	nop			@ (mov r8, r8)
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b013      	add	sp, #76	@ 0x4c
 80050f0:	bd90      	pop	{r4, r7, pc}
 80050f2:	46c0      	nop			@ (mov r8, r8)
 80050f4:	40005400 	.word	0x40005400
 80050f8:	40021000 	.word	0x40021000
 80050fc:	40005800 	.word	0x40005800

08005100 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005100:	b590      	push	{r4, r7, lr}
 8005102:	b08b      	sub	sp, #44	@ 0x2c
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005108:	2414      	movs	r4, #20
 800510a:	193b      	adds	r3, r7, r4
 800510c:	0018      	movs	r0, r3
 800510e:	2314      	movs	r3, #20
 8005110:	001a      	movs	r2, r3
 8005112:	2100      	movs	r1, #0
 8005114:	f006 fa86 	bl	800b624 <memset>
  if(hspi->Instance==SPI2)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a26      	ldr	r2, [pc, #152]	@ (80051b8 <HAL_SPI_MspInit+0xb8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d145      	bne.n	80051ae <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005122:	4b26      	ldr	r3, [pc, #152]	@ (80051bc <HAL_SPI_MspInit+0xbc>)
 8005124:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005126:	4b25      	ldr	r3, [pc, #148]	@ (80051bc <HAL_SPI_MspInit+0xbc>)
 8005128:	2180      	movs	r1, #128	@ 0x80
 800512a:	01c9      	lsls	r1, r1, #7
 800512c:	430a      	orrs	r2, r1
 800512e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005130:	4b22      	ldr	r3, [pc, #136]	@ (80051bc <HAL_SPI_MspInit+0xbc>)
 8005132:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005134:	2380      	movs	r3, #128	@ 0x80
 8005136:	01db      	lsls	r3, r3, #7
 8005138:	4013      	ands	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800513e:	4b1f      	ldr	r3, [pc, #124]	@ (80051bc <HAL_SPI_MspInit+0xbc>)
 8005140:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005142:	4b1e      	ldr	r3, [pc, #120]	@ (80051bc <HAL_SPI_MspInit+0xbc>)
 8005144:	2102      	movs	r1, #2
 8005146:	430a      	orrs	r2, r1
 8005148:	635a      	str	r2, [r3, #52]	@ 0x34
 800514a:	4b1c      	ldr	r3, [pc, #112]	@ (80051bc <HAL_SPI_MspInit+0xbc>)
 800514c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514e:	2202      	movs	r2, #2
 8005150:	4013      	ands	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005156:	193b      	adds	r3, r7, r4
 8005158:	2204      	movs	r2, #4
 800515a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800515c:	193b      	adds	r3, r7, r4
 800515e:	2202      	movs	r2, #2
 8005160:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005162:	193b      	adds	r3, r7, r4
 8005164:	2200      	movs	r2, #0
 8005166:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005168:	193b      	adds	r3, r7, r4
 800516a:	2200      	movs	r2, #0
 800516c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 800516e:	193b      	adds	r3, r7, r4
 8005170:	2201      	movs	r2, #1
 8005172:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005174:	193b      	adds	r3, r7, r4
 8005176:	4a12      	ldr	r2, [pc, #72]	@ (80051c0 <HAL_SPI_MspInit+0xc0>)
 8005178:	0019      	movs	r1, r3
 800517a:	0010      	movs	r0, r2
 800517c:	f001 fdfc 	bl	8006d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005180:	0021      	movs	r1, r4
 8005182:	187b      	adds	r3, r7, r1
 8005184:	2280      	movs	r2, #128	@ 0x80
 8005186:	00d2      	lsls	r2, r2, #3
 8005188:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518a:	187b      	adds	r3, r7, r1
 800518c:	2202      	movs	r2, #2
 800518e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005190:	187b      	adds	r3, r7, r1
 8005192:	2200      	movs	r2, #0
 8005194:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005196:	187b      	adds	r3, r7, r1
 8005198:	2200      	movs	r2, #0
 800519a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800519c:	187b      	adds	r3, r7, r1
 800519e:	2205      	movs	r2, #5
 80051a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a2:	187b      	adds	r3, r7, r1
 80051a4:	4a06      	ldr	r2, [pc, #24]	@ (80051c0 <HAL_SPI_MspInit+0xc0>)
 80051a6:	0019      	movs	r1, r3
 80051a8:	0010      	movs	r0, r2
 80051aa:	f001 fde5 	bl	8006d78 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80051ae:	46c0      	nop			@ (mov r8, r8)
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b00b      	add	sp, #44	@ 0x2c
 80051b4:	bd90      	pop	{r4, r7, pc}
 80051b6:	46c0      	nop			@ (mov r8, r8)
 80051b8:	40003800 	.word	0x40003800
 80051bc:	40021000 	.word	0x40021000
 80051c0:	50000400 	.word	0x50000400

080051c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a0e      	ldr	r2, [pc, #56]	@ (800520c <HAL_TIM_Base_MspInit+0x48>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d115      	bne.n	8005202 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80051d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005210 <HAL_TIM_Base_MspInit+0x4c>)
 80051d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051da:	4b0d      	ldr	r3, [pc, #52]	@ (8005210 <HAL_TIM_Base_MspInit+0x4c>)
 80051dc:	2180      	movs	r1, #128	@ 0x80
 80051de:	0289      	lsls	r1, r1, #10
 80051e0:	430a      	orrs	r2, r1
 80051e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80051e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005210 <HAL_TIM_Base_MspInit+0x4c>)
 80051e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051e8:	2380      	movs	r3, #128	@ 0x80
 80051ea:	029b      	lsls	r3, r3, #10
 80051ec:	4013      	ands	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80051f2:	2200      	movs	r2, #0
 80051f4:	2100      	movs	r1, #0
 80051f6:	2015      	movs	r0, #21
 80051f8:	f001 fb3a 	bl	8006870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80051fc:	2015      	movs	r0, #21
 80051fe:	f001 fb4c 	bl	800689a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8005202:	46c0      	nop			@ (mov r8, r8)
 8005204:	46bd      	mov	sp, r7
 8005206:	b004      	add	sp, #16
 8005208:	bd80      	pop	{r7, pc}
 800520a:	46c0      	nop			@ (mov r8, r8)
 800520c:	40014400 	.word	0x40014400
 8005210:	40021000 	.word	0x40021000

08005214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005214:	b590      	push	{r4, r7, lr}
 8005216:	b08b      	sub	sp, #44	@ 0x2c
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800521c:	2414      	movs	r4, #20
 800521e:	193b      	adds	r3, r7, r4
 8005220:	0018      	movs	r0, r3
 8005222:	2314      	movs	r3, #20
 8005224:	001a      	movs	r2, r3
 8005226:	2100      	movs	r1, #0
 8005228:	f006 f9fc 	bl	800b624 <memset>
  if(huart->Instance==USART3)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a2c      	ldr	r2, [pc, #176]	@ (80052e4 <HAL_UART_MspInit+0xd0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d151      	bne.n	80052da <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005236:	4b2c      	ldr	r3, [pc, #176]	@ (80052e8 <HAL_UART_MspInit+0xd4>)
 8005238:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800523a:	4b2b      	ldr	r3, [pc, #172]	@ (80052e8 <HAL_UART_MspInit+0xd4>)
 800523c:	2180      	movs	r1, #128	@ 0x80
 800523e:	02c9      	lsls	r1, r1, #11
 8005240:	430a      	orrs	r2, r1
 8005242:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005244:	4b28      	ldr	r3, [pc, #160]	@ (80052e8 <HAL_UART_MspInit+0xd4>)
 8005246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005248:	2380      	movs	r3, #128	@ 0x80
 800524a:	02db      	lsls	r3, r3, #11
 800524c:	4013      	ands	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005252:	4b25      	ldr	r3, [pc, #148]	@ (80052e8 <HAL_UART_MspInit+0xd4>)
 8005254:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005256:	4b24      	ldr	r3, [pc, #144]	@ (80052e8 <HAL_UART_MspInit+0xd4>)
 8005258:	2101      	movs	r1, #1
 800525a:	430a      	orrs	r2, r1
 800525c:	635a      	str	r2, [r3, #52]	@ 0x34
 800525e:	4b22      	ldr	r3, [pc, #136]	@ (80052e8 <HAL_UART_MspInit+0xd4>)
 8005260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005262:	2201      	movs	r2, #1
 8005264:	4013      	ands	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800526a:	4b1f      	ldr	r3, [pc, #124]	@ (80052e8 <HAL_UART_MspInit+0xd4>)
 800526c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800526e:	4b1e      	ldr	r3, [pc, #120]	@ (80052e8 <HAL_UART_MspInit+0xd4>)
 8005270:	2102      	movs	r1, #2
 8005272:	430a      	orrs	r2, r1
 8005274:	635a      	str	r2, [r3, #52]	@ 0x34
 8005276:	4b1c      	ldr	r3, [pc, #112]	@ (80052e8 <HAL_UART_MspInit+0xd4>)
 8005278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800527a:	2202      	movs	r2, #2
 800527c:	4013      	ands	r3, r2
 800527e:	60bb      	str	r3, [r7, #8]
 8005280:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GSM_TX_Pin;
 8005282:	193b      	adds	r3, r7, r4
 8005284:	2220      	movs	r2, #32
 8005286:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005288:	193b      	adds	r3, r7, r4
 800528a:	2202      	movs	r2, #2
 800528c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528e:	193b      	adds	r3, r7, r4
 8005290:	2200      	movs	r2, #0
 8005292:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005294:	193b      	adds	r3, r7, r4
 8005296:	2200      	movs	r2, #0
 8005298:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800529a:	193b      	adds	r3, r7, r4
 800529c:	2204      	movs	r2, #4
 800529e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_TX_GPIO_Port, &GPIO_InitStruct);
 80052a0:	193a      	adds	r2, r7, r4
 80052a2:	23a0      	movs	r3, #160	@ 0xa0
 80052a4:	05db      	lsls	r3, r3, #23
 80052a6:	0011      	movs	r1, r2
 80052a8:	0018      	movs	r0, r3
 80052aa:	f001 fd65 	bl	8006d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GSM_RX_Pin;
 80052ae:	0021      	movs	r1, r4
 80052b0:	187b      	adds	r3, r7, r1
 80052b2:	2201      	movs	r2, #1
 80052b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b6:	187b      	adds	r3, r7, r1
 80052b8:	2202      	movs	r2, #2
 80052ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052bc:	187b      	adds	r3, r7, r1
 80052be:	2200      	movs	r2, #0
 80052c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c2:	187b      	adds	r3, r7, r1
 80052c4:	2200      	movs	r2, #0
 80052c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80052c8:	187b      	adds	r3, r7, r1
 80052ca:	2204      	movs	r2, #4
 80052cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GSM_RX_GPIO_Port, &GPIO_InitStruct);
 80052ce:	187b      	adds	r3, r7, r1
 80052d0:	4a06      	ldr	r2, [pc, #24]	@ (80052ec <HAL_UART_MspInit+0xd8>)
 80052d2:	0019      	movs	r1, r3
 80052d4:	0010      	movs	r0, r2
 80052d6:	f001 fd4f 	bl	8006d78 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80052da:	46c0      	nop			@ (mov r8, r8)
 80052dc:	46bd      	mov	sp, r7
 80052de:	b00b      	add	sp, #44	@ 0x2c
 80052e0:	bd90      	pop	{r4, r7, pc}
 80052e2:	46c0      	nop			@ (mov r8, r8)
 80052e4:	40004800 	.word	0x40004800
 80052e8:	40021000 	.word	0x40021000
 80052ec:	50000400 	.word	0x50000400

080052f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80052f4:	46c0      	nop			@ (mov r8, r8)
 80052f6:	e7fd      	b.n	80052f4 <NMI_Handler+0x4>

080052f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052fc:	46c0      	nop			@ (mov r8, r8)
 80052fe:	e7fd      	b.n	80052fc <HardFault_Handler+0x4>

08005300 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005304:	46c0      	nop			@ (mov r8, r8)
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800530e:	46c0      	nop			@ (mov r8, r8)
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005318:	f000 f9f8 	bl	800570c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800531c:	46c0      	nop			@ (mov r8, r8)
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZCD_Pin);
 8005326:	2010      	movs	r0, #16
 8005328:	f001 fec4 	bl	80070b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800532c:	46c0      	nop			@ (mov r8, r8)
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005338:	4b03      	ldr	r3, [pc, #12]	@ (8005348 <DMA1_Channel1_IRQHandler+0x14>)
 800533a:	0018      	movs	r0, r3
 800533c:	f001 fbda 	bl	8006af4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005340:	46c0      	nop			@ (mov r8, r8)
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	46c0      	nop			@ (mov r8, r8)
 8005348:	20000264 	.word	0x20000264

0800534c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005350:	4b03      	ldr	r3, [pc, #12]	@ (8005360 <ADC1_IRQHandler+0x14>)
 8005352:	0018      	movs	r0, r3
 8005354:	f000 fda4 	bl	8005ea0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005358:	46c0      	nop			@ (mov r8, r8)
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	46c0      	nop			@ (mov r8, r8)
 8005360:	20000200 	.word	0x20000200

08005364 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005368:	4b03      	ldr	r3, [pc, #12]	@ (8005378 <TIM16_IRQHandler+0x14>)
 800536a:	0018      	movs	r0, r3
 800536c:	f004 f9ae 	bl	80096cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8005370:	46c0      	nop			@ (mov r8, r8)
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	46c0      	nop			@ (mov r8, r8)
 8005378:	200003cc 	.word	0x200003cc

0800537c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  return 1;
 8005380:	2301      	movs	r3, #1
}
 8005382:	0018      	movs	r0, r3
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <_kill>:

int _kill(int pid, int sig)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005392:	f006 f9b7 	bl	800b704 <__errno>
 8005396:	0003      	movs	r3, r0
 8005398:	2216      	movs	r2, #22
 800539a:	601a      	str	r2, [r3, #0]
  return -1;
 800539c:	2301      	movs	r3, #1
 800539e:	425b      	negs	r3, r3
}
 80053a0:	0018      	movs	r0, r3
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b002      	add	sp, #8
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <_exit>:

void _exit (int status)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80053b0:	2301      	movs	r3, #1
 80053b2:	425a      	negs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	0011      	movs	r1, r2
 80053b8:	0018      	movs	r0, r3
 80053ba:	f7ff ffe5 	bl	8005388 <_kill>
  while (1) {}    /* Make sure we hang here */
 80053be:	46c0      	nop			@ (mov r8, r8)
 80053c0:	e7fd      	b.n	80053be <_exit+0x16>

080053c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b086      	sub	sp, #24
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	e00a      	b.n	80053ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80053d4:	e000      	b.n	80053d8 <_read+0x16>
 80053d6:	bf00      	nop
 80053d8:	0001      	movs	r1, r0
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	60ba      	str	r2, [r7, #8]
 80053e0:	b2ca      	uxtb	r2, r1
 80053e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	3301      	adds	r3, #1
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	dbf0      	blt.n	80053d4 <_read+0x12>
  }

  return len;
 80053f2:	687b      	ldr	r3, [r7, #4]
}
 80053f4:	0018      	movs	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b006      	add	sp, #24
 80053fa:	bd80      	pop	{r7, pc}

080053fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e009      	b.n	8005422 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	60ba      	str	r2, [r7, #8]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	0018      	movs	r0, r3
 8005418:	e000      	b.n	800541c <_write+0x20>
 800541a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	3301      	adds	r3, #1
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	429a      	cmp	r2, r3
 8005428:	dbf1      	blt.n	800540e <_write+0x12>
  }
  return len;
 800542a:	687b      	ldr	r3, [r7, #4]
}
 800542c:	0018      	movs	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	b006      	add	sp, #24
 8005432:	bd80      	pop	{r7, pc}

08005434 <_close>:

int _close(int file)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800543c:	2301      	movs	r3, #1
 800543e:	425b      	negs	r3, r3
}
 8005440:	0018      	movs	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	b002      	add	sp, #8
 8005446:	bd80      	pop	{r7, pc}

08005448 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2280      	movs	r2, #128	@ 0x80
 8005456:	0192      	lsls	r2, r2, #6
 8005458:	605a      	str	r2, [r3, #4]
  return 0;
 800545a:	2300      	movs	r3, #0
}
 800545c:	0018      	movs	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	b002      	add	sp, #8
 8005462:	bd80      	pop	{r7, pc}

08005464 <_isatty>:

int _isatty(int file)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800546c:	2301      	movs	r3, #1
}
 800546e:	0018      	movs	r0, r3
 8005470:	46bd      	mov	sp, r7
 8005472:	b002      	add	sp, #8
 8005474:	bd80      	pop	{r7, pc}

08005476 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b084      	sub	sp, #16
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005482:	2300      	movs	r3, #0
}
 8005484:	0018      	movs	r0, r3
 8005486:	46bd      	mov	sp, r7
 8005488:	b004      	add	sp, #16
 800548a:	bd80      	pop	{r7, pc}

0800548c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005494:	4a14      	ldr	r2, [pc, #80]	@ (80054e8 <_sbrk+0x5c>)
 8005496:	4b15      	ldr	r3, [pc, #84]	@ (80054ec <_sbrk+0x60>)
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054a0:	4b13      	ldr	r3, [pc, #76]	@ (80054f0 <_sbrk+0x64>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054a8:	4b11      	ldr	r3, [pc, #68]	@ (80054f0 <_sbrk+0x64>)
 80054aa:	4a12      	ldr	r2, [pc, #72]	@ (80054f4 <_sbrk+0x68>)
 80054ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054ae:	4b10      	ldr	r3, [pc, #64]	@ (80054f0 <_sbrk+0x64>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	18d3      	adds	r3, r2, r3
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d207      	bcs.n	80054cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80054bc:	f006 f922 	bl	800b704 <__errno>
 80054c0:	0003      	movs	r3, r0
 80054c2:	220c      	movs	r2, #12
 80054c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80054c6:	2301      	movs	r3, #1
 80054c8:	425b      	negs	r3, r3
 80054ca:	e009      	b.n	80054e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80054cc:	4b08      	ldr	r3, [pc, #32]	@ (80054f0 <_sbrk+0x64>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80054d2:	4b07      	ldr	r3, [pc, #28]	@ (80054f0 <_sbrk+0x64>)
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	18d2      	adds	r2, r2, r3
 80054da:	4b05      	ldr	r3, [pc, #20]	@ (80054f0 <_sbrk+0x64>)
 80054dc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80054de:	68fb      	ldr	r3, [r7, #12]
}
 80054e0:	0018      	movs	r0, r3
 80054e2:	46bd      	mov	sp, r7
 80054e4:	b006      	add	sp, #24
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20009000 	.word	0x20009000
 80054ec:	00000400 	.word	0x00000400
 80054f0:	20000508 	.word	0x20000508
 80054f4:	20000660 	.word	0x20000660

080054f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80054fc:	46c0      	nop			@ (mov r8, r8)
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <sensor_rx_disable>:
 *      Author: Jewel James
 */

#include "temp.h"

void sensor_rx_disable() {
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
	TEMP1_CS(1);
 8005508:	4b0d      	ldr	r3, [pc, #52]	@ (8005540 <sensor_rx_disable+0x3c>)
 800550a:	2280      	movs	r2, #128	@ 0x80
 800550c:	0112      	lsls	r2, r2, #4
 800550e:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8005510:	4b0b      	ldr	r3, [pc, #44]	@ (8005540 <sensor_rx_disable+0x3c>)
 8005512:	2280      	movs	r2, #128	@ 0x80
 8005514:	0152      	lsls	r2, r2, #5
 8005516:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 8005518:	4b09      	ldr	r3, [pc, #36]	@ (8005540 <sensor_rx_disable+0x3c>)
 800551a:	2280      	movs	r2, #128	@ 0x80
 800551c:	0192      	lsls	r2, r2, #6
 800551e:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8005520:	4b07      	ldr	r3, [pc, #28]	@ (8005540 <sensor_rx_disable+0x3c>)
 8005522:	2280      	movs	r2, #128	@ 0x80
 8005524:	01d2      	lsls	r2, r2, #7
 8005526:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8005528:	4b05      	ldr	r3, [pc, #20]	@ (8005540 <sensor_rx_disable+0x3c>)
 800552a:	2280      	movs	r2, #128	@ 0x80
 800552c:	0212      	lsls	r2, r2, #8
 800552e:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8005530:	23a0      	movs	r3, #160	@ 0xa0
 8005532:	05db      	lsls	r3, r3, #23
 8005534:	2280      	movs	r2, #128	@ 0x80
 8005536:	0052      	lsls	r2, r2, #1
 8005538:	619a      	str	r2, [r3, #24]
}
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	50000400 	.word	0x50000400

08005544 <sensor_rx_select>:

void sensor_rx_select(uint8_t index) {
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	0002      	movs	r2, r0
 800554c:	1dfb      	adds	r3, r7, #7
 800554e:	701a      	strb	r2, [r3, #0]
	TEMP1_CS(1);
 8005550:	4b22      	ldr	r3, [pc, #136]	@ (80055dc <sensor_rx_select+0x98>)
 8005552:	2280      	movs	r2, #128	@ 0x80
 8005554:	0112      	lsls	r2, r2, #4
 8005556:	619a      	str	r2, [r3, #24]
	TEMP2_CS(1);
 8005558:	4b20      	ldr	r3, [pc, #128]	@ (80055dc <sensor_rx_select+0x98>)
 800555a:	2280      	movs	r2, #128	@ 0x80
 800555c:	0152      	lsls	r2, r2, #5
 800555e:	619a      	str	r2, [r3, #24]
	TEMP3_CS(1);
 8005560:	4b1e      	ldr	r3, [pc, #120]	@ (80055dc <sensor_rx_select+0x98>)
 8005562:	2280      	movs	r2, #128	@ 0x80
 8005564:	0192      	lsls	r2, r2, #6
 8005566:	619a      	str	r2, [r3, #24]
	TEMP4_CS(1);
 8005568:	4b1c      	ldr	r3, [pc, #112]	@ (80055dc <sensor_rx_select+0x98>)
 800556a:	2280      	movs	r2, #128	@ 0x80
 800556c:	01d2      	lsls	r2, r2, #7
 800556e:	619a      	str	r2, [r3, #24]
	TEMP5_CS(1);
 8005570:	4b1a      	ldr	r3, [pc, #104]	@ (80055dc <sensor_rx_select+0x98>)
 8005572:	2280      	movs	r2, #128	@ 0x80
 8005574:	0212      	lsls	r2, r2, #8
 8005576:	619a      	str	r2, [r3, #24]
	TEMP6_CS(1);
 8005578:	23a0      	movs	r3, #160	@ 0xa0
 800557a:	05db      	lsls	r3, r3, #23
 800557c:	2280      	movs	r2, #128	@ 0x80
 800557e:	0052      	lsls	r2, r2, #1
 8005580:	619a      	str	r2, [r3, #24]
	switch(index) {
 8005582:	1dfb      	adds	r3, r7, #7
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b06      	cmp	r3, #6
 8005588:	d824      	bhi.n	80055d4 <sensor_rx_select+0x90>
 800558a:	009a      	lsls	r2, r3, #2
 800558c:	4b14      	ldr	r3, [pc, #80]	@ (80055e0 <sensor_rx_select+0x9c>)
 800558e:	18d3      	adds	r3, r2, r3
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	469f      	mov	pc, r3
	case 0:
		return;
	case 1:
		TEMP1_CS(0);
 8005594:	4b11      	ldr	r3, [pc, #68]	@ (80055dc <sensor_rx_select+0x98>)
 8005596:	2280      	movs	r2, #128	@ 0x80
 8005598:	0112      	lsls	r2, r2, #4
 800559a:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 800559c:	e01a      	b.n	80055d4 <sensor_rx_select+0x90>
	case 2:
		TEMP2_CS(0);
 800559e:	4b0f      	ldr	r3, [pc, #60]	@ (80055dc <sensor_rx_select+0x98>)
 80055a0:	2280      	movs	r2, #128	@ 0x80
 80055a2:	0152      	lsls	r2, r2, #5
 80055a4:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 80055a6:	e015      	b.n	80055d4 <sensor_rx_select+0x90>
	case 3:
		TEMP3_CS(0);
 80055a8:	4b0c      	ldr	r3, [pc, #48]	@ (80055dc <sensor_rx_select+0x98>)
 80055aa:	2280      	movs	r2, #128	@ 0x80
 80055ac:	0192      	lsls	r2, r2, #6
 80055ae:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 80055b0:	e010      	b.n	80055d4 <sensor_rx_select+0x90>
	case 4:
		TEMP4_CS(0);
 80055b2:	4b0a      	ldr	r3, [pc, #40]	@ (80055dc <sensor_rx_select+0x98>)
 80055b4:	2280      	movs	r2, #128	@ 0x80
 80055b6:	01d2      	lsls	r2, r2, #7
 80055b8:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 80055ba:	e00b      	b.n	80055d4 <sensor_rx_select+0x90>
	case 5:
		TEMP5_CS(0);
 80055bc:	4b07      	ldr	r3, [pc, #28]	@ (80055dc <sensor_rx_select+0x98>)
 80055be:	2280      	movs	r2, #128	@ 0x80
 80055c0:	0212      	lsls	r2, r2, #8
 80055c2:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 80055c4:	e006      	b.n	80055d4 <sensor_rx_select+0x90>
	case 6:
		TEMP6_CS(0);
 80055c6:	23a0      	movs	r3, #160	@ 0xa0
 80055c8:	05db      	lsls	r3, r3, #23
 80055ca:	2280      	movs	r2, #128	@ 0x80
 80055cc:	0052      	lsls	r2, r2, #1
 80055ce:	629a      	str	r2, [r3, #40]	@ 0x28
		break;
 80055d0:	e000      	b.n	80055d4 <sensor_rx_select+0x90>
		return;
 80055d2:	46c0      	nop			@ (mov r8, r8)
	}
}
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b002      	add	sp, #8
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	46c0      	nop			@ (mov r8, r8)
 80055dc:	50000400 	.word	0x50000400
 80055e0:	0800dc2c 	.word	0x0800dc2c

080055e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80055e4:	480d      	ldr	r0, [pc, #52]	@ (800561c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80055e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80055e8:	f7ff ff86 	bl	80054f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055ec:	480c      	ldr	r0, [pc, #48]	@ (8005620 <LoopForever+0x6>)
  ldr r1, =_edata
 80055ee:	490d      	ldr	r1, [pc, #52]	@ (8005624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80055f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005628 <LoopForever+0xe>)
  movs r3, #0
 80055f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055f4:	e002      	b.n	80055fc <LoopCopyDataInit>

080055f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055fa:	3304      	adds	r3, #4

080055fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005600:	d3f9      	bcc.n	80055f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005602:	4a0a      	ldr	r2, [pc, #40]	@ (800562c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005604:	4c0a      	ldr	r4, [pc, #40]	@ (8005630 <LoopForever+0x16>)
  movs r3, #0
 8005606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005608:	e001      	b.n	800560e <LoopFillZerobss>

0800560a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800560a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800560c:	3204      	adds	r2, #4

0800560e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800560e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005610:	d3fb      	bcc.n	800560a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005612:	f006 f87d 	bl	800b710 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005616:	f7fe f95d 	bl	80038d4 <main>

0800561a <LoopForever>:

LoopForever:
  b LoopForever
 800561a:	e7fe      	b.n	800561a <LoopForever>
  ldr   r0, =_estack
 800561c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8005620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005624:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8005628:	0800dfe8 	.word	0x0800dfe8
  ldr r2, =_sbss
 800562c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8005630:	20000660 	.word	0x20000660

08005634 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005634:	e7fe      	b.n	8005634 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>
	...

08005638 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800563e:	1dfb      	adds	r3, r7, #7
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005644:	4b0b      	ldr	r3, [pc, #44]	@ (8005674 <HAL_Init+0x3c>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	4b0a      	ldr	r3, [pc, #40]	@ (8005674 <HAL_Init+0x3c>)
 800564a:	2180      	movs	r1, #128	@ 0x80
 800564c:	0049      	lsls	r1, r1, #1
 800564e:	430a      	orrs	r2, r1
 8005650:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005652:	2003      	movs	r0, #3
 8005654:	f000 f810 	bl	8005678 <HAL_InitTick>
 8005658:	1e03      	subs	r3, r0, #0
 800565a:	d003      	beq.n	8005664 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800565c:	1dfb      	adds	r3, r7, #7
 800565e:	2201      	movs	r2, #1
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	e001      	b.n	8005668 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005664:	f7ff fbf8 	bl	8004e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005668:	1dfb      	adds	r3, r7, #7
 800566a:	781b      	ldrb	r3, [r3, #0]
}
 800566c:	0018      	movs	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	b002      	add	sp, #8
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40022000 	.word	0x40022000

08005678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005678:	b590      	push	{r4, r7, lr}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005680:	230f      	movs	r3, #15
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005688:	4b1d      	ldr	r3, [pc, #116]	@ (8005700 <HAL_InitTick+0x88>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d02b      	beq.n	80056e8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005690:	4b1c      	ldr	r3, [pc, #112]	@ (8005704 <HAL_InitTick+0x8c>)
 8005692:	681c      	ldr	r4, [r3, #0]
 8005694:	4b1a      	ldr	r3, [pc, #104]	@ (8005700 <HAL_InitTick+0x88>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	0019      	movs	r1, r3
 800569a:	23fa      	movs	r3, #250	@ 0xfa
 800569c:	0098      	lsls	r0, r3, #2
 800569e:	f7fa fd4b 	bl	8000138 <__udivsi3>
 80056a2:	0003      	movs	r3, r0
 80056a4:	0019      	movs	r1, r3
 80056a6:	0020      	movs	r0, r4
 80056a8:	f7fa fd46 	bl	8000138 <__udivsi3>
 80056ac:	0003      	movs	r3, r0
 80056ae:	0018      	movs	r0, r3
 80056b0:	f001 f903 	bl	80068ba <HAL_SYSTICK_Config>
 80056b4:	1e03      	subs	r3, r0, #0
 80056b6:	d112      	bne.n	80056de <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d80a      	bhi.n	80056d4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	2301      	movs	r3, #1
 80056c2:	425b      	negs	r3, r3
 80056c4:	2200      	movs	r2, #0
 80056c6:	0018      	movs	r0, r3
 80056c8:	f001 f8d2 	bl	8006870 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80056cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005708 <HAL_InitTick+0x90>)
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	e00d      	b.n	80056f0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80056d4:	230f      	movs	r3, #15
 80056d6:	18fb      	adds	r3, r7, r3
 80056d8:	2201      	movs	r2, #1
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	e008      	b.n	80056f0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80056de:	230f      	movs	r3, #15
 80056e0:	18fb      	adds	r3, r7, r3
 80056e2:	2201      	movs	r2, #1
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	e003      	b.n	80056f0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80056e8:	230f      	movs	r3, #15
 80056ea:	18fb      	adds	r3, r7, r3
 80056ec:	2201      	movs	r2, #1
 80056ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80056f0:	230f      	movs	r3, #15
 80056f2:	18fb      	adds	r3, r7, r3
 80056f4:	781b      	ldrb	r3, [r3, #0]
}
 80056f6:	0018      	movs	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	b005      	add	sp, #20
 80056fc:	bd90      	pop	{r4, r7, pc}
 80056fe:	46c0      	nop			@ (mov r8, r8)
 8005700:	20000018 	.word	0x20000018
 8005704:	20000010 	.word	0x20000010
 8005708:	20000014 	.word	0x20000014

0800570c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005710:	4b05      	ldr	r3, [pc, #20]	@ (8005728 <HAL_IncTick+0x1c>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	001a      	movs	r2, r3
 8005716:	4b05      	ldr	r3, [pc, #20]	@ (800572c <HAL_IncTick+0x20>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	18d2      	adds	r2, r2, r3
 800571c:	4b03      	ldr	r3, [pc, #12]	@ (800572c <HAL_IncTick+0x20>)
 800571e:	601a      	str	r2, [r3, #0]
}
 8005720:	46c0      	nop			@ (mov r8, r8)
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	46c0      	nop			@ (mov r8, r8)
 8005728:	20000018 	.word	0x20000018
 800572c:	2000050c 	.word	0x2000050c

08005730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  return uwTick;
 8005734:	4b02      	ldr	r3, [pc, #8]	@ (8005740 <HAL_GetTick+0x10>)
 8005736:	681b      	ldr	r3, [r3, #0]
}
 8005738:	0018      	movs	r0, r3
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	46c0      	nop			@ (mov r8, r8)
 8005740:	2000050c 	.word	0x2000050c

08005744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800574c:	f7ff fff0 	bl	8005730 <HAL_GetTick>
 8005750:	0003      	movs	r3, r0
 8005752:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3301      	adds	r3, #1
 800575c:	d005      	beq.n	800576a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800575e:	4b0a      	ldr	r3, [pc, #40]	@ (8005788 <HAL_Delay+0x44>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	001a      	movs	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	189b      	adds	r3, r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800576a:	46c0      	nop			@ (mov r8, r8)
 800576c:	f7ff ffe0 	bl	8005730 <HAL_GetTick>
 8005770:	0002      	movs	r2, r0
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	429a      	cmp	r2, r3
 800577a:	d8f7      	bhi.n	800576c <HAL_Delay+0x28>
  {
  }
}
 800577c:	46c0      	nop			@ (mov r8, r8)
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	46bd      	mov	sp, r7
 8005782:	b004      	add	sp, #16
 8005784:	bd80      	pop	{r7, pc}
 8005786:	46c0      	nop			@ (mov r8, r8)
 8005788:	20000018 	.word	0x20000018

0800578c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a05      	ldr	r2, [pc, #20]	@ (80057b0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800579c:	401a      	ands	r2, r3
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
}
 80057a6:	46c0      	nop			@ (mov r8, r8)
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b002      	add	sp, #8
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	46c0      	nop			@ (mov r8, r8)
 80057b0:	fe3fffff 	.word	0xfe3fffff

080057b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	23e0      	movs	r3, #224	@ 0xe0
 80057c2:	045b      	lsls	r3, r3, #17
 80057c4:	4013      	ands	r3, r2
}
 80057c6:	0018      	movs	r0, r3
 80057c8:	46bd      	mov	sp, r7
 80057ca:	b002      	add	sp, #8
 80057cc:	bd80      	pop	{r7, pc}

080057ce <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	2104      	movs	r1, #4
 80057e2:	400a      	ands	r2, r1
 80057e4:	2107      	movs	r1, #7
 80057e6:	4091      	lsls	r1, r2
 80057e8:	000a      	movs	r2, r1
 80057ea:	43d2      	mvns	r2, r2
 80057ec:	401a      	ands	r2, r3
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2104      	movs	r1, #4
 80057f2:	400b      	ands	r3, r1
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	4099      	lsls	r1, r3
 80057f8:	000b      	movs	r3, r1
 80057fa:	431a      	orrs	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005800:	46c0      	nop			@ (mov r8, r8)
 8005802:	46bd      	mov	sp, r7
 8005804:	b004      	add	sp, #16
 8005806:	bd80      	pop	{r7, pc}

08005808 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	2104      	movs	r1, #4
 800581a:	400a      	ands	r2, r1
 800581c:	2107      	movs	r1, #7
 800581e:	4091      	lsls	r1, r2
 8005820:	000a      	movs	r2, r1
 8005822:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2104      	movs	r1, #4
 8005828:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800582a:	40da      	lsrs	r2, r3
 800582c:	0013      	movs	r3, r2
}
 800582e:	0018      	movs	r0, r3
 8005830:	46bd      	mov	sp, r7
 8005832:	b002      	add	sp, #8
 8005834:	bd80      	pop	{r7, pc}

08005836 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b082      	sub	sp, #8
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	23c0      	movs	r3, #192	@ 0xc0
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	4013      	ands	r3, r2
 8005848:	d101      	bne.n	800584e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800584e:	2300      	movs	r3, #0
}
 8005850:	0018      	movs	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	b002      	add	sp, #8
 8005856:	bd80      	pop	{r7, pc}

08005858 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	211f      	movs	r1, #31
 800586c:	400a      	ands	r2, r1
 800586e:	210f      	movs	r1, #15
 8005870:	4091      	lsls	r1, r2
 8005872:	000a      	movs	r2, r1
 8005874:	43d2      	mvns	r2, r2
 8005876:	401a      	ands	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	0e9b      	lsrs	r3, r3, #26
 800587c:	210f      	movs	r1, #15
 800587e:	4019      	ands	r1, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	201f      	movs	r0, #31
 8005884:	4003      	ands	r3, r0
 8005886:	4099      	lsls	r1, r3
 8005888:	000b      	movs	r3, r1
 800588a:	431a      	orrs	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005890:	46c0      	nop			@ (mov r8, r8)
 8005892:	46bd      	mov	sp, r7
 8005894:	b004      	add	sp, #16
 8005896:	bd80      	pop	{r7, pc}

08005898 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	035b      	lsls	r3, r3, #13
 80058aa:	0b5b      	lsrs	r3, r3, #13
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80058b2:	46c0      	nop			@ (mov r8, r8)
 80058b4:	46bd      	mov	sp, r7
 80058b6:	b002      	add	sp, #8
 80058b8:	bd80      	pop	{r7, pc}

080058ba <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b082      	sub	sp, #8
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	0352      	lsls	r2, r2, #13
 80058cc:	0b52      	lsrs	r2, r2, #13
 80058ce:	43d2      	mvns	r2, r2
 80058d0:	401a      	ands	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80058d6:	46c0      	nop			@ (mov r8, r8)
 80058d8:	46bd      	mov	sp, r7
 80058da:	b002      	add	sp, #8
 80058dc:	bd80      	pop	{r7, pc}

080058de <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	2203      	movs	r2, #3
 80058ec:	4013      	ands	r3, r2
}
 80058ee:	0018      	movs	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b002      	add	sp, #8
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	0212      	lsls	r2, r2, #8
 800590c:	43d2      	mvns	r2, r2
 800590e:	401a      	ands	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	400b      	ands	r3, r1
 8005918:	4904      	ldr	r1, [pc, #16]	@ (800592c <LL_ADC_SetChannelSamplingTime+0x34>)
 800591a:	400b      	ands	r3, r1
 800591c:	431a      	orrs	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005922:	46c0      	nop			@ (mov r8, r8)
 8005924:	46bd      	mov	sp, r7
 8005926:	b004      	add	sp, #16
 8005928:	bd80      	pop	{r7, pc}
 800592a:	46c0      	nop			@ (mov r8, r8)
 800592c:	07ffff00 	.word	0x07ffff00

08005930 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	4a05      	ldr	r2, [pc, #20]	@ (8005954 <LL_ADC_EnableInternalRegulator+0x24>)
 800593e:	4013      	ands	r3, r2
 8005940:	2280      	movs	r2, #128	@ 0x80
 8005942:	0552      	lsls	r2, r2, #21
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800594a:	46c0      	nop			@ (mov r8, r8)
 800594c:	46bd      	mov	sp, r7
 800594e:	b002      	add	sp, #8
 8005950:	bd80      	pop	{r7, pc}
 8005952:	46c0      	nop			@ (mov r8, r8)
 8005954:	6fffffe8 	.word	0x6fffffe8

08005958 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	2380      	movs	r3, #128	@ 0x80
 8005966:	055b      	lsls	r3, r3, #21
 8005968:	401a      	ands	r2, r3
 800596a:	2380      	movs	r3, #128	@ 0x80
 800596c:	055b      	lsls	r3, r3, #21
 800596e:	429a      	cmp	r2, r3
 8005970:	d101      	bne.n	8005976 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005976:	2300      	movs	r3, #0
}
 8005978:	0018      	movs	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	b002      	add	sp, #8
 800597e:	bd80      	pop	{r7, pc}

08005980 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	4a04      	ldr	r2, [pc, #16]	@ (80059a0 <LL_ADC_Enable+0x20>)
 800598e:	4013      	ands	r3, r2
 8005990:	2201      	movs	r2, #1
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005998:	46c0      	nop			@ (mov r8, r8)
 800599a:	46bd      	mov	sp, r7
 800599c:	b002      	add	sp, #8
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	7fffffe8 	.word	0x7fffffe8

080059a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	4a04      	ldr	r2, [pc, #16]	@ (80059c4 <LL_ADC_Disable+0x20>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	2202      	movs	r2, #2
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80059bc:	46c0      	nop			@ (mov r8, r8)
 80059be:	46bd      	mov	sp, r7
 80059c0:	b002      	add	sp, #8
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	7fffffe8 	.word	0x7fffffe8

080059c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	2201      	movs	r2, #1
 80059d6:	4013      	ands	r3, r2
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <LL_ADC_IsEnabled+0x18>
 80059dc:	2301      	movs	r3, #1
 80059de:	e000      	b.n	80059e2 <LL_ADC_IsEnabled+0x1a>
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	0018      	movs	r0, r3
 80059e4:	46bd      	mov	sp, r7
 80059e6:	b002      	add	sp, #8
 80059e8:	bd80      	pop	{r7, pc}
	...

080059ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	4a04      	ldr	r2, [pc, #16]	@ (8005a0c <LL_ADC_REG_StartConversion+0x20>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	2204      	movs	r2, #4
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005a04:	46c0      	nop			@ (mov r8, r8)
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b002      	add	sp, #8
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	7fffffe8 	.word	0x7fffffe8

08005a10 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2204      	movs	r2, #4
 8005a1e:	4013      	ands	r3, r2
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d101      	bne.n	8005a28 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005a24:	2301      	movs	r3, #1
 8005a26:	e000      	b.n	8005a2a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	b002      	add	sp, #8
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a3c:	231f      	movs	r3, #31
 8005a3e:	18fb      	adds	r3, r7, r3
 8005a40:	2200      	movs	r2, #0
 8005a42:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8005a44:	2300      	movs	r3, #0
 8005a46:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e17f      	b.n	8005d5a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	0018      	movs	r0, r3
 8005a66:	f7ff fa1b 	bl	8004ea0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2254      	movs	r2, #84	@ 0x54
 8005a74:	2100      	movs	r1, #0
 8005a76:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f7ff ff6b 	bl	8005958 <LL_ADC_IsInternalRegulatorEnabled>
 8005a82:	1e03      	subs	r3, r0, #0
 8005a84:	d115      	bne.n	8005ab2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f7ff ff50 	bl	8005930 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a90:	4bb4      	ldr	r3, [pc, #720]	@ (8005d64 <HAL_ADC_Init+0x330>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	49b4      	ldr	r1, [pc, #720]	@ (8005d68 <HAL_ADC_Init+0x334>)
 8005a96:	0018      	movs	r0, r3
 8005a98:	f7fa fb4e 	bl	8000138 <__udivsi3>
 8005a9c:	0003      	movs	r3, r0
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005aa4:	e002      	b.n	8005aac <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f9      	bne.n	8005aa6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f7ff ff4e 	bl	8005958 <LL_ADC_IsInternalRegulatorEnabled>
 8005abc:	1e03      	subs	r3, r0, #0
 8005abe:	d10f      	bne.n	8005ae0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac4:	2210      	movs	r2, #16
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ad8:	231f      	movs	r3, #31
 8005ada:	18fb      	adds	r3, r7, r3
 8005adc:	2201      	movs	r2, #1
 8005ade:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f7ff ff93 	bl	8005a10 <LL_ADC_REG_IsConversionOngoing>
 8005aea:	0003      	movs	r3, r0
 8005aec:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af2:	2210      	movs	r2, #16
 8005af4:	4013      	ands	r3, r2
 8005af6:	d000      	beq.n	8005afa <HAL_ADC_Init+0xc6>
 8005af8:	e122      	b.n	8005d40 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d000      	beq.n	8005b02 <HAL_ADC_Init+0xce>
 8005b00:	e11e      	b.n	8005d40 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b06:	4a99      	ldr	r2, [pc, #612]	@ (8005d6c <HAL_ADC_Init+0x338>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	0018      	movs	r0, r3
 8005b18:	f7ff ff56 	bl	80059c8 <LL_ADC_IsEnabled>
 8005b1c:	1e03      	subs	r3, r0, #0
 8005b1e:	d000      	beq.n	8005b22 <HAL_ADC_Init+0xee>
 8005b20:	e0ad      	b.n	8005c7e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	7e1b      	ldrb	r3, [r3, #24]
 8005b2a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005b2c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	7e5b      	ldrb	r3, [r3, #25]
 8005b32:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005b34:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	7e9b      	ldrb	r3, [r3, #26]
 8005b3a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005b3c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <HAL_ADC_Init+0x118>
 8005b46:	2380      	movs	r3, #128	@ 0x80
 8005b48:	015b      	lsls	r3, r3, #5
 8005b4a:	e000      	b.n	8005b4e <HAL_ADC_Init+0x11a>
 8005b4c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005b4e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005b54:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	da04      	bge.n	8005b68 <HAL_ADC_Init+0x134>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	085b      	lsrs	r3, r3, #1
 8005b66:	e001      	b.n	8005b6c <HAL_ADC_Init+0x138>
 8005b68:	2380      	movs	r3, #128	@ 0x80
 8005b6a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8005b6c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	212c      	movs	r1, #44	@ 0x2c
 8005b72:	5c5b      	ldrb	r3, [r3, r1]
 8005b74:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005b76:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2220      	movs	r2, #32
 8005b82:	5c9b      	ldrb	r3, [r3, r2]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d115      	bne.n	8005bb4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	7e9b      	ldrb	r3, [r3, #26]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d105      	bne.n	8005b9c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	2280      	movs	r2, #128	@ 0x80
 8005b94:	0252      	lsls	r2, r2, #9
 8005b96:	4313      	orrs	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
 8005b9a:	e00b      	b.n	8005bb4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bac:	2201      	movs	r2, #1
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bc0:	23e0      	movs	r3, #224	@ 0xe0
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	4a65      	ldr	r2, [pc, #404]	@ (8005d70 <HAL_ADC_Init+0x33c>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	0019      	movs	r1, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	0f9b      	lsrs	r3, r3, #30
 8005bee:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	223c      	movs	r2, #60	@ 0x3c
 8005c00:	5c9b      	ldrb	r3, [r3, r2]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d111      	bne.n	8005c2a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	0f9b      	lsrs	r3, r3, #30
 8005c0c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005c12:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8005c18:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8005c1e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	2201      	movs	r2, #1
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	4a50      	ldr	r2, [pc, #320]	@ (8005d74 <HAL_ADC_Init+0x340>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	0019      	movs	r1, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	23c0      	movs	r3, #192	@ 0xc0
 8005c46:	061b      	lsls	r3, r3, #24
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d018      	beq.n	8005c7e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005c50:	2380      	movs	r3, #128	@ 0x80
 8005c52:	05db      	lsls	r3, r3, #23
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d012      	beq.n	8005c7e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005c5c:	2380      	movs	r3, #128	@ 0x80
 8005c5e:	061b      	lsls	r3, r3, #24
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d00c      	beq.n	8005c7e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005c64:	4b44      	ldr	r3, [pc, #272]	@ (8005d78 <HAL_ADC_Init+0x344>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a44      	ldr	r2, [pc, #272]	@ (8005d7c <HAL_ADC_Init+0x348>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	0019      	movs	r1, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	23f0      	movs	r3, #240	@ 0xf0
 8005c74:	039b      	lsls	r3, r3, #14
 8005c76:	401a      	ands	r2, r3
 8005c78:	4b3f      	ldr	r3, [pc, #252]	@ (8005d78 <HAL_ADC_Init+0x344>)
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6818      	ldr	r0, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c86:	001a      	movs	r2, r3
 8005c88:	2100      	movs	r1, #0
 8005c8a:	f7ff fda0 	bl	80057ce <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c96:	493a      	ldr	r1, [pc, #232]	@ (8005d80 <HAL_ADC_Init+0x34c>)
 8005c98:	001a      	movs	r2, r3
 8005c9a:	f7ff fd98 	bl	80057ce <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2110      	movs	r1, #16
 8005cb2:	4249      	negs	r1, r1
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cb8:	e018      	b.n	8005cec <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691a      	ldr	r2, [r3, #16]
 8005cbe:	2380      	movs	r3, #128	@ 0x80
 8005cc0:	039b      	lsls	r3, r3, #14
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d112      	bne.n	8005cec <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	221c      	movs	r2, #28
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	2210      	movs	r2, #16
 8005cda:	4252      	negs	r2, r2
 8005cdc:	409a      	lsls	r2, r3
 8005cde:	0011      	movs	r1, r2
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f7ff fd88 	bl	8005808 <LL_ADC_GetSamplingTimeCommonChannels>
 8005cf8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d10b      	bne.n	8005d1a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0c:	2203      	movs	r2, #3
 8005d0e:	4393      	bics	r3, r2
 8005d10:	2201      	movs	r2, #1
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005d18:	e01c      	b.n	8005d54 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d1e:	2212      	movs	r2, #18
 8005d20:	4393      	bics	r3, r2
 8005d22:	2210      	movs	r2, #16
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d2e:	2201      	movs	r2, #1
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8005d36:	231f      	movs	r3, #31
 8005d38:	18fb      	adds	r3, r7, r3
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005d3e:	e009      	b.n	8005d54 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d44:	2210      	movs	r2, #16
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005d4c:	231f      	movs	r3, #31
 8005d4e:	18fb      	adds	r3, r7, r3
 8005d50:	2201      	movs	r2, #1
 8005d52:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005d54:	231f      	movs	r3, #31
 8005d56:	18fb      	adds	r3, r7, r3
 8005d58:	781b      	ldrb	r3, [r3, #0]
}
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	b008      	add	sp, #32
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	46c0      	nop			@ (mov r8, r8)
 8005d64:	20000010 	.word	0x20000010
 8005d68:	00030d40 	.word	0x00030d40
 8005d6c:	fffffefd 	.word	0xfffffefd
 8005d70:	ffde0201 	.word	0xffde0201
 8005d74:	1ffffc02 	.word	0x1ffffc02
 8005d78:	40012708 	.word	0x40012708
 8005d7c:	ffc3ffff 	.word	0xffc3ffff
 8005d80:	07ffff04 	.word	0x07ffff04

08005d84 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005d84:	b5b0      	push	{r4, r5, r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	0018      	movs	r0, r3
 8005d96:	f7ff fe3b 	bl	8005a10 <LL_ADC_REG_IsConversionOngoing>
 8005d9a:	1e03      	subs	r3, r0, #0
 8005d9c:	d16c      	bne.n	8005e78 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2254      	movs	r2, #84	@ 0x54
 8005da2:	5c9b      	ldrb	r3, [r3, r2]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <HAL_ADC_Start_DMA+0x28>
 8005da8:	2302      	movs	r3, #2
 8005daa:	e06c      	b.n	8005e86 <HAL_ADC_Start_DMA+0x102>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2254      	movs	r2, #84	@ 0x54
 8005db0:	2101      	movs	r1, #1
 8005db2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	d113      	bne.n	8005de8 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f7ff fdff 	bl	80059c8 <LL_ADC_IsEnabled>
 8005dca:	1e03      	subs	r3, r0, #0
 8005dcc:	d004      	beq.n	8005dd8 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f7ff fde6 	bl	80059a4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2101      	movs	r1, #1
 8005de4:	430a      	orrs	r2, r1
 8005de6:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005de8:	2517      	movs	r5, #23
 8005dea:	197c      	adds	r4, r7, r5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	0018      	movs	r0, r3
 8005df0:	f000 fb5e 	bl	80064b0 <ADC_Enable>
 8005df4:	0003      	movs	r3, r0
 8005df6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005df8:	002c      	movs	r4, r5
 8005dfa:	193b      	adds	r3, r7, r4
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d13e      	bne.n	8005e80 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e06:	4a22      	ldr	r2, [pc, #136]	@ (8005e90 <HAL_ADC_Start_DMA+0x10c>)
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2280      	movs	r2, #128	@ 0x80
 8005e0c:	0052      	lsls	r2, r2, #1
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e1e:	4a1d      	ldr	r2, [pc, #116]	@ (8005e94 <HAL_ADC_Start_DMA+0x110>)
 8005e20:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e26:	4a1c      	ldr	r2, [pc, #112]	@ (8005e98 <HAL_ADC_Start_DMA+0x114>)
 8005e28:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005e9c <HAL_ADC_Start_DMA+0x118>)
 8005e30:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	221c      	movs	r2, #28
 8005e38:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2254      	movs	r2, #84	@ 0x54
 8005e3e:	2100      	movs	r1, #0
 8005e40:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2110      	movs	r1, #16
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3340      	adds	r3, #64	@ 0x40
 8005e5c:	0019      	movs	r1, r3
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	193c      	adds	r4, r7, r4
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f000 fdc0 	bl	80069e8 <HAL_DMA_Start_IT>
 8005e68:	0003      	movs	r3, r0
 8005e6a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	0018      	movs	r0, r3
 8005e72:	f7ff fdbb 	bl	80059ec <LL_ADC_REG_StartConversion>
 8005e76:	e003      	b.n	8005e80 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005e78:	2317      	movs	r3, #23
 8005e7a:	18fb      	adds	r3, r7, r3
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005e80:	2317      	movs	r3, #23
 8005e82:	18fb      	adds	r3, r7, r3
 8005e84:	781b      	ldrb	r3, [r3, #0]
}
 8005e86:	0018      	movs	r0, r3
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	b006      	add	sp, #24
 8005e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e8e:	46c0      	nop			@ (mov r8, r8)
 8005e90:	fffff0fe 	.word	0xfffff0fe
 8005e94:	080065bd 	.word	0x080065bd
 8005e98:	08006685 	.word	0x08006685
 8005e9c:	080066a3 	.word	0x080066a3

08005ea0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	d017      	beq.n	8005ef4 <HAL_ADC_IRQHandler+0x54>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	4013      	ands	r3, r2
 8005eca:	d013      	beq.n	8005ef4 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ed0:	2210      	movs	r2, #16
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	d106      	bne.n	8005ee4 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eda:	2280      	movs	r2, #128	@ 0x80
 8005edc:	0112      	lsls	r2, r2, #4
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f000 fc06 	bl	80066f8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2204      	movs	r2, #4
 8005ef8:	4013      	ands	r3, r2
 8005efa:	d003      	beq.n	8005f04 <HAL_ADC_IRQHandler+0x64>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2204      	movs	r2, #4
 8005f00:	4013      	ands	r3, r2
 8005f02:	d107      	bne.n	8005f14 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2208      	movs	r2, #8
 8005f08:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005f0a:	d04d      	beq.n	8005fa8 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2208      	movs	r2, #8
 8005f10:	4013      	ands	r3, r2
 8005f12:	d049      	beq.n	8005fa8 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f18:	2210      	movs	r2, #16
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	d106      	bne.n	8005f2c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f22:	2280      	movs	r2, #128	@ 0x80
 8005f24:	0092      	lsls	r2, r2, #2
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	0018      	movs	r0, r3
 8005f32:	f7ff fc80 	bl	8005836 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005f36:	1e03      	subs	r3, r0, #0
 8005f38:	d02e      	beq.n	8005f98 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	7e9b      	ldrb	r3, [r3, #26]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d12a      	bne.n	8005f98 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2208      	movs	r2, #8
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d123      	bne.n	8005f98 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	0018      	movs	r0, r3
 8005f56:	f7ff fd5b 	bl	8005a10 <LL_ADC_REG_IsConversionOngoing>
 8005f5a:	1e03      	subs	r3, r0, #0
 8005f5c:	d110      	bne.n	8005f80 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	210c      	movs	r1, #12
 8005f6a:	438a      	bics	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f72:	4a56      	ldr	r2, [pc, #344]	@ (80060cc <HAL_ADC_IRQHandler+0x22c>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	2201      	movs	r2, #1
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f7e:	e00b      	b.n	8005f98 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f84:	2220      	movs	r2, #32
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f90:	2201      	movs	r2, #1
 8005f92:	431a      	orrs	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f7fd f9ea 	bl	8003374 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	220c      	movs	r2, #12
 8005fa6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	2280      	movs	r2, #128	@ 0x80
 8005fac:	4013      	ands	r3, r2
 8005fae:	d012      	beq.n	8005fd6 <HAL_ADC_IRQHandler+0x136>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2280      	movs	r2, #128	@ 0x80
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	d00e      	beq.n	8005fd6 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fbc:	2280      	movs	r2, #128	@ 0x80
 8005fbe:	0252      	lsls	r2, r2, #9
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f000 f889 	bl	80060e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2280      	movs	r2, #128	@ 0x80
 8005fd4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	2380      	movs	r3, #128	@ 0x80
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d014      	beq.n	800600a <HAL_ADC_IRQHandler+0x16a>
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	2380      	movs	r3, #128	@ 0x80
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	d00f      	beq.n	800600a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fee:	2280      	movs	r2, #128	@ 0x80
 8005ff0:	0292      	lsls	r2, r2, #10
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f000 fb6c 	bl	80066d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2280      	movs	r2, #128	@ 0x80
 8006006:	0052      	lsls	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	2380      	movs	r3, #128	@ 0x80
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4013      	ands	r3, r2
 8006012:	d014      	beq.n	800603e <HAL_ADC_IRQHandler+0x19e>
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	2380      	movs	r3, #128	@ 0x80
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4013      	ands	r3, r2
 800601c:	d00f      	beq.n	800603e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006022:	2280      	movs	r2, #128	@ 0x80
 8006024:	02d2      	lsls	r2, r2, #11
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	0018      	movs	r0, r3
 8006030:	f000 fb5a 	bl	80066e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2280      	movs	r2, #128	@ 0x80
 800603a:	0092      	lsls	r2, r2, #2
 800603c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2210      	movs	r2, #16
 8006042:	4013      	ands	r3, r2
 8006044:	d02b      	beq.n	800609e <HAL_ADC_IRQHandler+0x1fe>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2210      	movs	r2, #16
 800604a:	4013      	ands	r3, r2
 800604c:	d027      	beq.n	800609e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006052:	2b00      	cmp	r3, #0
 8006054:	d102      	bne.n	800605c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8006056:	2301      	movs	r3, #1
 8006058:	617b      	str	r3, [r7, #20]
 800605a:	e008      	b.n	800606e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	0018      	movs	r0, r3
 8006062:	f7ff fc3c 	bl	80058de <LL_ADC_REG_GetDMATransfer>
 8006066:	1e03      	subs	r3, r0, #0
 8006068:	d001      	beq.n	800606e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800606a:	2301      	movs	r3, #1
 800606c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d110      	bne.n	8006096 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006078:	2280      	movs	r2, #128	@ 0x80
 800607a:	00d2      	lsls	r2, r2, #3
 800607c:	431a      	orrs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006086:	2202      	movs	r2, #2
 8006088:	431a      	orrs	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	0018      	movs	r0, r3
 8006092:	f000 f82d 	bl	80060f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2210      	movs	r2, #16
 800609c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	2380      	movs	r3, #128	@ 0x80
 80060a2:	019b      	lsls	r3, r3, #6
 80060a4:	4013      	ands	r3, r2
 80060a6:	d00d      	beq.n	80060c4 <HAL_ADC_IRQHandler+0x224>
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	2380      	movs	r3, #128	@ 0x80
 80060ac:	019b      	lsls	r3, r3, #6
 80060ae:	4013      	ands	r3, r2
 80060b0:	d008      	beq.n	80060c4 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	0018      	movs	r0, r3
 80060b6:	f000 fb27 	bl	8006708 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2280      	movs	r2, #128	@ 0x80
 80060c0:	0192      	lsls	r2, r2, #6
 80060c2:	601a      	str	r2, [r3, #0]
  }
}
 80060c4:	46c0      	nop			@ (mov r8, r8)
 80060c6:	46bd      	mov	sp, r7
 80060c8:	b006      	add	sp, #24
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	fffffefe 	.word	0xfffffefe

080060d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80060d8:	46c0      	nop			@ (mov r8, r8)
 80060da:	46bd      	mov	sp, r7
 80060dc:	b002      	add	sp, #8
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80060e8:	46c0      	nop			@ (mov r8, r8)
 80060ea:	46bd      	mov	sp, r7
 80060ec:	b002      	add	sp, #8
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80060f8:	46c0      	nop			@ (mov r8, r8)
 80060fa:	46bd      	mov	sp, r7
 80060fc:	b002      	add	sp, #8
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800610a:	2317      	movs	r3, #23
 800610c:	18fb      	adds	r3, r7, r3
 800610e:	2200      	movs	r2, #0
 8006110:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2254      	movs	r2, #84	@ 0x54
 800611a:	5c9b      	ldrb	r3, [r3, r2]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <HAL_ADC_ConfigChannel+0x24>
 8006120:	2302      	movs	r3, #2
 8006122:	e1c0      	b.n	80064a6 <HAL_ADC_ConfigChannel+0x3a6>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2254      	movs	r2, #84	@ 0x54
 8006128:	2101      	movs	r1, #1
 800612a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	0018      	movs	r0, r3
 8006132:	f7ff fc6d 	bl	8005a10 <LL_ADC_REG_IsConversionOngoing>
 8006136:	1e03      	subs	r3, r0, #0
 8006138:	d000      	beq.n	800613c <HAL_ADC_ConfigChannel+0x3c>
 800613a:	e1a3      	b.n	8006484 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2b02      	cmp	r3, #2
 8006142:	d100      	bne.n	8006146 <HAL_ADC_ConfigChannel+0x46>
 8006144:	e143      	b.n	80063ce <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	2380      	movs	r3, #128	@ 0x80
 800614c:	061b      	lsls	r3, r3, #24
 800614e:	429a      	cmp	r2, r3
 8006150:	d004      	beq.n	800615c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006156:	4ac1      	ldr	r2, [pc, #772]	@ (800645c <HAL_ADC_ConfigChannel+0x35c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d108      	bne.n	800616e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	0019      	movs	r1, r3
 8006166:	0010      	movs	r0, r2
 8006168:	f7ff fb96 	bl	8005898 <LL_ADC_REG_SetSequencerChAdd>
 800616c:	e0c9      	b.n	8006302 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	211f      	movs	r1, #31
 8006178:	400b      	ands	r3, r1
 800617a:	210f      	movs	r1, #15
 800617c:	4099      	lsls	r1, r3
 800617e:	000b      	movs	r3, r1
 8006180:	43db      	mvns	r3, r3
 8006182:	4013      	ands	r3, r2
 8006184:	0019      	movs	r1, r3
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	035b      	lsls	r3, r3, #13
 800618c:	0b5b      	lsrs	r3, r3, #13
 800618e:	d105      	bne.n	800619c <HAL_ADC_ConfigChannel+0x9c>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	0e9b      	lsrs	r3, r3, #26
 8006196:	221f      	movs	r2, #31
 8006198:	4013      	ands	r3, r2
 800619a:	e098      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2201      	movs	r2, #1
 80061a2:	4013      	ands	r3, r2
 80061a4:	d000      	beq.n	80061a8 <HAL_ADC_ConfigChannel+0xa8>
 80061a6:	e091      	b.n	80062cc <HAL_ADC_ConfigChannel+0x1cc>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2202      	movs	r2, #2
 80061ae:	4013      	ands	r3, r2
 80061b0:	d000      	beq.n	80061b4 <HAL_ADC_ConfigChannel+0xb4>
 80061b2:	e089      	b.n	80062c8 <HAL_ADC_ConfigChannel+0x1c8>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2204      	movs	r2, #4
 80061ba:	4013      	ands	r3, r2
 80061bc:	d000      	beq.n	80061c0 <HAL_ADC_ConfigChannel+0xc0>
 80061be:	e081      	b.n	80062c4 <HAL_ADC_ConfigChannel+0x1c4>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2208      	movs	r2, #8
 80061c6:	4013      	ands	r3, r2
 80061c8:	d000      	beq.n	80061cc <HAL_ADC_ConfigChannel+0xcc>
 80061ca:	e079      	b.n	80062c0 <HAL_ADC_ConfigChannel+0x1c0>
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2210      	movs	r2, #16
 80061d2:	4013      	ands	r3, r2
 80061d4:	d000      	beq.n	80061d8 <HAL_ADC_ConfigChannel+0xd8>
 80061d6:	e071      	b.n	80062bc <HAL_ADC_ConfigChannel+0x1bc>
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2220      	movs	r2, #32
 80061de:	4013      	ands	r3, r2
 80061e0:	d000      	beq.n	80061e4 <HAL_ADC_ConfigChannel+0xe4>
 80061e2:	e069      	b.n	80062b8 <HAL_ADC_ConfigChannel+0x1b8>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2240      	movs	r2, #64	@ 0x40
 80061ea:	4013      	ands	r3, r2
 80061ec:	d000      	beq.n	80061f0 <HAL_ADC_ConfigChannel+0xf0>
 80061ee:	e061      	b.n	80062b4 <HAL_ADC_ConfigChannel+0x1b4>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2280      	movs	r2, #128	@ 0x80
 80061f6:	4013      	ands	r3, r2
 80061f8:	d000      	beq.n	80061fc <HAL_ADC_ConfigChannel+0xfc>
 80061fa:	e059      	b.n	80062b0 <HAL_ADC_ConfigChannel+0x1b0>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	2380      	movs	r3, #128	@ 0x80
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	4013      	ands	r3, r2
 8006206:	d151      	bne.n	80062ac <HAL_ADC_ConfigChannel+0x1ac>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	2380      	movs	r3, #128	@ 0x80
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4013      	ands	r3, r2
 8006212:	d149      	bne.n	80062a8 <HAL_ADC_ConfigChannel+0x1a8>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	2380      	movs	r3, #128	@ 0x80
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4013      	ands	r3, r2
 800621e:	d141      	bne.n	80062a4 <HAL_ADC_ConfigChannel+0x1a4>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	2380      	movs	r3, #128	@ 0x80
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	4013      	ands	r3, r2
 800622a:	d139      	bne.n	80062a0 <HAL_ADC_ConfigChannel+0x1a0>
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	2380      	movs	r3, #128	@ 0x80
 8006232:	015b      	lsls	r3, r3, #5
 8006234:	4013      	ands	r3, r2
 8006236:	d131      	bne.n	800629c <HAL_ADC_ConfigChannel+0x19c>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	2380      	movs	r3, #128	@ 0x80
 800623e:	019b      	lsls	r3, r3, #6
 8006240:	4013      	ands	r3, r2
 8006242:	d129      	bne.n	8006298 <HAL_ADC_ConfigChannel+0x198>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	2380      	movs	r3, #128	@ 0x80
 800624a:	01db      	lsls	r3, r3, #7
 800624c:	4013      	ands	r3, r2
 800624e:	d121      	bne.n	8006294 <HAL_ADC_ConfigChannel+0x194>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	2380      	movs	r3, #128	@ 0x80
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	4013      	ands	r3, r2
 800625a:	d119      	bne.n	8006290 <HAL_ADC_ConfigChannel+0x190>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	2380      	movs	r3, #128	@ 0x80
 8006262:	025b      	lsls	r3, r3, #9
 8006264:	4013      	ands	r3, r2
 8006266:	d111      	bne.n	800628c <HAL_ADC_ConfigChannel+0x18c>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	2380      	movs	r3, #128	@ 0x80
 800626e:	029b      	lsls	r3, r3, #10
 8006270:	4013      	ands	r3, r2
 8006272:	d109      	bne.n	8006288 <HAL_ADC_ConfigChannel+0x188>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	2380      	movs	r3, #128	@ 0x80
 800627a:	02db      	lsls	r3, r3, #11
 800627c:	4013      	ands	r3, r2
 800627e:	d001      	beq.n	8006284 <HAL_ADC_ConfigChannel+0x184>
 8006280:	2312      	movs	r3, #18
 8006282:	e024      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 8006284:	2300      	movs	r3, #0
 8006286:	e022      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 8006288:	2311      	movs	r3, #17
 800628a:	e020      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 800628c:	2310      	movs	r3, #16
 800628e:	e01e      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 8006290:	230f      	movs	r3, #15
 8006292:	e01c      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 8006294:	230e      	movs	r3, #14
 8006296:	e01a      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 8006298:	230d      	movs	r3, #13
 800629a:	e018      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 800629c:	230c      	movs	r3, #12
 800629e:	e016      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 80062a0:	230b      	movs	r3, #11
 80062a2:	e014      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 80062a4:	230a      	movs	r3, #10
 80062a6:	e012      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 80062a8:	2309      	movs	r3, #9
 80062aa:	e010      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 80062ac:	2308      	movs	r3, #8
 80062ae:	e00e      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 80062b0:	2307      	movs	r3, #7
 80062b2:	e00c      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 80062b4:	2306      	movs	r3, #6
 80062b6:	e00a      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 80062b8:	2305      	movs	r3, #5
 80062ba:	e008      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 80062bc:	2304      	movs	r3, #4
 80062be:	e006      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 80062c0:	2303      	movs	r3, #3
 80062c2:	e004      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e002      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e000      	b.n	80062ce <HAL_ADC_ConfigChannel+0x1ce>
 80062cc:	2300      	movs	r3, #0
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	6852      	ldr	r2, [r2, #4]
 80062d2:	201f      	movs	r0, #31
 80062d4:	4002      	ands	r2, r0
 80062d6:	4093      	lsls	r3, r2
 80062d8:	000a      	movs	r2, r1
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	089b      	lsrs	r3, r3, #2
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d808      	bhi.n	8006302 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	6859      	ldr	r1, [r3, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	001a      	movs	r2, r3
 80062fe:	f7ff faab 	bl	8005858 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6818      	ldr	r0, [r3, #0]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	6819      	ldr	r1, [r3, #0]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	001a      	movs	r2, r3
 8006310:	f7ff faf2 	bl	80058f8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	db00      	blt.n	800631e <HAL_ADC_ConfigChannel+0x21e>
 800631c:	e0bc      	b.n	8006498 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800631e:	4b50      	ldr	r3, [pc, #320]	@ (8006460 <HAL_ADC_ConfigChannel+0x360>)
 8006320:	0018      	movs	r0, r3
 8006322:	f7ff fa47 	bl	80057b4 <LL_ADC_GetCommonPathInternalCh>
 8006326:	0003      	movs	r3, r0
 8006328:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a4d      	ldr	r2, [pc, #308]	@ (8006464 <HAL_ADC_ConfigChannel+0x364>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d122      	bne.n	800637a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	2380      	movs	r3, #128	@ 0x80
 8006338:	041b      	lsls	r3, r3, #16
 800633a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800633c:	d11d      	bne.n	800637a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2280      	movs	r2, #128	@ 0x80
 8006342:	0412      	lsls	r2, r2, #16
 8006344:	4313      	orrs	r3, r2
 8006346:	4a46      	ldr	r2, [pc, #280]	@ (8006460 <HAL_ADC_ConfigChannel+0x360>)
 8006348:	0019      	movs	r1, r3
 800634a:	0010      	movs	r0, r2
 800634c:	f7ff fa1e 	bl	800578c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006350:	4b45      	ldr	r3, [pc, #276]	@ (8006468 <HAL_ADC_ConfigChannel+0x368>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4945      	ldr	r1, [pc, #276]	@ (800646c <HAL_ADC_ConfigChannel+0x36c>)
 8006356:	0018      	movs	r0, r3
 8006358:	f7f9 feee 	bl	8000138 <__udivsi3>
 800635c:	0003      	movs	r3, r0
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	0013      	movs	r3, r2
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	189b      	adds	r3, r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800636a:	e002      	b.n	8006372 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3b01      	subs	r3, #1
 8006370:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1f9      	bne.n	800636c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006378:	e08e      	b.n	8006498 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a3c      	ldr	r2, [pc, #240]	@ (8006470 <HAL_ADC_ConfigChannel+0x370>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d10e      	bne.n	80063a2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	2380      	movs	r3, #128	@ 0x80
 8006388:	045b      	lsls	r3, r3, #17
 800638a:	4013      	ands	r3, r2
 800638c:	d109      	bne.n	80063a2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	2280      	movs	r2, #128	@ 0x80
 8006392:	0452      	lsls	r2, r2, #17
 8006394:	4313      	orrs	r3, r2
 8006396:	4a32      	ldr	r2, [pc, #200]	@ (8006460 <HAL_ADC_ConfigChannel+0x360>)
 8006398:	0019      	movs	r1, r3
 800639a:	0010      	movs	r0, r2
 800639c:	f7ff f9f6 	bl	800578c <LL_ADC_SetCommonPathInternalCh>
 80063a0:	e07a      	b.n	8006498 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a33      	ldr	r2, [pc, #204]	@ (8006474 <HAL_ADC_ConfigChannel+0x374>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d000      	beq.n	80063ae <HAL_ADC_ConfigChannel+0x2ae>
 80063ac:	e074      	b.n	8006498 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	2380      	movs	r3, #128	@ 0x80
 80063b2:	03db      	lsls	r3, r3, #15
 80063b4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80063b6:	d000      	beq.n	80063ba <HAL_ADC_ConfigChannel+0x2ba>
 80063b8:	e06e      	b.n	8006498 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	2280      	movs	r2, #128	@ 0x80
 80063be:	03d2      	lsls	r2, r2, #15
 80063c0:	4313      	orrs	r3, r2
 80063c2:	4a27      	ldr	r2, [pc, #156]	@ (8006460 <HAL_ADC_ConfigChannel+0x360>)
 80063c4:	0019      	movs	r1, r3
 80063c6:	0010      	movs	r0, r2
 80063c8:	f7ff f9e0 	bl	800578c <LL_ADC_SetCommonPathInternalCh>
 80063cc:	e064      	b.n	8006498 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691a      	ldr	r2, [r3, #16]
 80063d2:	2380      	movs	r3, #128	@ 0x80
 80063d4:	061b      	lsls	r3, r3, #24
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d004      	beq.n	80063e4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80063de:	4a1f      	ldr	r2, [pc, #124]	@ (800645c <HAL_ADC_ConfigChannel+0x35c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d107      	bne.n	80063f4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	0019      	movs	r1, r3
 80063ee:	0010      	movs	r0, r2
 80063f0:	f7ff fa63 	bl	80058ba <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	da4d      	bge.n	8006498 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80063fc:	4b18      	ldr	r3, [pc, #96]	@ (8006460 <HAL_ADC_ConfigChannel+0x360>)
 80063fe:	0018      	movs	r0, r3
 8006400:	f7ff f9d8 	bl	80057b4 <LL_ADC_GetCommonPathInternalCh>
 8006404:	0003      	movs	r3, r0
 8006406:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a15      	ldr	r2, [pc, #84]	@ (8006464 <HAL_ADC_ConfigChannel+0x364>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d108      	bne.n	8006424 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	4a18      	ldr	r2, [pc, #96]	@ (8006478 <HAL_ADC_ConfigChannel+0x378>)
 8006416:	4013      	ands	r3, r2
 8006418:	4a11      	ldr	r2, [pc, #68]	@ (8006460 <HAL_ADC_ConfigChannel+0x360>)
 800641a:	0019      	movs	r1, r3
 800641c:	0010      	movs	r0, r2
 800641e:	f7ff f9b5 	bl	800578c <LL_ADC_SetCommonPathInternalCh>
 8006422:	e039      	b.n	8006498 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a11      	ldr	r2, [pc, #68]	@ (8006470 <HAL_ADC_ConfigChannel+0x370>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d108      	bne.n	8006440 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	4a12      	ldr	r2, [pc, #72]	@ (800647c <HAL_ADC_ConfigChannel+0x37c>)
 8006432:	4013      	ands	r3, r2
 8006434:	4a0a      	ldr	r2, [pc, #40]	@ (8006460 <HAL_ADC_ConfigChannel+0x360>)
 8006436:	0019      	movs	r1, r3
 8006438:	0010      	movs	r0, r2
 800643a:	f7ff f9a7 	bl	800578c <LL_ADC_SetCommonPathInternalCh>
 800643e:	e02b      	b.n	8006498 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a0b      	ldr	r2, [pc, #44]	@ (8006474 <HAL_ADC_ConfigChannel+0x374>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d126      	bne.n	8006498 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	4a0c      	ldr	r2, [pc, #48]	@ (8006480 <HAL_ADC_ConfigChannel+0x380>)
 800644e:	4013      	ands	r3, r2
 8006450:	4a03      	ldr	r2, [pc, #12]	@ (8006460 <HAL_ADC_ConfigChannel+0x360>)
 8006452:	0019      	movs	r1, r3
 8006454:	0010      	movs	r0, r2
 8006456:	f7ff f999 	bl	800578c <LL_ADC_SetCommonPathInternalCh>
 800645a:	e01d      	b.n	8006498 <HAL_ADC_ConfigChannel+0x398>
 800645c:	80000004 	.word	0x80000004
 8006460:	40012708 	.word	0x40012708
 8006464:	b0001000 	.word	0xb0001000
 8006468:	20000010 	.word	0x20000010
 800646c:	00030d40 	.word	0x00030d40
 8006470:	b8004000 	.word	0xb8004000
 8006474:	b4002000 	.word	0xb4002000
 8006478:	ff7fffff 	.word	0xff7fffff
 800647c:	feffffff 	.word	0xfeffffff
 8006480:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006488:	2220      	movs	r2, #32
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006490:	2317      	movs	r3, #23
 8006492:	18fb      	adds	r3, r7, r3
 8006494:	2201      	movs	r2, #1
 8006496:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2254      	movs	r2, #84	@ 0x54
 800649c:	2100      	movs	r1, #0
 800649e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80064a0:	2317      	movs	r3, #23
 80064a2:	18fb      	adds	r3, r7, r3
 80064a4:	781b      	ldrb	r3, [r3, #0]
}
 80064a6:	0018      	movs	r0, r3
 80064a8:	46bd      	mov	sp, r7
 80064aa:	b006      	add	sp, #24
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	46c0      	nop			@ (mov r8, r8)

080064b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	0018      	movs	r0, r3
 80064c2:	f7ff fa81 	bl	80059c8 <LL_ADC_IsEnabled>
 80064c6:	1e03      	subs	r3, r0, #0
 80064c8:	d000      	beq.n	80064cc <ADC_Enable+0x1c>
 80064ca:	e069      	b.n	80065a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	4a36      	ldr	r2, [pc, #216]	@ (80065ac <ADC_Enable+0xfc>)
 80064d4:	4013      	ands	r3, r2
 80064d6:	d00d      	beq.n	80064f4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064dc:	2210      	movs	r2, #16
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064e8:	2201      	movs	r2, #1
 80064ea:	431a      	orrs	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e056      	b.n	80065a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	0018      	movs	r0, r3
 80064fa:	f7ff fa41 	bl	8005980 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80064fe:	4b2c      	ldr	r3, [pc, #176]	@ (80065b0 <ADC_Enable+0x100>)
 8006500:	0018      	movs	r0, r3
 8006502:	f7ff f957 	bl	80057b4 <LL_ADC_GetCommonPathInternalCh>
 8006506:	0002      	movs	r2, r0
 8006508:	2380      	movs	r3, #128	@ 0x80
 800650a:	041b      	lsls	r3, r3, #16
 800650c:	4013      	ands	r3, r2
 800650e:	d00f      	beq.n	8006530 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006510:	4b28      	ldr	r3, [pc, #160]	@ (80065b4 <ADC_Enable+0x104>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4928      	ldr	r1, [pc, #160]	@ (80065b8 <ADC_Enable+0x108>)
 8006516:	0018      	movs	r0, r3
 8006518:	f7f9 fe0e 	bl	8000138 <__udivsi3>
 800651c:	0003      	movs	r3, r0
 800651e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8006520:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006522:	e002      	b.n	800652a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	3b01      	subs	r3, #1
 8006528:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1f9      	bne.n	8006524 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	7e5b      	ldrb	r3, [r3, #25]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d033      	beq.n	80065a0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006538:	f7ff f8fa 	bl	8005730 <HAL_GetTick>
 800653c:	0003      	movs	r3, r0
 800653e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006540:	e027      	b.n	8006592 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	0018      	movs	r0, r3
 8006548:	f7ff fa3e 	bl	80059c8 <LL_ADC_IsEnabled>
 800654c:	1e03      	subs	r3, r0, #0
 800654e:	d104      	bne.n	800655a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	0018      	movs	r0, r3
 8006556:	f7ff fa13 	bl	8005980 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800655a:	f7ff f8e9 	bl	8005730 <HAL_GetTick>
 800655e:	0002      	movs	r2, r0
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d914      	bls.n	8006592 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2201      	movs	r2, #1
 8006570:	4013      	ands	r3, r2
 8006572:	2b01      	cmp	r3, #1
 8006574:	d00d      	beq.n	8006592 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657a:	2210      	movs	r2, #16
 800657c:	431a      	orrs	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006586:	2201      	movs	r2, #1
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e007      	b.n	80065a2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2201      	movs	r2, #1
 800659a:	4013      	ands	r3, r2
 800659c:	2b01      	cmp	r3, #1
 800659e:	d1d0      	bne.n	8006542 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	0018      	movs	r0, r3
 80065a4:	46bd      	mov	sp, r7
 80065a6:	b004      	add	sp, #16
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	46c0      	nop			@ (mov r8, r8)
 80065ac:	80000017 	.word	0x80000017
 80065b0:	40012708 	.word	0x40012708
 80065b4:	20000010 	.word	0x20000010
 80065b8:	00030d40 	.word	0x00030d40

080065bc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ce:	2250      	movs	r2, #80	@ 0x50
 80065d0:	4013      	ands	r3, r2
 80065d2:	d141      	bne.n	8006658 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065d8:	2280      	movs	r2, #128	@ 0x80
 80065da:	0092      	lsls	r2, r2, #2
 80065dc:	431a      	orrs	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	0018      	movs	r0, r3
 80065e8:	f7ff f925 	bl	8005836 <LL_ADC_REG_IsTriggerSourceSWStart>
 80065ec:	1e03      	subs	r3, r0, #0
 80065ee:	d02e      	beq.n	800664e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	7e9b      	ldrb	r3, [r3, #26]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d12a      	bne.n	800664e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2208      	movs	r2, #8
 8006600:	4013      	ands	r3, r2
 8006602:	2b08      	cmp	r3, #8
 8006604:	d123      	bne.n	800664e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	0018      	movs	r0, r3
 800660c:	f7ff fa00 	bl	8005a10 <LL_ADC_REG_IsConversionOngoing>
 8006610:	1e03      	subs	r3, r0, #0
 8006612:	d110      	bne.n	8006636 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	210c      	movs	r1, #12
 8006620:	438a      	bics	r2, r1
 8006622:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006628:	4a15      	ldr	r2, [pc, #84]	@ (8006680 <ADC_DMAConvCplt+0xc4>)
 800662a:	4013      	ands	r3, r2
 800662c:	2201      	movs	r2, #1
 800662e:	431a      	orrs	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	659a      	str	r2, [r3, #88]	@ 0x58
 8006634:	e00b      	b.n	800664e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800663a:	2220      	movs	r2, #32
 800663c:	431a      	orrs	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006646:	2201      	movs	r2, #1
 8006648:	431a      	orrs	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	0018      	movs	r0, r3
 8006652:	f7fc fe8f 	bl	8003374 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006656:	e00f      	b.n	8006678 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800665c:	2210      	movs	r2, #16
 800665e:	4013      	ands	r3, r2
 8006660:	d004      	beq.n	800666c <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	0018      	movs	r0, r3
 8006666:	f7ff fd43 	bl	80060f0 <HAL_ADC_ErrorCallback>
}
 800666a:	e005      	b.n	8006678 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	0010      	movs	r0, r2
 8006676:	4798      	blx	r3
}
 8006678:	46c0      	nop			@ (mov r8, r8)
 800667a:	46bd      	mov	sp, r7
 800667c:	b004      	add	sp, #16
 800667e:	bd80      	pop	{r7, pc}
 8006680:	fffffefe 	.word	0xfffffefe

08006684 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006690:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	0018      	movs	r0, r3
 8006696:	f7ff fd1b 	bl	80060d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800669a:	46c0      	nop			@ (mov r8, r8)
 800669c:	46bd      	mov	sp, r7
 800669e:	b004      	add	sp, #16
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b4:	2240      	movs	r2, #64	@ 0x40
 80066b6:	431a      	orrs	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066c0:	2204      	movs	r2, #4
 80066c2:	431a      	orrs	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	0018      	movs	r0, r3
 80066cc:	f7ff fd10 	bl	80060f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80066d0:	46c0      	nop			@ (mov r8, r8)
 80066d2:	46bd      	mov	sp, r7
 80066d4:	b004      	add	sp, #16
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80066e0:	46c0      	nop			@ (mov r8, r8)
 80066e2:	46bd      	mov	sp, r7
 80066e4:	b002      	add	sp, #8
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80066f0:	46c0      	nop			@ (mov r8, r8)
 80066f2:	46bd      	mov	sp, r7
 80066f4:	b002      	add	sp, #8
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006700:	46c0      	nop			@ (mov r8, r8)
 8006702:	46bd      	mov	sp, r7
 8006704:	b002      	add	sp, #8
 8006706:	bd80      	pop	{r7, pc}

08006708 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8006710:	46c0      	nop			@ (mov r8, r8)
 8006712:	46bd      	mov	sp, r7
 8006714:	b002      	add	sp, #8
 8006716:	bd80      	pop	{r7, pc}

08006718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	0002      	movs	r2, r0
 8006720:	1dfb      	adds	r3, r7, #7
 8006722:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006724:	1dfb      	adds	r3, r7, #7
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b7f      	cmp	r3, #127	@ 0x7f
 800672a:	d809      	bhi.n	8006740 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800672c:	1dfb      	adds	r3, r7, #7
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	001a      	movs	r2, r3
 8006732:	231f      	movs	r3, #31
 8006734:	401a      	ands	r2, r3
 8006736:	4b04      	ldr	r3, [pc, #16]	@ (8006748 <__NVIC_EnableIRQ+0x30>)
 8006738:	2101      	movs	r1, #1
 800673a:	4091      	lsls	r1, r2
 800673c:	000a      	movs	r2, r1
 800673e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006740:	46c0      	nop			@ (mov r8, r8)
 8006742:	46bd      	mov	sp, r7
 8006744:	b002      	add	sp, #8
 8006746:	bd80      	pop	{r7, pc}
 8006748:	e000e100 	.word	0xe000e100

0800674c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800674c:	b590      	push	{r4, r7, lr}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	0002      	movs	r2, r0
 8006754:	6039      	str	r1, [r7, #0]
 8006756:	1dfb      	adds	r3, r7, #7
 8006758:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800675a:	1dfb      	adds	r3, r7, #7
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006760:	d828      	bhi.n	80067b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006762:	4a2f      	ldr	r2, [pc, #188]	@ (8006820 <__NVIC_SetPriority+0xd4>)
 8006764:	1dfb      	adds	r3, r7, #7
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	b25b      	sxtb	r3, r3
 800676a:	089b      	lsrs	r3, r3, #2
 800676c:	33c0      	adds	r3, #192	@ 0xc0
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	589b      	ldr	r3, [r3, r2]
 8006772:	1dfa      	adds	r2, r7, #7
 8006774:	7812      	ldrb	r2, [r2, #0]
 8006776:	0011      	movs	r1, r2
 8006778:	2203      	movs	r2, #3
 800677a:	400a      	ands	r2, r1
 800677c:	00d2      	lsls	r2, r2, #3
 800677e:	21ff      	movs	r1, #255	@ 0xff
 8006780:	4091      	lsls	r1, r2
 8006782:	000a      	movs	r2, r1
 8006784:	43d2      	mvns	r2, r2
 8006786:	401a      	ands	r2, r3
 8006788:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	019b      	lsls	r3, r3, #6
 800678e:	22ff      	movs	r2, #255	@ 0xff
 8006790:	401a      	ands	r2, r3
 8006792:	1dfb      	adds	r3, r7, #7
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	0018      	movs	r0, r3
 8006798:	2303      	movs	r3, #3
 800679a:	4003      	ands	r3, r0
 800679c:	00db      	lsls	r3, r3, #3
 800679e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80067a0:	481f      	ldr	r0, [pc, #124]	@ (8006820 <__NVIC_SetPriority+0xd4>)
 80067a2:	1dfb      	adds	r3, r7, #7
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	b25b      	sxtb	r3, r3
 80067a8:	089b      	lsrs	r3, r3, #2
 80067aa:	430a      	orrs	r2, r1
 80067ac:	33c0      	adds	r3, #192	@ 0xc0
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80067b2:	e031      	b.n	8006818 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80067b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006824 <__NVIC_SetPriority+0xd8>)
 80067b6:	1dfb      	adds	r3, r7, #7
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	0019      	movs	r1, r3
 80067bc:	230f      	movs	r3, #15
 80067be:	400b      	ands	r3, r1
 80067c0:	3b08      	subs	r3, #8
 80067c2:	089b      	lsrs	r3, r3, #2
 80067c4:	3306      	adds	r3, #6
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	18d3      	adds	r3, r2, r3
 80067ca:	3304      	adds	r3, #4
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	1dfa      	adds	r2, r7, #7
 80067d0:	7812      	ldrb	r2, [r2, #0]
 80067d2:	0011      	movs	r1, r2
 80067d4:	2203      	movs	r2, #3
 80067d6:	400a      	ands	r2, r1
 80067d8:	00d2      	lsls	r2, r2, #3
 80067da:	21ff      	movs	r1, #255	@ 0xff
 80067dc:	4091      	lsls	r1, r2
 80067de:	000a      	movs	r2, r1
 80067e0:	43d2      	mvns	r2, r2
 80067e2:	401a      	ands	r2, r3
 80067e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	019b      	lsls	r3, r3, #6
 80067ea:	22ff      	movs	r2, #255	@ 0xff
 80067ec:	401a      	ands	r2, r3
 80067ee:	1dfb      	adds	r3, r7, #7
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	0018      	movs	r0, r3
 80067f4:	2303      	movs	r3, #3
 80067f6:	4003      	ands	r3, r0
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80067fc:	4809      	ldr	r0, [pc, #36]	@ (8006824 <__NVIC_SetPriority+0xd8>)
 80067fe:	1dfb      	adds	r3, r7, #7
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	001c      	movs	r4, r3
 8006804:	230f      	movs	r3, #15
 8006806:	4023      	ands	r3, r4
 8006808:	3b08      	subs	r3, #8
 800680a:	089b      	lsrs	r3, r3, #2
 800680c:	430a      	orrs	r2, r1
 800680e:	3306      	adds	r3, #6
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	18c3      	adds	r3, r0, r3
 8006814:	3304      	adds	r3, #4
 8006816:	601a      	str	r2, [r3, #0]
}
 8006818:	46c0      	nop			@ (mov r8, r8)
 800681a:	46bd      	mov	sp, r7
 800681c:	b003      	add	sp, #12
 800681e:	bd90      	pop	{r4, r7, pc}
 8006820:	e000e100 	.word	0xe000e100
 8006824:	e000ed00 	.word	0xe000ed00

08006828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	1e5a      	subs	r2, r3, #1
 8006834:	2380      	movs	r3, #128	@ 0x80
 8006836:	045b      	lsls	r3, r3, #17
 8006838:	429a      	cmp	r2, r3
 800683a:	d301      	bcc.n	8006840 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800683c:	2301      	movs	r3, #1
 800683e:	e010      	b.n	8006862 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006840:	4b0a      	ldr	r3, [pc, #40]	@ (800686c <SysTick_Config+0x44>)
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	3a01      	subs	r2, #1
 8006846:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006848:	2301      	movs	r3, #1
 800684a:	425b      	negs	r3, r3
 800684c:	2103      	movs	r1, #3
 800684e:	0018      	movs	r0, r3
 8006850:	f7ff ff7c 	bl	800674c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006854:	4b05      	ldr	r3, [pc, #20]	@ (800686c <SysTick_Config+0x44>)
 8006856:	2200      	movs	r2, #0
 8006858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800685a:	4b04      	ldr	r3, [pc, #16]	@ (800686c <SysTick_Config+0x44>)
 800685c:	2207      	movs	r2, #7
 800685e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006860:	2300      	movs	r3, #0
}
 8006862:	0018      	movs	r0, r3
 8006864:	46bd      	mov	sp, r7
 8006866:	b002      	add	sp, #8
 8006868:	bd80      	pop	{r7, pc}
 800686a:	46c0      	nop			@ (mov r8, r8)
 800686c:	e000e010 	.word	0xe000e010

08006870 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	607a      	str	r2, [r7, #4]
 800687a:	210f      	movs	r1, #15
 800687c:	187b      	adds	r3, r7, r1
 800687e:	1c02      	adds	r2, r0, #0
 8006880:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	187b      	adds	r3, r7, r1
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	b25b      	sxtb	r3, r3
 800688a:	0011      	movs	r1, r2
 800688c:	0018      	movs	r0, r3
 800688e:	f7ff ff5d 	bl	800674c <__NVIC_SetPriority>
}
 8006892:	46c0      	nop			@ (mov r8, r8)
 8006894:	46bd      	mov	sp, r7
 8006896:	b004      	add	sp, #16
 8006898:	bd80      	pop	{r7, pc}

0800689a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	0002      	movs	r2, r0
 80068a2:	1dfb      	adds	r3, r7, #7
 80068a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068a6:	1dfb      	adds	r3, r7, #7
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	b25b      	sxtb	r3, r3
 80068ac:	0018      	movs	r0, r3
 80068ae:	f7ff ff33 	bl	8006718 <__NVIC_EnableIRQ>
}
 80068b2:	46c0      	nop			@ (mov r8, r8)
 80068b4:	46bd      	mov	sp, r7
 80068b6:	b002      	add	sp, #8
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b082      	sub	sp, #8
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	0018      	movs	r0, r3
 80068c6:	f7ff ffaf 	bl	8006828 <SysTick_Config>
 80068ca:	0003      	movs	r3, r0
}
 80068cc:	0018      	movs	r0, r3
 80068ce:	46bd      	mov	sp, r7
 80068d0:	b002      	add	sp, #8
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e077      	b.n	80069d6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a3d      	ldr	r2, [pc, #244]	@ (80069e0 <HAL_DMA_Init+0x10c>)
 80068ec:	4694      	mov	ip, r2
 80068ee:	4463      	add	r3, ip
 80068f0:	2114      	movs	r1, #20
 80068f2:	0018      	movs	r0, r3
 80068f4:	f7f9 fc20 	bl	8000138 <__udivsi3>
 80068f8:	0003      	movs	r3, r0
 80068fa:	009a      	lsls	r2, r3, #2
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2225      	movs	r2, #37	@ 0x25
 8006904:	2102      	movs	r1, #2
 8006906:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4934      	ldr	r1, [pc, #208]	@ (80069e4 <HAL_DMA_Init+0x110>)
 8006914:	400a      	ands	r2, r1
 8006916:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6819      	ldr	r1, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	431a      	orrs	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	431a      	orrs	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	431a      	orrs	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	431a      	orrs	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	0018      	movs	r0, r3
 8006952:	f000 f9c1 	bl	8006cd8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	2380      	movs	r3, #128	@ 0x80
 800695c:	01db      	lsls	r3, r3, #7
 800695e:	429a      	cmp	r2, r3
 8006960:	d102      	bne.n	8006968 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006970:	213f      	movs	r1, #63	@ 0x3f
 8006972:	400a      	ands	r2, r1
 8006974:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800697e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d011      	beq.n	80069ac <HAL_DMA_Init+0xd8>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b04      	cmp	r3, #4
 800698e:	d80d      	bhi.n	80069ac <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	0018      	movs	r0, r3
 8006994:	f000 f9cc 	bl	8006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80069a8:	605a      	str	r2, [r3, #4]
 80069aa:	e008      	b.n	80069be <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2225      	movs	r2, #37	@ 0x25
 80069c8:	2101      	movs	r1, #1
 80069ca:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2224      	movs	r2, #36	@ 0x24
 80069d0:	2100      	movs	r1, #0
 80069d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	0018      	movs	r0, r3
 80069d8:	46bd      	mov	sp, r7
 80069da:	b002      	add	sp, #8
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	46c0      	nop			@ (mov r8, r8)
 80069e0:	bffdfff8 	.word	0xbffdfff8
 80069e4:	ffff800f 	.word	0xffff800f

080069e8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069f6:	2317      	movs	r3, #23
 80069f8:	18fb      	adds	r3, r7, r3
 80069fa:	2200      	movs	r2, #0
 80069fc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2224      	movs	r2, #36	@ 0x24
 8006a02:	5c9b      	ldrb	r3, [r3, r2]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d101      	bne.n	8006a0c <HAL_DMA_Start_IT+0x24>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e06f      	b.n	8006aec <HAL_DMA_Start_IT+0x104>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2224      	movs	r2, #36	@ 0x24
 8006a10:	2101      	movs	r1, #1
 8006a12:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2225      	movs	r2, #37	@ 0x25
 8006a18:	5c9b      	ldrb	r3, [r3, r2]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d157      	bne.n	8006ad0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2225      	movs	r2, #37	@ 0x25
 8006a24:	2102      	movs	r1, #2
 8006a26:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2101      	movs	r1, #1
 8006a3a:	438a      	bics	r2, r1
 8006a3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	68b9      	ldr	r1, [r7, #8]
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f907 	bl	8006c58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d008      	beq.n	8006a64 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	210e      	movs	r1, #14
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	e00f      	b.n	8006a84 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2104      	movs	r1, #4
 8006a70:	438a      	bics	r2, r1
 8006a72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	210a      	movs	r1, #10
 8006a80:	430a      	orrs	r2, r1
 8006a82:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	2380      	movs	r3, #128	@ 0x80
 8006a8c:	025b      	lsls	r3, r3, #9
 8006a8e:	4013      	ands	r3, r2
 8006a90:	d008      	beq.n	8006aa4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9c:	2180      	movs	r1, #128	@ 0x80
 8006a9e:	0049      	lsls	r1, r1, #1
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d008      	beq.n	8006abe <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ab6:	2180      	movs	r1, #128	@ 0x80
 8006ab8:	0049      	lsls	r1, r1, #1
 8006aba:	430a      	orrs	r2, r1
 8006abc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2101      	movs	r1, #1
 8006aca:	430a      	orrs	r2, r1
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	e00a      	b.n	8006ae6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2280      	movs	r2, #128	@ 0x80
 8006ad4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2224      	movs	r2, #36	@ 0x24
 8006ada:	2100      	movs	r1, #0
 8006adc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8006ade:	2317      	movs	r3, #23
 8006ae0:	18fb      	adds	r3, r7, r3
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006ae6:	2317      	movs	r3, #23
 8006ae8:	18fb      	adds	r3, r7, r3
 8006aea:	781b      	ldrb	r3, [r3, #0]
}
 8006aec:	0018      	movs	r0, r3
 8006aee:	46bd      	mov	sp, r7
 8006af0:	b006      	add	sp, #24
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8006afc:	4b55      	ldr	r3, [pc, #340]	@ (8006c54 <HAL_DMA_IRQHandler+0x160>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b0e:	221c      	movs	r2, #28
 8006b10:	4013      	ands	r3, r2
 8006b12:	2204      	movs	r2, #4
 8006b14:	409a      	lsls	r2, r3
 8006b16:	0013      	movs	r3, r2
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	d027      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x7a>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2204      	movs	r2, #4
 8006b22:	4013      	ands	r3, r2
 8006b24:	d023      	beq.n	8006b6e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	4013      	ands	r3, r2
 8006b30:	d107      	bne.n	8006b42 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2104      	movs	r1, #4
 8006b3e:	438a      	bics	r2, r1
 8006b40:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8006b42:	4b44      	ldr	r3, [pc, #272]	@ (8006c54 <HAL_DMA_IRQHandler+0x160>)
 8006b44:	6859      	ldr	r1, [r3, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4a:	221c      	movs	r2, #28
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	2204      	movs	r2, #4
 8006b50:	409a      	lsls	r2, r3
 8006b52:	4b40      	ldr	r3, [pc, #256]	@ (8006c54 <HAL_DMA_IRQHandler+0x160>)
 8006b54:	430a      	orrs	r2, r1
 8006b56:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d100      	bne.n	8006b62 <HAL_DMA_IRQHandler+0x6e>
 8006b60:	e073      	b.n	8006c4a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	0010      	movs	r0, r2
 8006b6a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006b6c:	e06d      	b.n	8006c4a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b72:	221c      	movs	r2, #28
 8006b74:	4013      	ands	r3, r2
 8006b76:	2202      	movs	r2, #2
 8006b78:	409a      	lsls	r2, r3
 8006b7a:	0013      	movs	r3, r2
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	d02e      	beq.n	8006be0 <HAL_DMA_IRQHandler+0xec>
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2202      	movs	r2, #2
 8006b86:	4013      	ands	r3, r2
 8006b88:	d02a      	beq.n	8006be0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2220      	movs	r2, #32
 8006b92:	4013      	ands	r3, r2
 8006b94:	d10b      	bne.n	8006bae <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	210a      	movs	r1, #10
 8006ba2:	438a      	bics	r2, r1
 8006ba4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2225      	movs	r2, #37	@ 0x25
 8006baa:	2101      	movs	r1, #1
 8006bac:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006bae:	4b29      	ldr	r3, [pc, #164]	@ (8006c54 <HAL_DMA_IRQHandler+0x160>)
 8006bb0:	6859      	ldr	r1, [r3, #4]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb6:	221c      	movs	r2, #28
 8006bb8:	4013      	ands	r3, r2
 8006bba:	2202      	movs	r2, #2
 8006bbc:	409a      	lsls	r2, r3
 8006bbe:	4b25      	ldr	r3, [pc, #148]	@ (8006c54 <HAL_DMA_IRQHandler+0x160>)
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2224      	movs	r2, #36	@ 0x24
 8006bc8:	2100      	movs	r1, #0
 8006bca:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d03a      	beq.n	8006c4a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	0010      	movs	r0, r2
 8006bdc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8006bde:	e034      	b.n	8006c4a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be4:	221c      	movs	r2, #28
 8006be6:	4013      	ands	r3, r2
 8006be8:	2208      	movs	r2, #8
 8006bea:	409a      	lsls	r2, r3
 8006bec:	0013      	movs	r3, r2
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	d02b      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x158>
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2208      	movs	r2, #8
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	d027      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	210e      	movs	r1, #14
 8006c08:	438a      	bics	r2, r1
 8006c0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006c0c:	4b11      	ldr	r3, [pc, #68]	@ (8006c54 <HAL_DMA_IRQHandler+0x160>)
 8006c0e:	6859      	ldr	r1, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c14:	221c      	movs	r2, #28
 8006c16:	4013      	ands	r3, r2
 8006c18:	2201      	movs	r2, #1
 8006c1a:	409a      	lsls	r2, r3
 8006c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c54 <HAL_DMA_IRQHandler+0x160>)
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2225      	movs	r2, #37	@ 0x25
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2224      	movs	r2, #36	@ 0x24
 8006c34:	2100      	movs	r1, #0
 8006c36:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	0010      	movs	r0, r2
 8006c48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006c4a:	46c0      	nop			@ (mov r8, r8)
 8006c4c:	46c0      	nop			@ (mov r8, r8)
}
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	b004      	add	sp, #16
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	40020000 	.word	0x40020000

08006c58 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006c6e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d004      	beq.n	8006c82 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006c80:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006c82:	4b14      	ldr	r3, [pc, #80]	@ (8006cd4 <DMA_SetConfig+0x7c>)
 8006c84:	6859      	ldr	r1, [r3, #4]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8a:	221c      	movs	r2, #28
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	2201      	movs	r2, #1
 8006c90:	409a      	lsls	r2, r3
 8006c92:	4b10      	ldr	r3, [pc, #64]	@ (8006cd4 <DMA_SetConfig+0x7c>)
 8006c94:	430a      	orrs	r2, r1
 8006c96:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	2b10      	cmp	r3, #16
 8006ca6:	d108      	bne.n	8006cba <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006cb8:	e007      	b.n	8006cca <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	60da      	str	r2, [r3, #12]
}
 8006cca:	46c0      	nop			@ (mov r8, r8)
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	b004      	add	sp, #16
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	46c0      	nop			@ (mov r8, r8)
 8006cd4:	40020000 	.word	0x40020000

08006cd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce4:	089b      	lsrs	r3, r3, #2
 8006ce6:	4a10      	ldr	r2, [pc, #64]	@ (8006d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006ce8:	4694      	mov	ip, r2
 8006cea:	4463      	add	r3, ip
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	001a      	movs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	001a      	movs	r2, r3
 8006cfa:	23ff      	movs	r3, #255	@ 0xff
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	3b08      	subs	r3, #8
 8006d00:	2114      	movs	r1, #20
 8006d02:	0018      	movs	r0, r3
 8006d04:	f7f9 fa18 	bl	8000138 <__udivsi3>
 8006d08:	0003      	movs	r3, r0
 8006d0a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a07      	ldr	r2, [pc, #28]	@ (8006d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006d10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	221f      	movs	r2, #31
 8006d16:	4013      	ands	r3, r2
 8006d18:	2201      	movs	r2, #1
 8006d1a:	409a      	lsls	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8006d20:	46c0      	nop			@ (mov r8, r8)
 8006d22:	46bd      	mov	sp, r7
 8006d24:	b004      	add	sp, #16
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	10008200 	.word	0x10008200
 8006d2c:	40020880 	.word	0x40020880

08006d30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	223f      	movs	r2, #63	@ 0x3f
 8006d3e:	4013      	ands	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4a0a      	ldr	r2, [pc, #40]	@ (8006d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006d46:	4694      	mov	ip, r2
 8006d48:	4463      	add	r3, ip
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	001a      	movs	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a07      	ldr	r2, [pc, #28]	@ (8006d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006d56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	2203      	movs	r2, #3
 8006d5e:	4013      	ands	r3, r2
 8006d60:	2201      	movs	r2, #1
 8006d62:	409a      	lsls	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8006d68:	46c0      	nop			@ (mov r8, r8)
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	b004      	add	sp, #16
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	1000823f 	.word	0x1000823f
 8006d74:	40020940 	.word	0x40020940

08006d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006d82:	2300      	movs	r3, #0
 8006d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d86:	e147      	b.n	8007018 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4091      	lsls	r1, r2
 8006d92:	000a      	movs	r2, r1
 8006d94:	4013      	ands	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d100      	bne.n	8006da0 <HAL_GPIO_Init+0x28>
 8006d9e:	e138      	b.n	8007012 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2203      	movs	r2, #3
 8006da6:	4013      	ands	r3, r2
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d005      	beq.n	8006db8 <HAL_GPIO_Init+0x40>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2203      	movs	r2, #3
 8006db2:	4013      	ands	r3, r2
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d130      	bne.n	8006e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	409a      	lsls	r2, r3
 8006dc6:	0013      	movs	r3, r2
 8006dc8:	43da      	mvns	r2, r3
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68da      	ldr	r2, [r3, #12]
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	409a      	lsls	r2, r3
 8006dda:	0013      	movs	r3, r2
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006dee:	2201      	movs	r2, #1
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	409a      	lsls	r2, r3
 8006df4:	0013      	movs	r3, r2
 8006df6:	43da      	mvns	r2, r3
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	091b      	lsrs	r3, r3, #4
 8006e04:	2201      	movs	r2, #1
 8006e06:	401a      	ands	r2, r3
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	409a      	lsls	r2, r3
 8006e0c:	0013      	movs	r3, r2
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2203      	movs	r2, #3
 8006e20:	4013      	ands	r3, r2
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d017      	beq.n	8006e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	2203      	movs	r2, #3
 8006e32:	409a      	lsls	r2, r3
 8006e34:	0013      	movs	r3, r2
 8006e36:	43da      	mvns	r2, r3
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	689a      	ldr	r2, [r3, #8]
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	409a      	lsls	r2, r3
 8006e48:	0013      	movs	r3, r2
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2203      	movs	r2, #3
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d123      	bne.n	8006eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	08da      	lsrs	r2, r3, #3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3208      	adds	r2, #8
 8006e6a:	0092      	lsls	r2, r2, #2
 8006e6c:	58d3      	ldr	r3, [r2, r3]
 8006e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2207      	movs	r2, #7
 8006e74:	4013      	ands	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	220f      	movs	r2, #15
 8006e7a:	409a      	lsls	r2, r3
 8006e7c:	0013      	movs	r3, r2
 8006e7e:	43da      	mvns	r2, r3
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	4013      	ands	r3, r2
 8006e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	691a      	ldr	r2, [r3, #16]
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2107      	movs	r1, #7
 8006e8e:	400b      	ands	r3, r1
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	409a      	lsls	r2, r3
 8006e94:	0013      	movs	r3, r2
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	08da      	lsrs	r2, r3, #3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3208      	adds	r2, #8
 8006ea4:	0092      	lsls	r2, r2, #2
 8006ea6:	6939      	ldr	r1, [r7, #16]
 8006ea8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	2203      	movs	r2, #3
 8006eb6:	409a      	lsls	r2, r3
 8006eb8:	0013      	movs	r3, r2
 8006eba:	43da      	mvns	r2, r3
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	401a      	ands	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	409a      	lsls	r2, r3
 8006ed0:	0013      	movs	r3, r2
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	23c0      	movs	r3, #192	@ 0xc0
 8006ee4:	029b      	lsls	r3, r3, #10
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	d100      	bne.n	8006eec <HAL_GPIO_Init+0x174>
 8006eea:	e092      	b.n	8007012 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006eec:	4a50      	ldr	r2, [pc, #320]	@ (8007030 <HAL_GPIO_Init+0x2b8>)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	089b      	lsrs	r3, r3, #2
 8006ef2:	3318      	adds	r3, #24
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	589b      	ldr	r3, [r3, r2]
 8006ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2203      	movs	r2, #3
 8006efe:	4013      	ands	r3, r2
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	220f      	movs	r2, #15
 8006f04:	409a      	lsls	r2, r3
 8006f06:	0013      	movs	r3, r2
 8006f08:	43da      	mvns	r2, r3
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	23a0      	movs	r3, #160	@ 0xa0
 8006f14:	05db      	lsls	r3, r3, #23
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d013      	beq.n	8006f42 <HAL_GPIO_Init+0x1ca>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a45      	ldr	r2, [pc, #276]	@ (8007034 <HAL_GPIO_Init+0x2bc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d00d      	beq.n	8006f3e <HAL_GPIO_Init+0x1c6>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a44      	ldr	r2, [pc, #272]	@ (8007038 <HAL_GPIO_Init+0x2c0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d007      	beq.n	8006f3a <HAL_GPIO_Init+0x1c2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a43      	ldr	r2, [pc, #268]	@ (800703c <HAL_GPIO_Init+0x2c4>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d101      	bne.n	8006f36 <HAL_GPIO_Init+0x1be>
 8006f32:	2303      	movs	r3, #3
 8006f34:	e006      	b.n	8006f44 <HAL_GPIO_Init+0x1cc>
 8006f36:	2305      	movs	r3, #5
 8006f38:	e004      	b.n	8006f44 <HAL_GPIO_Init+0x1cc>
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	e002      	b.n	8006f44 <HAL_GPIO_Init+0x1cc>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e000      	b.n	8006f44 <HAL_GPIO_Init+0x1cc>
 8006f42:	2300      	movs	r3, #0
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	2103      	movs	r1, #3
 8006f48:	400a      	ands	r2, r1
 8006f4a:	00d2      	lsls	r2, r2, #3
 8006f4c:	4093      	lsls	r3, r2
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006f54:	4936      	ldr	r1, [pc, #216]	@ (8007030 <HAL_GPIO_Init+0x2b8>)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	089b      	lsrs	r3, r3, #2
 8006f5a:	3318      	adds	r3, #24
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f62:	4b33      	ldr	r3, [pc, #204]	@ (8007030 <HAL_GPIO_Init+0x2b8>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	43da      	mvns	r2, r3
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	4013      	ands	r3, r2
 8006f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	2380      	movs	r3, #128	@ 0x80
 8006f78:	035b      	lsls	r3, r3, #13
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	d003      	beq.n	8006f86 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006f86:	4b2a      	ldr	r3, [pc, #168]	@ (8007030 <HAL_GPIO_Init+0x2b8>)
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006f8c:	4b28      	ldr	r3, [pc, #160]	@ (8007030 <HAL_GPIO_Init+0x2b8>)
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	43da      	mvns	r2, r3
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	2380      	movs	r3, #128	@ 0x80
 8006fa2:	039b      	lsls	r3, r3, #14
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	d003      	beq.n	8006fb0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8007030 <HAL_GPIO_Init+0x2b8>)
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8007030 <HAL_GPIO_Init+0x2b8>)
 8006fb8:	2384      	movs	r3, #132	@ 0x84
 8006fba:	58d3      	ldr	r3, [r2, r3]
 8006fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	43da      	mvns	r2, r3
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	2380      	movs	r3, #128	@ 0x80
 8006fce:	029b      	lsls	r3, r3, #10
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d003      	beq.n	8006fdc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006fdc:	4914      	ldr	r1, [pc, #80]	@ (8007030 <HAL_GPIO_Init+0x2b8>)
 8006fde:	2284      	movs	r2, #132	@ 0x84
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006fe4:	4a12      	ldr	r2, [pc, #72]	@ (8007030 <HAL_GPIO_Init+0x2b8>)
 8006fe6:	2380      	movs	r3, #128	@ 0x80
 8006fe8:	58d3      	ldr	r3, [r2, r3]
 8006fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	43da      	mvns	r2, r3
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	2380      	movs	r3, #128	@ 0x80
 8006ffc:	025b      	lsls	r3, r3, #9
 8006ffe:	4013      	ands	r3, r2
 8007000:	d003      	beq.n	800700a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800700a:	4909      	ldr	r1, [pc, #36]	@ (8007030 <HAL_GPIO_Init+0x2b8>)
 800700c:	2280      	movs	r2, #128	@ 0x80
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	3301      	adds	r3, #1
 8007016:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	40da      	lsrs	r2, r3
 8007020:	1e13      	subs	r3, r2, #0
 8007022:	d000      	beq.n	8007026 <HAL_GPIO_Init+0x2ae>
 8007024:	e6b0      	b.n	8006d88 <HAL_GPIO_Init+0x10>
  }
}
 8007026:	46c0      	nop			@ (mov r8, r8)
 8007028:	46c0      	nop			@ (mov r8, r8)
 800702a:	46bd      	mov	sp, r7
 800702c:	b006      	add	sp, #24
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40021800 	.word	0x40021800
 8007034:	50000400 	.word	0x50000400
 8007038:	50000800 	.word	0x50000800
 800703c:	50000c00 	.word	0x50000c00

08007040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	000a      	movs	r2, r1
 800704a:	1cbb      	adds	r3, r7, #2
 800704c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	1cba      	adds	r2, r7, #2
 8007054:	8812      	ldrh	r2, [r2, #0]
 8007056:	4013      	ands	r3, r2
 8007058:	d004      	beq.n	8007064 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800705a:	230f      	movs	r3, #15
 800705c:	18fb      	adds	r3, r7, r3
 800705e:	2201      	movs	r2, #1
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	e003      	b.n	800706c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007064:	230f      	movs	r3, #15
 8007066:	18fb      	adds	r3, r7, r3
 8007068:	2200      	movs	r2, #0
 800706a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800706c:	230f      	movs	r3, #15
 800706e:	18fb      	adds	r3, r7, r3
 8007070:	781b      	ldrb	r3, [r3, #0]
}
 8007072:	0018      	movs	r0, r3
 8007074:	46bd      	mov	sp, r7
 8007076:	b004      	add	sp, #16
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b082      	sub	sp, #8
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	0008      	movs	r0, r1
 8007084:	0011      	movs	r1, r2
 8007086:	1cbb      	adds	r3, r7, #2
 8007088:	1c02      	adds	r2, r0, #0
 800708a:	801a      	strh	r2, [r3, #0]
 800708c:	1c7b      	adds	r3, r7, #1
 800708e:	1c0a      	adds	r2, r1, #0
 8007090:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007092:	1c7b      	adds	r3, r7, #1
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d004      	beq.n	80070a4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800709a:	1cbb      	adds	r3, r7, #2
 800709c:	881a      	ldrh	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80070a2:	e003      	b.n	80070ac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070a4:	1cbb      	adds	r3, r7, #2
 80070a6:	881a      	ldrh	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80070ac:	46c0      	nop			@ (mov r8, r8)
 80070ae:	46bd      	mov	sp, r7
 80070b0:	b002      	add	sp, #8
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	0002      	movs	r2, r0
 80070bc:	1dbb      	adds	r3, r7, #6
 80070be:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80070c0:	4b10      	ldr	r3, [pc, #64]	@ (8007104 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	1dba      	adds	r2, r7, #6
 80070c6:	8812      	ldrh	r2, [r2, #0]
 80070c8:	4013      	ands	r3, r2
 80070ca:	d008      	beq.n	80070de <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80070cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007104 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80070ce:	1dba      	adds	r2, r7, #6
 80070d0:	8812      	ldrh	r2, [r2, #0]
 80070d2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80070d4:	1dbb      	adds	r3, r7, #6
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	0018      	movs	r0, r3
 80070da:	f000 f815 	bl	8007108 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80070de:	4b09      	ldr	r3, [pc, #36]	@ (8007104 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	1dba      	adds	r2, r7, #6
 80070e4:	8812      	ldrh	r2, [r2, #0]
 80070e6:	4013      	ands	r3, r2
 80070e8:	d008      	beq.n	80070fc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80070ea:	4b06      	ldr	r3, [pc, #24]	@ (8007104 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80070ec:	1dba      	adds	r2, r7, #6
 80070ee:	8812      	ldrh	r2, [r2, #0]
 80070f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80070f2:	1dbb      	adds	r3, r7, #6
 80070f4:	881b      	ldrh	r3, [r3, #0]
 80070f6:	0018      	movs	r0, r3
 80070f8:	f7fc f9cc 	bl	8003494 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80070fc:	46c0      	nop			@ (mov r8, r8)
 80070fe:	46bd      	mov	sp, r7
 8007100:	b002      	add	sp, #8
 8007102:	bd80      	pop	{r7, pc}
 8007104:	40021800 	.word	0x40021800

08007108 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	0002      	movs	r2, r0
 8007110:	1dbb      	adds	r3, r7, #6
 8007112:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8007114:	46c0      	nop			@ (mov r8, r8)
 8007116:	46bd      	mov	sp, r7
 8007118:	b002      	add	sp, #8
 800711a:	bd80      	pop	{r7, pc}

0800711c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e08f      	b.n	800724e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2241      	movs	r2, #65	@ 0x41
 8007132:	5c9b      	ldrb	r3, [r3, r2]
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d107      	bne.n	800714a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2240      	movs	r2, #64	@ 0x40
 800713e:	2100      	movs	r1, #0
 8007140:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	0018      	movs	r0, r3
 8007146:	f7fd ff3f 	bl	8004fc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2241      	movs	r2, #65	@ 0x41
 800714e:	2124      	movs	r1, #36	@ 0x24
 8007150:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2101      	movs	r1, #1
 800715e:	438a      	bics	r2, r1
 8007160:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	493b      	ldr	r1, [pc, #236]	@ (8007258 <HAL_I2C_Init+0x13c>)
 800716c:	400a      	ands	r2, r1
 800716e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689a      	ldr	r2, [r3, #8]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4938      	ldr	r1, [pc, #224]	@ (800725c <HAL_I2C_Init+0x140>)
 800717c:	400a      	ands	r2, r1
 800717e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d108      	bne.n	800719a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2180      	movs	r1, #128	@ 0x80
 8007192:	0209      	lsls	r1, r1, #8
 8007194:	430a      	orrs	r2, r1
 8007196:	609a      	str	r2, [r3, #8]
 8007198:	e007      	b.n	80071aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2184      	movs	r1, #132	@ 0x84
 80071a4:	0209      	lsls	r1, r1, #8
 80071a6:	430a      	orrs	r2, r1
 80071a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d109      	bne.n	80071c6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2180      	movs	r1, #128	@ 0x80
 80071be:	0109      	lsls	r1, r1, #4
 80071c0:	430a      	orrs	r2, r1
 80071c2:	605a      	str	r2, [r3, #4]
 80071c4:	e007      	b.n	80071d6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4923      	ldr	r1, [pc, #140]	@ (8007260 <HAL_I2C_Init+0x144>)
 80071d2:	400a      	ands	r2, r1
 80071d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4920      	ldr	r1, [pc, #128]	@ (8007264 <HAL_I2C_Init+0x148>)
 80071e2:	430a      	orrs	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	491a      	ldr	r1, [pc, #104]	@ (800725c <HAL_I2C_Init+0x140>)
 80071f2:	400a      	ands	r2, r1
 80071f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691a      	ldr	r2, [r3, #16]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	431a      	orrs	r2, r3
 8007200:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	69d9      	ldr	r1, [r3, #28]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1a      	ldr	r2, [r3, #32]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2101      	movs	r1, #1
 800722c:	430a      	orrs	r2, r1
 800722e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2241      	movs	r2, #65	@ 0x41
 800723a:	2120      	movs	r1, #32
 800723c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2242      	movs	r2, #66	@ 0x42
 8007248:	2100      	movs	r1, #0
 800724a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	0018      	movs	r0, r3
 8007250:	46bd      	mov	sp, r7
 8007252:	b002      	add	sp, #8
 8007254:	bd80      	pop	{r7, pc}
 8007256:	46c0      	nop			@ (mov r8, r8)
 8007258:	f0ffffff 	.word	0xf0ffffff
 800725c:	ffff7fff 	.word	0xffff7fff
 8007260:	fffff7ff 	.word	0xfffff7ff
 8007264:	02008000 	.word	0x02008000

08007268 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007268:	b590      	push	{r4, r7, lr}
 800726a:	b089      	sub	sp, #36	@ 0x24
 800726c:	af02      	add	r7, sp, #8
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	0008      	movs	r0, r1
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	0019      	movs	r1, r3
 8007276:	230a      	movs	r3, #10
 8007278:	18fb      	adds	r3, r7, r3
 800727a:	1c02      	adds	r2, r0, #0
 800727c:	801a      	strh	r2, [r3, #0]
 800727e:	2308      	movs	r3, #8
 8007280:	18fb      	adds	r3, r7, r3
 8007282:	1c0a      	adds	r2, r1, #0
 8007284:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2241      	movs	r2, #65	@ 0x41
 800728a:	5c9b      	ldrb	r3, [r3, r2]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b20      	cmp	r3, #32
 8007290:	d000      	beq.n	8007294 <HAL_I2C_Master_Transmit+0x2c>
 8007292:	e10a      	b.n	80074aa <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2240      	movs	r2, #64	@ 0x40
 8007298:	5c9b      	ldrb	r3, [r3, r2]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d101      	bne.n	80072a2 <HAL_I2C_Master_Transmit+0x3a>
 800729e:	2302      	movs	r3, #2
 80072a0:	e104      	b.n	80074ac <HAL_I2C_Master_Transmit+0x244>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2240      	movs	r2, #64	@ 0x40
 80072a6:	2101      	movs	r1, #1
 80072a8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072aa:	f7fe fa41 	bl	8005730 <HAL_GetTick>
 80072ae:	0003      	movs	r3, r0
 80072b0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072b2:	2380      	movs	r3, #128	@ 0x80
 80072b4:	0219      	lsls	r1, r3, #8
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	2319      	movs	r3, #25
 80072be:	2201      	movs	r2, #1
 80072c0:	f000 fab0 	bl	8007824 <I2C_WaitOnFlagUntilTimeout>
 80072c4:	1e03      	subs	r3, r0, #0
 80072c6:	d001      	beq.n	80072cc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e0ef      	b.n	80074ac <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2241      	movs	r2, #65	@ 0x41
 80072d0:	2121      	movs	r1, #33	@ 0x21
 80072d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2242      	movs	r2, #66	@ 0x42
 80072d8:	2110      	movs	r1, #16
 80072da:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2208      	movs	r2, #8
 80072ec:	18ba      	adds	r2, r7, r2
 80072ee:	8812      	ldrh	r2, [r2, #0]
 80072f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	2bff      	cmp	r3, #255	@ 0xff
 8007300:	d906      	bls.n	8007310 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	22ff      	movs	r2, #255	@ 0xff
 8007306:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007308:	2380      	movs	r3, #128	@ 0x80
 800730a:	045b      	lsls	r3, r3, #17
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	e007      	b.n	8007320 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007314:	b29a      	uxth	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800731a:	2380      	movs	r3, #128	@ 0x80
 800731c:	049b      	lsls	r3, r3, #18
 800731e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007324:	2b00      	cmp	r3, #0
 8007326:	d027      	beq.n	8007378 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732c:	781a      	ldrb	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007342:	b29b      	uxth	r3, r3
 8007344:	3b01      	subs	r3, #1
 8007346:	b29a      	uxth	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007350:	3b01      	subs	r3, #1
 8007352:	b29a      	uxth	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800735c:	b2db      	uxtb	r3, r3
 800735e:	3301      	adds	r3, #1
 8007360:	b2da      	uxtb	r2, r3
 8007362:	697c      	ldr	r4, [r7, #20]
 8007364:	230a      	movs	r3, #10
 8007366:	18fb      	adds	r3, r7, r3
 8007368:	8819      	ldrh	r1, [r3, #0]
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	4b51      	ldr	r3, [pc, #324]	@ (80074b4 <HAL_I2C_Master_Transmit+0x24c>)
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	0023      	movs	r3, r4
 8007372:	f000 fc31 	bl	8007bd8 <I2C_TransferConfig>
 8007376:	e06f      	b.n	8007458 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800737c:	b2da      	uxtb	r2, r3
 800737e:	697c      	ldr	r4, [r7, #20]
 8007380:	230a      	movs	r3, #10
 8007382:	18fb      	adds	r3, r7, r3
 8007384:	8819      	ldrh	r1, [r3, #0]
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	4b4a      	ldr	r3, [pc, #296]	@ (80074b4 <HAL_I2C_Master_Transmit+0x24c>)
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	0023      	movs	r3, r4
 800738e:	f000 fc23 	bl	8007bd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007392:	e061      	b.n	8007458 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	0018      	movs	r0, r3
 800739c:	f000 fa9a 	bl	80078d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80073a0:	1e03      	subs	r3, r0, #0
 80073a2:	d001      	beq.n	80073a8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e081      	b.n	80074ac <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ac:	781a      	ldrb	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d03a      	beq.n	8007458 <HAL_I2C_Master_Transmit+0x1f0>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d136      	bne.n	8007458 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	0013      	movs	r3, r2
 80073f4:	2200      	movs	r2, #0
 80073f6:	2180      	movs	r1, #128	@ 0x80
 80073f8:	f000 fa14 	bl	8007824 <I2C_WaitOnFlagUntilTimeout>
 80073fc:	1e03      	subs	r3, r0, #0
 80073fe:	d001      	beq.n	8007404 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e053      	b.n	80074ac <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007408:	b29b      	uxth	r3, r3
 800740a:	2bff      	cmp	r3, #255	@ 0xff
 800740c:	d911      	bls.n	8007432 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	22ff      	movs	r2, #255	@ 0xff
 8007412:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007418:	b2da      	uxtb	r2, r3
 800741a:	2380      	movs	r3, #128	@ 0x80
 800741c:	045c      	lsls	r4, r3, #17
 800741e:	230a      	movs	r3, #10
 8007420:	18fb      	adds	r3, r7, r3
 8007422:	8819      	ldrh	r1, [r3, #0]
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	2300      	movs	r3, #0
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	0023      	movs	r3, r4
 800742c:	f000 fbd4 	bl	8007bd8 <I2C_TransferConfig>
 8007430:	e012      	b.n	8007458 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007440:	b2da      	uxtb	r2, r3
 8007442:	2380      	movs	r3, #128	@ 0x80
 8007444:	049c      	lsls	r4, r3, #18
 8007446:	230a      	movs	r3, #10
 8007448:	18fb      	adds	r3, r7, r3
 800744a:	8819      	ldrh	r1, [r3, #0]
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	2300      	movs	r3, #0
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	0023      	movs	r3, r4
 8007454:	f000 fbc0 	bl	8007bd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800745c:	b29b      	uxth	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d198      	bne.n	8007394 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	0018      	movs	r0, r3
 800746a:	f000 fa79 	bl	8007960 <I2C_WaitOnSTOPFlagUntilTimeout>
 800746e:	1e03      	subs	r3, r0, #0
 8007470:	d001      	beq.n	8007476 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e01a      	b.n	80074ac <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2220      	movs	r2, #32
 800747c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	490b      	ldr	r1, [pc, #44]	@ (80074b8 <HAL_I2C_Master_Transmit+0x250>)
 800748a:	400a      	ands	r2, r1
 800748c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2241      	movs	r2, #65	@ 0x41
 8007492:	2120      	movs	r1, #32
 8007494:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2242      	movs	r2, #66	@ 0x42
 800749a:	2100      	movs	r1, #0
 800749c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2240      	movs	r2, #64	@ 0x40
 80074a2:	2100      	movs	r1, #0
 80074a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	e000      	b.n	80074ac <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80074aa:	2302      	movs	r3, #2
  }
}
 80074ac:	0018      	movs	r0, r3
 80074ae:	46bd      	mov	sp, r7
 80074b0:	b007      	add	sp, #28
 80074b2:	bd90      	pop	{r4, r7, pc}
 80074b4:	80002000 	.word	0x80002000
 80074b8:	fe00e800 	.word	0xfe00e800

080074bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074bc:	b590      	push	{r4, r7, lr}
 80074be:	b089      	sub	sp, #36	@ 0x24
 80074c0:	af02      	add	r7, sp, #8
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	000c      	movs	r4, r1
 80074c6:	0010      	movs	r0, r2
 80074c8:	0019      	movs	r1, r3
 80074ca:	230a      	movs	r3, #10
 80074cc:	18fb      	adds	r3, r7, r3
 80074ce:	1c22      	adds	r2, r4, #0
 80074d0:	801a      	strh	r2, [r3, #0]
 80074d2:	2308      	movs	r3, #8
 80074d4:	18fb      	adds	r3, r7, r3
 80074d6:	1c02      	adds	r2, r0, #0
 80074d8:	801a      	strh	r2, [r3, #0]
 80074da:	1dbb      	adds	r3, r7, #6
 80074dc:	1c0a      	adds	r2, r1, #0
 80074de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2241      	movs	r2, #65	@ 0x41
 80074e4:	5c9b      	ldrb	r3, [r3, r2]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b20      	cmp	r3, #32
 80074ea:	d000      	beq.n	80074ee <HAL_I2C_Mem_Write+0x32>
 80074ec:	e10c      	b.n	8007708 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80074ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d004      	beq.n	80074fe <HAL_I2C_Mem_Write+0x42>
 80074f4:	232c      	movs	r3, #44	@ 0x2c
 80074f6:	18fb      	adds	r3, r7, r3
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d105      	bne.n	800750a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2280      	movs	r2, #128	@ 0x80
 8007502:	0092      	lsls	r2, r2, #2
 8007504:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e0ff      	b.n	800770a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2240      	movs	r2, #64	@ 0x40
 800750e:	5c9b      	ldrb	r3, [r3, r2]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d101      	bne.n	8007518 <HAL_I2C_Mem_Write+0x5c>
 8007514:	2302      	movs	r3, #2
 8007516:	e0f8      	b.n	800770a <HAL_I2C_Mem_Write+0x24e>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2240      	movs	r2, #64	@ 0x40
 800751c:	2101      	movs	r1, #1
 800751e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007520:	f7fe f906 	bl	8005730 <HAL_GetTick>
 8007524:	0003      	movs	r3, r0
 8007526:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007528:	2380      	movs	r3, #128	@ 0x80
 800752a:	0219      	lsls	r1, r3, #8
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	2319      	movs	r3, #25
 8007534:	2201      	movs	r2, #1
 8007536:	f000 f975 	bl	8007824 <I2C_WaitOnFlagUntilTimeout>
 800753a:	1e03      	subs	r3, r0, #0
 800753c:	d001      	beq.n	8007542 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e0e3      	b.n	800770a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2241      	movs	r2, #65	@ 0x41
 8007546:	2121      	movs	r1, #33	@ 0x21
 8007548:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2242      	movs	r2, #66	@ 0x42
 800754e:	2140      	movs	r1, #64	@ 0x40
 8007550:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800755c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	222c      	movs	r2, #44	@ 0x2c
 8007562:	18ba      	adds	r2, r7, r2
 8007564:	8812      	ldrh	r2, [r2, #0]
 8007566:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800756e:	1dbb      	adds	r3, r7, #6
 8007570:	881c      	ldrh	r4, [r3, #0]
 8007572:	2308      	movs	r3, #8
 8007574:	18fb      	adds	r3, r7, r3
 8007576:	881a      	ldrh	r2, [r3, #0]
 8007578:	230a      	movs	r3, #10
 800757a:	18fb      	adds	r3, r7, r3
 800757c:	8819      	ldrh	r1, [r3, #0]
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	9301      	str	r3, [sp, #4]
 8007584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	0023      	movs	r3, r4
 800758a:	f000 f8c5 	bl	8007718 <I2C_RequestMemoryWrite>
 800758e:	1e03      	subs	r3, r0, #0
 8007590:	d005      	beq.n	800759e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2240      	movs	r2, #64	@ 0x40
 8007596:	2100      	movs	r1, #0
 8007598:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e0b5      	b.n	800770a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	2bff      	cmp	r3, #255	@ 0xff
 80075a6:	d911      	bls.n	80075cc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	22ff      	movs	r2, #255	@ 0xff
 80075ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	2380      	movs	r3, #128	@ 0x80
 80075b6:	045c      	lsls	r4, r3, #17
 80075b8:	230a      	movs	r3, #10
 80075ba:	18fb      	adds	r3, r7, r3
 80075bc:	8819      	ldrh	r1, [r3, #0]
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	2300      	movs	r3, #0
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	0023      	movs	r3, r4
 80075c6:	f000 fb07 	bl	8007bd8 <I2C_TransferConfig>
 80075ca:	e012      	b.n	80075f2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	2380      	movs	r3, #128	@ 0x80
 80075de:	049c      	lsls	r4, r3, #18
 80075e0:	230a      	movs	r3, #10
 80075e2:	18fb      	adds	r3, r7, r3
 80075e4:	8819      	ldrh	r1, [r3, #0]
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	2300      	movs	r3, #0
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	0023      	movs	r3, r4
 80075ee:	f000 faf3 	bl	8007bd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	0018      	movs	r0, r3
 80075fa:	f000 f96b 	bl	80078d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80075fe:	1e03      	subs	r3, r0, #0
 8007600:	d001      	beq.n	8007606 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e081      	b.n	800770a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760a:	781a      	ldrb	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800762e:	3b01      	subs	r3, #1
 8007630:	b29a      	uxth	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d03a      	beq.n	80076b6 <HAL_I2C_Mem_Write+0x1fa>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007644:	2b00      	cmp	r3, #0
 8007646:	d136      	bne.n	80076b6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	0013      	movs	r3, r2
 8007652:	2200      	movs	r2, #0
 8007654:	2180      	movs	r1, #128	@ 0x80
 8007656:	f000 f8e5 	bl	8007824 <I2C_WaitOnFlagUntilTimeout>
 800765a:	1e03      	subs	r3, r0, #0
 800765c:	d001      	beq.n	8007662 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e053      	b.n	800770a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007666:	b29b      	uxth	r3, r3
 8007668:	2bff      	cmp	r3, #255	@ 0xff
 800766a:	d911      	bls.n	8007690 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	22ff      	movs	r2, #255	@ 0xff
 8007670:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007676:	b2da      	uxtb	r2, r3
 8007678:	2380      	movs	r3, #128	@ 0x80
 800767a:	045c      	lsls	r4, r3, #17
 800767c:	230a      	movs	r3, #10
 800767e:	18fb      	adds	r3, r7, r3
 8007680:	8819      	ldrh	r1, [r3, #0]
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	2300      	movs	r3, #0
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	0023      	movs	r3, r4
 800768a:	f000 faa5 	bl	8007bd8 <I2C_TransferConfig>
 800768e:	e012      	b.n	80076b6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007694:	b29a      	uxth	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	2380      	movs	r3, #128	@ 0x80
 80076a2:	049c      	lsls	r4, r3, #18
 80076a4:	230a      	movs	r3, #10
 80076a6:	18fb      	adds	r3, r7, r3
 80076a8:	8819      	ldrh	r1, [r3, #0]
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	2300      	movs	r3, #0
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	0023      	movs	r3, r4
 80076b2:	f000 fa91 	bl	8007bd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d198      	bne.n	80075f2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	0018      	movs	r0, r3
 80076c8:	f000 f94a 	bl	8007960 <I2C_WaitOnSTOPFlagUntilTimeout>
 80076cc:	1e03      	subs	r3, r0, #0
 80076ce:	d001      	beq.n	80076d4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e01a      	b.n	800770a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2220      	movs	r2, #32
 80076da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	490b      	ldr	r1, [pc, #44]	@ (8007714 <HAL_I2C_Mem_Write+0x258>)
 80076e8:	400a      	ands	r2, r1
 80076ea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2241      	movs	r2, #65	@ 0x41
 80076f0:	2120      	movs	r1, #32
 80076f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2242      	movs	r2, #66	@ 0x42
 80076f8:	2100      	movs	r1, #0
 80076fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2240      	movs	r2, #64	@ 0x40
 8007700:	2100      	movs	r1, #0
 8007702:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	e000      	b.n	800770a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8007708:	2302      	movs	r3, #2
  }
}
 800770a:	0018      	movs	r0, r3
 800770c:	46bd      	mov	sp, r7
 800770e:	b007      	add	sp, #28
 8007710:	bd90      	pop	{r4, r7, pc}
 8007712:	46c0      	nop			@ (mov r8, r8)
 8007714:	fe00e800 	.word	0xfe00e800

08007718 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007718:	b5b0      	push	{r4, r5, r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af02      	add	r7, sp, #8
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	000c      	movs	r4, r1
 8007722:	0010      	movs	r0, r2
 8007724:	0019      	movs	r1, r3
 8007726:	250a      	movs	r5, #10
 8007728:	197b      	adds	r3, r7, r5
 800772a:	1c22      	adds	r2, r4, #0
 800772c:	801a      	strh	r2, [r3, #0]
 800772e:	2308      	movs	r3, #8
 8007730:	18fb      	adds	r3, r7, r3
 8007732:	1c02      	adds	r2, r0, #0
 8007734:	801a      	strh	r2, [r3, #0]
 8007736:	1dbb      	adds	r3, r7, #6
 8007738:	1c0a      	adds	r2, r1, #0
 800773a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800773c:	1dbb      	adds	r3, r7, #6
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	b2da      	uxtb	r2, r3
 8007742:	2380      	movs	r3, #128	@ 0x80
 8007744:	045c      	lsls	r4, r3, #17
 8007746:	197b      	adds	r3, r7, r5
 8007748:	8819      	ldrh	r1, [r3, #0]
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	4b23      	ldr	r3, [pc, #140]	@ (80077dc <I2C_RequestMemoryWrite+0xc4>)
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	0023      	movs	r3, r4
 8007752:	f000 fa41 	bl	8007bd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007758:	6a39      	ldr	r1, [r7, #32]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	0018      	movs	r0, r3
 800775e:	f000 f8b9 	bl	80078d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007762:	1e03      	subs	r3, r0, #0
 8007764:	d001      	beq.n	800776a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e033      	b.n	80077d2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800776a:	1dbb      	adds	r3, r7, #6
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d107      	bne.n	8007782 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007772:	2308      	movs	r3, #8
 8007774:	18fb      	adds	r3, r7, r3
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	b2da      	uxtb	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007780:	e019      	b.n	80077b6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007782:	2308      	movs	r3, #8
 8007784:	18fb      	adds	r3, r7, r3
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	0a1b      	lsrs	r3, r3, #8
 800778a:	b29b      	uxth	r3, r3
 800778c:	b2da      	uxtb	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007796:	6a39      	ldr	r1, [r7, #32]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	0018      	movs	r0, r3
 800779c:	f000 f89a 	bl	80078d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80077a0:	1e03      	subs	r3, r0, #0
 80077a2:	d001      	beq.n	80077a8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e014      	b.n	80077d2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077a8:	2308      	movs	r3, #8
 80077aa:	18fb      	adds	r3, r7, r3
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80077b6:	6a3a      	ldr	r2, [r7, #32]
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	0013      	movs	r3, r2
 80077c0:	2200      	movs	r2, #0
 80077c2:	2180      	movs	r1, #128	@ 0x80
 80077c4:	f000 f82e 	bl	8007824 <I2C_WaitOnFlagUntilTimeout>
 80077c8:	1e03      	subs	r3, r0, #0
 80077ca:	d001      	beq.n	80077d0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e000      	b.n	80077d2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	0018      	movs	r0, r3
 80077d4:	46bd      	mov	sp, r7
 80077d6:	b004      	add	sp, #16
 80077d8:	bdb0      	pop	{r4, r5, r7, pc}
 80077da:	46c0      	nop			@ (mov r8, r8)
 80077dc:	80002000 	.word	0x80002000

080077e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	2202      	movs	r2, #2
 80077f0:	4013      	ands	r3, r2
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d103      	bne.n	80077fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2200      	movs	r2, #0
 80077fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	2201      	movs	r2, #1
 8007806:	4013      	ands	r3, r2
 8007808:	2b01      	cmp	r3, #1
 800780a:	d007      	beq.n	800781c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	699a      	ldr	r2, [r3, #24]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2101      	movs	r1, #1
 8007818:	430a      	orrs	r2, r1
 800781a:	619a      	str	r2, [r3, #24]
  }
}
 800781c:	46c0      	nop			@ (mov r8, r8)
 800781e:	46bd      	mov	sp, r7
 8007820:	b002      	add	sp, #8
 8007822:	bd80      	pop	{r7, pc}

08007824 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	603b      	str	r3, [r7, #0]
 8007830:	1dfb      	adds	r3, r7, #7
 8007832:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007834:	e03a      	b.n	80078ac <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	0018      	movs	r0, r3
 800783e:	f000 f8d3 	bl	80079e8 <I2C_IsErrorOccurred>
 8007842:	1e03      	subs	r3, r0, #0
 8007844:	d001      	beq.n	800784a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e040      	b.n	80078cc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	d02d      	beq.n	80078ac <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007850:	f7fd ff6e 	bl	8005730 <HAL_GetTick>
 8007854:	0002      	movs	r2, r0
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	429a      	cmp	r2, r3
 800785e:	d302      	bcc.n	8007866 <I2C_WaitOnFlagUntilTimeout+0x42>
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d122      	bne.n	80078ac <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	4013      	ands	r3, r2
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	425a      	negs	r2, r3
 8007876:	4153      	adcs	r3, r2
 8007878:	b2db      	uxtb	r3, r3
 800787a:	001a      	movs	r2, r3
 800787c:	1dfb      	adds	r3, r7, #7
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	429a      	cmp	r2, r3
 8007882:	d113      	bne.n	80078ac <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007888:	2220      	movs	r2, #32
 800788a:	431a      	orrs	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2241      	movs	r2, #65	@ 0x41
 8007894:	2120      	movs	r1, #32
 8007896:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2242      	movs	r2, #66	@ 0x42
 800789c:	2100      	movs	r1, #0
 800789e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2240      	movs	r2, #64	@ 0x40
 80078a4:	2100      	movs	r1, #0
 80078a6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e00f      	b.n	80078cc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	4013      	ands	r3, r2
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	425a      	negs	r2, r3
 80078bc:	4153      	adcs	r3, r2
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	001a      	movs	r2, r3
 80078c2:	1dfb      	adds	r3, r7, #7
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d0b5      	beq.n	8007836 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	0018      	movs	r0, r3
 80078ce:	46bd      	mov	sp, r7
 80078d0:	b004      	add	sp, #16
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078e0:	e032      	b.n	8007948 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	68b9      	ldr	r1, [r7, #8]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	0018      	movs	r0, r3
 80078ea:	f000 f87d 	bl	80079e8 <I2C_IsErrorOccurred>
 80078ee:	1e03      	subs	r3, r0, #0
 80078f0:	d001      	beq.n	80078f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e030      	b.n	8007958 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	3301      	adds	r3, #1
 80078fa:	d025      	beq.n	8007948 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078fc:	f7fd ff18 	bl	8005730 <HAL_GetTick>
 8007900:	0002      	movs	r2, r0
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	429a      	cmp	r2, r3
 800790a:	d302      	bcc.n	8007912 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d11a      	bne.n	8007948 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	2202      	movs	r2, #2
 800791a:	4013      	ands	r3, r2
 800791c:	2b02      	cmp	r3, #2
 800791e:	d013      	beq.n	8007948 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007924:	2220      	movs	r2, #32
 8007926:	431a      	orrs	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2241      	movs	r2, #65	@ 0x41
 8007930:	2120      	movs	r1, #32
 8007932:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2242      	movs	r2, #66	@ 0x42
 8007938:	2100      	movs	r1, #0
 800793a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2240      	movs	r2, #64	@ 0x40
 8007940:	2100      	movs	r1, #0
 8007942:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e007      	b.n	8007958 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	2202      	movs	r2, #2
 8007950:	4013      	ands	r3, r2
 8007952:	2b02      	cmp	r3, #2
 8007954:	d1c5      	bne.n	80078e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	0018      	movs	r0, r3
 800795a:	46bd      	mov	sp, r7
 800795c:	b004      	add	sp, #16
 800795e:	bd80      	pop	{r7, pc}

08007960 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800796c:	e02f      	b.n	80079ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	68b9      	ldr	r1, [r7, #8]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	0018      	movs	r0, r3
 8007976:	f000 f837 	bl	80079e8 <I2C_IsErrorOccurred>
 800797a:	1e03      	subs	r3, r0, #0
 800797c:	d001      	beq.n	8007982 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e02d      	b.n	80079de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007982:	f7fd fed5 	bl	8005730 <HAL_GetTick>
 8007986:	0002      	movs	r2, r0
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	429a      	cmp	r2, r3
 8007990:	d302      	bcc.n	8007998 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d11a      	bne.n	80079ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	2220      	movs	r2, #32
 80079a0:	4013      	ands	r3, r2
 80079a2:	2b20      	cmp	r3, #32
 80079a4:	d013      	beq.n	80079ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079aa:	2220      	movs	r2, #32
 80079ac:	431a      	orrs	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2241      	movs	r2, #65	@ 0x41
 80079b6:	2120      	movs	r1, #32
 80079b8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2242      	movs	r2, #66	@ 0x42
 80079be:	2100      	movs	r1, #0
 80079c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2240      	movs	r2, #64	@ 0x40
 80079c6:	2100      	movs	r1, #0
 80079c8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e007      	b.n	80079de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	2220      	movs	r2, #32
 80079d6:	4013      	ands	r3, r2
 80079d8:	2b20      	cmp	r3, #32
 80079da:	d1c8      	bne.n	800796e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	0018      	movs	r0, r3
 80079e0:	46bd      	mov	sp, r7
 80079e2:	b004      	add	sp, #16
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08a      	sub	sp, #40	@ 0x28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079f4:	2327      	movs	r3, #39	@ 0x27
 80079f6:	18fb      	adds	r3, r7, r3
 80079f8:	2200      	movs	r2, #0
 80079fa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007a04:	2300      	movs	r3, #0
 8007a06:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	2210      	movs	r2, #16
 8007a10:	4013      	ands	r3, r2
 8007a12:	d100      	bne.n	8007a16 <I2C_IsErrorOccurred+0x2e>
 8007a14:	e079      	b.n	8007b0a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2210      	movs	r2, #16
 8007a1c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a1e:	e057      	b.n	8007ad0 <I2C_IsErrorOccurred+0xe8>
 8007a20:	2227      	movs	r2, #39	@ 0x27
 8007a22:	18bb      	adds	r3, r7, r2
 8007a24:	18ba      	adds	r2, r7, r2
 8007a26:	7812      	ldrb	r2, [r2, #0]
 8007a28:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	d04f      	beq.n	8007ad0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a30:	f7fd fe7e 	bl	8005730 <HAL_GetTick>
 8007a34:	0002      	movs	r2, r0
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d302      	bcc.n	8007a46 <I2C_IsErrorOccurred+0x5e>
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d144      	bne.n	8007ad0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	2380      	movs	r3, #128	@ 0x80
 8007a4e:	01db      	lsls	r3, r3, #7
 8007a50:	4013      	ands	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007a54:	2013      	movs	r0, #19
 8007a56:	183b      	adds	r3, r7, r0
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	2142      	movs	r1, #66	@ 0x42
 8007a5c:	5c52      	ldrb	r2, [r2, r1]
 8007a5e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699a      	ldr	r2, [r3, #24]
 8007a66:	2380      	movs	r3, #128	@ 0x80
 8007a68:	021b      	lsls	r3, r3, #8
 8007a6a:	401a      	ands	r2, r3
 8007a6c:	2380      	movs	r3, #128	@ 0x80
 8007a6e:	021b      	lsls	r3, r3, #8
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d126      	bne.n	8007ac2 <I2C_IsErrorOccurred+0xda>
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	2380      	movs	r3, #128	@ 0x80
 8007a78:	01db      	lsls	r3, r3, #7
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d021      	beq.n	8007ac2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8007a7e:	183b      	adds	r3, r7, r0
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	2b20      	cmp	r3, #32
 8007a84:	d01d      	beq.n	8007ac2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2180      	movs	r1, #128	@ 0x80
 8007a92:	01c9      	lsls	r1, r1, #7
 8007a94:	430a      	orrs	r2, r1
 8007a96:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007a98:	f7fd fe4a 	bl	8005730 <HAL_GetTick>
 8007a9c:	0003      	movs	r3, r0
 8007a9e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007aa0:	e00f      	b.n	8007ac2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007aa2:	f7fd fe45 	bl	8005730 <HAL_GetTick>
 8007aa6:	0002      	movs	r2, r0
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	2b19      	cmp	r3, #25
 8007aae:	d908      	bls.n	8007ac2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007ab8:	2327      	movs	r3, #39	@ 0x27
 8007aba:	18fb      	adds	r3, r7, r3
 8007abc:	2201      	movs	r2, #1
 8007abe:	701a      	strb	r2, [r3, #0]

              break;
 8007ac0:	e006      	b.n	8007ad0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	4013      	ands	r3, r2
 8007acc:	2b20      	cmp	r3, #32
 8007ace:	d1e8      	bne.n	8007aa2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	2220      	movs	r2, #32
 8007ad8:	4013      	ands	r3, r2
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	d004      	beq.n	8007ae8 <I2C_IsErrorOccurred+0x100>
 8007ade:	2327      	movs	r3, #39	@ 0x27
 8007ae0:	18fb      	adds	r3, r7, r3
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d09b      	beq.n	8007a20 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007ae8:	2327      	movs	r3, #39	@ 0x27
 8007aea:	18fb      	adds	r3, r7, r3
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d103      	bne.n	8007afa <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2220      	movs	r2, #32
 8007af8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	2204      	movs	r2, #4
 8007afe:	4313      	orrs	r3, r2
 8007b00:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007b02:	2327      	movs	r3, #39	@ 0x27
 8007b04:	18fb      	adds	r3, r7, r3
 8007b06:	2201      	movs	r2, #1
 8007b08:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007b12:	69ba      	ldr	r2, [r7, #24]
 8007b14:	2380      	movs	r3, #128	@ 0x80
 8007b16:	005b      	lsls	r3, r3, #1
 8007b18:	4013      	ands	r3, r2
 8007b1a:	d00c      	beq.n	8007b36 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	4313      	orrs	r3, r2
 8007b22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2280      	movs	r2, #128	@ 0x80
 8007b2a:	0052      	lsls	r2, r2, #1
 8007b2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b2e:	2327      	movs	r3, #39	@ 0x27
 8007b30:	18fb      	adds	r3, r7, r3
 8007b32:	2201      	movs	r2, #1
 8007b34:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	2380      	movs	r3, #128	@ 0x80
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	d00c      	beq.n	8007b5a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	2208      	movs	r2, #8
 8007b44:	4313      	orrs	r3, r2
 8007b46:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2280      	movs	r2, #128	@ 0x80
 8007b4e:	00d2      	lsls	r2, r2, #3
 8007b50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b52:	2327      	movs	r3, #39	@ 0x27
 8007b54:	18fb      	adds	r3, r7, r3
 8007b56:	2201      	movs	r2, #1
 8007b58:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	2380      	movs	r3, #128	@ 0x80
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4013      	ands	r3, r2
 8007b62:	d00c      	beq.n	8007b7e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	2202      	movs	r2, #2
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2280      	movs	r2, #128	@ 0x80
 8007b72:	0092      	lsls	r2, r2, #2
 8007b74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b76:	2327      	movs	r3, #39	@ 0x27
 8007b78:	18fb      	adds	r3, r7, r3
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007b7e:	2327      	movs	r3, #39	@ 0x27
 8007b80:	18fb      	adds	r3, r7, r3
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d01d      	beq.n	8007bc4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	f7ff fe28 	bl	80077e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	490e      	ldr	r1, [pc, #56]	@ (8007bd4 <I2C_IsErrorOccurred+0x1ec>)
 8007b9c:	400a      	ands	r2, r1
 8007b9e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2241      	movs	r2, #65	@ 0x41
 8007bb0:	2120      	movs	r1, #32
 8007bb2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2242      	movs	r2, #66	@ 0x42
 8007bb8:	2100      	movs	r1, #0
 8007bba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2240      	movs	r2, #64	@ 0x40
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007bc4:	2327      	movs	r3, #39	@ 0x27
 8007bc6:	18fb      	adds	r3, r7, r3
 8007bc8:	781b      	ldrb	r3, [r3, #0]
}
 8007bca:	0018      	movs	r0, r3
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	b00a      	add	sp, #40	@ 0x28
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	46c0      	nop			@ (mov r8, r8)
 8007bd4:	fe00e800 	.word	0xfe00e800

08007bd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007bd8:	b590      	push	{r4, r7, lr}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	0008      	movs	r0, r1
 8007be2:	0011      	movs	r1, r2
 8007be4:	607b      	str	r3, [r7, #4]
 8007be6:	240a      	movs	r4, #10
 8007be8:	193b      	adds	r3, r7, r4
 8007bea:	1c02      	adds	r2, r0, #0
 8007bec:	801a      	strh	r2, [r3, #0]
 8007bee:	2009      	movs	r0, #9
 8007bf0:	183b      	adds	r3, r7, r0
 8007bf2:	1c0a      	adds	r2, r1, #0
 8007bf4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007bf6:	193b      	adds	r3, r7, r4
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	059b      	lsls	r3, r3, #22
 8007bfc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007bfe:	183b      	adds	r3, r7, r0
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	0419      	lsls	r1, r3, #16
 8007c04:	23ff      	movs	r3, #255	@ 0xff
 8007c06:	041b      	lsls	r3, r3, #16
 8007c08:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c0a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c12:	4313      	orrs	r3, r2
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c22:	0d51      	lsrs	r1, r2, #21
 8007c24:	2280      	movs	r2, #128	@ 0x80
 8007c26:	00d2      	lsls	r2, r2, #3
 8007c28:	400a      	ands	r2, r1
 8007c2a:	4907      	ldr	r1, [pc, #28]	@ (8007c48 <I2C_TransferConfig+0x70>)
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	43d2      	mvns	r2, r2
 8007c30:	401a      	ands	r2, r3
 8007c32:	0011      	movs	r1, r2
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007c3e:	46c0      	nop			@ (mov r8, r8)
 8007c40:	46bd      	mov	sp, r7
 8007c42:	b007      	add	sp, #28
 8007c44:	bd90      	pop	{r4, r7, pc}
 8007c46:	46c0      	nop			@ (mov r8, r8)
 8007c48:	03ff63ff 	.word	0x03ff63ff

08007c4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2241      	movs	r2, #65	@ 0x41
 8007c5a:	5c9b      	ldrb	r3, [r3, r2]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b20      	cmp	r3, #32
 8007c60:	d138      	bne.n	8007cd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2240      	movs	r2, #64	@ 0x40
 8007c66:	5c9b      	ldrb	r3, [r3, r2]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e032      	b.n	8007cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2240      	movs	r2, #64	@ 0x40
 8007c74:	2101      	movs	r1, #1
 8007c76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2241      	movs	r2, #65	@ 0x41
 8007c7c:	2124      	movs	r1, #36	@ 0x24
 8007c7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	438a      	bics	r2, r1
 8007c8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4911      	ldr	r1, [pc, #68]	@ (8007ce0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007c9c:	400a      	ands	r2, r1
 8007c9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6819      	ldr	r1, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2101      	movs	r1, #1
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2241      	movs	r2, #65	@ 0x41
 8007cc4:	2120      	movs	r1, #32
 8007cc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2240      	movs	r2, #64	@ 0x40
 8007ccc:	2100      	movs	r1, #0
 8007cce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e000      	b.n	8007cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007cd4:	2302      	movs	r3, #2
  }
}
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	b002      	add	sp, #8
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	46c0      	nop			@ (mov r8, r8)
 8007ce0:	ffffefff 	.word	0xffffefff

08007ce4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2241      	movs	r2, #65	@ 0x41
 8007cf2:	5c9b      	ldrb	r3, [r3, r2]
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b20      	cmp	r3, #32
 8007cf8:	d139      	bne.n	8007d6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2240      	movs	r2, #64	@ 0x40
 8007cfe:	5c9b      	ldrb	r3, [r3, r2]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d101      	bne.n	8007d08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d04:	2302      	movs	r3, #2
 8007d06:	e033      	b.n	8007d70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2240      	movs	r2, #64	@ 0x40
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2241      	movs	r2, #65	@ 0x41
 8007d14:	2124      	movs	r1, #36	@ 0x24
 8007d16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2101      	movs	r1, #1
 8007d24:	438a      	bics	r2, r1
 8007d26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4a11      	ldr	r2, [pc, #68]	@ (8007d78 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007d34:	4013      	ands	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	021b      	lsls	r3, r3, #8
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2101      	movs	r1, #1
 8007d56:	430a      	orrs	r2, r1
 8007d58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2241      	movs	r2, #65	@ 0x41
 8007d5e:	2120      	movs	r1, #32
 8007d60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2240      	movs	r2, #64	@ 0x40
 8007d66:	2100      	movs	r1, #0
 8007d68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e000      	b.n	8007d70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d6e:	2302      	movs	r3, #2
  }
}
 8007d70:	0018      	movs	r0, r3
 8007d72:	46bd      	mov	sp, r7
 8007d74:	b004      	add	sp, #16
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	fffff0ff 	.word	0xfffff0ff

08007d7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007d84:	4b19      	ldr	r3, [pc, #100]	@ (8007dec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a19      	ldr	r2, [pc, #100]	@ (8007df0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	0019      	movs	r1, r3
 8007d8e:	4b17      	ldr	r3, [pc, #92]	@ (8007dec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	2380      	movs	r3, #128	@ 0x80
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d11f      	bne.n	8007de0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007da0:	4b14      	ldr	r3, [pc, #80]	@ (8007df4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	0013      	movs	r3, r2
 8007da6:	005b      	lsls	r3, r3, #1
 8007da8:	189b      	adds	r3, r3, r2
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	4912      	ldr	r1, [pc, #72]	@ (8007df8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007dae:	0018      	movs	r0, r3
 8007db0:	f7f8 f9c2 	bl	8000138 <__udivsi3>
 8007db4:	0003      	movs	r3, r0
 8007db6:	3301      	adds	r3, #1
 8007db8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007dba:	e008      	b.n	8007dce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	e001      	b.n	8007dce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e009      	b.n	8007de2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007dce:	4b07      	ldr	r3, [pc, #28]	@ (8007dec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007dd0:	695a      	ldr	r2, [r3, #20]
 8007dd2:	2380      	movs	r3, #128	@ 0x80
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	401a      	ands	r2, r3
 8007dd8:	2380      	movs	r3, #128	@ 0x80
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d0ed      	beq.n	8007dbc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	0018      	movs	r0, r3
 8007de4:	46bd      	mov	sp, r7
 8007de6:	b004      	add	sp, #16
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	46c0      	nop			@ (mov r8, r8)
 8007dec:	40007000 	.word	0x40007000
 8007df0:	fffff9ff 	.word	0xfffff9ff
 8007df4:	20000010 	.word	0x20000010
 8007df8:	000f4240 	.word	0x000f4240

08007dfc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007e00:	4b03      	ldr	r3, [pc, #12]	@ (8007e10 <LL_RCC_GetAPB1Prescaler+0x14>)
 8007e02:	689a      	ldr	r2, [r3, #8]
 8007e04:	23e0      	movs	r3, #224	@ 0xe0
 8007e06:	01db      	lsls	r3, r3, #7
 8007e08:	4013      	ands	r3, r2
}
 8007e0a:	0018      	movs	r0, r3
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	40021000 	.word	0x40021000

08007e14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b088      	sub	sp, #32
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e2f3      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	d100      	bne.n	8007e32 <HAL_RCC_OscConfig+0x1e>
 8007e30:	e07c      	b.n	8007f2c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e32:	4bc3      	ldr	r3, [pc, #780]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	2238      	movs	r2, #56	@ 0x38
 8007e38:	4013      	ands	r3, r2
 8007e3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e3c:	4bc0      	ldr	r3, [pc, #768]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	2203      	movs	r2, #3
 8007e42:	4013      	ands	r3, r2
 8007e44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d102      	bne.n	8007e52 <HAL_RCC_OscConfig+0x3e>
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d002      	beq.n	8007e58 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	d10b      	bne.n	8007e70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e58:	4bb9      	ldr	r3, [pc, #740]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	2380      	movs	r3, #128	@ 0x80
 8007e5e:	029b      	lsls	r3, r3, #10
 8007e60:	4013      	ands	r3, r2
 8007e62:	d062      	beq.n	8007f2a <HAL_RCC_OscConfig+0x116>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d15e      	bne.n	8007f2a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e2ce      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	2380      	movs	r3, #128	@ 0x80
 8007e76:	025b      	lsls	r3, r3, #9
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d107      	bne.n	8007e8c <HAL_RCC_OscConfig+0x78>
 8007e7c:	4bb0      	ldr	r3, [pc, #704]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	4baf      	ldr	r3, [pc, #700]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007e82:	2180      	movs	r1, #128	@ 0x80
 8007e84:	0249      	lsls	r1, r1, #9
 8007e86:	430a      	orrs	r2, r1
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	e020      	b.n	8007ece <HAL_RCC_OscConfig+0xba>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	23a0      	movs	r3, #160	@ 0xa0
 8007e92:	02db      	lsls	r3, r3, #11
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d10e      	bne.n	8007eb6 <HAL_RCC_OscConfig+0xa2>
 8007e98:	4ba9      	ldr	r3, [pc, #676]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	4ba8      	ldr	r3, [pc, #672]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007e9e:	2180      	movs	r1, #128	@ 0x80
 8007ea0:	02c9      	lsls	r1, r1, #11
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	4ba6      	ldr	r3, [pc, #664]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	4ba5      	ldr	r3, [pc, #660]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007eac:	2180      	movs	r1, #128	@ 0x80
 8007eae:	0249      	lsls	r1, r1, #9
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	e00b      	b.n	8007ece <HAL_RCC_OscConfig+0xba>
 8007eb6:	4ba2      	ldr	r3, [pc, #648]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	4ba1      	ldr	r3, [pc, #644]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007ebc:	49a1      	ldr	r1, [pc, #644]	@ (8008144 <HAL_RCC_OscConfig+0x330>)
 8007ebe:	400a      	ands	r2, r1
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	4b9f      	ldr	r3, [pc, #636]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	4b9e      	ldr	r3, [pc, #632]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007ec8:	499f      	ldr	r1, [pc, #636]	@ (8008148 <HAL_RCC_OscConfig+0x334>)
 8007eca:	400a      	ands	r2, r1
 8007ecc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d014      	beq.n	8007f00 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed6:	f7fd fc2b 	bl	8005730 <HAL_GetTick>
 8007eda:	0003      	movs	r3, r0
 8007edc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ede:	e008      	b.n	8007ef2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ee0:	f7fd fc26 	bl	8005730 <HAL_GetTick>
 8007ee4:	0002      	movs	r2, r0
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b64      	cmp	r3, #100	@ 0x64
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e28d      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ef2:	4b93      	ldr	r3, [pc, #588]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	2380      	movs	r3, #128	@ 0x80
 8007ef8:	029b      	lsls	r3, r3, #10
 8007efa:	4013      	ands	r3, r2
 8007efc:	d0f0      	beq.n	8007ee0 <HAL_RCC_OscConfig+0xcc>
 8007efe:	e015      	b.n	8007f2c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f00:	f7fd fc16 	bl	8005730 <HAL_GetTick>
 8007f04:	0003      	movs	r3, r0
 8007f06:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f08:	e008      	b.n	8007f1c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f0a:	f7fd fc11 	bl	8005730 <HAL_GetTick>
 8007f0e:	0002      	movs	r2, r0
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	2b64      	cmp	r3, #100	@ 0x64
 8007f16:	d901      	bls.n	8007f1c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e278      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f1c:	4b88      	ldr	r3, [pc, #544]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	2380      	movs	r3, #128	@ 0x80
 8007f22:	029b      	lsls	r3, r3, #10
 8007f24:	4013      	ands	r3, r2
 8007f26:	d1f0      	bne.n	8007f0a <HAL_RCC_OscConfig+0xf6>
 8007f28:	e000      	b.n	8007f2c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f2a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2202      	movs	r2, #2
 8007f32:	4013      	ands	r3, r2
 8007f34:	d100      	bne.n	8007f38 <HAL_RCC_OscConfig+0x124>
 8007f36:	e099      	b.n	800806c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f38:	4b81      	ldr	r3, [pc, #516]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	2238      	movs	r2, #56	@ 0x38
 8007f3e:	4013      	ands	r3, r2
 8007f40:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f42:	4b7f      	ldr	r3, [pc, #508]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	2203      	movs	r2, #3
 8007f48:	4013      	ands	r3, r2
 8007f4a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	2b10      	cmp	r3, #16
 8007f50:	d102      	bne.n	8007f58 <HAL_RCC_OscConfig+0x144>
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d002      	beq.n	8007f5e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d135      	bne.n	8007fca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f5e:	4b78      	ldr	r3, [pc, #480]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	2380      	movs	r3, #128	@ 0x80
 8007f64:	00db      	lsls	r3, r3, #3
 8007f66:	4013      	ands	r3, r2
 8007f68:	d005      	beq.n	8007f76 <HAL_RCC_OscConfig+0x162>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e24b      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f76:	4b72      	ldr	r3, [pc, #456]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	4a74      	ldr	r2, [pc, #464]	@ (800814c <HAL_RCC_OscConfig+0x338>)
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	0019      	movs	r1, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	021a      	lsls	r2, r3, #8
 8007f86:	4b6e      	ldr	r3, [pc, #440]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007f88:	430a      	orrs	r2, r1
 8007f8a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d112      	bne.n	8007fb8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007f92:	4b6b      	ldr	r3, [pc, #428]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a6e      	ldr	r2, [pc, #440]	@ (8008150 <HAL_RCC_OscConfig+0x33c>)
 8007f98:	4013      	ands	r3, r2
 8007f9a:	0019      	movs	r1, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	4b67      	ldr	r3, [pc, #412]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007fa6:	4b66      	ldr	r3, [pc, #408]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	0adb      	lsrs	r3, r3, #11
 8007fac:	2207      	movs	r2, #7
 8007fae:	4013      	ands	r3, r2
 8007fb0:	4a68      	ldr	r2, [pc, #416]	@ (8008154 <HAL_RCC_OscConfig+0x340>)
 8007fb2:	40da      	lsrs	r2, r3
 8007fb4:	4b68      	ldr	r3, [pc, #416]	@ (8008158 <HAL_RCC_OscConfig+0x344>)
 8007fb6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007fb8:	4b68      	ldr	r3, [pc, #416]	@ (800815c <HAL_RCC_OscConfig+0x348>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	f7fd fb5b 	bl	8005678 <HAL_InitTick>
 8007fc2:	1e03      	subs	r3, r0, #0
 8007fc4:	d051      	beq.n	800806a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e221      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d030      	beq.n	8008034 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007fd2:	4b5b      	ldr	r3, [pc, #364]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a5e      	ldr	r2, [pc, #376]	@ (8008150 <HAL_RCC_OscConfig+0x33c>)
 8007fd8:	4013      	ands	r3, r2
 8007fda:	0019      	movs	r1, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691a      	ldr	r2, [r3, #16]
 8007fe0:	4b57      	ldr	r3, [pc, #348]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007fe6:	4b56      	ldr	r3, [pc, #344]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	4b55      	ldr	r3, [pc, #340]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8007fec:	2180      	movs	r1, #128	@ 0x80
 8007fee:	0049      	lsls	r1, r1, #1
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff4:	f7fd fb9c 	bl	8005730 <HAL_GetTick>
 8007ff8:	0003      	movs	r3, r0
 8007ffa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ffc:	e008      	b.n	8008010 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ffe:	f7fd fb97 	bl	8005730 <HAL_GetTick>
 8008002:	0002      	movs	r2, r0
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	2b02      	cmp	r3, #2
 800800a:	d901      	bls.n	8008010 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800800c:	2303      	movs	r3, #3
 800800e:	e1fe      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008010:	4b4b      	ldr	r3, [pc, #300]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	2380      	movs	r3, #128	@ 0x80
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	4013      	ands	r3, r2
 800801a:	d0f0      	beq.n	8007ffe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800801c:	4b48      	ldr	r3, [pc, #288]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	4a4a      	ldr	r2, [pc, #296]	@ (800814c <HAL_RCC_OscConfig+0x338>)
 8008022:	4013      	ands	r3, r2
 8008024:	0019      	movs	r1, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	021a      	lsls	r2, r3, #8
 800802c:	4b44      	ldr	r3, [pc, #272]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 800802e:	430a      	orrs	r2, r1
 8008030:	605a      	str	r2, [r3, #4]
 8008032:	e01b      	b.n	800806c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008034:	4b42      	ldr	r3, [pc, #264]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	4b41      	ldr	r3, [pc, #260]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 800803a:	4949      	ldr	r1, [pc, #292]	@ (8008160 <HAL_RCC_OscConfig+0x34c>)
 800803c:	400a      	ands	r2, r1
 800803e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008040:	f7fd fb76 	bl	8005730 <HAL_GetTick>
 8008044:	0003      	movs	r3, r0
 8008046:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008048:	e008      	b.n	800805c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800804a:	f7fd fb71 	bl	8005730 <HAL_GetTick>
 800804e:	0002      	movs	r2, r0
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	2b02      	cmp	r3, #2
 8008056:	d901      	bls.n	800805c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e1d8      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800805c:	4b38      	ldr	r3, [pc, #224]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	2380      	movs	r3, #128	@ 0x80
 8008062:	00db      	lsls	r3, r3, #3
 8008064:	4013      	ands	r3, r2
 8008066:	d1f0      	bne.n	800804a <HAL_RCC_OscConfig+0x236>
 8008068:	e000      	b.n	800806c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800806a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2208      	movs	r2, #8
 8008072:	4013      	ands	r3, r2
 8008074:	d047      	beq.n	8008106 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008076:	4b32      	ldr	r3, [pc, #200]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	2238      	movs	r2, #56	@ 0x38
 800807c:	4013      	ands	r3, r2
 800807e:	2b18      	cmp	r3, #24
 8008080:	d10a      	bne.n	8008098 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008082:	4b2f      	ldr	r3, [pc, #188]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8008084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008086:	2202      	movs	r2, #2
 8008088:	4013      	ands	r3, r2
 800808a:	d03c      	beq.n	8008106 <HAL_RCC_OscConfig+0x2f2>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d138      	bne.n	8008106 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e1ba      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d019      	beq.n	80080d4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80080a0:	4b27      	ldr	r3, [pc, #156]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 80080a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80080a4:	4b26      	ldr	r3, [pc, #152]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 80080a6:	2101      	movs	r1, #1
 80080a8:	430a      	orrs	r2, r1
 80080aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ac:	f7fd fb40 	bl	8005730 <HAL_GetTick>
 80080b0:	0003      	movs	r3, r0
 80080b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080b4:	e008      	b.n	80080c8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080b6:	f7fd fb3b 	bl	8005730 <HAL_GetTick>
 80080ba:	0002      	movs	r2, r0
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d901      	bls.n	80080c8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e1a2      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080c8:	4b1d      	ldr	r3, [pc, #116]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 80080ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080cc:	2202      	movs	r2, #2
 80080ce:	4013      	ands	r3, r2
 80080d0:	d0f1      	beq.n	80080b6 <HAL_RCC_OscConfig+0x2a2>
 80080d2:	e018      	b.n	8008106 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80080d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 80080d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80080d8:	4b19      	ldr	r3, [pc, #100]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 80080da:	2101      	movs	r1, #1
 80080dc:	438a      	bics	r2, r1
 80080de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e0:	f7fd fb26 	bl	8005730 <HAL_GetTick>
 80080e4:	0003      	movs	r3, r0
 80080e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080e8:	e008      	b.n	80080fc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080ea:	f7fd fb21 	bl	8005730 <HAL_GetTick>
 80080ee:	0002      	movs	r2, r0
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d901      	bls.n	80080fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e188      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080fc:	4b10      	ldr	r3, [pc, #64]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 80080fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008100:	2202      	movs	r2, #2
 8008102:	4013      	ands	r3, r2
 8008104:	d1f1      	bne.n	80080ea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2204      	movs	r2, #4
 800810c:	4013      	ands	r3, r2
 800810e:	d100      	bne.n	8008112 <HAL_RCC_OscConfig+0x2fe>
 8008110:	e0c6      	b.n	80082a0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008112:	231f      	movs	r3, #31
 8008114:	18fb      	adds	r3, r7, r3
 8008116:	2200      	movs	r2, #0
 8008118:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800811a:	4b09      	ldr	r3, [pc, #36]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	2238      	movs	r2, #56	@ 0x38
 8008120:	4013      	ands	r3, r2
 8008122:	2b20      	cmp	r3, #32
 8008124:	d11e      	bne.n	8008164 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008126:	4b06      	ldr	r3, [pc, #24]	@ (8008140 <HAL_RCC_OscConfig+0x32c>)
 8008128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800812a:	2202      	movs	r2, #2
 800812c:	4013      	ands	r3, r2
 800812e:	d100      	bne.n	8008132 <HAL_RCC_OscConfig+0x31e>
 8008130:	e0b6      	b.n	80082a0 <HAL_RCC_OscConfig+0x48c>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d000      	beq.n	800813c <HAL_RCC_OscConfig+0x328>
 800813a:	e0b1      	b.n	80082a0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e166      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
 8008140:	40021000 	.word	0x40021000
 8008144:	fffeffff 	.word	0xfffeffff
 8008148:	fffbffff 	.word	0xfffbffff
 800814c:	ffff80ff 	.word	0xffff80ff
 8008150:	ffffc7ff 	.word	0xffffc7ff
 8008154:	00f42400 	.word	0x00f42400
 8008158:	20000010 	.word	0x20000010
 800815c:	20000014 	.word	0x20000014
 8008160:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008164:	4bac      	ldr	r3, [pc, #688]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 8008166:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008168:	2380      	movs	r3, #128	@ 0x80
 800816a:	055b      	lsls	r3, r3, #21
 800816c:	4013      	ands	r3, r2
 800816e:	d101      	bne.n	8008174 <HAL_RCC_OscConfig+0x360>
 8008170:	2301      	movs	r3, #1
 8008172:	e000      	b.n	8008176 <HAL_RCC_OscConfig+0x362>
 8008174:	2300      	movs	r3, #0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d011      	beq.n	800819e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800817a:	4ba7      	ldr	r3, [pc, #668]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 800817c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800817e:	4ba6      	ldr	r3, [pc, #664]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 8008180:	2180      	movs	r1, #128	@ 0x80
 8008182:	0549      	lsls	r1, r1, #21
 8008184:	430a      	orrs	r2, r1
 8008186:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008188:	4ba3      	ldr	r3, [pc, #652]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 800818a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800818c:	2380      	movs	r3, #128	@ 0x80
 800818e:	055b      	lsls	r3, r3, #21
 8008190:	4013      	ands	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008196:	231f      	movs	r3, #31
 8008198:	18fb      	adds	r3, r7, r3
 800819a:	2201      	movs	r2, #1
 800819c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800819e:	4b9f      	ldr	r3, [pc, #636]	@ (800841c <HAL_RCC_OscConfig+0x608>)
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	2380      	movs	r3, #128	@ 0x80
 80081a4:	005b      	lsls	r3, r3, #1
 80081a6:	4013      	ands	r3, r2
 80081a8:	d11a      	bne.n	80081e0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081aa:	4b9c      	ldr	r3, [pc, #624]	@ (800841c <HAL_RCC_OscConfig+0x608>)
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	4b9b      	ldr	r3, [pc, #620]	@ (800841c <HAL_RCC_OscConfig+0x608>)
 80081b0:	2180      	movs	r1, #128	@ 0x80
 80081b2:	0049      	lsls	r1, r1, #1
 80081b4:	430a      	orrs	r2, r1
 80081b6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80081b8:	f7fd faba 	bl	8005730 <HAL_GetTick>
 80081bc:	0003      	movs	r3, r0
 80081be:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081c0:	e008      	b.n	80081d4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081c2:	f7fd fab5 	bl	8005730 <HAL_GetTick>
 80081c6:	0002      	movs	r2, r0
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d901      	bls.n	80081d4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e11c      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081d4:	4b91      	ldr	r3, [pc, #580]	@ (800841c <HAL_RCC_OscConfig+0x608>)
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	2380      	movs	r3, #128	@ 0x80
 80081da:	005b      	lsls	r3, r3, #1
 80081dc:	4013      	ands	r3, r2
 80081de:	d0f0      	beq.n	80081c2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d106      	bne.n	80081f6 <HAL_RCC_OscConfig+0x3e2>
 80081e8:	4b8b      	ldr	r3, [pc, #556]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 80081ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80081ec:	4b8a      	ldr	r3, [pc, #552]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 80081ee:	2101      	movs	r1, #1
 80081f0:	430a      	orrs	r2, r1
 80081f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80081f4:	e01c      	b.n	8008230 <HAL_RCC_OscConfig+0x41c>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	2b05      	cmp	r3, #5
 80081fc:	d10c      	bne.n	8008218 <HAL_RCC_OscConfig+0x404>
 80081fe:	4b86      	ldr	r3, [pc, #536]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 8008200:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008202:	4b85      	ldr	r3, [pc, #532]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 8008204:	2104      	movs	r1, #4
 8008206:	430a      	orrs	r2, r1
 8008208:	65da      	str	r2, [r3, #92]	@ 0x5c
 800820a:	4b83      	ldr	r3, [pc, #524]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 800820c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800820e:	4b82      	ldr	r3, [pc, #520]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 8008210:	2101      	movs	r1, #1
 8008212:	430a      	orrs	r2, r1
 8008214:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008216:	e00b      	b.n	8008230 <HAL_RCC_OscConfig+0x41c>
 8008218:	4b7f      	ldr	r3, [pc, #508]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 800821a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800821c:	4b7e      	ldr	r3, [pc, #504]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 800821e:	2101      	movs	r1, #1
 8008220:	438a      	bics	r2, r1
 8008222:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008224:	4b7c      	ldr	r3, [pc, #496]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 8008226:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008228:	4b7b      	ldr	r3, [pc, #492]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 800822a:	2104      	movs	r1, #4
 800822c:	438a      	bics	r2, r1
 800822e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d014      	beq.n	8008262 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008238:	f7fd fa7a 	bl	8005730 <HAL_GetTick>
 800823c:	0003      	movs	r3, r0
 800823e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008240:	e009      	b.n	8008256 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008242:	f7fd fa75 	bl	8005730 <HAL_GetTick>
 8008246:	0002      	movs	r2, r0
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	4a74      	ldr	r2, [pc, #464]	@ (8008420 <HAL_RCC_OscConfig+0x60c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d901      	bls.n	8008256 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e0db      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008256:	4b70      	ldr	r3, [pc, #448]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 8008258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800825a:	2202      	movs	r2, #2
 800825c:	4013      	ands	r3, r2
 800825e:	d0f0      	beq.n	8008242 <HAL_RCC_OscConfig+0x42e>
 8008260:	e013      	b.n	800828a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008262:	f7fd fa65 	bl	8005730 <HAL_GetTick>
 8008266:	0003      	movs	r3, r0
 8008268:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800826a:	e009      	b.n	8008280 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800826c:	f7fd fa60 	bl	8005730 <HAL_GetTick>
 8008270:	0002      	movs	r2, r0
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	4a6a      	ldr	r2, [pc, #424]	@ (8008420 <HAL_RCC_OscConfig+0x60c>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d901      	bls.n	8008280 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e0c6      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008280:	4b65      	ldr	r3, [pc, #404]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 8008282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008284:	2202      	movs	r2, #2
 8008286:	4013      	ands	r3, r2
 8008288:	d1f0      	bne.n	800826c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800828a:	231f      	movs	r3, #31
 800828c:	18fb      	adds	r3, r7, r3
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d105      	bne.n	80082a0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008294:	4b60      	ldr	r3, [pc, #384]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 8008296:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008298:	4b5f      	ldr	r3, [pc, #380]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 800829a:	4962      	ldr	r1, [pc, #392]	@ (8008424 <HAL_RCC_OscConfig+0x610>)
 800829c:	400a      	ands	r2, r1
 800829e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d100      	bne.n	80082aa <HAL_RCC_OscConfig+0x496>
 80082a8:	e0b0      	b.n	800840c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082aa:	4b5b      	ldr	r3, [pc, #364]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	2238      	movs	r2, #56	@ 0x38
 80082b0:	4013      	ands	r3, r2
 80082b2:	2b10      	cmp	r3, #16
 80082b4:	d100      	bne.n	80082b8 <HAL_RCC_OscConfig+0x4a4>
 80082b6:	e078      	b.n	80083aa <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	69db      	ldr	r3, [r3, #28]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d153      	bne.n	8008368 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082c0:	4b55      	ldr	r3, [pc, #340]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	4b54      	ldr	r3, [pc, #336]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 80082c6:	4958      	ldr	r1, [pc, #352]	@ (8008428 <HAL_RCC_OscConfig+0x614>)
 80082c8:	400a      	ands	r2, r1
 80082ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082cc:	f7fd fa30 	bl	8005730 <HAL_GetTick>
 80082d0:	0003      	movs	r3, r0
 80082d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082d4:	e008      	b.n	80082e8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082d6:	f7fd fa2b 	bl	8005730 <HAL_GetTick>
 80082da:	0002      	movs	r2, r0
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d901      	bls.n	80082e8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e092      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082e8:	4b4b      	ldr	r3, [pc, #300]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	2380      	movs	r3, #128	@ 0x80
 80082ee:	049b      	lsls	r3, r3, #18
 80082f0:	4013      	ands	r3, r2
 80082f2:	d1f0      	bne.n	80082d6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082f4:	4b48      	ldr	r3, [pc, #288]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	4a4c      	ldr	r2, [pc, #304]	@ (800842c <HAL_RCC_OscConfig+0x618>)
 80082fa:	4013      	ands	r3, r2
 80082fc:	0019      	movs	r1, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a1a      	ldr	r2, [r3, #32]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008306:	431a      	orrs	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800830c:	021b      	lsls	r3, r3, #8
 800830e:	431a      	orrs	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008314:	431a      	orrs	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800831a:	431a      	orrs	r2, r3
 800831c:	4b3e      	ldr	r3, [pc, #248]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 800831e:	430a      	orrs	r2, r1
 8008320:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008322:	4b3d      	ldr	r3, [pc, #244]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	4b3c      	ldr	r3, [pc, #240]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 8008328:	2180      	movs	r1, #128	@ 0x80
 800832a:	0449      	lsls	r1, r1, #17
 800832c:	430a      	orrs	r2, r1
 800832e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008330:	4b39      	ldr	r3, [pc, #228]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 8008332:	68da      	ldr	r2, [r3, #12]
 8008334:	4b38      	ldr	r3, [pc, #224]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 8008336:	2180      	movs	r1, #128	@ 0x80
 8008338:	0549      	lsls	r1, r1, #21
 800833a:	430a      	orrs	r2, r1
 800833c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800833e:	f7fd f9f7 	bl	8005730 <HAL_GetTick>
 8008342:	0003      	movs	r3, r0
 8008344:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008346:	e008      	b.n	800835a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008348:	f7fd f9f2 	bl	8005730 <HAL_GetTick>
 800834c:	0002      	movs	r2, r0
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	2b02      	cmp	r3, #2
 8008354:	d901      	bls.n	800835a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e059      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800835a:	4b2f      	ldr	r3, [pc, #188]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	2380      	movs	r3, #128	@ 0x80
 8008360:	049b      	lsls	r3, r3, #18
 8008362:	4013      	ands	r3, r2
 8008364:	d0f0      	beq.n	8008348 <HAL_RCC_OscConfig+0x534>
 8008366:	e051      	b.n	800840c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008368:	4b2b      	ldr	r3, [pc, #172]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	4b2a      	ldr	r3, [pc, #168]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 800836e:	492e      	ldr	r1, [pc, #184]	@ (8008428 <HAL_RCC_OscConfig+0x614>)
 8008370:	400a      	ands	r2, r1
 8008372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008374:	f7fd f9dc 	bl	8005730 <HAL_GetTick>
 8008378:	0003      	movs	r3, r0
 800837a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800837c:	e008      	b.n	8008390 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800837e:	f7fd f9d7 	bl	8005730 <HAL_GetTick>
 8008382:	0002      	movs	r2, r0
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	2b02      	cmp	r3, #2
 800838a:	d901      	bls.n	8008390 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e03e      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008390:	4b21      	ldr	r3, [pc, #132]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	2380      	movs	r3, #128	@ 0x80
 8008396:	049b      	lsls	r3, r3, #18
 8008398:	4013      	ands	r3, r2
 800839a:	d1f0      	bne.n	800837e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800839c:	4b1e      	ldr	r3, [pc, #120]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 80083a2:	4923      	ldr	r1, [pc, #140]	@ (8008430 <HAL_RCC_OscConfig+0x61c>)
 80083a4:	400a      	ands	r2, r1
 80083a6:	60da      	str	r2, [r3, #12]
 80083a8:	e030      	b.n	800840c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d101      	bne.n	80083b6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e02b      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80083b6:	4b18      	ldr	r3, [pc, #96]	@ (8008418 <HAL_RCC_OscConfig+0x604>)
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	2203      	movs	r2, #3
 80083c0:	401a      	ands	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d11e      	bne.n	8008408 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2270      	movs	r2, #112	@ 0x70
 80083ce:	401a      	ands	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d117      	bne.n	8008408 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	23fe      	movs	r3, #254	@ 0xfe
 80083dc:	01db      	lsls	r3, r3, #7
 80083de:	401a      	ands	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d10e      	bne.n	8008408 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	23f8      	movs	r3, #248	@ 0xf8
 80083ee:	039b      	lsls	r3, r3, #14
 80083f0:	401a      	ands	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d106      	bne.n	8008408 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	0f5b      	lsrs	r3, r3, #29
 80083fe:	075a      	lsls	r2, r3, #29
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008404:	429a      	cmp	r2, r3
 8008406:	d001      	beq.n	800840c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e000      	b.n	800840e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	0018      	movs	r0, r3
 8008410:	46bd      	mov	sp, r7
 8008412:	b008      	add	sp, #32
 8008414:	bd80      	pop	{r7, pc}
 8008416:	46c0      	nop			@ (mov r8, r8)
 8008418:	40021000 	.word	0x40021000
 800841c:	40007000 	.word	0x40007000
 8008420:	00001388 	.word	0x00001388
 8008424:	efffffff 	.word	0xefffffff
 8008428:	feffffff 	.word	0xfeffffff
 800842c:	1fc1808c 	.word	0x1fc1808c
 8008430:	effefffc 	.word	0xeffefffc

08008434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e0e9      	b.n	800861c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008448:	4b76      	ldr	r3, [pc, #472]	@ (8008624 <HAL_RCC_ClockConfig+0x1f0>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2207      	movs	r2, #7
 800844e:	4013      	ands	r3, r2
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d91e      	bls.n	8008494 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008456:	4b73      	ldr	r3, [pc, #460]	@ (8008624 <HAL_RCC_ClockConfig+0x1f0>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2207      	movs	r2, #7
 800845c:	4393      	bics	r3, r2
 800845e:	0019      	movs	r1, r3
 8008460:	4b70      	ldr	r3, [pc, #448]	@ (8008624 <HAL_RCC_ClockConfig+0x1f0>)
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	430a      	orrs	r2, r1
 8008466:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008468:	f7fd f962 	bl	8005730 <HAL_GetTick>
 800846c:	0003      	movs	r3, r0
 800846e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008470:	e009      	b.n	8008486 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008472:	f7fd f95d 	bl	8005730 <HAL_GetTick>
 8008476:	0002      	movs	r2, r0
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	4a6a      	ldr	r2, [pc, #424]	@ (8008628 <HAL_RCC_ClockConfig+0x1f4>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d901      	bls.n	8008486 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e0ca      	b.n	800861c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008486:	4b67      	ldr	r3, [pc, #412]	@ (8008624 <HAL_RCC_ClockConfig+0x1f0>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2207      	movs	r2, #7
 800848c:	4013      	ands	r3, r2
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	429a      	cmp	r2, r3
 8008492:	d1ee      	bne.n	8008472 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2202      	movs	r2, #2
 800849a:	4013      	ands	r3, r2
 800849c:	d015      	beq.n	80084ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2204      	movs	r2, #4
 80084a4:	4013      	ands	r3, r2
 80084a6:	d006      	beq.n	80084b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80084a8:	4b60      	ldr	r3, [pc, #384]	@ (800862c <HAL_RCC_ClockConfig+0x1f8>)
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	4b5f      	ldr	r3, [pc, #380]	@ (800862c <HAL_RCC_ClockConfig+0x1f8>)
 80084ae:	21e0      	movs	r1, #224	@ 0xe0
 80084b0:	01c9      	lsls	r1, r1, #7
 80084b2:	430a      	orrs	r2, r1
 80084b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084b6:	4b5d      	ldr	r3, [pc, #372]	@ (800862c <HAL_RCC_ClockConfig+0x1f8>)
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	4a5d      	ldr	r2, [pc, #372]	@ (8008630 <HAL_RCC_ClockConfig+0x1fc>)
 80084bc:	4013      	ands	r3, r2
 80084be:	0019      	movs	r1, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	4b59      	ldr	r3, [pc, #356]	@ (800862c <HAL_RCC_ClockConfig+0x1f8>)
 80084c6:	430a      	orrs	r2, r1
 80084c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2201      	movs	r2, #1
 80084d0:	4013      	ands	r3, r2
 80084d2:	d057      	beq.n	8008584 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d107      	bne.n	80084ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084dc:	4b53      	ldr	r3, [pc, #332]	@ (800862c <HAL_RCC_ClockConfig+0x1f8>)
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	2380      	movs	r3, #128	@ 0x80
 80084e2:	029b      	lsls	r3, r3, #10
 80084e4:	4013      	ands	r3, r2
 80084e6:	d12b      	bne.n	8008540 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e097      	b.n	800861c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d107      	bne.n	8008504 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084f4:	4b4d      	ldr	r3, [pc, #308]	@ (800862c <HAL_RCC_ClockConfig+0x1f8>)
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	2380      	movs	r3, #128	@ 0x80
 80084fa:	049b      	lsls	r3, r3, #18
 80084fc:	4013      	ands	r3, r2
 80084fe:	d11f      	bne.n	8008540 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e08b      	b.n	800861c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d107      	bne.n	800851c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800850c:	4b47      	ldr	r3, [pc, #284]	@ (800862c <HAL_RCC_ClockConfig+0x1f8>)
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	2380      	movs	r3, #128	@ 0x80
 8008512:	00db      	lsls	r3, r3, #3
 8008514:	4013      	ands	r3, r2
 8008516:	d113      	bne.n	8008540 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e07f      	b.n	800861c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	2b03      	cmp	r3, #3
 8008522:	d106      	bne.n	8008532 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008524:	4b41      	ldr	r3, [pc, #260]	@ (800862c <HAL_RCC_ClockConfig+0x1f8>)
 8008526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008528:	2202      	movs	r2, #2
 800852a:	4013      	ands	r3, r2
 800852c:	d108      	bne.n	8008540 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e074      	b.n	800861c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008532:	4b3e      	ldr	r3, [pc, #248]	@ (800862c <HAL_RCC_ClockConfig+0x1f8>)
 8008534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008536:	2202      	movs	r2, #2
 8008538:	4013      	ands	r3, r2
 800853a:	d101      	bne.n	8008540 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e06d      	b.n	800861c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008540:	4b3a      	ldr	r3, [pc, #232]	@ (800862c <HAL_RCC_ClockConfig+0x1f8>)
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	2207      	movs	r2, #7
 8008546:	4393      	bics	r3, r2
 8008548:	0019      	movs	r1, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685a      	ldr	r2, [r3, #4]
 800854e:	4b37      	ldr	r3, [pc, #220]	@ (800862c <HAL_RCC_ClockConfig+0x1f8>)
 8008550:	430a      	orrs	r2, r1
 8008552:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008554:	f7fd f8ec 	bl	8005730 <HAL_GetTick>
 8008558:	0003      	movs	r3, r0
 800855a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800855c:	e009      	b.n	8008572 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800855e:	f7fd f8e7 	bl	8005730 <HAL_GetTick>
 8008562:	0002      	movs	r2, r0
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	4a2f      	ldr	r2, [pc, #188]	@ (8008628 <HAL_RCC_ClockConfig+0x1f4>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d901      	bls.n	8008572 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e054      	b.n	800861c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008572:	4b2e      	ldr	r3, [pc, #184]	@ (800862c <HAL_RCC_ClockConfig+0x1f8>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	2238      	movs	r2, #56	@ 0x38
 8008578:	401a      	ands	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	429a      	cmp	r2, r3
 8008582:	d1ec      	bne.n	800855e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008584:	4b27      	ldr	r3, [pc, #156]	@ (8008624 <HAL_RCC_ClockConfig+0x1f0>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2207      	movs	r2, #7
 800858a:	4013      	ands	r3, r2
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	429a      	cmp	r2, r3
 8008590:	d21e      	bcs.n	80085d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008592:	4b24      	ldr	r3, [pc, #144]	@ (8008624 <HAL_RCC_ClockConfig+0x1f0>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2207      	movs	r2, #7
 8008598:	4393      	bics	r3, r2
 800859a:	0019      	movs	r1, r3
 800859c:	4b21      	ldr	r3, [pc, #132]	@ (8008624 <HAL_RCC_ClockConfig+0x1f0>)
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80085a4:	f7fd f8c4 	bl	8005730 <HAL_GetTick>
 80085a8:	0003      	movs	r3, r0
 80085aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80085ac:	e009      	b.n	80085c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085ae:	f7fd f8bf 	bl	8005730 <HAL_GetTick>
 80085b2:	0002      	movs	r2, r0
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008628 <HAL_RCC_ClockConfig+0x1f4>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d901      	bls.n	80085c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e02c      	b.n	800861c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80085c2:	4b18      	ldr	r3, [pc, #96]	@ (8008624 <HAL_RCC_ClockConfig+0x1f0>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2207      	movs	r2, #7
 80085c8:	4013      	ands	r3, r2
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d1ee      	bne.n	80085ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2204      	movs	r2, #4
 80085d6:	4013      	ands	r3, r2
 80085d8:	d009      	beq.n	80085ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80085da:	4b14      	ldr	r3, [pc, #80]	@ (800862c <HAL_RCC_ClockConfig+0x1f8>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	4a15      	ldr	r2, [pc, #84]	@ (8008634 <HAL_RCC_ClockConfig+0x200>)
 80085e0:	4013      	ands	r3, r2
 80085e2:	0019      	movs	r1, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68da      	ldr	r2, [r3, #12]
 80085e8:	4b10      	ldr	r3, [pc, #64]	@ (800862c <HAL_RCC_ClockConfig+0x1f8>)
 80085ea:	430a      	orrs	r2, r1
 80085ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80085ee:	f000 f829 	bl	8008644 <HAL_RCC_GetSysClockFreq>
 80085f2:	0001      	movs	r1, r0
 80085f4:	4b0d      	ldr	r3, [pc, #52]	@ (800862c <HAL_RCC_ClockConfig+0x1f8>)
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	0a1b      	lsrs	r3, r3, #8
 80085fa:	220f      	movs	r2, #15
 80085fc:	401a      	ands	r2, r3
 80085fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008638 <HAL_RCC_ClockConfig+0x204>)
 8008600:	0092      	lsls	r2, r2, #2
 8008602:	58d3      	ldr	r3, [r2, r3]
 8008604:	221f      	movs	r2, #31
 8008606:	4013      	ands	r3, r2
 8008608:	000a      	movs	r2, r1
 800860a:	40da      	lsrs	r2, r3
 800860c:	4b0b      	ldr	r3, [pc, #44]	@ (800863c <HAL_RCC_ClockConfig+0x208>)
 800860e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008610:	4b0b      	ldr	r3, [pc, #44]	@ (8008640 <HAL_RCC_ClockConfig+0x20c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	0018      	movs	r0, r3
 8008616:	f7fd f82f 	bl	8005678 <HAL_InitTick>
 800861a:	0003      	movs	r3, r0
}
 800861c:	0018      	movs	r0, r3
 800861e:	46bd      	mov	sp, r7
 8008620:	b004      	add	sp, #16
 8008622:	bd80      	pop	{r7, pc}
 8008624:	40022000 	.word	0x40022000
 8008628:	00001388 	.word	0x00001388
 800862c:	40021000 	.word	0x40021000
 8008630:	fffff0ff 	.word	0xfffff0ff
 8008634:	ffff8fff 	.word	0xffff8fff
 8008638:	0800dbcc 	.word	0x0800dbcc
 800863c:	20000010 	.word	0x20000010
 8008640:	20000014 	.word	0x20000014

08008644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800864a:	4b3c      	ldr	r3, [pc, #240]	@ (800873c <HAL_RCC_GetSysClockFreq+0xf8>)
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	2238      	movs	r2, #56	@ 0x38
 8008650:	4013      	ands	r3, r2
 8008652:	d10f      	bne.n	8008674 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008654:	4b39      	ldr	r3, [pc, #228]	@ (800873c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	0adb      	lsrs	r3, r3, #11
 800865a:	2207      	movs	r2, #7
 800865c:	4013      	ands	r3, r2
 800865e:	2201      	movs	r2, #1
 8008660:	409a      	lsls	r2, r3
 8008662:	0013      	movs	r3, r2
 8008664:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	4835      	ldr	r0, [pc, #212]	@ (8008740 <HAL_RCC_GetSysClockFreq+0xfc>)
 800866a:	f7f7 fd65 	bl	8000138 <__udivsi3>
 800866e:	0003      	movs	r3, r0
 8008670:	613b      	str	r3, [r7, #16]
 8008672:	e05d      	b.n	8008730 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008674:	4b31      	ldr	r3, [pc, #196]	@ (800873c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	2238      	movs	r2, #56	@ 0x38
 800867a:	4013      	ands	r3, r2
 800867c:	2b08      	cmp	r3, #8
 800867e:	d102      	bne.n	8008686 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008680:	4b30      	ldr	r3, [pc, #192]	@ (8008744 <HAL_RCC_GetSysClockFreq+0x100>)
 8008682:	613b      	str	r3, [r7, #16]
 8008684:	e054      	b.n	8008730 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008686:	4b2d      	ldr	r3, [pc, #180]	@ (800873c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	2238      	movs	r2, #56	@ 0x38
 800868c:	4013      	ands	r3, r2
 800868e:	2b10      	cmp	r3, #16
 8008690:	d138      	bne.n	8008704 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008692:	4b2a      	ldr	r3, [pc, #168]	@ (800873c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	2203      	movs	r2, #3
 8008698:	4013      	ands	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800869c:	4b27      	ldr	r3, [pc, #156]	@ (800873c <HAL_RCC_GetSysClockFreq+0xf8>)
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	091b      	lsrs	r3, r3, #4
 80086a2:	2207      	movs	r2, #7
 80086a4:	4013      	ands	r3, r2
 80086a6:	3301      	adds	r3, #1
 80086a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d10d      	bne.n	80086cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086b0:	68b9      	ldr	r1, [r7, #8]
 80086b2:	4824      	ldr	r0, [pc, #144]	@ (8008744 <HAL_RCC_GetSysClockFreq+0x100>)
 80086b4:	f7f7 fd40 	bl	8000138 <__udivsi3>
 80086b8:	0003      	movs	r3, r0
 80086ba:	0019      	movs	r1, r3
 80086bc:	4b1f      	ldr	r3, [pc, #124]	@ (800873c <HAL_RCC_GetSysClockFreq+0xf8>)
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	0a1b      	lsrs	r3, r3, #8
 80086c2:	227f      	movs	r2, #127	@ 0x7f
 80086c4:	4013      	ands	r3, r2
 80086c6:	434b      	muls	r3, r1
 80086c8:	617b      	str	r3, [r7, #20]
        break;
 80086ca:	e00d      	b.n	80086e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80086cc:	68b9      	ldr	r1, [r7, #8]
 80086ce:	481c      	ldr	r0, [pc, #112]	@ (8008740 <HAL_RCC_GetSysClockFreq+0xfc>)
 80086d0:	f7f7 fd32 	bl	8000138 <__udivsi3>
 80086d4:	0003      	movs	r3, r0
 80086d6:	0019      	movs	r1, r3
 80086d8:	4b18      	ldr	r3, [pc, #96]	@ (800873c <HAL_RCC_GetSysClockFreq+0xf8>)
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	0a1b      	lsrs	r3, r3, #8
 80086de:	227f      	movs	r2, #127	@ 0x7f
 80086e0:	4013      	ands	r3, r2
 80086e2:	434b      	muls	r3, r1
 80086e4:	617b      	str	r3, [r7, #20]
        break;
 80086e6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80086e8:	4b14      	ldr	r3, [pc, #80]	@ (800873c <HAL_RCC_GetSysClockFreq+0xf8>)
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	0f5b      	lsrs	r3, r3, #29
 80086ee:	2207      	movs	r2, #7
 80086f0:	4013      	ands	r3, r2
 80086f2:	3301      	adds	r3, #1
 80086f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80086f6:	6879      	ldr	r1, [r7, #4]
 80086f8:	6978      	ldr	r0, [r7, #20]
 80086fa:	f7f7 fd1d 	bl	8000138 <__udivsi3>
 80086fe:	0003      	movs	r3, r0
 8008700:	613b      	str	r3, [r7, #16]
 8008702:	e015      	b.n	8008730 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008704:	4b0d      	ldr	r3, [pc, #52]	@ (800873c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	2238      	movs	r2, #56	@ 0x38
 800870a:	4013      	ands	r3, r2
 800870c:	2b20      	cmp	r3, #32
 800870e:	d103      	bne.n	8008718 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008710:	2380      	movs	r3, #128	@ 0x80
 8008712:	021b      	lsls	r3, r3, #8
 8008714:	613b      	str	r3, [r7, #16]
 8008716:	e00b      	b.n	8008730 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008718:	4b08      	ldr	r3, [pc, #32]	@ (800873c <HAL_RCC_GetSysClockFreq+0xf8>)
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	2238      	movs	r2, #56	@ 0x38
 800871e:	4013      	ands	r3, r2
 8008720:	2b18      	cmp	r3, #24
 8008722:	d103      	bne.n	800872c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008724:	23fa      	movs	r3, #250	@ 0xfa
 8008726:	01db      	lsls	r3, r3, #7
 8008728:	613b      	str	r3, [r7, #16]
 800872a:	e001      	b.n	8008730 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800872c:	2300      	movs	r3, #0
 800872e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008730:	693b      	ldr	r3, [r7, #16]
}
 8008732:	0018      	movs	r0, r3
 8008734:	46bd      	mov	sp, r7
 8008736:	b006      	add	sp, #24
 8008738:	bd80      	pop	{r7, pc}
 800873a:	46c0      	nop			@ (mov r8, r8)
 800873c:	40021000 	.word	0x40021000
 8008740:	00f42400 	.word	0x00f42400
 8008744:	007a1200 	.word	0x007a1200

08008748 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800874c:	4b02      	ldr	r3, [pc, #8]	@ (8008758 <HAL_RCC_GetHCLKFreq+0x10>)
 800874e:	681b      	ldr	r3, [r3, #0]
}
 8008750:	0018      	movs	r0, r3
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	46c0      	nop			@ (mov r8, r8)
 8008758:	20000010 	.word	0x20000010

0800875c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800875c:	b5b0      	push	{r4, r5, r7, lr}
 800875e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008760:	f7ff fff2 	bl	8008748 <HAL_RCC_GetHCLKFreq>
 8008764:	0004      	movs	r4, r0
 8008766:	f7ff fb49 	bl	8007dfc <LL_RCC_GetAPB1Prescaler>
 800876a:	0003      	movs	r3, r0
 800876c:	0b1a      	lsrs	r2, r3, #12
 800876e:	4b05      	ldr	r3, [pc, #20]	@ (8008784 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008770:	0092      	lsls	r2, r2, #2
 8008772:	58d3      	ldr	r3, [r2, r3]
 8008774:	221f      	movs	r2, #31
 8008776:	4013      	ands	r3, r2
 8008778:	40dc      	lsrs	r4, r3
 800877a:	0023      	movs	r3, r4
}
 800877c:	0018      	movs	r0, r3
 800877e:	46bd      	mov	sp, r7
 8008780:	bdb0      	pop	{r4, r5, r7, pc}
 8008782:	46c0      	nop			@ (mov r8, r8)
 8008784:	0800dc0c 	.word	0x0800dc0c

08008788 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008790:	2313      	movs	r3, #19
 8008792:	18fb      	adds	r3, r7, r3
 8008794:	2200      	movs	r2, #0
 8008796:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008798:	2312      	movs	r3, #18
 800879a:	18fb      	adds	r3, r7, r3
 800879c:	2200      	movs	r2, #0
 800879e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	2380      	movs	r3, #128	@ 0x80
 80087a6:	029b      	lsls	r3, r3, #10
 80087a8:	4013      	ands	r3, r2
 80087aa:	d100      	bne.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x26>
 80087ac:	e0a3      	b.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087ae:	2011      	movs	r0, #17
 80087b0:	183b      	adds	r3, r7, r0
 80087b2:	2200      	movs	r2, #0
 80087b4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087b6:	4b86      	ldr	r3, [pc, #536]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80087b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087ba:	2380      	movs	r3, #128	@ 0x80
 80087bc:	055b      	lsls	r3, r3, #21
 80087be:	4013      	ands	r3, r2
 80087c0:	d110      	bne.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087c2:	4b83      	ldr	r3, [pc, #524]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80087c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087c6:	4b82      	ldr	r3, [pc, #520]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80087c8:	2180      	movs	r1, #128	@ 0x80
 80087ca:	0549      	lsls	r1, r1, #21
 80087cc:	430a      	orrs	r2, r1
 80087ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80087d0:	4b7f      	ldr	r3, [pc, #508]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80087d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087d4:	2380      	movs	r3, #128	@ 0x80
 80087d6:	055b      	lsls	r3, r3, #21
 80087d8:	4013      	ands	r3, r2
 80087da:	60bb      	str	r3, [r7, #8]
 80087dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087de:	183b      	adds	r3, r7, r0
 80087e0:	2201      	movs	r2, #1
 80087e2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087e4:	4b7b      	ldr	r3, [pc, #492]	@ (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	4b7a      	ldr	r3, [pc, #488]	@ (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80087ea:	2180      	movs	r1, #128	@ 0x80
 80087ec:	0049      	lsls	r1, r1, #1
 80087ee:	430a      	orrs	r2, r1
 80087f0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087f2:	f7fc ff9d 	bl	8005730 <HAL_GetTick>
 80087f6:	0003      	movs	r3, r0
 80087f8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087fa:	e00b      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087fc:	f7fc ff98 	bl	8005730 <HAL_GetTick>
 8008800:	0002      	movs	r2, r0
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	2b02      	cmp	r3, #2
 8008808:	d904      	bls.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800880a:	2313      	movs	r3, #19
 800880c:	18fb      	adds	r3, r7, r3
 800880e:	2203      	movs	r2, #3
 8008810:	701a      	strb	r2, [r3, #0]
        break;
 8008812:	e005      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008814:	4b6f      	ldr	r3, [pc, #444]	@ (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	2380      	movs	r3, #128	@ 0x80
 800881a:	005b      	lsls	r3, r3, #1
 800881c:	4013      	ands	r3, r2
 800881e:	d0ed      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008820:	2313      	movs	r3, #19
 8008822:	18fb      	adds	r3, r7, r3
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d154      	bne.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800882a:	4b69      	ldr	r3, [pc, #420]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800882c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800882e:	23c0      	movs	r3, #192	@ 0xc0
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4013      	ands	r3, r2
 8008834:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d019      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	429a      	cmp	r2, r3
 8008844:	d014      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008846:	4b62      	ldr	r3, [pc, #392]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800884a:	4a63      	ldr	r2, [pc, #396]	@ (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800884c:	4013      	ands	r3, r2
 800884e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008850:	4b5f      	ldr	r3, [pc, #380]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008852:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008854:	4b5e      	ldr	r3, [pc, #376]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008856:	2180      	movs	r1, #128	@ 0x80
 8008858:	0249      	lsls	r1, r1, #9
 800885a:	430a      	orrs	r2, r1
 800885c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800885e:	4b5c      	ldr	r3, [pc, #368]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008860:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008862:	4b5b      	ldr	r3, [pc, #364]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008864:	495d      	ldr	r1, [pc, #372]	@ (80089dc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008866:	400a      	ands	r2, r1
 8008868:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800886a:	4b59      	ldr	r3, [pc, #356]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2201      	movs	r2, #1
 8008874:	4013      	ands	r3, r2
 8008876:	d016      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008878:	f7fc ff5a 	bl	8005730 <HAL_GetTick>
 800887c:	0003      	movs	r3, r0
 800887e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008880:	e00c      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008882:	f7fc ff55 	bl	8005730 <HAL_GetTick>
 8008886:	0002      	movs	r2, r0
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	4a54      	ldr	r2, [pc, #336]	@ (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d904      	bls.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008892:	2313      	movs	r3, #19
 8008894:	18fb      	adds	r3, r7, r3
 8008896:	2203      	movs	r2, #3
 8008898:	701a      	strb	r2, [r3, #0]
            break;
 800889a:	e004      	b.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800889c:	4b4c      	ldr	r3, [pc, #304]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800889e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088a0:	2202      	movs	r2, #2
 80088a2:	4013      	ands	r3, r2
 80088a4:	d0ed      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80088a6:	2313      	movs	r3, #19
 80088a8:	18fb      	adds	r3, r7, r3
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10a      	bne.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088b0:	4b47      	ldr	r3, [pc, #284]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088b4:	4a48      	ldr	r2, [pc, #288]	@ (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80088b6:	4013      	ands	r3, r2
 80088b8:	0019      	movs	r1, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	699a      	ldr	r2, [r3, #24]
 80088be:	4b44      	ldr	r3, [pc, #272]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088c0:	430a      	orrs	r2, r1
 80088c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80088c4:	e00c      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80088c6:	2312      	movs	r3, #18
 80088c8:	18fb      	adds	r3, r7, r3
 80088ca:	2213      	movs	r2, #19
 80088cc:	18ba      	adds	r2, r7, r2
 80088ce:	7812      	ldrb	r2, [r2, #0]
 80088d0:	701a      	strb	r2, [r3, #0]
 80088d2:	e005      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d4:	2312      	movs	r3, #18
 80088d6:	18fb      	adds	r3, r7, r3
 80088d8:	2213      	movs	r2, #19
 80088da:	18ba      	adds	r2, r7, r2
 80088dc:	7812      	ldrb	r2, [r2, #0]
 80088de:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80088e0:	2311      	movs	r3, #17
 80088e2:	18fb      	adds	r3, r7, r3
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d105      	bne.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088ea:	4b39      	ldr	r3, [pc, #228]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088ee:	4b38      	ldr	r3, [pc, #224]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80088f0:	493c      	ldr	r1, [pc, #240]	@ (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80088f2:	400a      	ands	r2, r1
 80088f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2201      	movs	r2, #1
 80088fc:	4013      	ands	r3, r2
 80088fe:	d009      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008900:	4b33      	ldr	r3, [pc, #204]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008904:	2203      	movs	r2, #3
 8008906:	4393      	bics	r3, r2
 8008908:	0019      	movs	r1, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	4b30      	ldr	r3, [pc, #192]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008910:	430a      	orrs	r2, r1
 8008912:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2202      	movs	r2, #2
 800891a:	4013      	ands	r3, r2
 800891c:	d009      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800891e:	4b2c      	ldr	r3, [pc, #176]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008922:	220c      	movs	r2, #12
 8008924:	4393      	bics	r3, r2
 8008926:	0019      	movs	r1, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689a      	ldr	r2, [r3, #8]
 800892c:	4b28      	ldr	r3, [pc, #160]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800892e:	430a      	orrs	r2, r1
 8008930:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2220      	movs	r2, #32
 8008938:	4013      	ands	r3, r2
 800893a:	d009      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800893c:	4b24      	ldr	r3, [pc, #144]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800893e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008940:	4a29      	ldr	r2, [pc, #164]	@ (80089e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008942:	4013      	ands	r3, r2
 8008944:	0019      	movs	r1, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	4b21      	ldr	r3, [pc, #132]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800894c:	430a      	orrs	r2, r1
 800894e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	2380      	movs	r3, #128	@ 0x80
 8008956:	01db      	lsls	r3, r3, #7
 8008958:	4013      	ands	r3, r2
 800895a:	d015      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800895c:	4b1c      	ldr	r3, [pc, #112]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800895e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	0899      	lsrs	r1, r3, #2
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	695a      	ldr	r2, [r3, #20]
 8008968:	4b19      	ldr	r3, [pc, #100]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800896a:	430a      	orrs	r2, r1
 800896c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	695a      	ldr	r2, [r3, #20]
 8008972:	2380      	movs	r3, #128	@ 0x80
 8008974:	05db      	lsls	r3, r3, #23
 8008976:	429a      	cmp	r2, r3
 8008978:	d106      	bne.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800897a:	4b15      	ldr	r3, [pc, #84]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800897c:	68da      	ldr	r2, [r3, #12]
 800897e:	4b14      	ldr	r3, [pc, #80]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008980:	2180      	movs	r1, #128	@ 0x80
 8008982:	0249      	lsls	r1, r1, #9
 8008984:	430a      	orrs	r2, r1
 8008986:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	2380      	movs	r3, #128	@ 0x80
 800898e:	011b      	lsls	r3, r3, #4
 8008990:	4013      	ands	r3, r2
 8008992:	d016      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008994:	4b0e      	ldr	r3, [pc, #56]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008998:	4a14      	ldr	r2, [pc, #80]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800899a:	4013      	ands	r3, r2
 800899c:	0019      	movs	r1, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	691a      	ldr	r2, [r3, #16]
 80089a2:	4b0b      	ldr	r3, [pc, #44]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089a4:	430a      	orrs	r2, r1
 80089a6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	691a      	ldr	r2, [r3, #16]
 80089ac:	2380      	movs	r3, #128	@ 0x80
 80089ae:	01db      	lsls	r3, r3, #7
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d106      	bne.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80089b4:	4b06      	ldr	r3, [pc, #24]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089b6:	68da      	ldr	r2, [r3, #12]
 80089b8:	4b05      	ldr	r3, [pc, #20]	@ (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80089ba:	2180      	movs	r1, #128	@ 0x80
 80089bc:	0249      	lsls	r1, r1, #9
 80089be:	430a      	orrs	r2, r1
 80089c0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80089c2:	2312      	movs	r3, #18
 80089c4:	18fb      	adds	r3, r7, r3
 80089c6:	781b      	ldrb	r3, [r3, #0]
}
 80089c8:	0018      	movs	r0, r3
 80089ca:	46bd      	mov	sp, r7
 80089cc:	b006      	add	sp, #24
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	40021000 	.word	0x40021000
 80089d4:	40007000 	.word	0x40007000
 80089d8:	fffffcff 	.word	0xfffffcff
 80089dc:	fffeffff 	.word	0xfffeffff
 80089e0:	00001388 	.word	0x00001388
 80089e4:	efffffff 	.word	0xefffffff
 80089e8:	ffffcfff 	.word	0xffffcfff
 80089ec:	ffff3fff 	.word	0xffff3fff

080089f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e0a8      	b.n	8008b54 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d109      	bne.n	8008a1e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	2382      	movs	r3, #130	@ 0x82
 8008a10:	005b      	lsls	r3, r3, #1
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d009      	beq.n	8008a2a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	61da      	str	r2, [r3, #28]
 8008a1c:	e005      	b.n	8008a2a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	225d      	movs	r2, #93	@ 0x5d
 8008a34:	5c9b      	ldrb	r3, [r3, r2]
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d107      	bne.n	8008a4c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	225c      	movs	r2, #92	@ 0x5c
 8008a40:	2100      	movs	r1, #0
 8008a42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	0018      	movs	r0, r3
 8008a48:	f7fc fb5a 	bl	8005100 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	225d      	movs	r2, #93	@ 0x5d
 8008a50:	2102      	movs	r1, #2
 8008a52:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2140      	movs	r1, #64	@ 0x40
 8008a60:	438a      	bics	r2, r1
 8008a62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68da      	ldr	r2, [r3, #12]
 8008a68:	23e0      	movs	r3, #224	@ 0xe0
 8008a6a:	00db      	lsls	r3, r3, #3
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d902      	bls.n	8008a76 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008a70:	2300      	movs	r3, #0
 8008a72:	60fb      	str	r3, [r7, #12]
 8008a74:	e002      	b.n	8008a7c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008a76:	2380      	movs	r3, #128	@ 0x80
 8008a78:	015b      	lsls	r3, r3, #5
 8008a7a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68da      	ldr	r2, [r3, #12]
 8008a80:	23f0      	movs	r3, #240	@ 0xf0
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d008      	beq.n	8008a9a <HAL_SPI_Init+0xaa>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68da      	ldr	r2, [r3, #12]
 8008a8c:	23e0      	movs	r3, #224	@ 0xe0
 8008a8e:	00db      	lsls	r3, r3, #3
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d002      	beq.n	8008a9a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	2382      	movs	r3, #130	@ 0x82
 8008aa0:	005b      	lsls	r3, r3, #1
 8008aa2:	401a      	ands	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6899      	ldr	r1, [r3, #8]
 8008aa8:	2384      	movs	r3, #132	@ 0x84
 8008aaa:	021b      	lsls	r3, r3, #8
 8008aac:	400b      	ands	r3, r1
 8008aae:	431a      	orrs	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	2102      	movs	r1, #2
 8008ab6:	400b      	ands	r3, r1
 8008ab8:	431a      	orrs	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	2101      	movs	r1, #1
 8008ac0:	400b      	ands	r3, r1
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6999      	ldr	r1, [r3, #24]
 8008ac8:	2380      	movs	r3, #128	@ 0x80
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	400b      	ands	r3, r1
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	2138      	movs	r1, #56	@ 0x38
 8008ad6:	400b      	ands	r3, r1
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	2180      	movs	r1, #128	@ 0x80
 8008ae0:	400b      	ands	r3, r1
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	0011      	movs	r1, r2
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008aea:	2380      	movs	r3, #128	@ 0x80
 8008aec:	019b      	lsls	r3, r3, #6
 8008aee:	401a      	ands	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	430a      	orrs	r2, r1
 8008af6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	0c1b      	lsrs	r3, r3, #16
 8008afe:	2204      	movs	r2, #4
 8008b00:	401a      	ands	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b06:	2110      	movs	r1, #16
 8008b08:	400b      	ands	r3, r1
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b10:	2108      	movs	r1, #8
 8008b12:	400b      	ands	r3, r1
 8008b14:	431a      	orrs	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68d9      	ldr	r1, [r3, #12]
 8008b1a:	23f0      	movs	r3, #240	@ 0xf0
 8008b1c:	011b      	lsls	r3, r3, #4
 8008b1e:	400b      	ands	r3, r1
 8008b20:	431a      	orrs	r2, r3
 8008b22:	0011      	movs	r1, r2
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	2380      	movs	r3, #128	@ 0x80
 8008b28:	015b      	lsls	r3, r3, #5
 8008b2a:	401a      	ands	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	69da      	ldr	r2, [r3, #28]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4907      	ldr	r1, [pc, #28]	@ (8008b5c <HAL_SPI_Init+0x16c>)
 8008b40:	400a      	ands	r2, r1
 8008b42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	225d      	movs	r2, #93	@ 0x5d
 8008b4e:	2101      	movs	r1, #1
 8008b50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	0018      	movs	r0, r3
 8008b56:	46bd      	mov	sp, r7
 8008b58:	b004      	add	sp, #16
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	fffff7ff 	.word	0xfffff7ff

08008b60 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b60:	b590      	push	{r4, r7, lr}
 8008b62:	b089      	sub	sp, #36	@ 0x24
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	603b      	str	r3, [r7, #0]
 8008b6c:	1dbb      	adds	r3, r7, #6
 8008b6e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b70:	2117      	movs	r1, #23
 8008b72:	187b      	adds	r3, r7, r1
 8008b74:	2200      	movs	r2, #0
 8008b76:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	225d      	movs	r2, #93	@ 0x5d
 8008b7c:	5c9b      	ldrb	r3, [r3, r2]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d003      	beq.n	8008b8c <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8008b84:	187b      	adds	r3, r7, r1
 8008b86:	2202      	movs	r2, #2
 8008b88:	701a      	strb	r2, [r3, #0]
    goto error;
 8008b8a:	e12b      	b.n	8008de4 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	2382      	movs	r3, #130	@ 0x82
 8008b92:	005b      	lsls	r3, r3, #1
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d113      	bne.n	8008bc0 <HAL_SPI_Receive+0x60>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10f      	bne.n	8008bc0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	225d      	movs	r2, #93	@ 0x5d
 8008ba4:	2104      	movs	r1, #4
 8008ba6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008ba8:	1dbb      	adds	r3, r7, #6
 8008baa:	881c      	ldrh	r4, [r3, #0]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	68b9      	ldr	r1, [r7, #8]
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	0023      	movs	r3, r4
 8008bb8:	f000 f924 	bl	8008e04 <HAL_SPI_TransmitReceive>
 8008bbc:	0003      	movs	r3, r0
 8008bbe:	e118      	b.n	8008df2 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	225c      	movs	r2, #92	@ 0x5c
 8008bc4:	5c9b      	ldrb	r3, [r3, r2]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d101      	bne.n	8008bce <HAL_SPI_Receive+0x6e>
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e111      	b.n	8008df2 <HAL_SPI_Receive+0x292>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	225c      	movs	r2, #92	@ 0x5c
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bd6:	f7fc fdab 	bl	8005730 <HAL_GetTick>
 8008bda:	0003      	movs	r3, r0
 8008bdc:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d003      	beq.n	8008bec <HAL_SPI_Receive+0x8c>
 8008be4:	1dbb      	adds	r3, r7, #6
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d104      	bne.n	8008bf6 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8008bec:	2317      	movs	r3, #23
 8008bee:	18fb      	adds	r3, r7, r3
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	701a      	strb	r2, [r3, #0]
    goto error;
 8008bf4:	e0f6      	b.n	8008de4 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	225d      	movs	r2, #93	@ 0x5d
 8008bfa:	2104      	movs	r1, #4
 8008bfc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	1dba      	adds	r2, r7, #6
 8008c0e:	2144      	movs	r1, #68	@ 0x44
 8008c10:	8812      	ldrh	r2, [r2, #0]
 8008c12:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	1dba      	adds	r2, r7, #6
 8008c18:	2146      	movs	r1, #70	@ 0x46
 8008c1a:	8812      	ldrh	r2, [r2, #0]
 8008c1c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	68da      	ldr	r2, [r3, #12]
 8008c40:	23e0      	movs	r3, #224	@ 0xe0
 8008c42:	00db      	lsls	r3, r3, #3
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d908      	bls.n	8008c5a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	496a      	ldr	r1, [pc, #424]	@ (8008dfc <HAL_SPI_Receive+0x29c>)
 8008c54:	400a      	ands	r2, r1
 8008c56:	605a      	str	r2, [r3, #4]
 8008c58:	e008      	b.n	8008c6c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2180      	movs	r1, #128	@ 0x80
 8008c66:	0149      	lsls	r1, r1, #5
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	689a      	ldr	r2, [r3, #8]
 8008c70:	2380      	movs	r3, #128	@ 0x80
 8008c72:	021b      	lsls	r3, r3, #8
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d10f      	bne.n	8008c98 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2140      	movs	r1, #64	@ 0x40
 8008c84:	438a      	bics	r2, r1
 8008c86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	495b      	ldr	r1, [pc, #364]	@ (8008e00 <HAL_SPI_Receive+0x2a0>)
 8008c94:	400a      	ands	r2, r1
 8008c96:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2240      	movs	r2, #64	@ 0x40
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	2b40      	cmp	r3, #64	@ 0x40
 8008ca4:	d007      	beq.n	8008cb6 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2140      	movs	r1, #64	@ 0x40
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	68da      	ldr	r2, [r3, #12]
 8008cba:	23e0      	movs	r3, #224	@ 0xe0
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d900      	bls.n	8008cc4 <HAL_SPI_Receive+0x164>
 8008cc2:	e071      	b.n	8008da8 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008cc4:	e035      	b.n	8008d32 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	4013      	ands	r3, r2
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d117      	bne.n	8008d04 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	330c      	adds	r3, #12
 8008cda:	001a      	movs	r2, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce0:	7812      	ldrb	r2, [r2, #0]
 8008ce2:	b2d2      	uxtb	r2, r2
 8008ce4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2246      	movs	r2, #70	@ 0x46
 8008cf4:	5a9b      	ldrh	r3, [r3, r2]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	b299      	uxth	r1, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2246      	movs	r2, #70	@ 0x46
 8008d00:	5299      	strh	r1, [r3, r2]
 8008d02:	e016      	b.n	8008d32 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d04:	f7fc fd14 	bl	8005730 <HAL_GetTick>
 8008d08:	0002      	movs	r2, r0
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d802      	bhi.n	8008d1a <HAL_SPI_Receive+0x1ba>
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	3301      	adds	r3, #1
 8008d18:	d102      	bne.n	8008d20 <HAL_SPI_Receive+0x1c0>
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d108      	bne.n	8008d32 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8008d20:	2317      	movs	r3, #23
 8008d22:	18fb      	adds	r3, r7, r3
 8008d24:	2203      	movs	r2, #3
 8008d26:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	225d      	movs	r2, #93	@ 0x5d
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	5499      	strb	r1, [r3, r2]
          goto error;
 8008d30:	e058      	b.n	8008de4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2246      	movs	r2, #70	@ 0x46
 8008d36:	5a9b      	ldrh	r3, [r3, r2]
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1c3      	bne.n	8008cc6 <HAL_SPI_Receive+0x166>
 8008d3e:	e039      	b.n	8008db4 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	2201      	movs	r2, #1
 8008d48:	4013      	ands	r3, r2
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d115      	bne.n	8008d7a <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d58:	b292      	uxth	r2, r2
 8008d5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d60:	1c9a      	adds	r2, r3, #2
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2246      	movs	r2, #70	@ 0x46
 8008d6a:	5a9b      	ldrh	r3, [r3, r2]
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	b299      	uxth	r1, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2246      	movs	r2, #70	@ 0x46
 8008d76:	5299      	strh	r1, [r3, r2]
 8008d78:	e016      	b.n	8008da8 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d7a:	f7fc fcd9 	bl	8005730 <HAL_GetTick>
 8008d7e:	0002      	movs	r2, r0
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d802      	bhi.n	8008d90 <HAL_SPI_Receive+0x230>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	d102      	bne.n	8008d96 <HAL_SPI_Receive+0x236>
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d108      	bne.n	8008da8 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8008d96:	2317      	movs	r3, #23
 8008d98:	18fb      	adds	r3, r7, r3
 8008d9a:	2203      	movs	r2, #3
 8008d9c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	225d      	movs	r2, #93	@ 0x5d
 8008da2:	2101      	movs	r1, #1
 8008da4:	5499      	strb	r1, [r3, r2]
          goto error;
 8008da6:	e01d      	b.n	8008de4 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2246      	movs	r2, #70	@ 0x46
 8008dac:	5a9b      	ldrh	r3, [r3, r2]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1c5      	bne.n	8008d40 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	0018      	movs	r0, r3
 8008dbc:	f000 fb34 	bl	8009428 <SPI_EndRxTransaction>
 8008dc0:	1e03      	subs	r3, r0, #0
 8008dc2:	d002      	beq.n	8008dca <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2220      	movs	r2, #32
 8008dc8:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d004      	beq.n	8008ddc <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8008dd2:	2317      	movs	r3, #23
 8008dd4:	18fb      	adds	r3, r7, r3
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	701a      	strb	r2, [r3, #0]
 8008dda:	e003      	b.n	8008de4 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	225d      	movs	r2, #93	@ 0x5d
 8008de0:	2101      	movs	r1, #1
 8008de2:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	225c      	movs	r2, #92	@ 0x5c
 8008de8:	2100      	movs	r1, #0
 8008dea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008dec:	2317      	movs	r3, #23
 8008dee:	18fb      	adds	r3, r7, r3
 8008df0:	781b      	ldrb	r3, [r3, #0]
}
 8008df2:	0018      	movs	r0, r3
 8008df4:	46bd      	mov	sp, r7
 8008df6:	b007      	add	sp, #28
 8008df8:	bd90      	pop	{r4, r7, pc}
 8008dfa:	46c0      	nop			@ (mov r8, r8)
 8008dfc:	ffffefff 	.word	0xffffefff
 8008e00:	ffffbfff 	.word	0xffffbfff

08008e04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b08a      	sub	sp, #40	@ 0x28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	001a      	movs	r2, r3
 8008e12:	1cbb      	adds	r3, r7, #2
 8008e14:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008e16:	2301      	movs	r3, #1
 8008e18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008e1a:	2323      	movs	r3, #35	@ 0x23
 8008e1c:	18fb      	adds	r3, r7, r3
 8008e1e:	2200      	movs	r2, #0
 8008e20:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	225c      	movs	r2, #92	@ 0x5c
 8008e26:	5c9b      	ldrb	r3, [r3, r2]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d101      	bne.n	8008e30 <HAL_SPI_TransmitReceive+0x2c>
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	e1c4      	b.n	80091ba <HAL_SPI_TransmitReceive+0x3b6>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	225c      	movs	r2, #92	@ 0x5c
 8008e34:	2101      	movs	r1, #1
 8008e36:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e38:	f7fc fc7a 	bl	8005730 <HAL_GetTick>
 8008e3c:	0003      	movs	r3, r0
 8008e3e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008e40:	201b      	movs	r0, #27
 8008e42:	183b      	adds	r3, r7, r0
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	215d      	movs	r1, #93	@ 0x5d
 8008e48:	5c52      	ldrb	r2, [r2, r1]
 8008e4a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008e52:	2312      	movs	r3, #18
 8008e54:	18fb      	adds	r3, r7, r3
 8008e56:	1cba      	adds	r2, r7, #2
 8008e58:	8812      	ldrh	r2, [r2, #0]
 8008e5a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008e5c:	183b      	adds	r3, r7, r0
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d011      	beq.n	8008e88 <HAL_SPI_TransmitReceive+0x84>
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	2382      	movs	r3, #130	@ 0x82
 8008e68:	005b      	lsls	r3, r3, #1
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d107      	bne.n	8008e7e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d103      	bne.n	8008e7e <HAL_SPI_TransmitReceive+0x7a>
 8008e76:	183b      	adds	r3, r7, r0
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2b04      	cmp	r3, #4
 8008e7c:	d004      	beq.n	8008e88 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8008e7e:	2323      	movs	r3, #35	@ 0x23
 8008e80:	18fb      	adds	r3, r7, r3
 8008e82:	2202      	movs	r2, #2
 8008e84:	701a      	strb	r2, [r3, #0]
    goto error;
 8008e86:	e191      	b.n	80091ac <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d006      	beq.n	8008e9c <HAL_SPI_TransmitReceive+0x98>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d003      	beq.n	8008e9c <HAL_SPI_TransmitReceive+0x98>
 8008e94:	1cbb      	adds	r3, r7, #2
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d104      	bne.n	8008ea6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8008e9c:	2323      	movs	r3, #35	@ 0x23
 8008e9e:	18fb      	adds	r3, r7, r3
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	701a      	strb	r2, [r3, #0]
    goto error;
 8008ea4:	e182      	b.n	80091ac <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	225d      	movs	r2, #93	@ 0x5d
 8008eaa:	5c9b      	ldrb	r3, [r3, r2]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	2b04      	cmp	r3, #4
 8008eb0:	d003      	beq.n	8008eba <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	225d      	movs	r2, #93	@ 0x5d
 8008eb6:	2105      	movs	r1, #5
 8008eb8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	1cba      	adds	r2, r7, #2
 8008eca:	2146      	movs	r1, #70	@ 0x46
 8008ecc:	8812      	ldrh	r2, [r2, #0]
 8008ece:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	1cba      	adds	r2, r7, #2
 8008ed4:	2144      	movs	r1, #68	@ 0x44
 8008ed6:	8812      	ldrh	r2, [r2, #0]
 8008ed8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	1cba      	adds	r2, r7, #2
 8008ee4:	8812      	ldrh	r2, [r2, #0]
 8008ee6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	1cba      	adds	r2, r7, #2
 8008eec:	8812      	ldrh	r2, [r2, #0]
 8008eee:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	68da      	ldr	r2, [r3, #12]
 8008f00:	23e0      	movs	r3, #224	@ 0xe0
 8008f02:	00db      	lsls	r3, r3, #3
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d908      	bls.n	8008f1a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	685a      	ldr	r2, [r3, #4]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	49ac      	ldr	r1, [pc, #688]	@ (80091c4 <HAL_SPI_TransmitReceive+0x3c0>)
 8008f14:	400a      	ands	r2, r1
 8008f16:	605a      	str	r2, [r3, #4]
 8008f18:	e008      	b.n	8008f2c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2180      	movs	r1, #128	@ 0x80
 8008f26:	0149      	lsls	r1, r1, #5
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2240      	movs	r2, #64	@ 0x40
 8008f34:	4013      	ands	r3, r2
 8008f36:	2b40      	cmp	r3, #64	@ 0x40
 8008f38:	d007      	beq.n	8008f4a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2140      	movs	r1, #64	@ 0x40
 8008f46:	430a      	orrs	r2, r1
 8008f48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	23e0      	movs	r3, #224	@ 0xe0
 8008f50:	00db      	lsls	r3, r3, #3
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d800      	bhi.n	8008f58 <HAL_SPI_TransmitReceive+0x154>
 8008f56:	e083      	b.n	8009060 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d005      	beq.n	8008f6c <HAL_SPI_TransmitReceive+0x168>
 8008f60:	2312      	movs	r3, #18
 8008f62:	18fb      	adds	r3, r7, r3
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d000      	beq.n	8008f6c <HAL_SPI_TransmitReceive+0x168>
 8008f6a:	e06d      	b.n	8009048 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f70:	881a      	ldrh	r2, [r3, #0]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f7c:	1c9a      	adds	r2, r3, #2
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f90:	e05a      	b.n	8009048 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	2202      	movs	r2, #2
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d11b      	bne.n	8008fd8 <HAL_SPI_TransmitReceive+0x1d4>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d016      	beq.n	8008fd8 <HAL_SPI_TransmitReceive+0x1d4>
 8008faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d113      	bne.n	8008fd8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb4:	881a      	ldrh	r2, [r3, #0]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc0:	1c9a      	adds	r2, r3, #2
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d11c      	bne.n	8009020 <HAL_SPI_TransmitReceive+0x21c>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2246      	movs	r2, #70	@ 0x46
 8008fea:	5a9b      	ldrh	r3, [r3, r2]
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d016      	beq.n	8009020 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68da      	ldr	r2, [r3, #12]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ffc:	b292      	uxth	r2, r2
 8008ffe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009004:	1c9a      	adds	r2, r3, #2
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2246      	movs	r2, #70	@ 0x46
 800900e:	5a9b      	ldrh	r3, [r3, r2]
 8009010:	b29b      	uxth	r3, r3
 8009012:	3b01      	subs	r3, #1
 8009014:	b299      	uxth	r1, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2246      	movs	r2, #70	@ 0x46
 800901a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800901c:	2301      	movs	r3, #1
 800901e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009020:	f7fc fb86 	bl	8005730 <HAL_GetTick>
 8009024:	0002      	movs	r2, r0
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800902c:	429a      	cmp	r2, r3
 800902e:	d80b      	bhi.n	8009048 <HAL_SPI_TransmitReceive+0x244>
 8009030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009032:	3301      	adds	r3, #1
 8009034:	d008      	beq.n	8009048 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8009036:	2323      	movs	r3, #35	@ 0x23
 8009038:	18fb      	adds	r3, r7, r3
 800903a:	2203      	movs	r2, #3
 800903c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	225d      	movs	r2, #93	@ 0x5d
 8009042:	2101      	movs	r1, #1
 8009044:	5499      	strb	r1, [r3, r2]
        goto error;
 8009046:	e0b1      	b.n	80091ac <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800904c:	b29b      	uxth	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d19f      	bne.n	8008f92 <HAL_SPI_TransmitReceive+0x18e>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2246      	movs	r2, #70	@ 0x46
 8009056:	5a9b      	ldrh	r3, [r3, r2]
 8009058:	b29b      	uxth	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d199      	bne.n	8008f92 <HAL_SPI_TransmitReceive+0x18e>
 800905e:	e089      	b.n	8009174 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d005      	beq.n	8009074 <HAL_SPI_TransmitReceive+0x270>
 8009068:	2312      	movs	r3, #18
 800906a:	18fb      	adds	r3, r7, r3
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d000      	beq.n	8009074 <HAL_SPI_TransmitReceive+0x270>
 8009072:	e074      	b.n	800915e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	330c      	adds	r3, #12
 800907e:	7812      	ldrb	r2, [r2, #0]
 8009080:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009090:	b29b      	uxth	r3, r3
 8009092:	3b01      	subs	r3, #1
 8009094:	b29a      	uxth	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800909a:	e060      	b.n	800915e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	2202      	movs	r2, #2
 80090a4:	4013      	ands	r3, r2
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d11c      	bne.n	80090e4 <HAL_SPI_TransmitReceive+0x2e0>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d017      	beq.n	80090e4 <HAL_SPI_TransmitReceive+0x2e0>
 80090b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d114      	bne.n	80090e4 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	330c      	adds	r3, #12
 80090c4:	7812      	ldrb	r2, [r2, #0]
 80090c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	3b01      	subs	r3, #1
 80090da:	b29a      	uxth	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090e0:	2300      	movs	r3, #0
 80090e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	2201      	movs	r2, #1
 80090ec:	4013      	ands	r3, r2
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d11e      	bne.n	8009130 <HAL_SPI_TransmitReceive+0x32c>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2246      	movs	r2, #70	@ 0x46
 80090f6:	5a9b      	ldrh	r3, [r3, r2]
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d018      	beq.n	8009130 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	330c      	adds	r3, #12
 8009104:	001a      	movs	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800910a:	7812      	ldrb	r2, [r2, #0]
 800910c:	b2d2      	uxtb	r2, r2
 800910e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009114:	1c5a      	adds	r2, r3, #1
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2246      	movs	r2, #70	@ 0x46
 800911e:	5a9b      	ldrh	r3, [r3, r2]
 8009120:	b29b      	uxth	r3, r3
 8009122:	3b01      	subs	r3, #1
 8009124:	b299      	uxth	r1, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2246      	movs	r2, #70	@ 0x46
 800912a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800912c:	2301      	movs	r3, #1
 800912e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009130:	f7fc fafe 	bl	8005730 <HAL_GetTick>
 8009134:	0002      	movs	r2, r0
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800913c:	429a      	cmp	r2, r3
 800913e:	d802      	bhi.n	8009146 <HAL_SPI_TransmitReceive+0x342>
 8009140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009142:	3301      	adds	r3, #1
 8009144:	d102      	bne.n	800914c <HAL_SPI_TransmitReceive+0x348>
 8009146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009148:	2b00      	cmp	r3, #0
 800914a:	d108      	bne.n	800915e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800914c:	2323      	movs	r3, #35	@ 0x23
 800914e:	18fb      	adds	r3, r7, r3
 8009150:	2203      	movs	r2, #3
 8009152:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	225d      	movs	r2, #93	@ 0x5d
 8009158:	2101      	movs	r1, #1
 800915a:	5499      	strb	r1, [r3, r2]
        goto error;
 800915c:	e026      	b.n	80091ac <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009162:	b29b      	uxth	r3, r3
 8009164:	2b00      	cmp	r3, #0
 8009166:	d199      	bne.n	800909c <HAL_SPI_TransmitReceive+0x298>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2246      	movs	r2, #70	@ 0x46
 800916c:	5a9b      	ldrh	r3, [r3, r2]
 800916e:	b29b      	uxth	r3, r3
 8009170:	2b00      	cmp	r3, #0
 8009172:	d193      	bne.n	800909c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009174:	69fa      	ldr	r2, [r7, #28]
 8009176:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	0018      	movs	r0, r3
 800917c:	f000 f9b2 	bl	80094e4 <SPI_EndRxTxTransaction>
 8009180:	1e03      	subs	r3, r0, #0
 8009182:	d006      	beq.n	8009192 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8009184:	2323      	movs	r3, #35	@ 0x23
 8009186:	18fb      	adds	r3, r7, r3
 8009188:	2201      	movs	r2, #1
 800918a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2220      	movs	r2, #32
 8009190:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009196:	2b00      	cmp	r3, #0
 8009198:	d004      	beq.n	80091a4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800919a:	2323      	movs	r3, #35	@ 0x23
 800919c:	18fb      	adds	r3, r7, r3
 800919e:	2201      	movs	r2, #1
 80091a0:	701a      	strb	r2, [r3, #0]
 80091a2:	e003      	b.n	80091ac <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	225d      	movs	r2, #93	@ 0x5d
 80091a8:	2101      	movs	r1, #1
 80091aa:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	225c      	movs	r2, #92	@ 0x5c
 80091b0:	2100      	movs	r1, #0
 80091b2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80091b4:	2323      	movs	r3, #35	@ 0x23
 80091b6:	18fb      	adds	r3, r7, r3
 80091b8:	781b      	ldrb	r3, [r3, #0]
}
 80091ba:	0018      	movs	r0, r3
 80091bc:	46bd      	mov	sp, r7
 80091be:	b00a      	add	sp, #40	@ 0x28
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	46c0      	nop			@ (mov r8, r8)
 80091c4:	ffffefff 	.word	0xffffefff

080091c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b088      	sub	sp, #32
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	603b      	str	r3, [r7, #0]
 80091d4:	1dfb      	adds	r3, r7, #7
 80091d6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80091d8:	f7fc faaa 	bl	8005730 <HAL_GetTick>
 80091dc:	0002      	movs	r2, r0
 80091de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e0:	1a9b      	subs	r3, r3, r2
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	18d3      	adds	r3, r2, r3
 80091e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80091e8:	f7fc faa2 	bl	8005730 <HAL_GetTick>
 80091ec:	0003      	movs	r3, r0
 80091ee:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80091f0:	4b3a      	ldr	r3, [pc, #232]	@ (80092dc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	015b      	lsls	r3, r3, #5
 80091f6:	0d1b      	lsrs	r3, r3, #20
 80091f8:	69fa      	ldr	r2, [r7, #28]
 80091fa:	4353      	muls	r3, r2
 80091fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091fe:	e058      	b.n	80092b2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	3301      	adds	r3, #1
 8009204:	d055      	beq.n	80092b2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009206:	f7fc fa93 	bl	8005730 <HAL_GetTick>
 800920a:	0002      	movs	r2, r0
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	69fa      	ldr	r2, [r7, #28]
 8009212:	429a      	cmp	r2, r3
 8009214:	d902      	bls.n	800921c <SPI_WaitFlagStateUntilTimeout+0x54>
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d142      	bne.n	80092a2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	21e0      	movs	r1, #224	@ 0xe0
 8009228:	438a      	bics	r2, r1
 800922a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	2382      	movs	r3, #130	@ 0x82
 8009232:	005b      	lsls	r3, r3, #1
 8009234:	429a      	cmp	r2, r3
 8009236:	d113      	bne.n	8009260 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	689a      	ldr	r2, [r3, #8]
 800923c:	2380      	movs	r3, #128	@ 0x80
 800923e:	021b      	lsls	r3, r3, #8
 8009240:	429a      	cmp	r2, r3
 8009242:	d005      	beq.n	8009250 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	2380      	movs	r3, #128	@ 0x80
 800924a:	00db      	lsls	r3, r3, #3
 800924c:	429a      	cmp	r2, r3
 800924e:	d107      	bne.n	8009260 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2140      	movs	r1, #64	@ 0x40
 800925c:	438a      	bics	r2, r1
 800925e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009264:	2380      	movs	r3, #128	@ 0x80
 8009266:	019b      	lsls	r3, r3, #6
 8009268:	429a      	cmp	r2, r3
 800926a:	d110      	bne.n	800928e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	491a      	ldr	r1, [pc, #104]	@ (80092e0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009278:	400a      	ands	r2, r1
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2180      	movs	r1, #128	@ 0x80
 8009288:	0189      	lsls	r1, r1, #6
 800928a:	430a      	orrs	r2, r1
 800928c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	225d      	movs	r2, #93	@ 0x5d
 8009292:	2101      	movs	r1, #1
 8009294:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	225c      	movs	r2, #92	@ 0x5c
 800929a:	2100      	movs	r1, #0
 800929c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e017      	b.n	80092d2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d101      	bne.n	80092ac <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80092a8:	2300      	movs	r3, #0
 80092aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	3b01      	subs	r3, #1
 80092b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	4013      	ands	r3, r2
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	425a      	negs	r2, r3
 80092c2:	4153      	adcs	r3, r2
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	001a      	movs	r2, r3
 80092c8:	1dfb      	adds	r3, r7, #7
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d197      	bne.n	8009200 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	0018      	movs	r0, r3
 80092d4:	46bd      	mov	sp, r7
 80092d6:	b008      	add	sp, #32
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	46c0      	nop			@ (mov r8, r8)
 80092dc:	20000010 	.word	0x20000010
 80092e0:	ffffdfff 	.word	0xffffdfff

080092e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b08a      	sub	sp, #40	@ 0x28
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
 80092f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80092f2:	2317      	movs	r3, #23
 80092f4:	18fb      	adds	r3, r7, r3
 80092f6:	2200      	movs	r2, #0
 80092f8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80092fa:	f7fc fa19 	bl	8005730 <HAL_GetTick>
 80092fe:	0002      	movs	r2, r0
 8009300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	18d3      	adds	r3, r2, r3
 8009308:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800930a:	f7fc fa11 	bl	8005730 <HAL_GetTick>
 800930e:	0003      	movs	r3, r0
 8009310:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	330c      	adds	r3, #12
 8009318:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800931a:	4b41      	ldr	r3, [pc, #260]	@ (8009420 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	0013      	movs	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	189b      	adds	r3, r3, r2
 8009324:	00da      	lsls	r2, r3, #3
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	0d1b      	lsrs	r3, r3, #20
 800932a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800932c:	4353      	muls	r3, r2
 800932e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009330:	e068      	b.n	8009404 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	23c0      	movs	r3, #192	@ 0xc0
 8009336:	00db      	lsls	r3, r3, #3
 8009338:	429a      	cmp	r2, r3
 800933a:	d10a      	bne.n	8009352 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d107      	bne.n	8009352 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	b2da      	uxtb	r2, r3
 8009348:	2117      	movs	r1, #23
 800934a:	187b      	adds	r3, r7, r1
 800934c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800934e:	187b      	adds	r3, r7, r1
 8009350:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	3301      	adds	r3, #1
 8009356:	d055      	beq.n	8009404 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009358:	f7fc f9ea 	bl	8005730 <HAL_GetTick>
 800935c:	0002      	movs	r2, r0
 800935e:	6a3b      	ldr	r3, [r7, #32]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009364:	429a      	cmp	r2, r3
 8009366:	d902      	bls.n	800936e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8009368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936a:	2b00      	cmp	r3, #0
 800936c:	d142      	bne.n	80093f4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	21e0      	movs	r1, #224	@ 0xe0
 800937a:	438a      	bics	r2, r1
 800937c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	685a      	ldr	r2, [r3, #4]
 8009382:	2382      	movs	r3, #130	@ 0x82
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	429a      	cmp	r2, r3
 8009388:	d113      	bne.n	80093b2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	689a      	ldr	r2, [r3, #8]
 800938e:	2380      	movs	r3, #128	@ 0x80
 8009390:	021b      	lsls	r3, r3, #8
 8009392:	429a      	cmp	r2, r3
 8009394:	d005      	beq.n	80093a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	689a      	ldr	r2, [r3, #8]
 800939a:	2380      	movs	r3, #128	@ 0x80
 800939c:	00db      	lsls	r3, r3, #3
 800939e:	429a      	cmp	r2, r3
 80093a0:	d107      	bne.n	80093b2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2140      	movs	r1, #64	@ 0x40
 80093ae:	438a      	bics	r2, r1
 80093b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80093b6:	2380      	movs	r3, #128	@ 0x80
 80093b8:	019b      	lsls	r3, r3, #6
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d110      	bne.n	80093e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4916      	ldr	r1, [pc, #88]	@ (8009424 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80093ca:	400a      	ands	r2, r1
 80093cc:	601a      	str	r2, [r3, #0]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2180      	movs	r1, #128	@ 0x80
 80093da:	0189      	lsls	r1, r1, #6
 80093dc:	430a      	orrs	r2, r1
 80093de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	225d      	movs	r2, #93	@ 0x5d
 80093e4:	2101      	movs	r1, #1
 80093e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	225c      	movs	r2, #92	@ 0x5c
 80093ec:	2100      	movs	r1, #0
 80093ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e010      	b.n	8009416 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80093fa:	2300      	movs	r3, #0
 80093fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	3b01      	subs	r3, #1
 8009402:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	4013      	ands	r3, r2
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	429a      	cmp	r2, r3
 8009412:	d18e      	bne.n	8009332 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	0018      	movs	r0, r3
 8009418:	46bd      	mov	sp, r7
 800941a:	b00a      	add	sp, #40	@ 0x28
 800941c:	bd80      	pop	{r7, pc}
 800941e:	46c0      	nop			@ (mov r8, r8)
 8009420:	20000010 	.word	0x20000010
 8009424:	ffffdfff 	.word	0xffffdfff

08009428 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af02      	add	r7, sp, #8
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	2382      	movs	r3, #130	@ 0x82
 800943a:	005b      	lsls	r3, r3, #1
 800943c:	429a      	cmp	r2, r3
 800943e:	d113      	bne.n	8009468 <SPI_EndRxTransaction+0x40>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	2380      	movs	r3, #128	@ 0x80
 8009446:	021b      	lsls	r3, r3, #8
 8009448:	429a      	cmp	r2, r3
 800944a:	d005      	beq.n	8009458 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	2380      	movs	r3, #128	@ 0x80
 8009452:	00db      	lsls	r3, r3, #3
 8009454:	429a      	cmp	r2, r3
 8009456:	d107      	bne.n	8009468 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2140      	movs	r1, #64	@ 0x40
 8009464:	438a      	bics	r2, r1
 8009466:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	0013      	movs	r3, r2
 8009472:	2200      	movs	r2, #0
 8009474:	2180      	movs	r1, #128	@ 0x80
 8009476:	f7ff fea7 	bl	80091c8 <SPI_WaitFlagStateUntilTimeout>
 800947a:	1e03      	subs	r3, r0, #0
 800947c:	d007      	beq.n	800948e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009482:	2220      	movs	r2, #32
 8009484:	431a      	orrs	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e026      	b.n	80094dc <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	2382      	movs	r3, #130	@ 0x82
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	429a      	cmp	r2, r3
 8009498:	d11f      	bne.n	80094da <SPI_EndRxTransaction+0xb2>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	689a      	ldr	r2, [r3, #8]
 800949e:	2380      	movs	r3, #128	@ 0x80
 80094a0:	021b      	lsls	r3, r3, #8
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d005      	beq.n	80094b2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	689a      	ldr	r2, [r3, #8]
 80094aa:	2380      	movs	r3, #128	@ 0x80
 80094ac:	00db      	lsls	r3, r3, #3
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d113      	bne.n	80094da <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	23c0      	movs	r3, #192	@ 0xc0
 80094b6:	00d9      	lsls	r1, r3, #3
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	0013      	movs	r3, r2
 80094c0:	2200      	movs	r2, #0
 80094c2:	f7ff ff0f 	bl	80092e4 <SPI_WaitFifoStateUntilTimeout>
 80094c6:	1e03      	subs	r3, r0, #0
 80094c8:	d007      	beq.n	80094da <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094ce:	2220      	movs	r2, #32
 80094d0:	431a      	orrs	r2, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e000      	b.n	80094dc <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	0018      	movs	r0, r3
 80094de:	46bd      	mov	sp, r7
 80094e0:	b004      	add	sp, #16
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af02      	add	r7, sp, #8
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	23c0      	movs	r3, #192	@ 0xc0
 80094f4:	0159      	lsls	r1, r3, #5
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	0013      	movs	r3, r2
 80094fe:	2200      	movs	r2, #0
 8009500:	f7ff fef0 	bl	80092e4 <SPI_WaitFifoStateUntilTimeout>
 8009504:	1e03      	subs	r3, r0, #0
 8009506:	d007      	beq.n	8009518 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800950c:	2220      	movs	r2, #32
 800950e:	431a      	orrs	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009514:	2303      	movs	r3, #3
 8009516:	e027      	b.n	8009568 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	9300      	str	r3, [sp, #0]
 8009520:	0013      	movs	r3, r2
 8009522:	2200      	movs	r2, #0
 8009524:	2180      	movs	r1, #128	@ 0x80
 8009526:	f7ff fe4f 	bl	80091c8 <SPI_WaitFlagStateUntilTimeout>
 800952a:	1e03      	subs	r3, r0, #0
 800952c:	d007      	beq.n	800953e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009532:	2220      	movs	r2, #32
 8009534:	431a      	orrs	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e014      	b.n	8009568 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	23c0      	movs	r3, #192	@ 0xc0
 8009542:	00d9      	lsls	r1, r3, #3
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	0013      	movs	r3, r2
 800954c:	2200      	movs	r2, #0
 800954e:	f7ff fec9 	bl	80092e4 <SPI_WaitFifoStateUntilTimeout>
 8009552:	1e03      	subs	r3, r0, #0
 8009554:	d007      	beq.n	8009566 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800955a:	2220      	movs	r2, #32
 800955c:	431a      	orrs	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e000      	b.n	8009568 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	0018      	movs	r0, r3
 800956a:	46bd      	mov	sp, r7
 800956c:	b004      	add	sp, #16
 800956e:	bd80      	pop	{r7, pc}

08009570 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e04a      	b.n	8009618 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	223d      	movs	r2, #61	@ 0x3d
 8009586:	5c9b      	ldrb	r3, [r3, r2]
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	d107      	bne.n	800959e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	223c      	movs	r2, #60	@ 0x3c
 8009592:	2100      	movs	r1, #0
 8009594:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	0018      	movs	r0, r3
 800959a:	f7fb fe13 	bl	80051c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	223d      	movs	r2, #61	@ 0x3d
 80095a2:	2102      	movs	r1, #2
 80095a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	3304      	adds	r3, #4
 80095ae:	0019      	movs	r1, r3
 80095b0:	0010      	movs	r0, r2
 80095b2:	f000 f9b3 	bl	800991c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2248      	movs	r2, #72	@ 0x48
 80095ba:	2101      	movs	r1, #1
 80095bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	223e      	movs	r2, #62	@ 0x3e
 80095c2:	2101      	movs	r1, #1
 80095c4:	5499      	strb	r1, [r3, r2]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	223f      	movs	r2, #63	@ 0x3f
 80095ca:	2101      	movs	r1, #1
 80095cc:	5499      	strb	r1, [r3, r2]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2240      	movs	r2, #64	@ 0x40
 80095d2:	2101      	movs	r1, #1
 80095d4:	5499      	strb	r1, [r3, r2]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2241      	movs	r2, #65	@ 0x41
 80095da:	2101      	movs	r1, #1
 80095dc:	5499      	strb	r1, [r3, r2]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2242      	movs	r2, #66	@ 0x42
 80095e2:	2101      	movs	r1, #1
 80095e4:	5499      	strb	r1, [r3, r2]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2243      	movs	r2, #67	@ 0x43
 80095ea:	2101      	movs	r1, #1
 80095ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2244      	movs	r2, #68	@ 0x44
 80095f2:	2101      	movs	r1, #1
 80095f4:	5499      	strb	r1, [r3, r2]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2245      	movs	r2, #69	@ 0x45
 80095fa:	2101      	movs	r1, #1
 80095fc:	5499      	strb	r1, [r3, r2]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2246      	movs	r2, #70	@ 0x46
 8009602:	2101      	movs	r1, #1
 8009604:	5499      	strb	r1, [r3, r2]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2247      	movs	r2, #71	@ 0x47
 800960a:	2101      	movs	r1, #1
 800960c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	223d      	movs	r2, #61	@ 0x3d
 8009612:	2101      	movs	r1, #1
 8009614:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	0018      	movs	r0, r3
 800961a:	46bd      	mov	sp, r7
 800961c:	b002      	add	sp, #8
 800961e:	bd80      	pop	{r7, pc}

08009620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	223d      	movs	r2, #61	@ 0x3d
 800962c:	5c9b      	ldrb	r3, [r3, r2]
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b01      	cmp	r3, #1
 8009632:	d001      	beq.n	8009638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e03c      	b.n	80096b2 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	223d      	movs	r2, #61	@ 0x3d
 800963c:	2102      	movs	r1, #2
 800963e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68da      	ldr	r2, [r3, #12]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2101      	movs	r1, #1
 800964c:	430a      	orrs	r2, r1
 800964e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a19      	ldr	r2, [pc, #100]	@ (80096bc <HAL_TIM_Base_Start_IT+0x9c>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d009      	beq.n	800966e <HAL_TIM_Base_Start_IT+0x4e>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a18      	ldr	r2, [pc, #96]	@ (80096c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d004      	beq.n	800966e <HAL_TIM_Base_Start_IT+0x4e>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a16      	ldr	r2, [pc, #88]	@ (80096c4 <HAL_TIM_Base_Start_IT+0xa4>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d116      	bne.n	800969c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	4a14      	ldr	r2, [pc, #80]	@ (80096c8 <HAL_TIM_Base_Start_IT+0xa8>)
 8009676:	4013      	ands	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2b06      	cmp	r3, #6
 800967e:	d016      	beq.n	80096ae <HAL_TIM_Base_Start_IT+0x8e>
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	2380      	movs	r3, #128	@ 0x80
 8009684:	025b      	lsls	r3, r3, #9
 8009686:	429a      	cmp	r2, r3
 8009688:	d011      	beq.n	80096ae <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2101      	movs	r1, #1
 8009696:	430a      	orrs	r2, r1
 8009698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800969a:	e008      	b.n	80096ae <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2101      	movs	r1, #1
 80096a8:	430a      	orrs	r2, r1
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	e000      	b.n	80096b0 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ae:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	0018      	movs	r0, r3
 80096b4:	46bd      	mov	sp, r7
 80096b6:	b004      	add	sp, #16
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	46c0      	nop			@ (mov r8, r8)
 80096bc:	40012c00 	.word	0x40012c00
 80096c0:	40000400 	.word	0x40000400
 80096c4:	40014000 	.word	0x40014000
 80096c8:	00010007 	.word	0x00010007

080096cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	2202      	movs	r2, #2
 80096e8:	4013      	ands	r3, r2
 80096ea:	d021      	beq.n	8009730 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2202      	movs	r2, #2
 80096f0:	4013      	ands	r3, r2
 80096f2:	d01d      	beq.n	8009730 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2203      	movs	r2, #3
 80096fa:	4252      	negs	r2, r2
 80096fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	2203      	movs	r2, #3
 800970c:	4013      	ands	r3, r2
 800970e:	d004      	beq.n	800971a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	0018      	movs	r0, r3
 8009714:	f000 f8ea 	bl	80098ec <HAL_TIM_IC_CaptureCallback>
 8009718:	e007      	b.n	800972a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	0018      	movs	r0, r3
 800971e:	f000 f8dd 	bl	80098dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	0018      	movs	r0, r3
 8009726:	f000 f8e9 	bl	80098fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2204      	movs	r2, #4
 8009734:	4013      	ands	r3, r2
 8009736:	d022      	beq.n	800977e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2204      	movs	r2, #4
 800973c:	4013      	ands	r3, r2
 800973e:	d01e      	beq.n	800977e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2205      	movs	r2, #5
 8009746:	4252      	negs	r2, r2
 8009748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2202      	movs	r2, #2
 800974e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	699a      	ldr	r2, [r3, #24]
 8009756:	23c0      	movs	r3, #192	@ 0xc0
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4013      	ands	r3, r2
 800975c:	d004      	beq.n	8009768 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	0018      	movs	r0, r3
 8009762:	f000 f8c3 	bl	80098ec <HAL_TIM_IC_CaptureCallback>
 8009766:	e007      	b.n	8009778 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	0018      	movs	r0, r3
 800976c:	f000 f8b6 	bl	80098dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	0018      	movs	r0, r3
 8009774:	f000 f8c2 	bl	80098fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2208      	movs	r2, #8
 8009782:	4013      	ands	r3, r2
 8009784:	d021      	beq.n	80097ca <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2208      	movs	r2, #8
 800978a:	4013      	ands	r3, r2
 800978c:	d01d      	beq.n	80097ca <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2209      	movs	r2, #9
 8009794:	4252      	negs	r2, r2
 8009796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2204      	movs	r2, #4
 800979c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	69db      	ldr	r3, [r3, #28]
 80097a4:	2203      	movs	r2, #3
 80097a6:	4013      	ands	r3, r2
 80097a8:	d004      	beq.n	80097b4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	0018      	movs	r0, r3
 80097ae:	f000 f89d 	bl	80098ec <HAL_TIM_IC_CaptureCallback>
 80097b2:	e007      	b.n	80097c4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	0018      	movs	r0, r3
 80097b8:	f000 f890 	bl	80098dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	0018      	movs	r0, r3
 80097c0:	f000 f89c 	bl	80098fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	2210      	movs	r2, #16
 80097ce:	4013      	ands	r3, r2
 80097d0:	d022      	beq.n	8009818 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2210      	movs	r2, #16
 80097d6:	4013      	ands	r3, r2
 80097d8:	d01e      	beq.n	8009818 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2211      	movs	r2, #17
 80097e0:	4252      	negs	r2, r2
 80097e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2208      	movs	r2, #8
 80097e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	69da      	ldr	r2, [r3, #28]
 80097f0:	23c0      	movs	r3, #192	@ 0xc0
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4013      	ands	r3, r2
 80097f6:	d004      	beq.n	8009802 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	0018      	movs	r0, r3
 80097fc:	f000 f876 	bl	80098ec <HAL_TIM_IC_CaptureCallback>
 8009800:	e007      	b.n	8009812 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	0018      	movs	r0, r3
 8009806:	f000 f869 	bl	80098dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	0018      	movs	r0, r3
 800980e:	f000 f875 	bl	80098fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2201      	movs	r2, #1
 800981c:	4013      	ands	r3, r2
 800981e:	d00c      	beq.n	800983a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2201      	movs	r2, #1
 8009824:	4013      	ands	r3, r2
 8009826:	d008      	beq.n	800983a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2202      	movs	r2, #2
 800982e:	4252      	negs	r2, r2
 8009830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	0018      	movs	r0, r3
 8009836:	f7f9 ff01 	bl	800363c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2280      	movs	r2, #128	@ 0x80
 800983e:	4013      	ands	r3, r2
 8009840:	d104      	bne.n	800984c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	2380      	movs	r3, #128	@ 0x80
 8009846:	019b      	lsls	r3, r3, #6
 8009848:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800984a:	d00b      	beq.n	8009864 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2280      	movs	r2, #128	@ 0x80
 8009850:	4013      	ands	r3, r2
 8009852:	d007      	beq.n	8009864 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a1e      	ldr	r2, [pc, #120]	@ (80098d4 <HAL_TIM_IRQHandler+0x208>)
 800985a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	0018      	movs	r0, r3
 8009860:	f000 f8e8 	bl	8009a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	2380      	movs	r3, #128	@ 0x80
 8009868:	005b      	lsls	r3, r3, #1
 800986a:	4013      	ands	r3, r2
 800986c:	d00b      	beq.n	8009886 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2280      	movs	r2, #128	@ 0x80
 8009872:	4013      	ands	r3, r2
 8009874:	d007      	beq.n	8009886 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a17      	ldr	r2, [pc, #92]	@ (80098d8 <HAL_TIM_IRQHandler+0x20c>)
 800987c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	0018      	movs	r0, r3
 8009882:	f000 f8df 	bl	8009a44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	2240      	movs	r2, #64	@ 0x40
 800988a:	4013      	ands	r3, r2
 800988c:	d00c      	beq.n	80098a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2240      	movs	r2, #64	@ 0x40
 8009892:	4013      	ands	r3, r2
 8009894:	d008      	beq.n	80098a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2241      	movs	r2, #65	@ 0x41
 800989c:	4252      	negs	r2, r2
 800989e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	0018      	movs	r0, r3
 80098a4:	f000 f832 	bl	800990c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	2220      	movs	r2, #32
 80098ac:	4013      	ands	r3, r2
 80098ae:	d00c      	beq.n	80098ca <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2220      	movs	r2, #32
 80098b4:	4013      	ands	r3, r2
 80098b6:	d008      	beq.n	80098ca <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2221      	movs	r2, #33	@ 0x21
 80098be:	4252      	negs	r2, r2
 80098c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	0018      	movs	r0, r3
 80098c6:	f000 f8ad 	bl	8009a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098ca:	46c0      	nop			@ (mov r8, r8)
 80098cc:	46bd      	mov	sp, r7
 80098ce:	b004      	add	sp, #16
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	46c0      	nop			@ (mov r8, r8)
 80098d4:	ffffdf7f 	.word	0xffffdf7f
 80098d8:	fffffeff 	.word	0xfffffeff

080098dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098e4:	46c0      	nop			@ (mov r8, r8)
 80098e6:	46bd      	mov	sp, r7
 80098e8:	b002      	add	sp, #8
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098f4:	46c0      	nop			@ (mov r8, r8)
 80098f6:	46bd      	mov	sp, r7
 80098f8:	b002      	add	sp, #8
 80098fa:	bd80      	pop	{r7, pc}

080098fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009904:	46c0      	nop			@ (mov r8, r8)
 8009906:	46bd      	mov	sp, r7
 8009908:	b002      	add	sp, #8
 800990a:	bd80      	pop	{r7, pc}

0800990c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009914:	46c0      	nop			@ (mov r8, r8)
 8009916:	46bd      	mov	sp, r7
 8009918:	b002      	add	sp, #8
 800991a:	bd80      	pop	{r7, pc}

0800991c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a36      	ldr	r2, [pc, #216]	@ (8009a08 <TIM_Base_SetConfig+0xec>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d003      	beq.n	800993c <TIM_Base_SetConfig+0x20>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a35      	ldr	r2, [pc, #212]	@ (8009a0c <TIM_Base_SetConfig+0xf0>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d108      	bne.n	800994e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2270      	movs	r2, #112	@ 0x70
 8009940:	4393      	bics	r3, r2
 8009942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	4313      	orrs	r3, r2
 800994c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a2d      	ldr	r2, [pc, #180]	@ (8009a08 <TIM_Base_SetConfig+0xec>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d013      	beq.n	800997e <TIM_Base_SetConfig+0x62>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a2c      	ldr	r2, [pc, #176]	@ (8009a0c <TIM_Base_SetConfig+0xf0>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d00f      	beq.n	800997e <TIM_Base_SetConfig+0x62>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4a2b      	ldr	r2, [pc, #172]	@ (8009a10 <TIM_Base_SetConfig+0xf4>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d00b      	beq.n	800997e <TIM_Base_SetConfig+0x62>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a2a      	ldr	r2, [pc, #168]	@ (8009a14 <TIM_Base_SetConfig+0xf8>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d007      	beq.n	800997e <TIM_Base_SetConfig+0x62>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a29      	ldr	r2, [pc, #164]	@ (8009a18 <TIM_Base_SetConfig+0xfc>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d003      	beq.n	800997e <TIM_Base_SetConfig+0x62>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a28      	ldr	r2, [pc, #160]	@ (8009a1c <TIM_Base_SetConfig+0x100>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d108      	bne.n	8009990 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	4a27      	ldr	r2, [pc, #156]	@ (8009a20 <TIM_Base_SetConfig+0x104>)
 8009982:	4013      	ands	r3, r2
 8009984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	4313      	orrs	r3, r2
 800998e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2280      	movs	r2, #128	@ 0x80
 8009994:	4393      	bics	r3, r2
 8009996:	001a      	movs	r2, r3
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	4313      	orrs	r3, r2
 800999e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	689a      	ldr	r2, [r3, #8]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a13      	ldr	r2, [pc, #76]	@ (8009a08 <TIM_Base_SetConfig+0xec>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d00b      	beq.n	80099d6 <TIM_Base_SetConfig+0xba>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a14      	ldr	r2, [pc, #80]	@ (8009a14 <TIM_Base_SetConfig+0xf8>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d007      	beq.n	80099d6 <TIM_Base_SetConfig+0xba>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a13      	ldr	r2, [pc, #76]	@ (8009a18 <TIM_Base_SetConfig+0xfc>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d003      	beq.n	80099d6 <TIM_Base_SetConfig+0xba>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a12      	ldr	r2, [pc, #72]	@ (8009a1c <TIM_Base_SetConfig+0x100>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d103      	bne.n	80099de <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	691a      	ldr	r2, [r3, #16]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2201      	movs	r2, #1
 80099e2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	2201      	movs	r2, #1
 80099ea:	4013      	ands	r3, r2
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d106      	bne.n	80099fe <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	2201      	movs	r2, #1
 80099f6:	4393      	bics	r3, r2
 80099f8:	001a      	movs	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	611a      	str	r2, [r3, #16]
  }
}
 80099fe:	46c0      	nop			@ (mov r8, r8)
 8009a00:	46bd      	mov	sp, r7
 8009a02:	b004      	add	sp, #16
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	46c0      	nop			@ (mov r8, r8)
 8009a08:	40012c00 	.word	0x40012c00
 8009a0c:	40000400 	.word	0x40000400
 8009a10:	40002000 	.word	0x40002000
 8009a14:	40014000 	.word	0x40014000
 8009a18:	40014400 	.word	0x40014400
 8009a1c:	40014800 	.word	0x40014800
 8009a20:	fffffcff 	.word	0xfffffcff

08009a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a2c:	46c0      	nop			@ (mov r8, r8)
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	b002      	add	sp, #8
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a3c:	46c0      	nop			@ (mov r8, r8)
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	b002      	add	sp, #8
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a4c:	46c0      	nop			@ (mov r8, r8)
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	b002      	add	sp, #8
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e046      	b.n	8009af4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2288      	movs	r2, #136	@ 0x88
 8009a6a:	589b      	ldr	r3, [r3, r2]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d107      	bne.n	8009a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2284      	movs	r2, #132	@ 0x84
 8009a74:	2100      	movs	r1, #0
 8009a76:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	0018      	movs	r0, r3
 8009a7c:	f7fb fbca 	bl	8005214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2288      	movs	r2, #136	@ 0x88
 8009a84:	2124      	movs	r1, #36	@ 0x24
 8009a86:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2101      	movs	r1, #1
 8009a94:	438a      	bics	r2, r1
 8009a96:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d003      	beq.n	8009aa8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	0018      	movs	r0, r3
 8009aa4:	f000 fb5a 	bl	800a15c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	0018      	movs	r0, r3
 8009aac:	f000 f9b2 	bl	8009e14 <UART_SetConfig>
 8009ab0:	0003      	movs	r3, r0
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d101      	bne.n	8009aba <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e01c      	b.n	8009af4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	685a      	ldr	r2, [r3, #4]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	490d      	ldr	r1, [pc, #52]	@ (8009afc <HAL_UART_Init+0xa8>)
 8009ac6:	400a      	ands	r2, r1
 8009ac8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	689a      	ldr	r2, [r3, #8]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	212a      	movs	r1, #42	@ 0x2a
 8009ad6:	438a      	bics	r2, r1
 8009ad8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	430a      	orrs	r2, r1
 8009ae8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	0018      	movs	r0, r3
 8009aee:	f000 fbe9 	bl	800a2c4 <UART_CheckIdleState>
 8009af2:	0003      	movs	r3, r0
}
 8009af4:	0018      	movs	r0, r3
 8009af6:	46bd      	mov	sp, r7
 8009af8:	b002      	add	sp, #8
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	ffffb7ff 	.word	0xffffb7ff

08009b00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b08a      	sub	sp, #40	@ 0x28
 8009b04:	af02      	add	r7, sp, #8
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	603b      	str	r3, [r7, #0]
 8009b0c:	1dbb      	adds	r3, r7, #6
 8009b0e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2288      	movs	r2, #136	@ 0x88
 8009b14:	589b      	ldr	r3, [r3, r2]
 8009b16:	2b20      	cmp	r3, #32
 8009b18:	d000      	beq.n	8009b1c <HAL_UART_Transmit+0x1c>
 8009b1a:	e090      	b.n	8009c3e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d003      	beq.n	8009b2a <HAL_UART_Transmit+0x2a>
 8009b22:	1dbb      	adds	r3, r7, #6
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d101      	bne.n	8009b2e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e088      	b.n	8009c40 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	689a      	ldr	r2, [r3, #8]
 8009b32:	2380      	movs	r3, #128	@ 0x80
 8009b34:	015b      	lsls	r3, r3, #5
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d109      	bne.n	8009b4e <HAL_UART_Transmit+0x4e>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d105      	bne.n	8009b4e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	2201      	movs	r2, #1
 8009b46:	4013      	ands	r3, r2
 8009b48:	d001      	beq.n	8009b4e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e078      	b.n	8009c40 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2290      	movs	r2, #144	@ 0x90
 8009b52:	2100      	movs	r1, #0
 8009b54:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2288      	movs	r2, #136	@ 0x88
 8009b5a:	2121      	movs	r1, #33	@ 0x21
 8009b5c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b5e:	f7fb fde7 	bl	8005730 <HAL_GetTick>
 8009b62:	0003      	movs	r3, r0
 8009b64:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	1dba      	adds	r2, r7, #6
 8009b6a:	2154      	movs	r1, #84	@ 0x54
 8009b6c:	8812      	ldrh	r2, [r2, #0]
 8009b6e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	1dba      	adds	r2, r7, #6
 8009b74:	2156      	movs	r1, #86	@ 0x56
 8009b76:	8812      	ldrh	r2, [r2, #0]
 8009b78:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	689a      	ldr	r2, [r3, #8]
 8009b7e:	2380      	movs	r3, #128	@ 0x80
 8009b80:	015b      	lsls	r3, r3, #5
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d108      	bne.n	8009b98 <HAL_UART_Transmit+0x98>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d104      	bne.n	8009b98 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	61bb      	str	r3, [r7, #24]
 8009b96:	e003      	b.n	8009ba0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009ba0:	e030      	b.n	8009c04 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	9300      	str	r3, [sp, #0]
 8009baa:	0013      	movs	r3, r2
 8009bac:	2200      	movs	r2, #0
 8009bae:	2180      	movs	r1, #128	@ 0x80
 8009bb0:	f000 fc32 	bl	800a418 <UART_WaitOnFlagUntilTimeout>
 8009bb4:	1e03      	subs	r3, r0, #0
 8009bb6:	d005      	beq.n	8009bc4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2288      	movs	r2, #136	@ 0x88
 8009bbc:	2120      	movs	r1, #32
 8009bbe:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e03d      	b.n	8009c40 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10b      	bne.n	8009be2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	001a      	movs	r2, r3
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	05d2      	lsls	r2, r2, #23
 8009bd6:	0dd2      	lsrs	r2, r2, #23
 8009bd8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	3302      	adds	r3, #2
 8009bde:	61bb      	str	r3, [r7, #24]
 8009be0:	e007      	b.n	8009bf2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	781a      	ldrb	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2256      	movs	r2, #86	@ 0x56
 8009bf6:	5a9b      	ldrh	r3, [r3, r2]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	b299      	uxth	r1, r3
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2256      	movs	r2, #86	@ 0x56
 8009c02:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2256      	movs	r2, #86	@ 0x56
 8009c08:	5a9b      	ldrh	r3, [r3, r2]
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1c8      	bne.n	8009ba2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	0013      	movs	r3, r2
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	2140      	movs	r1, #64	@ 0x40
 8009c1e:	f000 fbfb 	bl	800a418 <UART_WaitOnFlagUntilTimeout>
 8009c22:	1e03      	subs	r3, r0, #0
 8009c24:	d005      	beq.n	8009c32 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2288      	movs	r2, #136	@ 0x88
 8009c2a:	2120      	movs	r1, #32
 8009c2c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	e006      	b.n	8009c40 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2288      	movs	r2, #136	@ 0x88
 8009c36:	2120      	movs	r1, #32
 8009c38:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	e000      	b.n	8009c40 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8009c3e:	2302      	movs	r3, #2
  }
}
 8009c40:	0018      	movs	r0, r3
 8009c42:	46bd      	mov	sp, r7
 8009c44:	b008      	add	sp, #32
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08a      	sub	sp, #40	@ 0x28
 8009c4c:	af02      	add	r7, sp, #8
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	603b      	str	r3, [r7, #0]
 8009c54:	1dbb      	adds	r3, r7, #6
 8009c56:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	228c      	movs	r2, #140	@ 0x8c
 8009c5c:	589b      	ldr	r3, [r3, r2]
 8009c5e:	2b20      	cmp	r3, #32
 8009c60:	d000      	beq.n	8009c64 <HAL_UART_Receive+0x1c>
 8009c62:	e0d0      	b.n	8009e06 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d003      	beq.n	8009c72 <HAL_UART_Receive+0x2a>
 8009c6a:	1dbb      	adds	r3, r7, #6
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d101      	bne.n	8009c76 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	e0c8      	b.n	8009e08 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	689a      	ldr	r2, [r3, #8]
 8009c7a:	2380      	movs	r3, #128	@ 0x80
 8009c7c:	015b      	lsls	r3, r3, #5
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d109      	bne.n	8009c96 <HAL_UART_Receive+0x4e>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d105      	bne.n	8009c96 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	4013      	ands	r3, r2
 8009c90:	d001      	beq.n	8009c96 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e0b8      	b.n	8009e08 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2290      	movs	r2, #144	@ 0x90
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	228c      	movs	r2, #140	@ 0x8c
 8009ca2:	2122      	movs	r1, #34	@ 0x22
 8009ca4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cac:	f7fb fd40 	bl	8005730 <HAL_GetTick>
 8009cb0:	0003      	movs	r3, r0
 8009cb2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	1dba      	adds	r2, r7, #6
 8009cb8:	215c      	movs	r1, #92	@ 0x5c
 8009cba:	8812      	ldrh	r2, [r2, #0]
 8009cbc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	1dba      	adds	r2, r7, #6
 8009cc2:	215e      	movs	r1, #94	@ 0x5e
 8009cc4:	8812      	ldrh	r2, [r2, #0]
 8009cc6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	689a      	ldr	r2, [r3, #8]
 8009ccc:	2380      	movs	r3, #128	@ 0x80
 8009cce:	015b      	lsls	r3, r3, #5
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d10d      	bne.n	8009cf0 <HAL_UART_Receive+0xa8>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d104      	bne.n	8009ce6 <HAL_UART_Receive+0x9e>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2260      	movs	r2, #96	@ 0x60
 8009ce0:	494b      	ldr	r1, [pc, #300]	@ (8009e10 <HAL_UART_Receive+0x1c8>)
 8009ce2:	5299      	strh	r1, [r3, r2]
 8009ce4:	e02e      	b.n	8009d44 <HAL_UART_Receive+0xfc>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2260      	movs	r2, #96	@ 0x60
 8009cea:	21ff      	movs	r1, #255	@ 0xff
 8009cec:	5299      	strh	r1, [r3, r2]
 8009cee:	e029      	b.n	8009d44 <HAL_UART_Receive+0xfc>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10d      	bne.n	8009d14 <HAL_UART_Receive+0xcc>
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d104      	bne.n	8009d0a <HAL_UART_Receive+0xc2>
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2260      	movs	r2, #96	@ 0x60
 8009d04:	21ff      	movs	r1, #255	@ 0xff
 8009d06:	5299      	strh	r1, [r3, r2]
 8009d08:	e01c      	b.n	8009d44 <HAL_UART_Receive+0xfc>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2260      	movs	r2, #96	@ 0x60
 8009d0e:	217f      	movs	r1, #127	@ 0x7f
 8009d10:	5299      	strh	r1, [r3, r2]
 8009d12:	e017      	b.n	8009d44 <HAL_UART_Receive+0xfc>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	689a      	ldr	r2, [r3, #8]
 8009d18:	2380      	movs	r3, #128	@ 0x80
 8009d1a:	055b      	lsls	r3, r3, #21
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d10d      	bne.n	8009d3c <HAL_UART_Receive+0xf4>
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d104      	bne.n	8009d32 <HAL_UART_Receive+0xea>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2260      	movs	r2, #96	@ 0x60
 8009d2c:	217f      	movs	r1, #127	@ 0x7f
 8009d2e:	5299      	strh	r1, [r3, r2]
 8009d30:	e008      	b.n	8009d44 <HAL_UART_Receive+0xfc>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2260      	movs	r2, #96	@ 0x60
 8009d36:	213f      	movs	r1, #63	@ 0x3f
 8009d38:	5299      	strh	r1, [r3, r2]
 8009d3a:	e003      	b.n	8009d44 <HAL_UART_Receive+0xfc>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2260      	movs	r2, #96	@ 0x60
 8009d40:	2100      	movs	r1, #0
 8009d42:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8009d44:	2312      	movs	r3, #18
 8009d46:	18fb      	adds	r3, r7, r3
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	2160      	movs	r1, #96	@ 0x60
 8009d4c:	5a52      	ldrh	r2, [r2, r1]
 8009d4e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	689a      	ldr	r2, [r3, #8]
 8009d54:	2380      	movs	r3, #128	@ 0x80
 8009d56:	015b      	lsls	r3, r3, #5
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d108      	bne.n	8009d6e <HAL_UART_Receive+0x126>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d104      	bne.n	8009d6e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8009d64:	2300      	movs	r3, #0
 8009d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	61bb      	str	r3, [r7, #24]
 8009d6c:	e003      	b.n	8009d76 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d72:	2300      	movs	r3, #0
 8009d74:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009d76:	e03a      	b.n	8009dee <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	0013      	movs	r3, r2
 8009d82:	2200      	movs	r2, #0
 8009d84:	2120      	movs	r1, #32
 8009d86:	f000 fb47 	bl	800a418 <UART_WaitOnFlagUntilTimeout>
 8009d8a:	1e03      	subs	r3, r0, #0
 8009d8c:	d005      	beq.n	8009d9a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	228c      	movs	r2, #140	@ 0x8c
 8009d92:	2120      	movs	r1, #32
 8009d94:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009d96:	2303      	movs	r3, #3
 8009d98:	e036      	b.n	8009e08 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10e      	bne.n	8009dbe <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	2212      	movs	r2, #18
 8009daa:	18ba      	adds	r2, r7, r2
 8009dac:	8812      	ldrh	r2, [r2, #0]
 8009dae:	4013      	ands	r3, r2
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	3302      	adds	r3, #2
 8009dba:	61bb      	str	r3, [r7, #24]
 8009dbc:	e00e      	b.n	8009ddc <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2212      	movs	r2, #18
 8009dc8:	18ba      	adds	r2, r7, r2
 8009dca:	8812      	ldrh	r2, [r2, #0]
 8009dcc:	b2d2      	uxtb	r2, r2
 8009dce:	4013      	ands	r3, r2
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	225e      	movs	r2, #94	@ 0x5e
 8009de0:	5a9b      	ldrh	r3, [r3, r2]
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	3b01      	subs	r3, #1
 8009de6:	b299      	uxth	r1, r3
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	225e      	movs	r2, #94	@ 0x5e
 8009dec:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	225e      	movs	r2, #94	@ 0x5e
 8009df2:	5a9b      	ldrh	r3, [r3, r2]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1be      	bne.n	8009d78 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	228c      	movs	r2, #140	@ 0x8c
 8009dfe:	2120      	movs	r1, #32
 8009e00:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8009e02:	2300      	movs	r3, #0
 8009e04:	e000      	b.n	8009e08 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8009e06:	2302      	movs	r3, #2
  }
}
 8009e08:	0018      	movs	r0, r3
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	b008      	add	sp, #32
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	000001ff 	.word	0x000001ff

08009e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b088      	sub	sp, #32
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e1c:	231a      	movs	r3, #26
 8009e1e:	18fb      	adds	r3, r7, r3
 8009e20:	2200      	movs	r2, #0
 8009e22:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689a      	ldr	r2, [r3, #8]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	431a      	orrs	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	695b      	ldr	r3, [r3, #20]
 8009e32:	431a      	orrs	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	69db      	ldr	r3, [r3, #28]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4abc      	ldr	r2, [pc, #752]	@ (800a134 <UART_SetConfig+0x320>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	0019      	movs	r1, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	69fa      	ldr	r2, [r7, #28]
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	4ab7      	ldr	r2, [pc, #732]	@ (800a138 <UART_SetConfig+0x324>)
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	0019      	movs	r1, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68da      	ldr	r2, [r3, #12]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	430a      	orrs	r2, r1
 8009e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6a1b      	ldr	r3, [r3, #32]
 8009e74:	69fa      	ldr	r2, [r7, #28]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	4aae      	ldr	r2, [pc, #696]	@ (800a13c <UART_SetConfig+0x328>)
 8009e82:	4013      	ands	r3, r2
 8009e84:	0019      	movs	r1, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	69fa      	ldr	r2, [r7, #28]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e96:	220f      	movs	r2, #15
 8009e98:	4393      	bics	r3, r2
 8009e9a:	0019      	movs	r1, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	430a      	orrs	r2, r1
 8009ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4aa4      	ldr	r2, [pc, #656]	@ (800a140 <UART_SetConfig+0x32c>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d127      	bne.n	8009f02 <UART_SetConfig+0xee>
 8009eb2:	4ba4      	ldr	r3, [pc, #656]	@ (800a144 <UART_SetConfig+0x330>)
 8009eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eb6:	2203      	movs	r2, #3
 8009eb8:	4013      	ands	r3, r2
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d017      	beq.n	8009eee <UART_SetConfig+0xda>
 8009ebe:	d81b      	bhi.n	8009ef8 <UART_SetConfig+0xe4>
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d00a      	beq.n	8009eda <UART_SetConfig+0xc6>
 8009ec4:	d818      	bhi.n	8009ef8 <UART_SetConfig+0xe4>
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d002      	beq.n	8009ed0 <UART_SetConfig+0xbc>
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d00a      	beq.n	8009ee4 <UART_SetConfig+0xd0>
 8009ece:	e013      	b.n	8009ef8 <UART_SetConfig+0xe4>
 8009ed0:	231b      	movs	r3, #27
 8009ed2:	18fb      	adds	r3, r7, r3
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	701a      	strb	r2, [r3, #0]
 8009ed8:	e058      	b.n	8009f8c <UART_SetConfig+0x178>
 8009eda:	231b      	movs	r3, #27
 8009edc:	18fb      	adds	r3, r7, r3
 8009ede:	2202      	movs	r2, #2
 8009ee0:	701a      	strb	r2, [r3, #0]
 8009ee2:	e053      	b.n	8009f8c <UART_SetConfig+0x178>
 8009ee4:	231b      	movs	r3, #27
 8009ee6:	18fb      	adds	r3, r7, r3
 8009ee8:	2204      	movs	r2, #4
 8009eea:	701a      	strb	r2, [r3, #0]
 8009eec:	e04e      	b.n	8009f8c <UART_SetConfig+0x178>
 8009eee:	231b      	movs	r3, #27
 8009ef0:	18fb      	adds	r3, r7, r3
 8009ef2:	2208      	movs	r2, #8
 8009ef4:	701a      	strb	r2, [r3, #0]
 8009ef6:	e049      	b.n	8009f8c <UART_SetConfig+0x178>
 8009ef8:	231b      	movs	r3, #27
 8009efa:	18fb      	adds	r3, r7, r3
 8009efc:	2210      	movs	r2, #16
 8009efe:	701a      	strb	r2, [r3, #0]
 8009f00:	e044      	b.n	8009f8c <UART_SetConfig+0x178>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a90      	ldr	r2, [pc, #576]	@ (800a148 <UART_SetConfig+0x334>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d127      	bne.n	8009f5c <UART_SetConfig+0x148>
 8009f0c:	4b8d      	ldr	r3, [pc, #564]	@ (800a144 <UART_SetConfig+0x330>)
 8009f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f10:	220c      	movs	r2, #12
 8009f12:	4013      	ands	r3, r2
 8009f14:	2b0c      	cmp	r3, #12
 8009f16:	d017      	beq.n	8009f48 <UART_SetConfig+0x134>
 8009f18:	d81b      	bhi.n	8009f52 <UART_SetConfig+0x13e>
 8009f1a:	2b08      	cmp	r3, #8
 8009f1c:	d00a      	beq.n	8009f34 <UART_SetConfig+0x120>
 8009f1e:	d818      	bhi.n	8009f52 <UART_SetConfig+0x13e>
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <UART_SetConfig+0x116>
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d00a      	beq.n	8009f3e <UART_SetConfig+0x12a>
 8009f28:	e013      	b.n	8009f52 <UART_SetConfig+0x13e>
 8009f2a:	231b      	movs	r3, #27
 8009f2c:	18fb      	adds	r3, r7, r3
 8009f2e:	2200      	movs	r2, #0
 8009f30:	701a      	strb	r2, [r3, #0]
 8009f32:	e02b      	b.n	8009f8c <UART_SetConfig+0x178>
 8009f34:	231b      	movs	r3, #27
 8009f36:	18fb      	adds	r3, r7, r3
 8009f38:	2202      	movs	r2, #2
 8009f3a:	701a      	strb	r2, [r3, #0]
 8009f3c:	e026      	b.n	8009f8c <UART_SetConfig+0x178>
 8009f3e:	231b      	movs	r3, #27
 8009f40:	18fb      	adds	r3, r7, r3
 8009f42:	2204      	movs	r2, #4
 8009f44:	701a      	strb	r2, [r3, #0]
 8009f46:	e021      	b.n	8009f8c <UART_SetConfig+0x178>
 8009f48:	231b      	movs	r3, #27
 8009f4a:	18fb      	adds	r3, r7, r3
 8009f4c:	2208      	movs	r2, #8
 8009f4e:	701a      	strb	r2, [r3, #0]
 8009f50:	e01c      	b.n	8009f8c <UART_SetConfig+0x178>
 8009f52:	231b      	movs	r3, #27
 8009f54:	18fb      	adds	r3, r7, r3
 8009f56:	2210      	movs	r2, #16
 8009f58:	701a      	strb	r2, [r3, #0]
 8009f5a:	e017      	b.n	8009f8c <UART_SetConfig+0x178>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a7a      	ldr	r2, [pc, #488]	@ (800a14c <UART_SetConfig+0x338>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d104      	bne.n	8009f70 <UART_SetConfig+0x15c>
 8009f66:	231b      	movs	r3, #27
 8009f68:	18fb      	adds	r3, r7, r3
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	701a      	strb	r2, [r3, #0]
 8009f6e:	e00d      	b.n	8009f8c <UART_SetConfig+0x178>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a76      	ldr	r2, [pc, #472]	@ (800a150 <UART_SetConfig+0x33c>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d104      	bne.n	8009f84 <UART_SetConfig+0x170>
 8009f7a:	231b      	movs	r3, #27
 8009f7c:	18fb      	adds	r3, r7, r3
 8009f7e:	2200      	movs	r2, #0
 8009f80:	701a      	strb	r2, [r3, #0]
 8009f82:	e003      	b.n	8009f8c <UART_SetConfig+0x178>
 8009f84:	231b      	movs	r3, #27
 8009f86:	18fb      	adds	r3, r7, r3
 8009f88:	2210      	movs	r2, #16
 8009f8a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	69da      	ldr	r2, [r3, #28]
 8009f90:	2380      	movs	r3, #128	@ 0x80
 8009f92:	021b      	lsls	r3, r3, #8
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d000      	beq.n	8009f9a <UART_SetConfig+0x186>
 8009f98:	e065      	b.n	800a066 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8009f9a:	231b      	movs	r3, #27
 8009f9c:	18fb      	adds	r3, r7, r3
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	2b08      	cmp	r3, #8
 8009fa2:	d015      	beq.n	8009fd0 <UART_SetConfig+0x1bc>
 8009fa4:	dc18      	bgt.n	8009fd8 <UART_SetConfig+0x1c4>
 8009fa6:	2b04      	cmp	r3, #4
 8009fa8:	d00d      	beq.n	8009fc6 <UART_SetConfig+0x1b2>
 8009faa:	dc15      	bgt.n	8009fd8 <UART_SetConfig+0x1c4>
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <UART_SetConfig+0x1a2>
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d005      	beq.n	8009fc0 <UART_SetConfig+0x1ac>
 8009fb4:	e010      	b.n	8009fd8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fb6:	f7fe fbd1 	bl	800875c <HAL_RCC_GetPCLK1Freq>
 8009fba:	0003      	movs	r3, r0
 8009fbc:	617b      	str	r3, [r7, #20]
        break;
 8009fbe:	e012      	b.n	8009fe6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fc0:	4b64      	ldr	r3, [pc, #400]	@ (800a154 <UART_SetConfig+0x340>)
 8009fc2:	617b      	str	r3, [r7, #20]
        break;
 8009fc4:	e00f      	b.n	8009fe6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fc6:	f7fe fb3d 	bl	8008644 <HAL_RCC_GetSysClockFreq>
 8009fca:	0003      	movs	r3, r0
 8009fcc:	617b      	str	r3, [r7, #20]
        break;
 8009fce:	e00a      	b.n	8009fe6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fd0:	2380      	movs	r3, #128	@ 0x80
 8009fd2:	021b      	lsls	r3, r3, #8
 8009fd4:	617b      	str	r3, [r7, #20]
        break;
 8009fd6:	e006      	b.n	8009fe6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009fdc:	231a      	movs	r3, #26
 8009fde:	18fb      	adds	r3, r7, r3
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	701a      	strb	r2, [r3, #0]
        break;
 8009fe4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d100      	bne.n	8009fee <UART_SetConfig+0x1da>
 8009fec:	e08d      	b.n	800a10a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ff2:	4b59      	ldr	r3, [pc, #356]	@ (800a158 <UART_SetConfig+0x344>)
 8009ff4:	0052      	lsls	r2, r2, #1
 8009ff6:	5ad3      	ldrh	r3, [r2, r3]
 8009ff8:	0019      	movs	r1, r3
 8009ffa:	6978      	ldr	r0, [r7, #20]
 8009ffc:	f7f6 f89c 	bl	8000138 <__udivsi3>
 800a000:	0003      	movs	r3, r0
 800a002:	005a      	lsls	r2, r3, #1
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	085b      	lsrs	r3, r3, #1
 800a00a:	18d2      	adds	r2, r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	0019      	movs	r1, r3
 800a012:	0010      	movs	r0, r2
 800a014:	f7f6 f890 	bl	8000138 <__udivsi3>
 800a018:	0003      	movs	r3, r0
 800a01a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	2b0f      	cmp	r3, #15
 800a020:	d91c      	bls.n	800a05c <UART_SetConfig+0x248>
 800a022:	693a      	ldr	r2, [r7, #16]
 800a024:	2380      	movs	r3, #128	@ 0x80
 800a026:	025b      	lsls	r3, r3, #9
 800a028:	429a      	cmp	r2, r3
 800a02a:	d217      	bcs.n	800a05c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	b29a      	uxth	r2, r3
 800a030:	200e      	movs	r0, #14
 800a032:	183b      	adds	r3, r7, r0
 800a034:	210f      	movs	r1, #15
 800a036:	438a      	bics	r2, r1
 800a038:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	085b      	lsrs	r3, r3, #1
 800a03e:	b29b      	uxth	r3, r3
 800a040:	2207      	movs	r2, #7
 800a042:	4013      	ands	r3, r2
 800a044:	b299      	uxth	r1, r3
 800a046:	183b      	adds	r3, r7, r0
 800a048:	183a      	adds	r2, r7, r0
 800a04a:	8812      	ldrh	r2, [r2, #0]
 800a04c:	430a      	orrs	r2, r1
 800a04e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	183a      	adds	r2, r7, r0
 800a056:	8812      	ldrh	r2, [r2, #0]
 800a058:	60da      	str	r2, [r3, #12]
 800a05a:	e056      	b.n	800a10a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800a05c:	231a      	movs	r3, #26
 800a05e:	18fb      	adds	r3, r7, r3
 800a060:	2201      	movs	r2, #1
 800a062:	701a      	strb	r2, [r3, #0]
 800a064:	e051      	b.n	800a10a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a066:	231b      	movs	r3, #27
 800a068:	18fb      	adds	r3, r7, r3
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	2b08      	cmp	r3, #8
 800a06e:	d015      	beq.n	800a09c <UART_SetConfig+0x288>
 800a070:	dc18      	bgt.n	800a0a4 <UART_SetConfig+0x290>
 800a072:	2b04      	cmp	r3, #4
 800a074:	d00d      	beq.n	800a092 <UART_SetConfig+0x27e>
 800a076:	dc15      	bgt.n	800a0a4 <UART_SetConfig+0x290>
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d002      	beq.n	800a082 <UART_SetConfig+0x26e>
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d005      	beq.n	800a08c <UART_SetConfig+0x278>
 800a080:	e010      	b.n	800a0a4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a082:	f7fe fb6b 	bl	800875c <HAL_RCC_GetPCLK1Freq>
 800a086:	0003      	movs	r3, r0
 800a088:	617b      	str	r3, [r7, #20]
        break;
 800a08a:	e012      	b.n	800a0b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a08c:	4b31      	ldr	r3, [pc, #196]	@ (800a154 <UART_SetConfig+0x340>)
 800a08e:	617b      	str	r3, [r7, #20]
        break;
 800a090:	e00f      	b.n	800a0b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a092:	f7fe fad7 	bl	8008644 <HAL_RCC_GetSysClockFreq>
 800a096:	0003      	movs	r3, r0
 800a098:	617b      	str	r3, [r7, #20]
        break;
 800a09a:	e00a      	b.n	800a0b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a09c:	2380      	movs	r3, #128	@ 0x80
 800a09e:	021b      	lsls	r3, r3, #8
 800a0a0:	617b      	str	r3, [r7, #20]
        break;
 800a0a2:	e006      	b.n	800a0b2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a0a8:	231a      	movs	r3, #26
 800a0aa:	18fb      	adds	r3, r7, r3
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	701a      	strb	r2, [r3, #0]
        break;
 800a0b0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d028      	beq.n	800a10a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0bc:	4b26      	ldr	r3, [pc, #152]	@ (800a158 <UART_SetConfig+0x344>)
 800a0be:	0052      	lsls	r2, r2, #1
 800a0c0:	5ad3      	ldrh	r3, [r2, r3]
 800a0c2:	0019      	movs	r1, r3
 800a0c4:	6978      	ldr	r0, [r7, #20]
 800a0c6:	f7f6 f837 	bl	8000138 <__udivsi3>
 800a0ca:	0003      	movs	r3, r0
 800a0cc:	001a      	movs	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	085b      	lsrs	r3, r3, #1
 800a0d4:	18d2      	adds	r2, r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	0019      	movs	r1, r3
 800a0dc:	0010      	movs	r0, r2
 800a0de:	f7f6 f82b 	bl	8000138 <__udivsi3>
 800a0e2:	0003      	movs	r3, r0
 800a0e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	2b0f      	cmp	r3, #15
 800a0ea:	d90a      	bls.n	800a102 <UART_SetConfig+0x2ee>
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	2380      	movs	r3, #128	@ 0x80
 800a0f0:	025b      	lsls	r3, r3, #9
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d205      	bcs.n	800a102 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	60da      	str	r2, [r3, #12]
 800a100:	e003      	b.n	800a10a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800a102:	231a      	movs	r3, #26
 800a104:	18fb      	adds	r3, r7, r3
 800a106:	2201      	movs	r2, #1
 800a108:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	226a      	movs	r2, #106	@ 0x6a
 800a10e:	2101      	movs	r1, #1
 800a110:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2268      	movs	r2, #104	@ 0x68
 800a116:	2101      	movs	r1, #1
 800a118:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a126:	231a      	movs	r3, #26
 800a128:	18fb      	adds	r3, r7, r3
 800a12a:	781b      	ldrb	r3, [r3, #0]
}
 800a12c:	0018      	movs	r0, r3
 800a12e:	46bd      	mov	sp, r7
 800a130:	b008      	add	sp, #32
 800a132:	bd80      	pop	{r7, pc}
 800a134:	cfff69f3 	.word	0xcfff69f3
 800a138:	ffffcfff 	.word	0xffffcfff
 800a13c:	11fff4ff 	.word	0x11fff4ff
 800a140:	40013800 	.word	0x40013800
 800a144:	40021000 	.word	0x40021000
 800a148:	40004400 	.word	0x40004400
 800a14c:	40004800 	.word	0x40004800
 800a150:	40004c00 	.word	0x40004c00
 800a154:	00f42400 	.word	0x00f42400
 800a158:	0800dc48 	.word	0x0800dc48

0800a15c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a168:	2208      	movs	r2, #8
 800a16a:	4013      	ands	r3, r2
 800a16c:	d00b      	beq.n	800a186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	4a4a      	ldr	r2, [pc, #296]	@ (800a2a0 <UART_AdvFeatureConfig+0x144>)
 800a176:	4013      	ands	r3, r2
 800a178:	0019      	movs	r1, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	430a      	orrs	r2, r1
 800a184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a18a:	2201      	movs	r2, #1
 800a18c:	4013      	ands	r3, r2
 800a18e:	d00b      	beq.n	800a1a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	4a43      	ldr	r2, [pc, #268]	@ (800a2a4 <UART_AdvFeatureConfig+0x148>)
 800a198:	4013      	ands	r3, r2
 800a19a:	0019      	movs	r1, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	430a      	orrs	r2, r1
 800a1a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	4013      	ands	r3, r2
 800a1b0:	d00b      	beq.n	800a1ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	4a3b      	ldr	r2, [pc, #236]	@ (800a2a8 <UART_AdvFeatureConfig+0x14c>)
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	0019      	movs	r1, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	430a      	orrs	r2, r1
 800a1c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ce:	2204      	movs	r2, #4
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	d00b      	beq.n	800a1ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	4a34      	ldr	r2, [pc, #208]	@ (800a2ac <UART_AdvFeatureConfig+0x150>)
 800a1dc:	4013      	ands	r3, r2
 800a1de:	0019      	movs	r1, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	430a      	orrs	r2, r1
 800a1ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f0:	2210      	movs	r2, #16
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	d00b      	beq.n	800a20e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	4a2c      	ldr	r2, [pc, #176]	@ (800a2b0 <UART_AdvFeatureConfig+0x154>)
 800a1fe:	4013      	ands	r3, r2
 800a200:	0019      	movs	r1, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	430a      	orrs	r2, r1
 800a20c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a212:	2220      	movs	r2, #32
 800a214:	4013      	ands	r3, r2
 800a216:	d00b      	beq.n	800a230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	4a25      	ldr	r2, [pc, #148]	@ (800a2b4 <UART_AdvFeatureConfig+0x158>)
 800a220:	4013      	ands	r3, r2
 800a222:	0019      	movs	r1, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	430a      	orrs	r2, r1
 800a22e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a234:	2240      	movs	r2, #64	@ 0x40
 800a236:	4013      	ands	r3, r2
 800a238:	d01d      	beq.n	800a276 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	4a1d      	ldr	r2, [pc, #116]	@ (800a2b8 <UART_AdvFeatureConfig+0x15c>)
 800a242:	4013      	ands	r3, r2
 800a244:	0019      	movs	r1, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	430a      	orrs	r2, r1
 800a250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a256:	2380      	movs	r3, #128	@ 0x80
 800a258:	035b      	lsls	r3, r3, #13
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d10b      	bne.n	800a276 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	4a15      	ldr	r2, [pc, #84]	@ (800a2bc <UART_AdvFeatureConfig+0x160>)
 800a266:	4013      	ands	r3, r2
 800a268:	0019      	movs	r1, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	430a      	orrs	r2, r1
 800a274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a27a:	2280      	movs	r2, #128	@ 0x80
 800a27c:	4013      	ands	r3, r2
 800a27e:	d00b      	beq.n	800a298 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	4a0e      	ldr	r2, [pc, #56]	@ (800a2c0 <UART_AdvFeatureConfig+0x164>)
 800a288:	4013      	ands	r3, r2
 800a28a:	0019      	movs	r1, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	430a      	orrs	r2, r1
 800a296:	605a      	str	r2, [r3, #4]
  }
}
 800a298:	46c0      	nop			@ (mov r8, r8)
 800a29a:	46bd      	mov	sp, r7
 800a29c:	b002      	add	sp, #8
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	ffff7fff 	.word	0xffff7fff
 800a2a4:	fffdffff 	.word	0xfffdffff
 800a2a8:	fffeffff 	.word	0xfffeffff
 800a2ac:	fffbffff 	.word	0xfffbffff
 800a2b0:	ffffefff 	.word	0xffffefff
 800a2b4:	ffffdfff 	.word	0xffffdfff
 800a2b8:	ffefffff 	.word	0xffefffff
 800a2bc:	ff9fffff 	.word	0xff9fffff
 800a2c0:	fff7ffff 	.word	0xfff7ffff

0800a2c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b092      	sub	sp, #72	@ 0x48
 800a2c8:	af02      	add	r7, sp, #8
 800a2ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2290      	movs	r2, #144	@ 0x90
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2d4:	f7fb fa2c 	bl	8005730 <HAL_GetTick>
 800a2d8:	0003      	movs	r3, r0
 800a2da:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2208      	movs	r2, #8
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	2b08      	cmp	r3, #8
 800a2e8:	d12d      	bne.n	800a346 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ec:	2280      	movs	r2, #128	@ 0x80
 800a2ee:	0391      	lsls	r1, r2, #14
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	4a47      	ldr	r2, [pc, #284]	@ (800a410 <UART_CheckIdleState+0x14c>)
 800a2f4:	9200      	str	r2, [sp, #0]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f000 f88e 	bl	800a418 <UART_WaitOnFlagUntilTimeout>
 800a2fc:	1e03      	subs	r3, r0, #0
 800a2fe:	d022      	beq.n	800a346 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a300:	f3ef 8310 	mrs	r3, PRIMASK
 800a304:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a308:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a30a:	2301      	movs	r3, #1
 800a30c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a310:	f383 8810 	msr	PRIMASK, r3
}
 800a314:	46c0      	nop			@ (mov r8, r8)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2180      	movs	r1, #128	@ 0x80
 800a322:	438a      	bics	r2, r1
 800a324:	601a      	str	r2, [r3, #0]
 800a326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a32c:	f383 8810 	msr	PRIMASK, r3
}
 800a330:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2288      	movs	r2, #136	@ 0x88
 800a336:	2120      	movs	r1, #32
 800a338:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2284      	movs	r2, #132	@ 0x84
 800a33e:	2100      	movs	r1, #0
 800a340:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a342:	2303      	movs	r3, #3
 800a344:	e060      	b.n	800a408 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2204      	movs	r2, #4
 800a34e:	4013      	ands	r3, r2
 800a350:	2b04      	cmp	r3, #4
 800a352:	d146      	bne.n	800a3e2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a356:	2280      	movs	r2, #128	@ 0x80
 800a358:	03d1      	lsls	r1, r2, #15
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	4a2c      	ldr	r2, [pc, #176]	@ (800a410 <UART_CheckIdleState+0x14c>)
 800a35e:	9200      	str	r2, [sp, #0]
 800a360:	2200      	movs	r2, #0
 800a362:	f000 f859 	bl	800a418 <UART_WaitOnFlagUntilTimeout>
 800a366:	1e03      	subs	r3, r0, #0
 800a368:	d03b      	beq.n	800a3e2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a36a:	f3ef 8310 	mrs	r3, PRIMASK
 800a36e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a370:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a372:	637b      	str	r3, [r7, #52]	@ 0x34
 800a374:	2301      	movs	r3, #1
 800a376:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	f383 8810 	msr	PRIMASK, r3
}
 800a37e:	46c0      	nop			@ (mov r8, r8)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4922      	ldr	r1, [pc, #136]	@ (800a414 <UART_CheckIdleState+0x150>)
 800a38c:	400a      	ands	r2, r1
 800a38e:	601a      	str	r2, [r3, #0]
 800a390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a392:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	f383 8810 	msr	PRIMASK, r3
}
 800a39a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a39c:	f3ef 8310 	mrs	r3, PRIMASK
 800a3a0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a3a2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	f383 8810 	msr	PRIMASK, r3
}
 800a3b0:	46c0      	nop			@ (mov r8, r8)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	689a      	ldr	r2, [r3, #8]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2101      	movs	r1, #1
 800a3be:	438a      	bics	r2, r1
 800a3c0:	609a      	str	r2, [r3, #8]
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	f383 8810 	msr	PRIMASK, r3
}
 800a3cc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	228c      	movs	r2, #140	@ 0x8c
 800a3d2:	2120      	movs	r1, #32
 800a3d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2284      	movs	r2, #132	@ 0x84
 800a3da:	2100      	movs	r1, #0
 800a3dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	e012      	b.n	800a408 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2288      	movs	r2, #136	@ 0x88
 800a3e6:	2120      	movs	r1, #32
 800a3e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	228c      	movs	r2, #140	@ 0x8c
 800a3ee:	2120      	movs	r1, #32
 800a3f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2284      	movs	r2, #132	@ 0x84
 800a402:	2100      	movs	r1, #0
 800a404:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	0018      	movs	r0, r3
 800a40a:	46bd      	mov	sp, r7
 800a40c:	b010      	add	sp, #64	@ 0x40
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	01ffffff 	.word	0x01ffffff
 800a414:	fffffedf 	.word	0xfffffedf

0800a418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	603b      	str	r3, [r7, #0]
 800a424:	1dfb      	adds	r3, r7, #7
 800a426:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a428:	e051      	b.n	800a4ce <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	3301      	adds	r3, #1
 800a42e:	d04e      	beq.n	800a4ce <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a430:	f7fb f97e 	bl	8005730 <HAL_GetTick>
 800a434:	0002      	movs	r2, r0
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	69ba      	ldr	r2, [r7, #24]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d302      	bcc.n	800a446 <UART_WaitOnFlagUntilTimeout+0x2e>
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d101      	bne.n	800a44a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800a446:	2303      	movs	r3, #3
 800a448:	e051      	b.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2204      	movs	r2, #4
 800a452:	4013      	ands	r3, r2
 800a454:	d03b      	beq.n	800a4ce <UART_WaitOnFlagUntilTimeout+0xb6>
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2b80      	cmp	r3, #128	@ 0x80
 800a45a:	d038      	beq.n	800a4ce <UART_WaitOnFlagUntilTimeout+0xb6>
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2b40      	cmp	r3, #64	@ 0x40
 800a460:	d035      	beq.n	800a4ce <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	69db      	ldr	r3, [r3, #28]
 800a468:	2208      	movs	r2, #8
 800a46a:	4013      	ands	r3, r2
 800a46c:	2b08      	cmp	r3, #8
 800a46e:	d111      	bne.n	800a494 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2208      	movs	r2, #8
 800a476:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	0018      	movs	r0, r3
 800a47c:	f000 f83c 	bl	800a4f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2290      	movs	r2, #144	@ 0x90
 800a484:	2108      	movs	r1, #8
 800a486:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2284      	movs	r2, #132	@ 0x84
 800a48c:	2100      	movs	r1, #0
 800a48e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	e02c      	b.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	69da      	ldr	r2, [r3, #28]
 800a49a:	2380      	movs	r3, #128	@ 0x80
 800a49c:	011b      	lsls	r3, r3, #4
 800a49e:	401a      	ands	r2, r3
 800a4a0:	2380      	movs	r3, #128	@ 0x80
 800a4a2:	011b      	lsls	r3, r3, #4
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d112      	bne.n	800a4ce <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2280      	movs	r2, #128	@ 0x80
 800a4ae:	0112      	lsls	r2, r2, #4
 800a4b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	0018      	movs	r0, r3
 800a4b6:	f000 f81f 	bl	800a4f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2290      	movs	r2, #144	@ 0x90
 800a4be:	2120      	movs	r1, #32
 800a4c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2284      	movs	r2, #132	@ 0x84
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e00f      	b.n	800a4ee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	69db      	ldr	r3, [r3, #28]
 800a4d4:	68ba      	ldr	r2, [r7, #8]
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	425a      	negs	r2, r3
 800a4de:	4153      	adcs	r3, r2
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	001a      	movs	r2, r3
 800a4e4:	1dfb      	adds	r3, r7, #7
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d09e      	beq.n	800a42a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	0018      	movs	r0, r3
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	b004      	add	sp, #16
 800a4f4:	bd80      	pop	{r7, pc}
	...

0800a4f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b08e      	sub	sp, #56	@ 0x38
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a500:	f3ef 8310 	mrs	r3, PRIMASK
 800a504:	617b      	str	r3, [r7, #20]
  return(result);
 800a506:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a508:	637b      	str	r3, [r7, #52]	@ 0x34
 800a50a:	2301      	movs	r3, #1
 800a50c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	f383 8810 	msr	PRIMASK, r3
}
 800a514:	46c0      	nop			@ (mov r8, r8)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4926      	ldr	r1, [pc, #152]	@ (800a5bc <UART_EndRxTransfer+0xc4>)
 800a522:	400a      	ands	r2, r1
 800a524:	601a      	str	r2, [r3, #0]
 800a526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a528:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	f383 8810 	msr	PRIMASK, r3
}
 800a530:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a532:	f3ef 8310 	mrs	r3, PRIMASK
 800a536:	623b      	str	r3, [r7, #32]
  return(result);
 800a538:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a53a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a53c:	2301      	movs	r3, #1
 800a53e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a542:	f383 8810 	msr	PRIMASK, r3
}
 800a546:	46c0      	nop			@ (mov r8, r8)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	689a      	ldr	r2, [r3, #8]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	491b      	ldr	r1, [pc, #108]	@ (800a5c0 <UART_EndRxTransfer+0xc8>)
 800a554:	400a      	ands	r2, r1
 800a556:	609a      	str	r2, [r3, #8]
 800a558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55e:	f383 8810 	msr	PRIMASK, r3
}
 800a562:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d118      	bne.n	800a59e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a56c:	f3ef 8310 	mrs	r3, PRIMASK
 800a570:	60bb      	str	r3, [r7, #8]
  return(result);
 800a572:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a576:	2301      	movs	r3, #1
 800a578:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f383 8810 	msr	PRIMASK, r3
}
 800a580:	46c0      	nop			@ (mov r8, r8)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2110      	movs	r1, #16
 800a58e:	438a      	bics	r2, r1
 800a590:	601a      	str	r2, [r3, #0]
 800a592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a594:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	f383 8810 	msr	PRIMASK, r3
}
 800a59c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	228c      	movs	r2, #140	@ 0x8c
 800a5a2:	2120      	movs	r1, #32
 800a5a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a5b2:	46c0      	nop			@ (mov r8, r8)
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	b00e      	add	sp, #56	@ 0x38
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	46c0      	nop			@ (mov r8, r8)
 800a5bc:	fffffedf 	.word	0xfffffedf
 800a5c0:	effffffe 	.word	0xeffffffe

0800a5c4 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 800a5c4:	b590      	push	{r4, r7, lr}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	af02      	add	r7, sp, #8
 800a5ca:	0002      	movs	r2, r0
 800a5cc:	1dfb      	adds	r3, r7, #7
 800a5ce:	701a      	strb	r2, [r3, #0]
 800a5d0:	1dbb      	adds	r3, r7, #6
 800a5d2:	1c0a      	adds	r2, r1, #0
 800a5d4:	701a      	strb	r2, [r3, #0]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 800a5d6:	1dfb      	adds	r3, r7, #7
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	4a16      	ldr	r2, [pc, #88]	@ (800a634 <I2C_LCD_ExpanderWrite+0x70>)
 800a5dc:	005b      	lsls	r3, r3, #1
 800a5de:	18d3      	adds	r3, r2, r3
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	781a      	ldrb	r2, [r3, #0]
 800a5e4:	1dbb      	adds	r3, r7, #6
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	240f      	movs	r4, #15
 800a5ee:	193b      	adds	r3, r7, r4
 800a5f0:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 800a5f2:	1dfb      	adds	r3, r7, #7
 800a5f4:	781a      	ldrb	r2, [r3, #0]
 800a5f6:	4910      	ldr	r1, [pc, #64]	@ (800a638 <I2C_LCD_ExpanderWrite+0x74>)
 800a5f8:	0013      	movs	r3, r2
 800a5fa:	005b      	lsls	r3, r3, #1
 800a5fc:	189b      	adds	r3, r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	18cb      	adds	r3, r1, r3
 800a602:	3304      	adds	r3, #4
 800a604:	6818      	ldr	r0, [r3, #0]
 800a606:	1dfb      	adds	r3, r7, #7
 800a608:	781a      	ldrb	r2, [r3, #0]
 800a60a:	490b      	ldr	r1, [pc, #44]	@ (800a638 <I2C_LCD_ExpanderWrite+0x74>)
 800a60c:	0013      	movs	r3, r2
 800a60e:	005b      	lsls	r3, r3, #1
 800a610:	189b      	adds	r3, r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	18cb      	adds	r3, r1, r3
 800a616:	3308      	adds	r3, #8
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	18db      	adds	r3, r3, r3
 800a61c:	b299      	uxth	r1, r3
 800a61e:	193a      	adds	r2, r7, r4
 800a620:	2364      	movs	r3, #100	@ 0x64
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	2301      	movs	r3, #1
 800a626:	f7fc fe1f 	bl	8007268 <HAL_I2C_Master_Transmit>
}
 800a62a:	46c0      	nop			@ (mov r8, r8)
 800a62c:	46bd      	mov	sp, r7
 800a62e:	b005      	add	sp, #20
 800a630:	bd90      	pop	{r4, r7, pc}
 800a632:	46c0      	nop			@ (mov r8, r8)
 800a634:	20000510 	.word	0x20000510
 800a638:	0800dc60 	.word	0x0800dc60

0800a63c <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 800a63c:	b590      	push	{r4, r7, lr}
 800a63e:	b087      	sub	sp, #28
 800a640:	af00      	add	r7, sp, #0
 800a642:	0002      	movs	r2, r0
 800a644:	1dfb      	adds	r3, r7, #7
 800a646:	701a      	strb	r2, [r3, #0]
 800a648:	1dbb      	adds	r3, r7, #6
 800a64a:	1c0a      	adds	r2, r1, #0
 800a64c:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 800a64e:	1dbb      	adds	r3, r7, #6
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	2204      	movs	r2, #4
 800a654:	4313      	orrs	r3, r2
 800a656:	b2da      	uxtb	r2, r3
 800a658:	1dfb      	adds	r3, r7, #7
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	0011      	movs	r1, r2
 800a65e:	0018      	movs	r0, r3
 800a660:	f7ff ffb0 	bl	800a5c4 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 800a664:	4b25      	ldr	r3, [pc, #148]	@ (800a6fc <I2C_LCD_EnPulse+0xc0>)
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	617b      	str	r3, [r7, #20]
 800a66a:	4b25      	ldr	r3, [pc, #148]	@ (800a700 <I2C_LCD_EnPulse+0xc4>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4925      	ldr	r1, [pc, #148]	@ (800a704 <I2C_LCD_EnPulse+0xc8>)
 800a670:	0018      	movs	r0, r3
 800a672:	f7f5 fd61 	bl	8000138 <__udivsi3>
 800a676:	0003      	movs	r3, r0
 800a678:	005c      	lsls	r4, r3, #1
 800a67a:	4b21      	ldr	r3, [pc, #132]	@ (800a700 <I2C_LCD_EnPulse+0xc4>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4921      	ldr	r1, [pc, #132]	@ (800a704 <I2C_LCD_EnPulse+0xc8>)
 800a680:	0018      	movs	r0, r3
 800a682:	f7f5 fd59 	bl	8000138 <__udivsi3>
 800a686:	0003      	movs	r3, r0
 800a688:	085b      	lsrs	r3, r3, #1
 800a68a:	1ae3      	subs	r3, r4, r3
 800a68c:	613b      	str	r3, [r7, #16]
 800a68e:	4b1b      	ldr	r3, [pc, #108]	@ (800a6fc <I2C_LCD_EnPulse+0xc0>)
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	693a      	ldr	r2, [r7, #16]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d8f8      	bhi.n	800a68e <I2C_LCD_EnPulse+0x52>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 800a69c:	1dbb      	adds	r3, r7, #6
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	2204      	movs	r2, #4
 800a6a2:	4393      	bics	r3, r2
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	1dfb      	adds	r3, r7, #7
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	0011      	movs	r1, r2
 800a6ac:	0018      	movs	r0, r3
 800a6ae:	f7ff ff89 	bl	800a5c4 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 800a6b2:	4b12      	ldr	r3, [pc, #72]	@ (800a6fc <I2C_LCD_EnPulse+0xc0>)
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	60fb      	str	r3, [r7, #12]
 800a6b8:	4b11      	ldr	r3, [pc, #68]	@ (800a700 <I2C_LCD_EnPulse+0xc4>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4911      	ldr	r1, [pc, #68]	@ (800a704 <I2C_LCD_EnPulse+0xc8>)
 800a6be:	0018      	movs	r0, r3
 800a6c0:	f7f5 fd3a 	bl	8000138 <__udivsi3>
 800a6c4:	0003      	movs	r3, r0
 800a6c6:	001a      	movs	r2, r3
 800a6c8:	2332      	movs	r3, #50	@ 0x32
 800a6ca:	4353      	muls	r3, r2
 800a6cc:	001c      	movs	r4, r3
 800a6ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a700 <I2C_LCD_EnPulse+0xc4>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	490c      	ldr	r1, [pc, #48]	@ (800a704 <I2C_LCD_EnPulse+0xc8>)
 800a6d4:	0018      	movs	r0, r3
 800a6d6:	f7f5 fd2f 	bl	8000138 <__udivsi3>
 800a6da:	0003      	movs	r3, r0
 800a6dc:	085b      	lsrs	r3, r3, #1
 800a6de:	1ae3      	subs	r3, r4, r3
 800a6e0:	60bb      	str	r3, [r7, #8]
 800a6e2:	4b06      	ldr	r3, [pc, #24]	@ (800a6fc <I2C_LCD_EnPulse+0xc0>)
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d8f8      	bhi.n	800a6e2 <I2C_LCD_EnPulse+0xa6>
}
 800a6f0:	46c0      	nop			@ (mov r8, r8)
 800a6f2:	46c0      	nop			@ (mov r8, r8)
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	b007      	add	sp, #28
 800a6f8:	bd90      	pop	{r4, r7, pc}
 800a6fa:	46c0      	nop			@ (mov r8, r8)
 800a6fc:	e000e010 	.word	0xe000e010
 800a700:	20000010 	.word	0x20000010
 800a704:	000f4240 	.word	0x000f4240

0800a708 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	0002      	movs	r2, r0
 800a710:	1dfb      	adds	r3, r7, #7
 800a712:	701a      	strb	r2, [r3, #0]
 800a714:	1dbb      	adds	r3, r7, #6
 800a716:	1c0a      	adds	r2, r1, #0
 800a718:	701a      	strb	r2, [r3, #0]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 800a71a:	1dbb      	adds	r3, r7, #6
 800a71c:	781a      	ldrb	r2, [r3, #0]
 800a71e:	1dfb      	adds	r3, r7, #7
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	0011      	movs	r1, r2
 800a724:	0018      	movs	r0, r3
 800a726:	f7ff ff4d 	bl	800a5c4 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 800a72a:	1dbb      	adds	r3, r7, #6
 800a72c:	781a      	ldrb	r2, [r3, #0]
 800a72e:	1dfb      	adds	r3, r7, #7
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	0011      	movs	r1, r2
 800a734:	0018      	movs	r0, r3
 800a736:	f7ff ff81 	bl	800a63c <I2C_LCD_EnPulse>
}
 800a73a:	46c0      	nop			@ (mov r8, r8)
 800a73c:	46bd      	mov	sp, r7
 800a73e:	b002      	add	sp, #8
 800a740:	bd80      	pop	{r7, pc}

0800a742 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 800a742:	b590      	push	{r4, r7, lr}
 800a744:	b085      	sub	sp, #20
 800a746:	af00      	add	r7, sp, #0
 800a748:	0004      	movs	r4, r0
 800a74a:	0008      	movs	r0, r1
 800a74c:	0011      	movs	r1, r2
 800a74e:	1dfb      	adds	r3, r7, #7
 800a750:	1c22      	adds	r2, r4, #0
 800a752:	701a      	strb	r2, [r3, #0]
 800a754:	1dbb      	adds	r3, r7, #6
 800a756:	1c02      	adds	r2, r0, #0
 800a758:	701a      	strb	r2, [r3, #0]
 800a75a:	1d7b      	adds	r3, r7, #5
 800a75c:	1c0a      	adds	r2, r1, #0
 800a75e:	701a      	strb	r2, [r3, #0]
    uint8_t HighNib = Val & 0xF0;
 800a760:	200f      	movs	r0, #15
 800a762:	183b      	adds	r3, r7, r0
 800a764:	1dba      	adds	r2, r7, #6
 800a766:	7812      	ldrb	r2, [r2, #0]
 800a768:	210f      	movs	r1, #15
 800a76a:	438a      	bics	r2, r1
 800a76c:	701a      	strb	r2, [r3, #0]
    uint8_t LowNib = (Val << 4) & 0xF0;
 800a76e:	1dbb      	adds	r3, r7, #6
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	011a      	lsls	r2, r3, #4
 800a774:	240e      	movs	r4, #14
 800a776:	193b      	adds	r3, r7, r4
 800a778:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 800a77a:	183a      	adds	r2, r7, r0
 800a77c:	1d7b      	adds	r3, r7, #5
 800a77e:	7812      	ldrb	r2, [r2, #0]
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	4313      	orrs	r3, r2
 800a784:	b2da      	uxtb	r2, r3
 800a786:	1dfb      	adds	r3, r7, #7
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	0011      	movs	r1, r2
 800a78c:	0018      	movs	r0, r3
 800a78e:	f7ff ffbb 	bl	800a708 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 800a792:	193a      	adds	r2, r7, r4
 800a794:	1d7b      	adds	r3, r7, #5
 800a796:	7812      	ldrb	r2, [r2, #0]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	1dfb      	adds	r3, r7, #7
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	0011      	movs	r1, r2
 800a7a4:	0018      	movs	r0, r3
 800a7a6:	f7ff ffaf 	bl	800a708 <I2C_LCD_Write4Bits>
}
 800a7aa:	46c0      	nop			@ (mov r8, r8)
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	b005      	add	sp, #20
 800a7b0:	bd90      	pop	{r4, r7, pc}

0800a7b2 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b082      	sub	sp, #8
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	0002      	movs	r2, r0
 800a7ba:	1dfb      	adds	r3, r7, #7
 800a7bc:	701a      	strb	r2, [r3, #0]
 800a7be:	1dbb      	adds	r3, r7, #6
 800a7c0:	1c0a      	adds	r2, r1, #0
 800a7c2:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 800a7c4:	1dbb      	adds	r3, r7, #6
 800a7c6:	7819      	ldrb	r1, [r3, #0]
 800a7c8:	1dfb      	adds	r3, r7, #7
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	0018      	movs	r0, r3
 800a7d0:	f7ff ffb7 	bl	800a742 <I2C_LCD_Send>
}
 800a7d4:	46c0      	nop			@ (mov r8, r8)
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	b002      	add	sp, #8
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	0002      	movs	r2, r0
 800a7e4:	1dfb      	adds	r3, r7, #7
 800a7e6:	701a      	strb	r2, [r3, #0]
 800a7e8:	1dbb      	adds	r3, r7, #6
 800a7ea:	1c0a      	adds	r2, r1, #0
 800a7ec:	701a      	strb	r2, [r3, #0]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 800a7ee:	1dbb      	adds	r3, r7, #6
 800a7f0:	7819      	ldrb	r1, [r3, #0]
 800a7f2:	1dfb      	adds	r3, r7, #7
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	0018      	movs	r0, r3
 800a7fa:	f7ff ffa2 	bl	800a742 <I2C_LCD_Send>
}
 800a7fe:	46c0      	nop			@ (mov r8, r8)
 800a800:	46bd      	mov	sp, r7
 800a802:	b002      	add	sp, #8
 800a804:	bd80      	pop	{r7, pc}
	...

0800a808 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 800a808:	b590      	push	{r4, r7, lr}
 800a80a:	b08b      	sub	sp, #44	@ 0x2c
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	0002      	movs	r2, r0
 800a810:	1dfb      	adds	r3, r7, #7
 800a812:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 800a814:	46c0      	nop			@ (mov r8, r8)
 800a816:	f7fa ff8b 	bl	8005730 <HAL_GetTick>
 800a81a:	0003      	movs	r3, r0
 800a81c:	2b31      	cmp	r3, #49	@ 0x31
 800a81e:	d9fa      	bls.n	800a816 <I2C_LCD_Init+0xe>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800a820:	1dfb      	adds	r3, r7, #7
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	2130      	movs	r1, #48	@ 0x30
 800a826:	0018      	movs	r0, r3
 800a828:	f7ff ffc3 	bl	800a7b2 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 800a82c:	2300      	movs	r3, #0
 800a82e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a830:	e025      	b.n	800a87e <I2C_LCD_Init+0x76>
 800a832:	4b57      	ldr	r3, [pc, #348]	@ (800a990 <I2C_LCD_Init+0x188>)
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	60fb      	str	r3, [r7, #12]
 800a838:	4b56      	ldr	r3, [pc, #344]	@ (800a994 <I2C_LCD_Init+0x18c>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4956      	ldr	r1, [pc, #344]	@ (800a998 <I2C_LCD_Init+0x190>)
 800a83e:	0018      	movs	r0, r3
 800a840:	f7f5 fc7a 	bl	8000138 <__udivsi3>
 800a844:	0003      	movs	r3, r0
 800a846:	001a      	movs	r2, r3
 800a848:	0013      	movs	r3, r2
 800a84a:	015b      	lsls	r3, r3, #5
 800a84c:	1a9b      	subs	r3, r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	189b      	adds	r3, r3, r2
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	001c      	movs	r4, r3
 800a856:	4b4f      	ldr	r3, [pc, #316]	@ (800a994 <I2C_LCD_Init+0x18c>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	494f      	ldr	r1, [pc, #316]	@ (800a998 <I2C_LCD_Init+0x190>)
 800a85c:	0018      	movs	r0, r3
 800a85e:	f7f5 fc6b 	bl	8000138 <__udivsi3>
 800a862:	0003      	movs	r3, r0
 800a864:	085b      	lsrs	r3, r3, #1
 800a866:	1ae3      	subs	r3, r4, r3
 800a868:	60bb      	str	r3, [r7, #8]
 800a86a:	4b49      	ldr	r3, [pc, #292]	@ (800a990 <I2C_LCD_Init+0x188>)
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	68fa      	ldr	r2, [r7, #12]
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	429a      	cmp	r2, r3
 800a876:	d8f8      	bhi.n	800a86a <I2C_LCD_Init+0x62>
 800a878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87a:	3301      	adds	r3, #1
 800a87c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a880:	2b04      	cmp	r3, #4
 800a882:	d9d6      	bls.n	800a832 <I2C_LCD_Init+0x2a>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800a884:	1dfb      	adds	r3, r7, #7
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	2130      	movs	r1, #48	@ 0x30
 800a88a:	0018      	movs	r0, r3
 800a88c:	f7ff ff91 	bl	800a7b2 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 800a890:	2300      	movs	r3, #0
 800a892:	623b      	str	r3, [r7, #32]
 800a894:	e025      	b.n	800a8e2 <I2C_LCD_Init+0xda>
 800a896:	4b3e      	ldr	r3, [pc, #248]	@ (800a990 <I2C_LCD_Init+0x188>)
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	617b      	str	r3, [r7, #20]
 800a89c:	4b3d      	ldr	r3, [pc, #244]	@ (800a994 <I2C_LCD_Init+0x18c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	493d      	ldr	r1, [pc, #244]	@ (800a998 <I2C_LCD_Init+0x190>)
 800a8a2:	0018      	movs	r0, r3
 800a8a4:	f7f5 fc48 	bl	8000138 <__udivsi3>
 800a8a8:	0003      	movs	r3, r0
 800a8aa:	001a      	movs	r2, r3
 800a8ac:	0013      	movs	r3, r2
 800a8ae:	015b      	lsls	r3, r3, #5
 800a8b0:	1a9b      	subs	r3, r3, r2
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	189b      	adds	r3, r3, r2
 800a8b6:	00db      	lsls	r3, r3, #3
 800a8b8:	001c      	movs	r4, r3
 800a8ba:	4b36      	ldr	r3, [pc, #216]	@ (800a994 <I2C_LCD_Init+0x18c>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4936      	ldr	r1, [pc, #216]	@ (800a998 <I2C_LCD_Init+0x190>)
 800a8c0:	0018      	movs	r0, r3
 800a8c2:	f7f5 fc39 	bl	8000138 <__udivsi3>
 800a8c6:	0003      	movs	r3, r0
 800a8c8:	085b      	lsrs	r3, r3, #1
 800a8ca:	1ae3      	subs	r3, r4, r3
 800a8cc:	613b      	str	r3, [r7, #16]
 800a8ce:	4b30      	ldr	r3, [pc, #192]	@ (800a990 <I2C_LCD_Init+0x188>)
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	697a      	ldr	r2, [r7, #20]
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d8f8      	bhi.n	800a8ce <I2C_LCD_Init+0xc6>
 800a8dc:	6a3b      	ldr	r3, [r7, #32]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	623b      	str	r3, [r7, #32]
 800a8e2:	6a3b      	ldr	r3, [r7, #32]
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	d9d6      	bls.n	800a896 <I2C_LCD_Init+0x8e>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800a8e8:	1dfb      	adds	r3, r7, #7
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	2130      	movs	r1, #48	@ 0x30
 800a8ee:	0018      	movs	r0, r3
 800a8f0:	f7ff ff5f 	bl	800a7b2 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 800a8f4:	4b26      	ldr	r3, [pc, #152]	@ (800a990 <I2C_LCD_Init+0x188>)
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	61fb      	str	r3, [r7, #28]
 800a8fa:	4b26      	ldr	r3, [pc, #152]	@ (800a994 <I2C_LCD_Init+0x18c>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4926      	ldr	r1, [pc, #152]	@ (800a998 <I2C_LCD_Init+0x190>)
 800a900:	0018      	movs	r0, r3
 800a902:	f7f5 fc19 	bl	8000138 <__udivsi3>
 800a906:	0003      	movs	r3, r0
 800a908:	001a      	movs	r2, r3
 800a90a:	2396      	movs	r3, #150	@ 0x96
 800a90c:	4353      	muls	r3, r2
 800a90e:	001c      	movs	r4, r3
 800a910:	4b20      	ldr	r3, [pc, #128]	@ (800a994 <I2C_LCD_Init+0x18c>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4920      	ldr	r1, [pc, #128]	@ (800a998 <I2C_LCD_Init+0x190>)
 800a916:	0018      	movs	r0, r3
 800a918:	f7f5 fc0e 	bl	8000138 <__udivsi3>
 800a91c:	0003      	movs	r3, r0
 800a91e:	085b      	lsrs	r3, r3, #1
 800a920:	1ae3      	subs	r3, r4, r3
 800a922:	61bb      	str	r3, [r7, #24]
 800a924:	4b1a      	ldr	r3, [pc, #104]	@ (800a990 <I2C_LCD_Init+0x188>)
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	69fa      	ldr	r2, [r7, #28]
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	69ba      	ldr	r2, [r7, #24]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d8f8      	bhi.n	800a924 <I2C_LCD_Init+0x11c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 800a932:	1dfb      	adds	r3, r7, #7
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	2102      	movs	r1, #2
 800a938:	0018      	movs	r0, r3
 800a93a:	f7ff ff3a 	bl	800a7b2 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 800a93e:	1dfb      	adds	r3, r7, #7
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	2128      	movs	r1, #40	@ 0x28
 800a944:	0018      	movs	r0, r3
 800a946:	f7ff ff34 	bl	800a7b2 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 800a94a:	1dfb      	adds	r3, r7, #7
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	210c      	movs	r1, #12
 800a950:	0018      	movs	r0, r3
 800a952:	f7ff ff2e 	bl	800a7b2 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 800a956:	1dfb      	adds	r3, r7, #7
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	2106      	movs	r1, #6
 800a95c:	0018      	movs	r0, r3
 800a95e:	f7ff ff28 	bl	800a7b2 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800a962:	1dfb      	adds	r3, r7, #7
 800a964:	781a      	ldrb	r2, [r3, #0]
 800a966:	4b0d      	ldr	r3, [pc, #52]	@ (800a99c <I2C_LCD_Init+0x194>)
 800a968:	0052      	lsls	r2, r2, #1
 800a96a:	2104      	movs	r1, #4
 800a96c:	54d1      	strb	r1, [r2, r3]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 800a96e:	1dfb      	adds	r3, r7, #7
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	4a0a      	ldr	r2, [pc, #40]	@ (800a99c <I2C_LCD_Init+0x194>)
 800a974:	005b      	lsls	r3, r3, #1
 800a976:	18d3      	adds	r3, r2, r3
 800a978:	3301      	adds	r3, #1
 800a97a:	2208      	movs	r2, #8
 800a97c:	701a      	strb	r2, [r3, #0]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 800a97e:	1dfb      	adds	r3, r7, #7
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	0018      	movs	r0, r3
 800a984:	f000 f80c 	bl	800a9a0 <I2C_LCD_Clear>
}
 800a988:	46c0      	nop			@ (mov r8, r8)
 800a98a:	46bd      	mov	sp, r7
 800a98c:	b00b      	add	sp, #44	@ 0x2c
 800a98e:	bd90      	pop	{r4, r7, pc}
 800a990:	e000e010 	.word	0xe000e010
 800a994:	20000010 	.word	0x20000010
 800a998:	000f4240 	.word	0x000f4240
 800a99c:	20000510 	.word	0x20000510

0800a9a0 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 800a9a0:	b590      	push	{r4, r7, lr}
 800a9a2:	b087      	sub	sp, #28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	0002      	movs	r2, r0
 800a9a8:	1dfb      	adds	r3, r7, #7
 800a9aa:	701a      	strb	r2, [r3, #0]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 800a9ac:	1dfb      	adds	r3, r7, #7
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	0018      	movs	r0, r3
 800a9b4:	f7ff fefd 	bl	800a7b2 <I2C_LCD_Cmd>
    DELAY_MS(2);
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	617b      	str	r3, [r7, #20]
 800a9bc:	e025      	b.n	800aa0a <I2C_LCD_Clear+0x6a>
 800a9be:	4b17      	ldr	r3, [pc, #92]	@ (800aa1c <I2C_LCD_Clear+0x7c>)
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	613b      	str	r3, [r7, #16]
 800a9c4:	4b16      	ldr	r3, [pc, #88]	@ (800aa20 <I2C_LCD_Clear+0x80>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4916      	ldr	r1, [pc, #88]	@ (800aa24 <I2C_LCD_Clear+0x84>)
 800a9ca:	0018      	movs	r0, r3
 800a9cc:	f7f5 fbb4 	bl	8000138 <__udivsi3>
 800a9d0:	0003      	movs	r3, r0
 800a9d2:	001a      	movs	r2, r3
 800a9d4:	0013      	movs	r3, r2
 800a9d6:	015b      	lsls	r3, r3, #5
 800a9d8:	1a9b      	subs	r3, r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	189b      	adds	r3, r3, r2
 800a9de:	00db      	lsls	r3, r3, #3
 800a9e0:	001c      	movs	r4, r3
 800a9e2:	4b0f      	ldr	r3, [pc, #60]	@ (800aa20 <I2C_LCD_Clear+0x80>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	490f      	ldr	r1, [pc, #60]	@ (800aa24 <I2C_LCD_Clear+0x84>)
 800a9e8:	0018      	movs	r0, r3
 800a9ea:	f7f5 fba5 	bl	8000138 <__udivsi3>
 800a9ee:	0003      	movs	r3, r0
 800a9f0:	085b      	lsrs	r3, r3, #1
 800a9f2:	1ae3      	subs	r3, r4, r3
 800a9f4:	60fb      	str	r3, [r7, #12]
 800a9f6:	4b09      	ldr	r3, [pc, #36]	@ (800aa1c <I2C_LCD_Clear+0x7c>)
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	1ad3      	subs	r3, r2, r3
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d8f8      	bhi.n	800a9f6 <I2C_LCD_Clear+0x56>
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	3301      	adds	r3, #1
 800aa08:	617b      	str	r3, [r7, #20]
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d9d6      	bls.n	800a9be <I2C_LCD_Clear+0x1e>
}
 800aa10:	46c0      	nop			@ (mov r8, r8)
 800aa12:	46c0      	nop			@ (mov r8, r8)
 800aa14:	46bd      	mov	sp, r7
 800aa16:	b007      	add	sp, #28
 800aa18:	bd90      	pop	{r4, r7, pc}
 800aa1a:	46c0      	nop			@ (mov r8, r8)
 800aa1c:	e000e010 	.word	0xe000e010
 800aa20:	20000010 	.word	0x20000010
 800aa24:	000f4240 	.word	0x000f4240

0800aa28 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 800aa28:	b590      	push	{r4, r7, lr}
 800aa2a:	b087      	sub	sp, #28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	0004      	movs	r4, r0
 800aa30:	0008      	movs	r0, r1
 800aa32:	0011      	movs	r1, r2
 800aa34:	1dfb      	adds	r3, r7, #7
 800aa36:	1c22      	adds	r2, r4, #0
 800aa38:	701a      	strb	r2, [r3, #0]
 800aa3a:	1dbb      	adds	r3, r7, #6
 800aa3c:	1c02      	adds	r2, r0, #0
 800aa3e:	701a      	strb	r2, [r3, #0]
 800aa40:	1d7b      	adds	r3, r7, #5
 800aa42:	1c0a      	adds	r2, r1, #0
 800aa44:	701a      	strb	r2, [r3, #0]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 800aa46:	2308      	movs	r3, #8
 800aa48:	18fb      	adds	r3, r7, r3
 800aa4a:	4a1d      	ldr	r2, [pc, #116]	@ (800aac0 <I2C_LCD_SetCursor+0x98>)
 800aa4c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800aa4e:	c313      	stmia	r3!, {r0, r1, r4}
 800aa50:	6812      	ldr	r2, [r2, #0]
 800aa52:	601a      	str	r2, [r3, #0]
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 800aa54:	1dfb      	adds	r3, r7, #7
 800aa56:	781a      	ldrb	r2, [r3, #0]
 800aa58:	491a      	ldr	r1, [pc, #104]	@ (800aac4 <I2C_LCD_SetCursor+0x9c>)
 800aa5a:	0013      	movs	r3, r2
 800aa5c:	005b      	lsls	r3, r3, #1
 800aa5e:	189b      	adds	r3, r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	18cb      	adds	r3, r1, r3
 800aa64:	330a      	adds	r3, #10
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	1d7a      	adds	r2, r7, #5
 800aa6a:	7812      	ldrb	r2, [r2, #0]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d90c      	bls.n	800aa8a <I2C_LCD_SetCursor+0x62>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 800aa70:	1dfb      	adds	r3, r7, #7
 800aa72:	781a      	ldrb	r2, [r3, #0]
 800aa74:	4913      	ldr	r1, [pc, #76]	@ (800aac4 <I2C_LCD_SetCursor+0x9c>)
 800aa76:	0013      	movs	r3, r2
 800aa78:	005b      	lsls	r3, r3, #1
 800aa7a:	189b      	adds	r3, r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	18cb      	adds	r3, r1, r3
 800aa80:	330a      	adds	r3, #10
 800aa82:	781a      	ldrb	r2, [r3, #0]
 800aa84:	1d7b      	adds	r3, r7, #5
 800aa86:	3a01      	subs	r2, #1
 800aa88:	701a      	strb	r2, [r3, #0]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 800aa8a:	1d7b      	adds	r3, r7, #5
 800aa8c:	781a      	ldrb	r2, [r3, #0]
 800aa8e:	2308      	movs	r3, #8
 800aa90:	18fb      	adds	r3, r7, r3
 800aa92:	0092      	lsls	r2, r2, #2
 800aa94:	58d3      	ldr	r3, [r2, r3]
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	1dbb      	adds	r3, r7, #6
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	18d3      	adds	r3, r2, r3
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	b25b      	sxtb	r3, r3
 800aaa2:	2280      	movs	r2, #128	@ 0x80
 800aaa4:	4252      	negs	r2, r2
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	b25b      	sxtb	r3, r3
 800aaaa:	b2da      	uxtb	r2, r3
 800aaac:	1dfb      	adds	r3, r7, #7
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	0011      	movs	r1, r2
 800aab2:	0018      	movs	r0, r3
 800aab4:	f7ff fe7d 	bl	800a7b2 <I2C_LCD_Cmd>
}
 800aab8:	46c0      	nop			@ (mov r8, r8)
 800aaba:	46bd      	mov	sp, r7
 800aabc:	b007      	add	sp, #28
 800aabe:	bd90      	pop	{r4, r7, pc}
 800aac0:	0800db00 	.word	0x0800db00
 800aac4:	0800dc60 	.word	0x0800dc60

0800aac8 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	0002      	movs	r2, r0
 800aad0:	6039      	str	r1, [r7, #0]
 800aad2:	1dfb      	adds	r3, r7, #7
 800aad4:	701a      	strb	r2, [r3, #0]
    while (*Str)
 800aad6:	e009      	b.n	800aaec <I2C_LCD_WriteString+0x24>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	603a      	str	r2, [r7, #0]
 800aade:	781a      	ldrb	r2, [r3, #0]
 800aae0:	1dfb      	adds	r3, r7, #7
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	0011      	movs	r1, r2
 800aae6:	0018      	movs	r0, r3
 800aae8:	f7ff fe78 	bl	800a7dc <I2C_LCD_Data>
    while (*Str)
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1f1      	bne.n	800aad8 <I2C_LCD_WriteString+0x10>
    }
}
 800aaf4:	46c0      	nop			@ (mov r8, r8)
 800aaf6:	46c0      	nop			@ (mov r8, r8)
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	b002      	add	sp, #8
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <__cvt>:
 800aafe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab00:	001f      	movs	r7, r3
 800ab02:	2300      	movs	r3, #0
 800ab04:	0016      	movs	r6, r2
 800ab06:	b08b      	sub	sp, #44	@ 0x2c
 800ab08:	429f      	cmp	r7, r3
 800ab0a:	da04      	bge.n	800ab16 <__cvt+0x18>
 800ab0c:	2180      	movs	r1, #128	@ 0x80
 800ab0e:	0609      	lsls	r1, r1, #24
 800ab10:	187b      	adds	r3, r7, r1
 800ab12:	001f      	movs	r7, r3
 800ab14:	232d      	movs	r3, #45	@ 0x2d
 800ab16:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ab18:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800ab1a:	7013      	strb	r3, [r2, #0]
 800ab1c:	2320      	movs	r3, #32
 800ab1e:	2203      	movs	r2, #3
 800ab20:	439d      	bics	r5, r3
 800ab22:	2d46      	cmp	r5, #70	@ 0x46
 800ab24:	d007      	beq.n	800ab36 <__cvt+0x38>
 800ab26:	002b      	movs	r3, r5
 800ab28:	3b45      	subs	r3, #69	@ 0x45
 800ab2a:	4259      	negs	r1, r3
 800ab2c:	414b      	adcs	r3, r1
 800ab2e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800ab30:	3a01      	subs	r2, #1
 800ab32:	18cb      	adds	r3, r1, r3
 800ab34:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab36:	ab09      	add	r3, sp, #36	@ 0x24
 800ab38:	9304      	str	r3, [sp, #16]
 800ab3a:	ab08      	add	r3, sp, #32
 800ab3c:	9303      	str	r3, [sp, #12]
 800ab3e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab40:	9200      	str	r2, [sp, #0]
 800ab42:	9302      	str	r3, [sp, #8]
 800ab44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ab46:	0032      	movs	r2, r6
 800ab48:	9301      	str	r3, [sp, #4]
 800ab4a:	003b      	movs	r3, r7
 800ab4c:	f000 fea0 	bl	800b890 <_dtoa_r>
 800ab50:	0004      	movs	r4, r0
 800ab52:	2d47      	cmp	r5, #71	@ 0x47
 800ab54:	d11b      	bne.n	800ab8e <__cvt+0x90>
 800ab56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab58:	07db      	lsls	r3, r3, #31
 800ab5a:	d511      	bpl.n	800ab80 <__cvt+0x82>
 800ab5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ab5e:	18c3      	adds	r3, r0, r3
 800ab60:	9307      	str	r3, [sp, #28]
 800ab62:	2200      	movs	r2, #0
 800ab64:	2300      	movs	r3, #0
 800ab66:	0030      	movs	r0, r6
 800ab68:	0039      	movs	r1, r7
 800ab6a:	f7f5 fc6b 	bl	8000444 <__aeabi_dcmpeq>
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	d001      	beq.n	800ab76 <__cvt+0x78>
 800ab72:	9b07      	ldr	r3, [sp, #28]
 800ab74:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab76:	2230      	movs	r2, #48	@ 0x30
 800ab78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab7a:	9907      	ldr	r1, [sp, #28]
 800ab7c:	428b      	cmp	r3, r1
 800ab7e:	d320      	bcc.n	800abc2 <__cvt+0xc4>
 800ab80:	0020      	movs	r0, r4
 800ab82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab84:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ab86:	1b1b      	subs	r3, r3, r4
 800ab88:	6013      	str	r3, [r2, #0]
 800ab8a:	b00b      	add	sp, #44	@ 0x2c
 800ab8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ab90:	18c3      	adds	r3, r0, r3
 800ab92:	9307      	str	r3, [sp, #28]
 800ab94:	2d46      	cmp	r5, #70	@ 0x46
 800ab96:	d1e4      	bne.n	800ab62 <__cvt+0x64>
 800ab98:	7803      	ldrb	r3, [r0, #0]
 800ab9a:	2b30      	cmp	r3, #48	@ 0x30
 800ab9c:	d10c      	bne.n	800abb8 <__cvt+0xba>
 800ab9e:	2200      	movs	r2, #0
 800aba0:	2300      	movs	r3, #0
 800aba2:	0030      	movs	r0, r6
 800aba4:	0039      	movs	r1, r7
 800aba6:	f7f5 fc4d 	bl	8000444 <__aeabi_dcmpeq>
 800abaa:	2800      	cmp	r0, #0
 800abac:	d104      	bne.n	800abb8 <__cvt+0xba>
 800abae:	2301      	movs	r3, #1
 800abb0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800abb2:	1a9b      	subs	r3, r3, r2
 800abb4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800abb6:	6013      	str	r3, [r2, #0]
 800abb8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800abba:	9a07      	ldr	r2, [sp, #28]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	18d3      	adds	r3, r2, r3
 800abc0:	e7ce      	b.n	800ab60 <__cvt+0x62>
 800abc2:	1c59      	adds	r1, r3, #1
 800abc4:	9109      	str	r1, [sp, #36]	@ 0x24
 800abc6:	701a      	strb	r2, [r3, #0]
 800abc8:	e7d6      	b.n	800ab78 <__cvt+0x7a>

0800abca <__exponent>:
 800abca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abcc:	232b      	movs	r3, #43	@ 0x2b
 800abce:	0005      	movs	r5, r0
 800abd0:	000c      	movs	r4, r1
 800abd2:	b085      	sub	sp, #20
 800abd4:	7002      	strb	r2, [r0, #0]
 800abd6:	2900      	cmp	r1, #0
 800abd8:	da01      	bge.n	800abde <__exponent+0x14>
 800abda:	424c      	negs	r4, r1
 800abdc:	3302      	adds	r3, #2
 800abde:	706b      	strb	r3, [r5, #1]
 800abe0:	2c09      	cmp	r4, #9
 800abe2:	dd2c      	ble.n	800ac3e <__exponent+0x74>
 800abe4:	ab02      	add	r3, sp, #8
 800abe6:	1dde      	adds	r6, r3, #7
 800abe8:	0020      	movs	r0, r4
 800abea:	210a      	movs	r1, #10
 800abec:	f7f5 fc14 	bl	8000418 <__aeabi_idivmod>
 800abf0:	0037      	movs	r7, r6
 800abf2:	3130      	adds	r1, #48	@ 0x30
 800abf4:	3e01      	subs	r6, #1
 800abf6:	0020      	movs	r0, r4
 800abf8:	7031      	strb	r1, [r6, #0]
 800abfa:	210a      	movs	r1, #10
 800abfc:	9401      	str	r4, [sp, #4]
 800abfe:	f7f5 fb25 	bl	800024c <__divsi3>
 800ac02:	9b01      	ldr	r3, [sp, #4]
 800ac04:	0004      	movs	r4, r0
 800ac06:	2b63      	cmp	r3, #99	@ 0x63
 800ac08:	dcee      	bgt.n	800abe8 <__exponent+0x1e>
 800ac0a:	1eba      	subs	r2, r7, #2
 800ac0c:	1ca8      	adds	r0, r5, #2
 800ac0e:	0001      	movs	r1, r0
 800ac10:	0013      	movs	r3, r2
 800ac12:	3430      	adds	r4, #48	@ 0x30
 800ac14:	7014      	strb	r4, [r2, #0]
 800ac16:	ac02      	add	r4, sp, #8
 800ac18:	3407      	adds	r4, #7
 800ac1a:	429c      	cmp	r4, r3
 800ac1c:	d80a      	bhi.n	800ac34 <__exponent+0x6a>
 800ac1e:	2300      	movs	r3, #0
 800ac20:	42a2      	cmp	r2, r4
 800ac22:	d803      	bhi.n	800ac2c <__exponent+0x62>
 800ac24:	3309      	adds	r3, #9
 800ac26:	aa02      	add	r2, sp, #8
 800ac28:	189b      	adds	r3, r3, r2
 800ac2a:	1bdb      	subs	r3, r3, r7
 800ac2c:	18c0      	adds	r0, r0, r3
 800ac2e:	1b40      	subs	r0, r0, r5
 800ac30:	b005      	add	sp, #20
 800ac32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac34:	781c      	ldrb	r4, [r3, #0]
 800ac36:	3301      	adds	r3, #1
 800ac38:	700c      	strb	r4, [r1, #0]
 800ac3a:	3101      	adds	r1, #1
 800ac3c:	e7eb      	b.n	800ac16 <__exponent+0x4c>
 800ac3e:	2330      	movs	r3, #48	@ 0x30
 800ac40:	18e4      	adds	r4, r4, r3
 800ac42:	70ab      	strb	r3, [r5, #2]
 800ac44:	1d28      	adds	r0, r5, #4
 800ac46:	70ec      	strb	r4, [r5, #3]
 800ac48:	e7f1      	b.n	800ac2e <__exponent+0x64>
	...

0800ac4c <_printf_float>:
 800ac4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac4e:	b097      	sub	sp, #92	@ 0x5c
 800ac50:	000d      	movs	r5, r1
 800ac52:	920a      	str	r2, [sp, #40]	@ 0x28
 800ac54:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800ac56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac58:	9009      	str	r0, [sp, #36]	@ 0x24
 800ac5a:	f000 fd01 	bl	800b660 <_localeconv_r>
 800ac5e:	6803      	ldr	r3, [r0, #0]
 800ac60:	0018      	movs	r0, r3
 800ac62:	930d      	str	r3, [sp, #52]	@ 0x34
 800ac64:	f7f5 fa4c 	bl	8000100 <strlen>
 800ac68:	2300      	movs	r3, #0
 800ac6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ac6c:	9314      	str	r3, [sp, #80]	@ 0x50
 800ac6e:	7e2b      	ldrb	r3, [r5, #24]
 800ac70:	2207      	movs	r2, #7
 800ac72:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac74:	682b      	ldr	r3, [r5, #0]
 800ac76:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ac7a:	6823      	ldr	r3, [r4, #0]
 800ac7c:	05c9      	lsls	r1, r1, #23
 800ac7e:	d545      	bpl.n	800ad0c <_printf_float+0xc0>
 800ac80:	189b      	adds	r3, r3, r2
 800ac82:	4393      	bics	r3, r2
 800ac84:	001a      	movs	r2, r3
 800ac86:	3208      	adds	r2, #8
 800ac88:	6022      	str	r2, [r4, #0]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	681e      	ldr	r6, [r3, #0]
 800ac8e:	685f      	ldr	r7, [r3, #4]
 800ac90:	007b      	lsls	r3, r7, #1
 800ac92:	085b      	lsrs	r3, r3, #1
 800ac94:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac96:	9610      	str	r6, [sp, #64]	@ 0x40
 800ac98:	64ae      	str	r6, [r5, #72]	@ 0x48
 800ac9a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800ac9c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ac9e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800aca0:	4ba7      	ldr	r3, [pc, #668]	@ (800af40 <_printf_float+0x2f4>)
 800aca2:	4252      	negs	r2, r2
 800aca4:	f7f8 f95a 	bl	8002f5c <__aeabi_dcmpun>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d131      	bne.n	800ad10 <_printf_float+0xc4>
 800acac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800acae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800acb0:	2201      	movs	r2, #1
 800acb2:	4ba3      	ldr	r3, [pc, #652]	@ (800af40 <_printf_float+0x2f4>)
 800acb4:	4252      	negs	r2, r2
 800acb6:	f7f5 fbd5 	bl	8000464 <__aeabi_dcmple>
 800acba:	2800      	cmp	r0, #0
 800acbc:	d128      	bne.n	800ad10 <_printf_float+0xc4>
 800acbe:	2200      	movs	r2, #0
 800acc0:	2300      	movs	r3, #0
 800acc2:	0030      	movs	r0, r6
 800acc4:	0039      	movs	r1, r7
 800acc6:	f7f5 fbc3 	bl	8000450 <__aeabi_dcmplt>
 800acca:	2800      	cmp	r0, #0
 800accc:	d003      	beq.n	800acd6 <_printf_float+0x8a>
 800acce:	002b      	movs	r3, r5
 800acd0:	222d      	movs	r2, #45	@ 0x2d
 800acd2:	3343      	adds	r3, #67	@ 0x43
 800acd4:	701a      	strb	r2, [r3, #0]
 800acd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acd8:	4f9a      	ldr	r7, [pc, #616]	@ (800af44 <_printf_float+0x2f8>)
 800acda:	2b47      	cmp	r3, #71	@ 0x47
 800acdc:	d900      	bls.n	800ace0 <_printf_float+0x94>
 800acde:	4f9a      	ldr	r7, [pc, #616]	@ (800af48 <_printf_float+0x2fc>)
 800ace0:	2303      	movs	r3, #3
 800ace2:	2400      	movs	r4, #0
 800ace4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ace6:	612b      	str	r3, [r5, #16]
 800ace8:	3301      	adds	r3, #1
 800acea:	439a      	bics	r2, r3
 800acec:	602a      	str	r2, [r5, #0]
 800acee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acf0:	0029      	movs	r1, r5
 800acf2:	9300      	str	r3, [sp, #0]
 800acf4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acf8:	aa15      	add	r2, sp, #84	@ 0x54
 800acfa:	f000 f9e5 	bl	800b0c8 <_printf_common>
 800acfe:	3001      	adds	r0, #1
 800ad00:	d000      	beq.n	800ad04 <_printf_float+0xb8>
 800ad02:	e09f      	b.n	800ae44 <_printf_float+0x1f8>
 800ad04:	2001      	movs	r0, #1
 800ad06:	4240      	negs	r0, r0
 800ad08:	b017      	add	sp, #92	@ 0x5c
 800ad0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad0c:	3307      	adds	r3, #7
 800ad0e:	e7b8      	b.n	800ac82 <_printf_float+0x36>
 800ad10:	0032      	movs	r2, r6
 800ad12:	003b      	movs	r3, r7
 800ad14:	0030      	movs	r0, r6
 800ad16:	0039      	movs	r1, r7
 800ad18:	f7f8 f920 	bl	8002f5c <__aeabi_dcmpun>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d00b      	beq.n	800ad38 <_printf_float+0xec>
 800ad20:	2f00      	cmp	r7, #0
 800ad22:	da03      	bge.n	800ad2c <_printf_float+0xe0>
 800ad24:	002b      	movs	r3, r5
 800ad26:	222d      	movs	r2, #45	@ 0x2d
 800ad28:	3343      	adds	r3, #67	@ 0x43
 800ad2a:	701a      	strb	r2, [r3, #0]
 800ad2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad2e:	4f87      	ldr	r7, [pc, #540]	@ (800af4c <_printf_float+0x300>)
 800ad30:	2b47      	cmp	r3, #71	@ 0x47
 800ad32:	d9d5      	bls.n	800ace0 <_printf_float+0x94>
 800ad34:	4f86      	ldr	r7, [pc, #536]	@ (800af50 <_printf_float+0x304>)
 800ad36:	e7d3      	b.n	800ace0 <_printf_float+0x94>
 800ad38:	2220      	movs	r2, #32
 800ad3a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800ad3c:	686b      	ldr	r3, [r5, #4]
 800ad3e:	4394      	bics	r4, r2
 800ad40:	1c5a      	adds	r2, r3, #1
 800ad42:	d146      	bne.n	800add2 <_printf_float+0x186>
 800ad44:	3307      	adds	r3, #7
 800ad46:	606b      	str	r3, [r5, #4]
 800ad48:	2380      	movs	r3, #128	@ 0x80
 800ad4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad4c:	00db      	lsls	r3, r3, #3
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	2200      	movs	r2, #0
 800ad52:	602b      	str	r3, [r5, #0]
 800ad54:	9206      	str	r2, [sp, #24]
 800ad56:	aa14      	add	r2, sp, #80	@ 0x50
 800ad58:	9205      	str	r2, [sp, #20]
 800ad5a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ad5c:	a90a      	add	r1, sp, #40	@ 0x28
 800ad5e:	9204      	str	r2, [sp, #16]
 800ad60:	aa13      	add	r2, sp, #76	@ 0x4c
 800ad62:	9203      	str	r2, [sp, #12]
 800ad64:	2223      	movs	r2, #35	@ 0x23
 800ad66:	1852      	adds	r2, r2, r1
 800ad68:	9202      	str	r2, [sp, #8]
 800ad6a:	9301      	str	r3, [sp, #4]
 800ad6c:	686b      	ldr	r3, [r5, #4]
 800ad6e:	0032      	movs	r2, r6
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad74:	003b      	movs	r3, r7
 800ad76:	f7ff fec2 	bl	800aafe <__cvt>
 800ad7a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad7c:	0007      	movs	r7, r0
 800ad7e:	2c47      	cmp	r4, #71	@ 0x47
 800ad80:	d12d      	bne.n	800adde <_printf_float+0x192>
 800ad82:	1cd3      	adds	r3, r2, #3
 800ad84:	db02      	blt.n	800ad8c <_printf_float+0x140>
 800ad86:	686b      	ldr	r3, [r5, #4]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	dd48      	ble.n	800ae1e <_printf_float+0x1d2>
 800ad8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad8e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ad90:	3b02      	subs	r3, #2
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad96:	0028      	movs	r0, r5
 800ad98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ad9a:	3901      	subs	r1, #1
 800ad9c:	3050      	adds	r0, #80	@ 0x50
 800ad9e:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ada0:	f7ff ff13 	bl	800abca <__exponent>
 800ada4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ada6:	0004      	movs	r4, r0
 800ada8:	1813      	adds	r3, r2, r0
 800adaa:	612b      	str	r3, [r5, #16]
 800adac:	2a01      	cmp	r2, #1
 800adae:	dc02      	bgt.n	800adb6 <_printf_float+0x16a>
 800adb0:	682a      	ldr	r2, [r5, #0]
 800adb2:	07d2      	lsls	r2, r2, #31
 800adb4:	d501      	bpl.n	800adba <_printf_float+0x16e>
 800adb6:	3301      	adds	r3, #1
 800adb8:	612b      	str	r3, [r5, #16]
 800adba:	2323      	movs	r3, #35	@ 0x23
 800adbc:	aa0a      	add	r2, sp, #40	@ 0x28
 800adbe:	189b      	adds	r3, r3, r2
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d100      	bne.n	800adc8 <_printf_float+0x17c>
 800adc6:	e792      	b.n	800acee <_printf_float+0xa2>
 800adc8:	002b      	movs	r3, r5
 800adca:	222d      	movs	r2, #45	@ 0x2d
 800adcc:	3343      	adds	r3, #67	@ 0x43
 800adce:	701a      	strb	r2, [r3, #0]
 800add0:	e78d      	b.n	800acee <_printf_float+0xa2>
 800add2:	2c47      	cmp	r4, #71	@ 0x47
 800add4:	d1b8      	bne.n	800ad48 <_printf_float+0xfc>
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1b6      	bne.n	800ad48 <_printf_float+0xfc>
 800adda:	3301      	adds	r3, #1
 800addc:	e7b3      	b.n	800ad46 <_printf_float+0xfa>
 800adde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ade0:	0011      	movs	r1, r2
 800ade2:	2b65      	cmp	r3, #101	@ 0x65
 800ade4:	d9d7      	bls.n	800ad96 <_printf_float+0x14a>
 800ade6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ade8:	2b66      	cmp	r3, #102	@ 0x66
 800adea:	d11a      	bne.n	800ae22 <_printf_float+0x1d6>
 800adec:	686b      	ldr	r3, [r5, #4]
 800adee:	2a00      	cmp	r2, #0
 800adf0:	dd09      	ble.n	800ae06 <_printf_float+0x1ba>
 800adf2:	612a      	str	r2, [r5, #16]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d102      	bne.n	800adfe <_printf_float+0x1b2>
 800adf8:	6829      	ldr	r1, [r5, #0]
 800adfa:	07c9      	lsls	r1, r1, #31
 800adfc:	d50b      	bpl.n	800ae16 <_printf_float+0x1ca>
 800adfe:	3301      	adds	r3, #1
 800ae00:	189b      	adds	r3, r3, r2
 800ae02:	612b      	str	r3, [r5, #16]
 800ae04:	e007      	b.n	800ae16 <_printf_float+0x1ca>
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d103      	bne.n	800ae12 <_printf_float+0x1c6>
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	6829      	ldr	r1, [r5, #0]
 800ae0e:	4211      	tst	r1, r2
 800ae10:	d000      	beq.n	800ae14 <_printf_float+0x1c8>
 800ae12:	1c9a      	adds	r2, r3, #2
 800ae14:	612a      	str	r2, [r5, #16]
 800ae16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae18:	2400      	movs	r4, #0
 800ae1a:	65ab      	str	r3, [r5, #88]	@ 0x58
 800ae1c:	e7cd      	b.n	800adba <_printf_float+0x16e>
 800ae1e:	2367      	movs	r3, #103	@ 0x67
 800ae20:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae22:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ae24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae26:	4299      	cmp	r1, r3
 800ae28:	db06      	blt.n	800ae38 <_printf_float+0x1ec>
 800ae2a:	682b      	ldr	r3, [r5, #0]
 800ae2c:	6129      	str	r1, [r5, #16]
 800ae2e:	07db      	lsls	r3, r3, #31
 800ae30:	d5f1      	bpl.n	800ae16 <_printf_float+0x1ca>
 800ae32:	3101      	adds	r1, #1
 800ae34:	6129      	str	r1, [r5, #16]
 800ae36:	e7ee      	b.n	800ae16 <_printf_float+0x1ca>
 800ae38:	2201      	movs	r2, #1
 800ae3a:	2900      	cmp	r1, #0
 800ae3c:	dce0      	bgt.n	800ae00 <_printf_float+0x1b4>
 800ae3e:	1892      	adds	r2, r2, r2
 800ae40:	1a52      	subs	r2, r2, r1
 800ae42:	e7dd      	b.n	800ae00 <_printf_float+0x1b4>
 800ae44:	682a      	ldr	r2, [r5, #0]
 800ae46:	0553      	lsls	r3, r2, #21
 800ae48:	d408      	bmi.n	800ae5c <_printf_float+0x210>
 800ae4a:	692b      	ldr	r3, [r5, #16]
 800ae4c:	003a      	movs	r2, r7
 800ae4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae52:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ae54:	47a0      	blx	r4
 800ae56:	3001      	adds	r0, #1
 800ae58:	d129      	bne.n	800aeae <_printf_float+0x262>
 800ae5a:	e753      	b.n	800ad04 <_printf_float+0xb8>
 800ae5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae5e:	2b65      	cmp	r3, #101	@ 0x65
 800ae60:	d800      	bhi.n	800ae64 <_printf_float+0x218>
 800ae62:	e0da      	b.n	800b01a <_printf_float+0x3ce>
 800ae64:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ae66:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ae68:	2200      	movs	r2, #0
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	f7f5 faea 	bl	8000444 <__aeabi_dcmpeq>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d033      	beq.n	800aedc <_printf_float+0x290>
 800ae74:	2301      	movs	r3, #1
 800ae76:	4a37      	ldr	r2, [pc, #220]	@ (800af54 <_printf_float+0x308>)
 800ae78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae7c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ae7e:	47a0      	blx	r4
 800ae80:	3001      	adds	r0, #1
 800ae82:	d100      	bne.n	800ae86 <_printf_float+0x23a>
 800ae84:	e73e      	b.n	800ad04 <_printf_float+0xb8>
 800ae86:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ae88:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae8a:	42b3      	cmp	r3, r6
 800ae8c:	db02      	blt.n	800ae94 <_printf_float+0x248>
 800ae8e:	682b      	ldr	r3, [r5, #0]
 800ae90:	07db      	lsls	r3, r3, #31
 800ae92:	d50c      	bpl.n	800aeae <_printf_float+0x262>
 800ae94:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ae96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae9e:	47a0      	blx	r4
 800aea0:	2400      	movs	r4, #0
 800aea2:	3001      	adds	r0, #1
 800aea4:	d100      	bne.n	800aea8 <_printf_float+0x25c>
 800aea6:	e72d      	b.n	800ad04 <_printf_float+0xb8>
 800aea8:	1e73      	subs	r3, r6, #1
 800aeaa:	42a3      	cmp	r3, r4
 800aeac:	dc0a      	bgt.n	800aec4 <_printf_float+0x278>
 800aeae:	682b      	ldr	r3, [r5, #0]
 800aeb0:	079b      	lsls	r3, r3, #30
 800aeb2:	d500      	bpl.n	800aeb6 <_printf_float+0x26a>
 800aeb4:	e105      	b.n	800b0c2 <_printf_float+0x476>
 800aeb6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800aeb8:	68e8      	ldr	r0, [r5, #12]
 800aeba:	4298      	cmp	r0, r3
 800aebc:	db00      	blt.n	800aec0 <_printf_float+0x274>
 800aebe:	e723      	b.n	800ad08 <_printf_float+0xbc>
 800aec0:	0018      	movs	r0, r3
 800aec2:	e721      	b.n	800ad08 <_printf_float+0xbc>
 800aec4:	002a      	movs	r2, r5
 800aec6:	2301      	movs	r3, #1
 800aec8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aeca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aecc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800aece:	321a      	adds	r2, #26
 800aed0:	47b8      	blx	r7
 800aed2:	3001      	adds	r0, #1
 800aed4:	d100      	bne.n	800aed8 <_printf_float+0x28c>
 800aed6:	e715      	b.n	800ad04 <_printf_float+0xb8>
 800aed8:	3401      	adds	r4, #1
 800aeda:	e7e5      	b.n	800aea8 <_printf_float+0x25c>
 800aedc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	dc3a      	bgt.n	800af58 <_printf_float+0x30c>
 800aee2:	2301      	movs	r3, #1
 800aee4:	4a1b      	ldr	r2, [pc, #108]	@ (800af54 <_printf_float+0x308>)
 800aee6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aee8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aeea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800aeec:	47a0      	blx	r4
 800aeee:	3001      	adds	r0, #1
 800aef0:	d100      	bne.n	800aef4 <_printf_float+0x2a8>
 800aef2:	e707      	b.n	800ad04 <_printf_float+0xb8>
 800aef4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800aef6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aef8:	4333      	orrs	r3, r6
 800aefa:	d102      	bne.n	800af02 <_printf_float+0x2b6>
 800aefc:	682b      	ldr	r3, [r5, #0]
 800aefe:	07db      	lsls	r3, r3, #31
 800af00:	d5d5      	bpl.n	800aeae <_printf_float+0x262>
 800af02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800af06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af08:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af0a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800af0c:	47a0      	blx	r4
 800af0e:	2300      	movs	r3, #0
 800af10:	3001      	adds	r0, #1
 800af12:	d100      	bne.n	800af16 <_printf_float+0x2ca>
 800af14:	e6f6      	b.n	800ad04 <_printf_float+0xb8>
 800af16:	930c      	str	r3, [sp, #48]	@ 0x30
 800af18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800af1a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800af1c:	425b      	negs	r3, r3
 800af1e:	4293      	cmp	r3, r2
 800af20:	dc01      	bgt.n	800af26 <_printf_float+0x2da>
 800af22:	0033      	movs	r3, r6
 800af24:	e792      	b.n	800ae4c <_printf_float+0x200>
 800af26:	002a      	movs	r2, r5
 800af28:	2301      	movs	r3, #1
 800af2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af2e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800af30:	321a      	adds	r2, #26
 800af32:	47a0      	blx	r4
 800af34:	3001      	adds	r0, #1
 800af36:	d100      	bne.n	800af3a <_printf_float+0x2ee>
 800af38:	e6e4      	b.n	800ad04 <_printf_float+0xb8>
 800af3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af3c:	3301      	adds	r3, #1
 800af3e:	e7ea      	b.n	800af16 <_printf_float+0x2ca>
 800af40:	7fefffff 	.word	0x7fefffff
 800af44:	0800dc6c 	.word	0x0800dc6c
 800af48:	0800dc70 	.word	0x0800dc70
 800af4c:	0800dc74 	.word	0x0800dc74
 800af50:	0800dc78 	.word	0x0800dc78
 800af54:	0800dc7c 	.word	0x0800dc7c
 800af58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af5a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800af5c:	930c      	str	r3, [sp, #48]	@ 0x30
 800af5e:	429e      	cmp	r6, r3
 800af60:	dd00      	ble.n	800af64 <_printf_float+0x318>
 800af62:	001e      	movs	r6, r3
 800af64:	2e00      	cmp	r6, #0
 800af66:	dc31      	bgt.n	800afcc <_printf_float+0x380>
 800af68:	43f3      	mvns	r3, r6
 800af6a:	2400      	movs	r4, #0
 800af6c:	17db      	asrs	r3, r3, #31
 800af6e:	4033      	ands	r3, r6
 800af70:	930e      	str	r3, [sp, #56]	@ 0x38
 800af72:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800af74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af76:	1af3      	subs	r3, r6, r3
 800af78:	42a3      	cmp	r3, r4
 800af7a:	dc30      	bgt.n	800afde <_printf_float+0x392>
 800af7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800af7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800af80:	429a      	cmp	r2, r3
 800af82:	dc38      	bgt.n	800aff6 <_printf_float+0x3aa>
 800af84:	682b      	ldr	r3, [r5, #0]
 800af86:	07db      	lsls	r3, r3, #31
 800af88:	d435      	bmi.n	800aff6 <_printf_float+0x3aa>
 800af8a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800af8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800af90:	1b9b      	subs	r3, r3, r6
 800af92:	1b14      	subs	r4, r2, r4
 800af94:	429c      	cmp	r4, r3
 800af96:	dd00      	ble.n	800af9a <_printf_float+0x34e>
 800af98:	001c      	movs	r4, r3
 800af9a:	2c00      	cmp	r4, #0
 800af9c:	dc34      	bgt.n	800b008 <_printf_float+0x3bc>
 800af9e:	43e3      	mvns	r3, r4
 800afa0:	2600      	movs	r6, #0
 800afa2:	17db      	asrs	r3, r3, #31
 800afa4:	401c      	ands	r4, r3
 800afa6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800afa8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	1b1b      	subs	r3, r3, r4
 800afae:	42b3      	cmp	r3, r6
 800afb0:	dc00      	bgt.n	800afb4 <_printf_float+0x368>
 800afb2:	e77c      	b.n	800aeae <_printf_float+0x262>
 800afb4:	002a      	movs	r2, r5
 800afb6:	2301      	movs	r3, #1
 800afb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800afba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afbc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800afbe:	321a      	adds	r2, #26
 800afc0:	47b8      	blx	r7
 800afc2:	3001      	adds	r0, #1
 800afc4:	d100      	bne.n	800afc8 <_printf_float+0x37c>
 800afc6:	e69d      	b.n	800ad04 <_printf_float+0xb8>
 800afc8:	3601      	adds	r6, #1
 800afca:	e7ec      	b.n	800afa6 <_printf_float+0x35a>
 800afcc:	0033      	movs	r3, r6
 800afce:	003a      	movs	r2, r7
 800afd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800afd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afd4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800afd6:	47a0      	blx	r4
 800afd8:	3001      	adds	r0, #1
 800afda:	d1c5      	bne.n	800af68 <_printf_float+0x31c>
 800afdc:	e692      	b.n	800ad04 <_printf_float+0xb8>
 800afde:	002a      	movs	r2, r5
 800afe0:	2301      	movs	r3, #1
 800afe2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800afe4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afe6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800afe8:	321a      	adds	r2, #26
 800afea:	47b0      	blx	r6
 800afec:	3001      	adds	r0, #1
 800afee:	d100      	bne.n	800aff2 <_printf_float+0x3a6>
 800aff0:	e688      	b.n	800ad04 <_printf_float+0xb8>
 800aff2:	3401      	adds	r4, #1
 800aff4:	e7bd      	b.n	800af72 <_printf_float+0x326>
 800aff6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aff8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800affa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800affc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800affe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b000:	47a0      	blx	r4
 800b002:	3001      	adds	r0, #1
 800b004:	d1c1      	bne.n	800af8a <_printf_float+0x33e>
 800b006:	e67d      	b.n	800ad04 <_printf_float+0xb8>
 800b008:	19ba      	adds	r2, r7, r6
 800b00a:	0023      	movs	r3, r4
 800b00c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b00e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b010:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b012:	47b0      	blx	r6
 800b014:	3001      	adds	r0, #1
 800b016:	d1c2      	bne.n	800af9e <_printf_float+0x352>
 800b018:	e674      	b.n	800ad04 <_printf_float+0xb8>
 800b01a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b01c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b01e:	2b01      	cmp	r3, #1
 800b020:	dc02      	bgt.n	800b028 <_printf_float+0x3dc>
 800b022:	2301      	movs	r3, #1
 800b024:	421a      	tst	r2, r3
 800b026:	d039      	beq.n	800b09c <_printf_float+0x450>
 800b028:	2301      	movs	r3, #1
 800b02a:	003a      	movs	r2, r7
 800b02c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b02e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b030:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b032:	47b0      	blx	r6
 800b034:	3001      	adds	r0, #1
 800b036:	d100      	bne.n	800b03a <_printf_float+0x3ee>
 800b038:	e664      	b.n	800ad04 <_printf_float+0xb8>
 800b03a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b03c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b03e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b040:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b042:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b044:	47b0      	blx	r6
 800b046:	3001      	adds	r0, #1
 800b048:	d100      	bne.n	800b04c <_printf_float+0x400>
 800b04a:	e65b      	b.n	800ad04 <_printf_float+0xb8>
 800b04c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800b04e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b050:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b052:	2200      	movs	r2, #0
 800b054:	3b01      	subs	r3, #1
 800b056:	930c      	str	r3, [sp, #48]	@ 0x30
 800b058:	2300      	movs	r3, #0
 800b05a:	f7f5 f9f3 	bl	8000444 <__aeabi_dcmpeq>
 800b05e:	2800      	cmp	r0, #0
 800b060:	d11a      	bne.n	800b098 <_printf_float+0x44c>
 800b062:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b064:	1c7a      	adds	r2, r7, #1
 800b066:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b068:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b06a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b06c:	47b0      	blx	r6
 800b06e:	3001      	adds	r0, #1
 800b070:	d10e      	bne.n	800b090 <_printf_float+0x444>
 800b072:	e647      	b.n	800ad04 <_printf_float+0xb8>
 800b074:	002a      	movs	r2, r5
 800b076:	2301      	movs	r3, #1
 800b078:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b07a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b07c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b07e:	321a      	adds	r2, #26
 800b080:	47b8      	blx	r7
 800b082:	3001      	adds	r0, #1
 800b084:	d100      	bne.n	800b088 <_printf_float+0x43c>
 800b086:	e63d      	b.n	800ad04 <_printf_float+0xb8>
 800b088:	3601      	adds	r6, #1
 800b08a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b08c:	429e      	cmp	r6, r3
 800b08e:	dbf1      	blt.n	800b074 <_printf_float+0x428>
 800b090:	002a      	movs	r2, r5
 800b092:	0023      	movs	r3, r4
 800b094:	3250      	adds	r2, #80	@ 0x50
 800b096:	e6da      	b.n	800ae4e <_printf_float+0x202>
 800b098:	2600      	movs	r6, #0
 800b09a:	e7f6      	b.n	800b08a <_printf_float+0x43e>
 800b09c:	003a      	movs	r2, r7
 800b09e:	e7e2      	b.n	800b066 <_printf_float+0x41a>
 800b0a0:	002a      	movs	r2, r5
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b0a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0a8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b0aa:	3219      	adds	r2, #25
 800b0ac:	47b0      	blx	r6
 800b0ae:	3001      	adds	r0, #1
 800b0b0:	d100      	bne.n	800b0b4 <_printf_float+0x468>
 800b0b2:	e627      	b.n	800ad04 <_printf_float+0xb8>
 800b0b4:	3401      	adds	r4, #1
 800b0b6:	68eb      	ldr	r3, [r5, #12]
 800b0b8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b0ba:	1a9b      	subs	r3, r3, r2
 800b0bc:	42a3      	cmp	r3, r4
 800b0be:	dcef      	bgt.n	800b0a0 <_printf_float+0x454>
 800b0c0:	e6f9      	b.n	800aeb6 <_printf_float+0x26a>
 800b0c2:	2400      	movs	r4, #0
 800b0c4:	e7f7      	b.n	800b0b6 <_printf_float+0x46a>
 800b0c6:	46c0      	nop			@ (mov r8, r8)

0800b0c8 <_printf_common>:
 800b0c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0ca:	0016      	movs	r6, r2
 800b0cc:	9301      	str	r3, [sp, #4]
 800b0ce:	688a      	ldr	r2, [r1, #8]
 800b0d0:	690b      	ldr	r3, [r1, #16]
 800b0d2:	000c      	movs	r4, r1
 800b0d4:	9000      	str	r0, [sp, #0]
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	da00      	bge.n	800b0dc <_printf_common+0x14>
 800b0da:	0013      	movs	r3, r2
 800b0dc:	0022      	movs	r2, r4
 800b0de:	6033      	str	r3, [r6, #0]
 800b0e0:	3243      	adds	r2, #67	@ 0x43
 800b0e2:	7812      	ldrb	r2, [r2, #0]
 800b0e4:	2a00      	cmp	r2, #0
 800b0e6:	d001      	beq.n	800b0ec <_printf_common+0x24>
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	6033      	str	r3, [r6, #0]
 800b0ec:	6823      	ldr	r3, [r4, #0]
 800b0ee:	069b      	lsls	r3, r3, #26
 800b0f0:	d502      	bpl.n	800b0f8 <_printf_common+0x30>
 800b0f2:	6833      	ldr	r3, [r6, #0]
 800b0f4:	3302      	adds	r3, #2
 800b0f6:	6033      	str	r3, [r6, #0]
 800b0f8:	6822      	ldr	r2, [r4, #0]
 800b0fa:	2306      	movs	r3, #6
 800b0fc:	0015      	movs	r5, r2
 800b0fe:	401d      	ands	r5, r3
 800b100:	421a      	tst	r2, r3
 800b102:	d027      	beq.n	800b154 <_printf_common+0x8c>
 800b104:	0023      	movs	r3, r4
 800b106:	3343      	adds	r3, #67	@ 0x43
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	1e5a      	subs	r2, r3, #1
 800b10c:	4193      	sbcs	r3, r2
 800b10e:	6822      	ldr	r2, [r4, #0]
 800b110:	0692      	lsls	r2, r2, #26
 800b112:	d430      	bmi.n	800b176 <_printf_common+0xae>
 800b114:	0022      	movs	r2, r4
 800b116:	9901      	ldr	r1, [sp, #4]
 800b118:	9800      	ldr	r0, [sp, #0]
 800b11a:	9d08      	ldr	r5, [sp, #32]
 800b11c:	3243      	adds	r2, #67	@ 0x43
 800b11e:	47a8      	blx	r5
 800b120:	3001      	adds	r0, #1
 800b122:	d025      	beq.n	800b170 <_printf_common+0xa8>
 800b124:	2206      	movs	r2, #6
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	2500      	movs	r5, #0
 800b12a:	4013      	ands	r3, r2
 800b12c:	2b04      	cmp	r3, #4
 800b12e:	d105      	bne.n	800b13c <_printf_common+0x74>
 800b130:	6833      	ldr	r3, [r6, #0]
 800b132:	68e5      	ldr	r5, [r4, #12]
 800b134:	1aed      	subs	r5, r5, r3
 800b136:	43eb      	mvns	r3, r5
 800b138:	17db      	asrs	r3, r3, #31
 800b13a:	401d      	ands	r5, r3
 800b13c:	68a3      	ldr	r3, [r4, #8]
 800b13e:	6922      	ldr	r2, [r4, #16]
 800b140:	4293      	cmp	r3, r2
 800b142:	dd01      	ble.n	800b148 <_printf_common+0x80>
 800b144:	1a9b      	subs	r3, r3, r2
 800b146:	18ed      	adds	r5, r5, r3
 800b148:	2600      	movs	r6, #0
 800b14a:	42b5      	cmp	r5, r6
 800b14c:	d120      	bne.n	800b190 <_printf_common+0xc8>
 800b14e:	2000      	movs	r0, #0
 800b150:	e010      	b.n	800b174 <_printf_common+0xac>
 800b152:	3501      	adds	r5, #1
 800b154:	68e3      	ldr	r3, [r4, #12]
 800b156:	6832      	ldr	r2, [r6, #0]
 800b158:	1a9b      	subs	r3, r3, r2
 800b15a:	42ab      	cmp	r3, r5
 800b15c:	ddd2      	ble.n	800b104 <_printf_common+0x3c>
 800b15e:	0022      	movs	r2, r4
 800b160:	2301      	movs	r3, #1
 800b162:	9901      	ldr	r1, [sp, #4]
 800b164:	9800      	ldr	r0, [sp, #0]
 800b166:	9f08      	ldr	r7, [sp, #32]
 800b168:	3219      	adds	r2, #25
 800b16a:	47b8      	blx	r7
 800b16c:	3001      	adds	r0, #1
 800b16e:	d1f0      	bne.n	800b152 <_printf_common+0x8a>
 800b170:	2001      	movs	r0, #1
 800b172:	4240      	negs	r0, r0
 800b174:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b176:	2030      	movs	r0, #48	@ 0x30
 800b178:	18e1      	adds	r1, r4, r3
 800b17a:	3143      	adds	r1, #67	@ 0x43
 800b17c:	7008      	strb	r0, [r1, #0]
 800b17e:	0021      	movs	r1, r4
 800b180:	1c5a      	adds	r2, r3, #1
 800b182:	3145      	adds	r1, #69	@ 0x45
 800b184:	7809      	ldrb	r1, [r1, #0]
 800b186:	18a2      	adds	r2, r4, r2
 800b188:	3243      	adds	r2, #67	@ 0x43
 800b18a:	3302      	adds	r3, #2
 800b18c:	7011      	strb	r1, [r2, #0]
 800b18e:	e7c1      	b.n	800b114 <_printf_common+0x4c>
 800b190:	0022      	movs	r2, r4
 800b192:	2301      	movs	r3, #1
 800b194:	9901      	ldr	r1, [sp, #4]
 800b196:	9800      	ldr	r0, [sp, #0]
 800b198:	9f08      	ldr	r7, [sp, #32]
 800b19a:	321a      	adds	r2, #26
 800b19c:	47b8      	blx	r7
 800b19e:	3001      	adds	r0, #1
 800b1a0:	d0e6      	beq.n	800b170 <_printf_common+0xa8>
 800b1a2:	3601      	adds	r6, #1
 800b1a4:	e7d1      	b.n	800b14a <_printf_common+0x82>
	...

0800b1a8 <_printf_i>:
 800b1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1aa:	b08b      	sub	sp, #44	@ 0x2c
 800b1ac:	9206      	str	r2, [sp, #24]
 800b1ae:	000a      	movs	r2, r1
 800b1b0:	3243      	adds	r2, #67	@ 0x43
 800b1b2:	9307      	str	r3, [sp, #28]
 800b1b4:	9005      	str	r0, [sp, #20]
 800b1b6:	9203      	str	r2, [sp, #12]
 800b1b8:	7e0a      	ldrb	r2, [r1, #24]
 800b1ba:	000c      	movs	r4, r1
 800b1bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b1be:	2a78      	cmp	r2, #120	@ 0x78
 800b1c0:	d809      	bhi.n	800b1d6 <_printf_i+0x2e>
 800b1c2:	2a62      	cmp	r2, #98	@ 0x62
 800b1c4:	d80b      	bhi.n	800b1de <_printf_i+0x36>
 800b1c6:	2a00      	cmp	r2, #0
 800b1c8:	d100      	bne.n	800b1cc <_printf_i+0x24>
 800b1ca:	e0bc      	b.n	800b346 <_printf_i+0x19e>
 800b1cc:	497b      	ldr	r1, [pc, #492]	@ (800b3bc <_printf_i+0x214>)
 800b1ce:	9104      	str	r1, [sp, #16]
 800b1d0:	2a58      	cmp	r2, #88	@ 0x58
 800b1d2:	d100      	bne.n	800b1d6 <_printf_i+0x2e>
 800b1d4:	e090      	b.n	800b2f8 <_printf_i+0x150>
 800b1d6:	0025      	movs	r5, r4
 800b1d8:	3542      	adds	r5, #66	@ 0x42
 800b1da:	702a      	strb	r2, [r5, #0]
 800b1dc:	e022      	b.n	800b224 <_printf_i+0x7c>
 800b1de:	0010      	movs	r0, r2
 800b1e0:	3863      	subs	r0, #99	@ 0x63
 800b1e2:	2815      	cmp	r0, #21
 800b1e4:	d8f7      	bhi.n	800b1d6 <_printf_i+0x2e>
 800b1e6:	f7f4 ff9d 	bl	8000124 <__gnu_thumb1_case_shi>
 800b1ea:	0016      	.short	0x0016
 800b1ec:	fff6001f 	.word	0xfff6001f
 800b1f0:	fff6fff6 	.word	0xfff6fff6
 800b1f4:	001ffff6 	.word	0x001ffff6
 800b1f8:	fff6fff6 	.word	0xfff6fff6
 800b1fc:	fff6fff6 	.word	0xfff6fff6
 800b200:	003600a1 	.word	0x003600a1
 800b204:	fff60080 	.word	0xfff60080
 800b208:	00b2fff6 	.word	0x00b2fff6
 800b20c:	0036fff6 	.word	0x0036fff6
 800b210:	fff6fff6 	.word	0xfff6fff6
 800b214:	0084      	.short	0x0084
 800b216:	0025      	movs	r5, r4
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	3542      	adds	r5, #66	@ 0x42
 800b21c:	1d11      	adds	r1, r2, #4
 800b21e:	6019      	str	r1, [r3, #0]
 800b220:	6813      	ldr	r3, [r2, #0]
 800b222:	702b      	strb	r3, [r5, #0]
 800b224:	2301      	movs	r3, #1
 800b226:	e0a0      	b.n	800b36a <_printf_i+0x1c2>
 800b228:	6818      	ldr	r0, [r3, #0]
 800b22a:	6809      	ldr	r1, [r1, #0]
 800b22c:	1d02      	adds	r2, r0, #4
 800b22e:	060d      	lsls	r5, r1, #24
 800b230:	d50b      	bpl.n	800b24a <_printf_i+0xa2>
 800b232:	6806      	ldr	r6, [r0, #0]
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	2e00      	cmp	r6, #0
 800b238:	da03      	bge.n	800b242 <_printf_i+0x9a>
 800b23a:	232d      	movs	r3, #45	@ 0x2d
 800b23c:	9a03      	ldr	r2, [sp, #12]
 800b23e:	4276      	negs	r6, r6
 800b240:	7013      	strb	r3, [r2, #0]
 800b242:	4b5e      	ldr	r3, [pc, #376]	@ (800b3bc <_printf_i+0x214>)
 800b244:	270a      	movs	r7, #10
 800b246:	9304      	str	r3, [sp, #16]
 800b248:	e018      	b.n	800b27c <_printf_i+0xd4>
 800b24a:	6806      	ldr	r6, [r0, #0]
 800b24c:	601a      	str	r2, [r3, #0]
 800b24e:	0649      	lsls	r1, r1, #25
 800b250:	d5f1      	bpl.n	800b236 <_printf_i+0x8e>
 800b252:	b236      	sxth	r6, r6
 800b254:	e7ef      	b.n	800b236 <_printf_i+0x8e>
 800b256:	6808      	ldr	r0, [r1, #0]
 800b258:	6819      	ldr	r1, [r3, #0]
 800b25a:	c940      	ldmia	r1!, {r6}
 800b25c:	0605      	lsls	r5, r0, #24
 800b25e:	d402      	bmi.n	800b266 <_printf_i+0xbe>
 800b260:	0640      	lsls	r0, r0, #25
 800b262:	d500      	bpl.n	800b266 <_printf_i+0xbe>
 800b264:	b2b6      	uxth	r6, r6
 800b266:	6019      	str	r1, [r3, #0]
 800b268:	4b54      	ldr	r3, [pc, #336]	@ (800b3bc <_printf_i+0x214>)
 800b26a:	270a      	movs	r7, #10
 800b26c:	9304      	str	r3, [sp, #16]
 800b26e:	2a6f      	cmp	r2, #111	@ 0x6f
 800b270:	d100      	bne.n	800b274 <_printf_i+0xcc>
 800b272:	3f02      	subs	r7, #2
 800b274:	0023      	movs	r3, r4
 800b276:	2200      	movs	r2, #0
 800b278:	3343      	adds	r3, #67	@ 0x43
 800b27a:	701a      	strb	r2, [r3, #0]
 800b27c:	6863      	ldr	r3, [r4, #4]
 800b27e:	60a3      	str	r3, [r4, #8]
 800b280:	2b00      	cmp	r3, #0
 800b282:	db03      	blt.n	800b28c <_printf_i+0xe4>
 800b284:	2104      	movs	r1, #4
 800b286:	6822      	ldr	r2, [r4, #0]
 800b288:	438a      	bics	r2, r1
 800b28a:	6022      	str	r2, [r4, #0]
 800b28c:	2e00      	cmp	r6, #0
 800b28e:	d102      	bne.n	800b296 <_printf_i+0xee>
 800b290:	9d03      	ldr	r5, [sp, #12]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00c      	beq.n	800b2b0 <_printf_i+0x108>
 800b296:	9d03      	ldr	r5, [sp, #12]
 800b298:	0030      	movs	r0, r6
 800b29a:	0039      	movs	r1, r7
 800b29c:	f7f4 ffd2 	bl	8000244 <__aeabi_uidivmod>
 800b2a0:	9b04      	ldr	r3, [sp, #16]
 800b2a2:	3d01      	subs	r5, #1
 800b2a4:	5c5b      	ldrb	r3, [r3, r1]
 800b2a6:	702b      	strb	r3, [r5, #0]
 800b2a8:	0033      	movs	r3, r6
 800b2aa:	0006      	movs	r6, r0
 800b2ac:	429f      	cmp	r7, r3
 800b2ae:	d9f3      	bls.n	800b298 <_printf_i+0xf0>
 800b2b0:	2f08      	cmp	r7, #8
 800b2b2:	d109      	bne.n	800b2c8 <_printf_i+0x120>
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	07db      	lsls	r3, r3, #31
 800b2b8:	d506      	bpl.n	800b2c8 <_printf_i+0x120>
 800b2ba:	6862      	ldr	r2, [r4, #4]
 800b2bc:	6923      	ldr	r3, [r4, #16]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	dc02      	bgt.n	800b2c8 <_printf_i+0x120>
 800b2c2:	2330      	movs	r3, #48	@ 0x30
 800b2c4:	3d01      	subs	r5, #1
 800b2c6:	702b      	strb	r3, [r5, #0]
 800b2c8:	9b03      	ldr	r3, [sp, #12]
 800b2ca:	1b5b      	subs	r3, r3, r5
 800b2cc:	6123      	str	r3, [r4, #16]
 800b2ce:	9b07      	ldr	r3, [sp, #28]
 800b2d0:	0021      	movs	r1, r4
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	9805      	ldr	r0, [sp, #20]
 800b2d6:	9b06      	ldr	r3, [sp, #24]
 800b2d8:	aa09      	add	r2, sp, #36	@ 0x24
 800b2da:	f7ff fef5 	bl	800b0c8 <_printf_common>
 800b2de:	3001      	adds	r0, #1
 800b2e0:	d148      	bne.n	800b374 <_printf_i+0x1cc>
 800b2e2:	2001      	movs	r0, #1
 800b2e4:	4240      	negs	r0, r0
 800b2e6:	b00b      	add	sp, #44	@ 0x2c
 800b2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2ea:	2220      	movs	r2, #32
 800b2ec:	6809      	ldr	r1, [r1, #0]
 800b2ee:	430a      	orrs	r2, r1
 800b2f0:	6022      	str	r2, [r4, #0]
 800b2f2:	2278      	movs	r2, #120	@ 0x78
 800b2f4:	4932      	ldr	r1, [pc, #200]	@ (800b3c0 <_printf_i+0x218>)
 800b2f6:	9104      	str	r1, [sp, #16]
 800b2f8:	0021      	movs	r1, r4
 800b2fa:	3145      	adds	r1, #69	@ 0x45
 800b2fc:	700a      	strb	r2, [r1, #0]
 800b2fe:	6819      	ldr	r1, [r3, #0]
 800b300:	6822      	ldr	r2, [r4, #0]
 800b302:	c940      	ldmia	r1!, {r6}
 800b304:	0610      	lsls	r0, r2, #24
 800b306:	d402      	bmi.n	800b30e <_printf_i+0x166>
 800b308:	0650      	lsls	r0, r2, #25
 800b30a:	d500      	bpl.n	800b30e <_printf_i+0x166>
 800b30c:	b2b6      	uxth	r6, r6
 800b30e:	6019      	str	r1, [r3, #0]
 800b310:	07d3      	lsls	r3, r2, #31
 800b312:	d502      	bpl.n	800b31a <_printf_i+0x172>
 800b314:	2320      	movs	r3, #32
 800b316:	4313      	orrs	r3, r2
 800b318:	6023      	str	r3, [r4, #0]
 800b31a:	2e00      	cmp	r6, #0
 800b31c:	d001      	beq.n	800b322 <_printf_i+0x17a>
 800b31e:	2710      	movs	r7, #16
 800b320:	e7a8      	b.n	800b274 <_printf_i+0xcc>
 800b322:	2220      	movs	r2, #32
 800b324:	6823      	ldr	r3, [r4, #0]
 800b326:	4393      	bics	r3, r2
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	e7f8      	b.n	800b31e <_printf_i+0x176>
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	680d      	ldr	r5, [r1, #0]
 800b330:	1d10      	adds	r0, r2, #4
 800b332:	6949      	ldr	r1, [r1, #20]
 800b334:	6018      	str	r0, [r3, #0]
 800b336:	6813      	ldr	r3, [r2, #0]
 800b338:	062e      	lsls	r6, r5, #24
 800b33a:	d501      	bpl.n	800b340 <_printf_i+0x198>
 800b33c:	6019      	str	r1, [r3, #0]
 800b33e:	e002      	b.n	800b346 <_printf_i+0x19e>
 800b340:	066d      	lsls	r5, r5, #25
 800b342:	d5fb      	bpl.n	800b33c <_printf_i+0x194>
 800b344:	8019      	strh	r1, [r3, #0]
 800b346:	2300      	movs	r3, #0
 800b348:	9d03      	ldr	r5, [sp, #12]
 800b34a:	6123      	str	r3, [r4, #16]
 800b34c:	e7bf      	b.n	800b2ce <_printf_i+0x126>
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	1d11      	adds	r1, r2, #4
 800b352:	6019      	str	r1, [r3, #0]
 800b354:	6815      	ldr	r5, [r2, #0]
 800b356:	2100      	movs	r1, #0
 800b358:	0028      	movs	r0, r5
 800b35a:	6862      	ldr	r2, [r4, #4]
 800b35c:	f000 f9ff 	bl	800b75e <memchr>
 800b360:	2800      	cmp	r0, #0
 800b362:	d001      	beq.n	800b368 <_printf_i+0x1c0>
 800b364:	1b40      	subs	r0, r0, r5
 800b366:	6060      	str	r0, [r4, #4]
 800b368:	6863      	ldr	r3, [r4, #4]
 800b36a:	6123      	str	r3, [r4, #16]
 800b36c:	2300      	movs	r3, #0
 800b36e:	9a03      	ldr	r2, [sp, #12]
 800b370:	7013      	strb	r3, [r2, #0]
 800b372:	e7ac      	b.n	800b2ce <_printf_i+0x126>
 800b374:	002a      	movs	r2, r5
 800b376:	6923      	ldr	r3, [r4, #16]
 800b378:	9906      	ldr	r1, [sp, #24]
 800b37a:	9805      	ldr	r0, [sp, #20]
 800b37c:	9d07      	ldr	r5, [sp, #28]
 800b37e:	47a8      	blx	r5
 800b380:	3001      	adds	r0, #1
 800b382:	d0ae      	beq.n	800b2e2 <_printf_i+0x13a>
 800b384:	6823      	ldr	r3, [r4, #0]
 800b386:	079b      	lsls	r3, r3, #30
 800b388:	d415      	bmi.n	800b3b6 <_printf_i+0x20e>
 800b38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b38c:	68e0      	ldr	r0, [r4, #12]
 800b38e:	4298      	cmp	r0, r3
 800b390:	daa9      	bge.n	800b2e6 <_printf_i+0x13e>
 800b392:	0018      	movs	r0, r3
 800b394:	e7a7      	b.n	800b2e6 <_printf_i+0x13e>
 800b396:	0022      	movs	r2, r4
 800b398:	2301      	movs	r3, #1
 800b39a:	9906      	ldr	r1, [sp, #24]
 800b39c:	9805      	ldr	r0, [sp, #20]
 800b39e:	9e07      	ldr	r6, [sp, #28]
 800b3a0:	3219      	adds	r2, #25
 800b3a2:	47b0      	blx	r6
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	d09c      	beq.n	800b2e2 <_printf_i+0x13a>
 800b3a8:	3501      	adds	r5, #1
 800b3aa:	68e3      	ldr	r3, [r4, #12]
 800b3ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3ae:	1a9b      	subs	r3, r3, r2
 800b3b0:	42ab      	cmp	r3, r5
 800b3b2:	dcf0      	bgt.n	800b396 <_printf_i+0x1ee>
 800b3b4:	e7e9      	b.n	800b38a <_printf_i+0x1e2>
 800b3b6:	2500      	movs	r5, #0
 800b3b8:	e7f7      	b.n	800b3aa <_printf_i+0x202>
 800b3ba:	46c0      	nop			@ (mov r8, r8)
 800b3bc:	0800dc7e 	.word	0x0800dc7e
 800b3c0:	0800dc8f 	.word	0x0800dc8f

0800b3c4 <std>:
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	b510      	push	{r4, lr}
 800b3c8:	0004      	movs	r4, r0
 800b3ca:	6003      	str	r3, [r0, #0]
 800b3cc:	6043      	str	r3, [r0, #4]
 800b3ce:	6083      	str	r3, [r0, #8]
 800b3d0:	8181      	strh	r1, [r0, #12]
 800b3d2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b3d4:	81c2      	strh	r2, [r0, #14]
 800b3d6:	6103      	str	r3, [r0, #16]
 800b3d8:	6143      	str	r3, [r0, #20]
 800b3da:	6183      	str	r3, [r0, #24]
 800b3dc:	0019      	movs	r1, r3
 800b3de:	2208      	movs	r2, #8
 800b3e0:	305c      	adds	r0, #92	@ 0x5c
 800b3e2:	f000 f91f 	bl	800b624 <memset>
 800b3e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b414 <std+0x50>)
 800b3e8:	6224      	str	r4, [r4, #32]
 800b3ea:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b418 <std+0x54>)
 800b3ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b41c <std+0x58>)
 800b3f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b3f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b420 <std+0x5c>)
 800b3f6:	6323      	str	r3, [r4, #48]	@ 0x30
 800b3f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b424 <std+0x60>)
 800b3fa:	429c      	cmp	r4, r3
 800b3fc:	d005      	beq.n	800b40a <std+0x46>
 800b3fe:	4b0a      	ldr	r3, [pc, #40]	@ (800b428 <std+0x64>)
 800b400:	429c      	cmp	r4, r3
 800b402:	d002      	beq.n	800b40a <std+0x46>
 800b404:	4b09      	ldr	r3, [pc, #36]	@ (800b42c <std+0x68>)
 800b406:	429c      	cmp	r4, r3
 800b408:	d103      	bne.n	800b412 <std+0x4e>
 800b40a:	0020      	movs	r0, r4
 800b40c:	3058      	adds	r0, #88	@ 0x58
 800b40e:	f000 f9a3 	bl	800b758 <__retarget_lock_init_recursive>
 800b412:	bd10      	pop	{r4, pc}
 800b414:	0800b58d 	.word	0x0800b58d
 800b418:	0800b5b5 	.word	0x0800b5b5
 800b41c:	0800b5ed 	.word	0x0800b5ed
 800b420:	0800b619 	.word	0x0800b619
 800b424:	20000514 	.word	0x20000514
 800b428:	2000057c 	.word	0x2000057c
 800b42c:	200005e4 	.word	0x200005e4

0800b430 <stdio_exit_handler>:
 800b430:	b510      	push	{r4, lr}
 800b432:	4a03      	ldr	r2, [pc, #12]	@ (800b440 <stdio_exit_handler+0x10>)
 800b434:	4903      	ldr	r1, [pc, #12]	@ (800b444 <stdio_exit_handler+0x14>)
 800b436:	4804      	ldr	r0, [pc, #16]	@ (800b448 <stdio_exit_handler+0x18>)
 800b438:	f000 f86c 	bl	800b514 <_fwalk_sglue>
 800b43c:	bd10      	pop	{r4, pc}
 800b43e:	46c0      	nop			@ (mov r8, r8)
 800b440:	2000001c 	.word	0x2000001c
 800b444:	0800d195 	.word	0x0800d195
 800b448:	2000002c 	.word	0x2000002c

0800b44c <cleanup_stdio>:
 800b44c:	6841      	ldr	r1, [r0, #4]
 800b44e:	4b0b      	ldr	r3, [pc, #44]	@ (800b47c <cleanup_stdio+0x30>)
 800b450:	b510      	push	{r4, lr}
 800b452:	0004      	movs	r4, r0
 800b454:	4299      	cmp	r1, r3
 800b456:	d001      	beq.n	800b45c <cleanup_stdio+0x10>
 800b458:	f001 fe9c 	bl	800d194 <_fflush_r>
 800b45c:	68a1      	ldr	r1, [r4, #8]
 800b45e:	4b08      	ldr	r3, [pc, #32]	@ (800b480 <cleanup_stdio+0x34>)
 800b460:	4299      	cmp	r1, r3
 800b462:	d002      	beq.n	800b46a <cleanup_stdio+0x1e>
 800b464:	0020      	movs	r0, r4
 800b466:	f001 fe95 	bl	800d194 <_fflush_r>
 800b46a:	68e1      	ldr	r1, [r4, #12]
 800b46c:	4b05      	ldr	r3, [pc, #20]	@ (800b484 <cleanup_stdio+0x38>)
 800b46e:	4299      	cmp	r1, r3
 800b470:	d002      	beq.n	800b478 <cleanup_stdio+0x2c>
 800b472:	0020      	movs	r0, r4
 800b474:	f001 fe8e 	bl	800d194 <_fflush_r>
 800b478:	bd10      	pop	{r4, pc}
 800b47a:	46c0      	nop			@ (mov r8, r8)
 800b47c:	20000514 	.word	0x20000514
 800b480:	2000057c 	.word	0x2000057c
 800b484:	200005e4 	.word	0x200005e4

0800b488 <global_stdio_init.part.0>:
 800b488:	b510      	push	{r4, lr}
 800b48a:	4b09      	ldr	r3, [pc, #36]	@ (800b4b0 <global_stdio_init.part.0+0x28>)
 800b48c:	4a09      	ldr	r2, [pc, #36]	@ (800b4b4 <global_stdio_init.part.0+0x2c>)
 800b48e:	2104      	movs	r1, #4
 800b490:	601a      	str	r2, [r3, #0]
 800b492:	4809      	ldr	r0, [pc, #36]	@ (800b4b8 <global_stdio_init.part.0+0x30>)
 800b494:	2200      	movs	r2, #0
 800b496:	f7ff ff95 	bl	800b3c4 <std>
 800b49a:	2201      	movs	r2, #1
 800b49c:	2109      	movs	r1, #9
 800b49e:	4807      	ldr	r0, [pc, #28]	@ (800b4bc <global_stdio_init.part.0+0x34>)
 800b4a0:	f7ff ff90 	bl	800b3c4 <std>
 800b4a4:	2202      	movs	r2, #2
 800b4a6:	2112      	movs	r1, #18
 800b4a8:	4805      	ldr	r0, [pc, #20]	@ (800b4c0 <global_stdio_init.part.0+0x38>)
 800b4aa:	f7ff ff8b 	bl	800b3c4 <std>
 800b4ae:	bd10      	pop	{r4, pc}
 800b4b0:	2000064c 	.word	0x2000064c
 800b4b4:	0800b431 	.word	0x0800b431
 800b4b8:	20000514 	.word	0x20000514
 800b4bc:	2000057c 	.word	0x2000057c
 800b4c0:	200005e4 	.word	0x200005e4

0800b4c4 <__sfp_lock_acquire>:
 800b4c4:	b510      	push	{r4, lr}
 800b4c6:	4802      	ldr	r0, [pc, #8]	@ (800b4d0 <__sfp_lock_acquire+0xc>)
 800b4c8:	f000 f947 	bl	800b75a <__retarget_lock_acquire_recursive>
 800b4cc:	bd10      	pop	{r4, pc}
 800b4ce:	46c0      	nop			@ (mov r8, r8)
 800b4d0:	20000655 	.word	0x20000655

0800b4d4 <__sfp_lock_release>:
 800b4d4:	b510      	push	{r4, lr}
 800b4d6:	4802      	ldr	r0, [pc, #8]	@ (800b4e0 <__sfp_lock_release+0xc>)
 800b4d8:	f000 f940 	bl	800b75c <__retarget_lock_release_recursive>
 800b4dc:	bd10      	pop	{r4, pc}
 800b4de:	46c0      	nop			@ (mov r8, r8)
 800b4e0:	20000655 	.word	0x20000655

0800b4e4 <__sinit>:
 800b4e4:	b510      	push	{r4, lr}
 800b4e6:	0004      	movs	r4, r0
 800b4e8:	f7ff ffec 	bl	800b4c4 <__sfp_lock_acquire>
 800b4ec:	6a23      	ldr	r3, [r4, #32]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d002      	beq.n	800b4f8 <__sinit+0x14>
 800b4f2:	f7ff ffef 	bl	800b4d4 <__sfp_lock_release>
 800b4f6:	bd10      	pop	{r4, pc}
 800b4f8:	4b04      	ldr	r3, [pc, #16]	@ (800b50c <__sinit+0x28>)
 800b4fa:	6223      	str	r3, [r4, #32]
 800b4fc:	4b04      	ldr	r3, [pc, #16]	@ (800b510 <__sinit+0x2c>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1f6      	bne.n	800b4f2 <__sinit+0xe>
 800b504:	f7ff ffc0 	bl	800b488 <global_stdio_init.part.0>
 800b508:	e7f3      	b.n	800b4f2 <__sinit+0xe>
 800b50a:	46c0      	nop			@ (mov r8, r8)
 800b50c:	0800b44d 	.word	0x0800b44d
 800b510:	2000064c 	.word	0x2000064c

0800b514 <_fwalk_sglue>:
 800b514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b516:	0014      	movs	r4, r2
 800b518:	2600      	movs	r6, #0
 800b51a:	9000      	str	r0, [sp, #0]
 800b51c:	9101      	str	r1, [sp, #4]
 800b51e:	68a5      	ldr	r5, [r4, #8]
 800b520:	6867      	ldr	r7, [r4, #4]
 800b522:	3f01      	subs	r7, #1
 800b524:	d504      	bpl.n	800b530 <_fwalk_sglue+0x1c>
 800b526:	6824      	ldr	r4, [r4, #0]
 800b528:	2c00      	cmp	r4, #0
 800b52a:	d1f8      	bne.n	800b51e <_fwalk_sglue+0xa>
 800b52c:	0030      	movs	r0, r6
 800b52e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b530:	89ab      	ldrh	r3, [r5, #12]
 800b532:	2b01      	cmp	r3, #1
 800b534:	d908      	bls.n	800b548 <_fwalk_sglue+0x34>
 800b536:	220e      	movs	r2, #14
 800b538:	5eab      	ldrsh	r3, [r5, r2]
 800b53a:	3301      	adds	r3, #1
 800b53c:	d004      	beq.n	800b548 <_fwalk_sglue+0x34>
 800b53e:	0029      	movs	r1, r5
 800b540:	9800      	ldr	r0, [sp, #0]
 800b542:	9b01      	ldr	r3, [sp, #4]
 800b544:	4798      	blx	r3
 800b546:	4306      	orrs	r6, r0
 800b548:	3568      	adds	r5, #104	@ 0x68
 800b54a:	e7ea      	b.n	800b522 <_fwalk_sglue+0xe>

0800b54c <siprintf>:
 800b54c:	b40e      	push	{r1, r2, r3}
 800b54e:	b500      	push	{lr}
 800b550:	490b      	ldr	r1, [pc, #44]	@ (800b580 <siprintf+0x34>)
 800b552:	b09c      	sub	sp, #112	@ 0x70
 800b554:	ab1d      	add	r3, sp, #116	@ 0x74
 800b556:	9002      	str	r0, [sp, #8]
 800b558:	9006      	str	r0, [sp, #24]
 800b55a:	9107      	str	r1, [sp, #28]
 800b55c:	9104      	str	r1, [sp, #16]
 800b55e:	4809      	ldr	r0, [pc, #36]	@ (800b584 <siprintf+0x38>)
 800b560:	4909      	ldr	r1, [pc, #36]	@ (800b588 <siprintf+0x3c>)
 800b562:	cb04      	ldmia	r3!, {r2}
 800b564:	9105      	str	r1, [sp, #20]
 800b566:	6800      	ldr	r0, [r0, #0]
 800b568:	a902      	add	r1, sp, #8
 800b56a:	9301      	str	r3, [sp, #4]
 800b56c:	f001 fc8e 	bl	800ce8c <_svfiprintf_r>
 800b570:	2200      	movs	r2, #0
 800b572:	9b02      	ldr	r3, [sp, #8]
 800b574:	701a      	strb	r2, [r3, #0]
 800b576:	b01c      	add	sp, #112	@ 0x70
 800b578:	bc08      	pop	{r3}
 800b57a:	b003      	add	sp, #12
 800b57c:	4718      	bx	r3
 800b57e:	46c0      	nop			@ (mov r8, r8)
 800b580:	7fffffff 	.word	0x7fffffff
 800b584:	20000028 	.word	0x20000028
 800b588:	ffff0208 	.word	0xffff0208

0800b58c <__sread>:
 800b58c:	b570      	push	{r4, r5, r6, lr}
 800b58e:	000c      	movs	r4, r1
 800b590:	250e      	movs	r5, #14
 800b592:	5f49      	ldrsh	r1, [r1, r5]
 800b594:	f000 f88e 	bl	800b6b4 <_read_r>
 800b598:	2800      	cmp	r0, #0
 800b59a:	db03      	blt.n	800b5a4 <__sread+0x18>
 800b59c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b59e:	181b      	adds	r3, r3, r0
 800b5a0:	6563      	str	r3, [r4, #84]	@ 0x54
 800b5a2:	bd70      	pop	{r4, r5, r6, pc}
 800b5a4:	89a3      	ldrh	r3, [r4, #12]
 800b5a6:	4a02      	ldr	r2, [pc, #8]	@ (800b5b0 <__sread+0x24>)
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	81a3      	strh	r3, [r4, #12]
 800b5ac:	e7f9      	b.n	800b5a2 <__sread+0x16>
 800b5ae:	46c0      	nop			@ (mov r8, r8)
 800b5b0:	ffffefff 	.word	0xffffefff

0800b5b4 <__swrite>:
 800b5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5b6:	001f      	movs	r7, r3
 800b5b8:	898b      	ldrh	r3, [r1, #12]
 800b5ba:	0005      	movs	r5, r0
 800b5bc:	000c      	movs	r4, r1
 800b5be:	0016      	movs	r6, r2
 800b5c0:	05db      	lsls	r3, r3, #23
 800b5c2:	d505      	bpl.n	800b5d0 <__swrite+0x1c>
 800b5c4:	230e      	movs	r3, #14
 800b5c6:	5ec9      	ldrsh	r1, [r1, r3]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	2302      	movs	r3, #2
 800b5cc:	f000 f85e 	bl	800b68c <_lseek_r>
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	4a05      	ldr	r2, [pc, #20]	@ (800b5e8 <__swrite+0x34>)
 800b5d4:	0028      	movs	r0, r5
 800b5d6:	4013      	ands	r3, r2
 800b5d8:	81a3      	strh	r3, [r4, #12]
 800b5da:	0032      	movs	r2, r6
 800b5dc:	230e      	movs	r3, #14
 800b5de:	5ee1      	ldrsh	r1, [r4, r3]
 800b5e0:	003b      	movs	r3, r7
 800b5e2:	f000 f87b 	bl	800b6dc <_write_r>
 800b5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e8:	ffffefff 	.word	0xffffefff

0800b5ec <__sseek>:
 800b5ec:	b570      	push	{r4, r5, r6, lr}
 800b5ee:	000c      	movs	r4, r1
 800b5f0:	250e      	movs	r5, #14
 800b5f2:	5f49      	ldrsh	r1, [r1, r5]
 800b5f4:	f000 f84a 	bl	800b68c <_lseek_r>
 800b5f8:	89a3      	ldrh	r3, [r4, #12]
 800b5fa:	1c42      	adds	r2, r0, #1
 800b5fc:	d103      	bne.n	800b606 <__sseek+0x1a>
 800b5fe:	4a05      	ldr	r2, [pc, #20]	@ (800b614 <__sseek+0x28>)
 800b600:	4013      	ands	r3, r2
 800b602:	81a3      	strh	r3, [r4, #12]
 800b604:	bd70      	pop	{r4, r5, r6, pc}
 800b606:	2280      	movs	r2, #128	@ 0x80
 800b608:	0152      	lsls	r2, r2, #5
 800b60a:	4313      	orrs	r3, r2
 800b60c:	81a3      	strh	r3, [r4, #12]
 800b60e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b610:	e7f8      	b.n	800b604 <__sseek+0x18>
 800b612:	46c0      	nop			@ (mov r8, r8)
 800b614:	ffffefff 	.word	0xffffefff

0800b618 <__sclose>:
 800b618:	b510      	push	{r4, lr}
 800b61a:	230e      	movs	r3, #14
 800b61c:	5ec9      	ldrsh	r1, [r1, r3]
 800b61e:	f000 f823 	bl	800b668 <_close_r>
 800b622:	bd10      	pop	{r4, pc}

0800b624 <memset>:
 800b624:	0003      	movs	r3, r0
 800b626:	1882      	adds	r2, r0, r2
 800b628:	4293      	cmp	r3, r2
 800b62a:	d100      	bne.n	800b62e <memset+0xa>
 800b62c:	4770      	bx	lr
 800b62e:	7019      	strb	r1, [r3, #0]
 800b630:	3301      	adds	r3, #1
 800b632:	e7f9      	b.n	800b628 <memset+0x4>

0800b634 <strstr>:
 800b634:	780a      	ldrb	r2, [r1, #0]
 800b636:	b530      	push	{r4, r5, lr}
 800b638:	2a00      	cmp	r2, #0
 800b63a:	d10c      	bne.n	800b656 <strstr+0x22>
 800b63c:	bd30      	pop	{r4, r5, pc}
 800b63e:	429a      	cmp	r2, r3
 800b640:	d108      	bne.n	800b654 <strstr+0x20>
 800b642:	2301      	movs	r3, #1
 800b644:	5ccc      	ldrb	r4, [r1, r3]
 800b646:	2c00      	cmp	r4, #0
 800b648:	d0f8      	beq.n	800b63c <strstr+0x8>
 800b64a:	5cc5      	ldrb	r5, [r0, r3]
 800b64c:	42a5      	cmp	r5, r4
 800b64e:	d101      	bne.n	800b654 <strstr+0x20>
 800b650:	3301      	adds	r3, #1
 800b652:	e7f7      	b.n	800b644 <strstr+0x10>
 800b654:	3001      	adds	r0, #1
 800b656:	7803      	ldrb	r3, [r0, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1f0      	bne.n	800b63e <strstr+0xa>
 800b65c:	0018      	movs	r0, r3
 800b65e:	e7ed      	b.n	800b63c <strstr+0x8>

0800b660 <_localeconv_r>:
 800b660:	4800      	ldr	r0, [pc, #0]	@ (800b664 <_localeconv_r+0x4>)
 800b662:	4770      	bx	lr
 800b664:	20000168 	.word	0x20000168

0800b668 <_close_r>:
 800b668:	2300      	movs	r3, #0
 800b66a:	b570      	push	{r4, r5, r6, lr}
 800b66c:	4d06      	ldr	r5, [pc, #24]	@ (800b688 <_close_r+0x20>)
 800b66e:	0004      	movs	r4, r0
 800b670:	0008      	movs	r0, r1
 800b672:	602b      	str	r3, [r5, #0]
 800b674:	f7f9 fede 	bl	8005434 <_close>
 800b678:	1c43      	adds	r3, r0, #1
 800b67a:	d103      	bne.n	800b684 <_close_r+0x1c>
 800b67c:	682b      	ldr	r3, [r5, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d000      	beq.n	800b684 <_close_r+0x1c>
 800b682:	6023      	str	r3, [r4, #0]
 800b684:	bd70      	pop	{r4, r5, r6, pc}
 800b686:	46c0      	nop			@ (mov r8, r8)
 800b688:	20000650 	.word	0x20000650

0800b68c <_lseek_r>:
 800b68c:	b570      	push	{r4, r5, r6, lr}
 800b68e:	0004      	movs	r4, r0
 800b690:	0008      	movs	r0, r1
 800b692:	0011      	movs	r1, r2
 800b694:	001a      	movs	r2, r3
 800b696:	2300      	movs	r3, #0
 800b698:	4d05      	ldr	r5, [pc, #20]	@ (800b6b0 <_lseek_r+0x24>)
 800b69a:	602b      	str	r3, [r5, #0]
 800b69c:	f7f9 feeb 	bl	8005476 <_lseek>
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	d103      	bne.n	800b6ac <_lseek_r+0x20>
 800b6a4:	682b      	ldr	r3, [r5, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d000      	beq.n	800b6ac <_lseek_r+0x20>
 800b6aa:	6023      	str	r3, [r4, #0]
 800b6ac:	bd70      	pop	{r4, r5, r6, pc}
 800b6ae:	46c0      	nop			@ (mov r8, r8)
 800b6b0:	20000650 	.word	0x20000650

0800b6b4 <_read_r>:
 800b6b4:	b570      	push	{r4, r5, r6, lr}
 800b6b6:	0004      	movs	r4, r0
 800b6b8:	0008      	movs	r0, r1
 800b6ba:	0011      	movs	r1, r2
 800b6bc:	001a      	movs	r2, r3
 800b6be:	2300      	movs	r3, #0
 800b6c0:	4d05      	ldr	r5, [pc, #20]	@ (800b6d8 <_read_r+0x24>)
 800b6c2:	602b      	str	r3, [r5, #0]
 800b6c4:	f7f9 fe7d 	bl	80053c2 <_read>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d103      	bne.n	800b6d4 <_read_r+0x20>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d000      	beq.n	800b6d4 <_read_r+0x20>
 800b6d2:	6023      	str	r3, [r4, #0]
 800b6d4:	bd70      	pop	{r4, r5, r6, pc}
 800b6d6:	46c0      	nop			@ (mov r8, r8)
 800b6d8:	20000650 	.word	0x20000650

0800b6dc <_write_r>:
 800b6dc:	b570      	push	{r4, r5, r6, lr}
 800b6de:	0004      	movs	r4, r0
 800b6e0:	0008      	movs	r0, r1
 800b6e2:	0011      	movs	r1, r2
 800b6e4:	001a      	movs	r2, r3
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	4d05      	ldr	r5, [pc, #20]	@ (800b700 <_write_r+0x24>)
 800b6ea:	602b      	str	r3, [r5, #0]
 800b6ec:	f7f9 fe86 	bl	80053fc <_write>
 800b6f0:	1c43      	adds	r3, r0, #1
 800b6f2:	d103      	bne.n	800b6fc <_write_r+0x20>
 800b6f4:	682b      	ldr	r3, [r5, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d000      	beq.n	800b6fc <_write_r+0x20>
 800b6fa:	6023      	str	r3, [r4, #0]
 800b6fc:	bd70      	pop	{r4, r5, r6, pc}
 800b6fe:	46c0      	nop			@ (mov r8, r8)
 800b700:	20000650 	.word	0x20000650

0800b704 <__errno>:
 800b704:	4b01      	ldr	r3, [pc, #4]	@ (800b70c <__errno+0x8>)
 800b706:	6818      	ldr	r0, [r3, #0]
 800b708:	4770      	bx	lr
 800b70a:	46c0      	nop			@ (mov r8, r8)
 800b70c:	20000028 	.word	0x20000028

0800b710 <__libc_init_array>:
 800b710:	b570      	push	{r4, r5, r6, lr}
 800b712:	2600      	movs	r6, #0
 800b714:	4c0c      	ldr	r4, [pc, #48]	@ (800b748 <__libc_init_array+0x38>)
 800b716:	4d0d      	ldr	r5, [pc, #52]	@ (800b74c <__libc_init_array+0x3c>)
 800b718:	1b64      	subs	r4, r4, r5
 800b71a:	10a4      	asrs	r4, r4, #2
 800b71c:	42a6      	cmp	r6, r4
 800b71e:	d109      	bne.n	800b734 <__libc_init_array+0x24>
 800b720:	2600      	movs	r6, #0
 800b722:	f002 f907 	bl	800d934 <_init>
 800b726:	4c0a      	ldr	r4, [pc, #40]	@ (800b750 <__libc_init_array+0x40>)
 800b728:	4d0a      	ldr	r5, [pc, #40]	@ (800b754 <__libc_init_array+0x44>)
 800b72a:	1b64      	subs	r4, r4, r5
 800b72c:	10a4      	asrs	r4, r4, #2
 800b72e:	42a6      	cmp	r6, r4
 800b730:	d105      	bne.n	800b73e <__libc_init_array+0x2e>
 800b732:	bd70      	pop	{r4, r5, r6, pc}
 800b734:	00b3      	lsls	r3, r6, #2
 800b736:	58eb      	ldr	r3, [r5, r3]
 800b738:	4798      	blx	r3
 800b73a:	3601      	adds	r6, #1
 800b73c:	e7ee      	b.n	800b71c <__libc_init_array+0xc>
 800b73e:	00b3      	lsls	r3, r6, #2
 800b740:	58eb      	ldr	r3, [r5, r3]
 800b742:	4798      	blx	r3
 800b744:	3601      	adds	r6, #1
 800b746:	e7f2      	b.n	800b72e <__libc_init_array+0x1e>
 800b748:	0800dfe0 	.word	0x0800dfe0
 800b74c:	0800dfe0 	.word	0x0800dfe0
 800b750:	0800dfe4 	.word	0x0800dfe4
 800b754:	0800dfe0 	.word	0x0800dfe0

0800b758 <__retarget_lock_init_recursive>:
 800b758:	4770      	bx	lr

0800b75a <__retarget_lock_acquire_recursive>:
 800b75a:	4770      	bx	lr

0800b75c <__retarget_lock_release_recursive>:
 800b75c:	4770      	bx	lr

0800b75e <memchr>:
 800b75e:	b2c9      	uxtb	r1, r1
 800b760:	1882      	adds	r2, r0, r2
 800b762:	4290      	cmp	r0, r2
 800b764:	d101      	bne.n	800b76a <memchr+0xc>
 800b766:	2000      	movs	r0, #0
 800b768:	4770      	bx	lr
 800b76a:	7803      	ldrb	r3, [r0, #0]
 800b76c:	428b      	cmp	r3, r1
 800b76e:	d0fb      	beq.n	800b768 <memchr+0xa>
 800b770:	3001      	adds	r0, #1
 800b772:	e7f6      	b.n	800b762 <memchr+0x4>

0800b774 <quorem>:
 800b774:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b776:	6902      	ldr	r2, [r0, #16]
 800b778:	690f      	ldr	r7, [r1, #16]
 800b77a:	b087      	sub	sp, #28
 800b77c:	0006      	movs	r6, r0
 800b77e:	000b      	movs	r3, r1
 800b780:	2000      	movs	r0, #0
 800b782:	9102      	str	r1, [sp, #8]
 800b784:	42ba      	cmp	r2, r7
 800b786:	db6d      	blt.n	800b864 <quorem+0xf0>
 800b788:	3f01      	subs	r7, #1
 800b78a:	00bc      	lsls	r4, r7, #2
 800b78c:	3314      	adds	r3, #20
 800b78e:	9305      	str	r3, [sp, #20]
 800b790:	191b      	adds	r3, r3, r4
 800b792:	9303      	str	r3, [sp, #12]
 800b794:	0033      	movs	r3, r6
 800b796:	3314      	adds	r3, #20
 800b798:	191c      	adds	r4, r3, r4
 800b79a:	9301      	str	r3, [sp, #4]
 800b79c:	6823      	ldr	r3, [r4, #0]
 800b79e:	9304      	str	r3, [sp, #16]
 800b7a0:	9b03      	ldr	r3, [sp, #12]
 800b7a2:	9804      	ldr	r0, [sp, #16]
 800b7a4:	681d      	ldr	r5, [r3, #0]
 800b7a6:	3501      	adds	r5, #1
 800b7a8:	0029      	movs	r1, r5
 800b7aa:	f7f4 fcc5 	bl	8000138 <__udivsi3>
 800b7ae:	9b04      	ldr	r3, [sp, #16]
 800b7b0:	9000      	str	r0, [sp, #0]
 800b7b2:	42ab      	cmp	r3, r5
 800b7b4:	d32b      	bcc.n	800b80e <quorem+0x9a>
 800b7b6:	9b05      	ldr	r3, [sp, #20]
 800b7b8:	9d01      	ldr	r5, [sp, #4]
 800b7ba:	469c      	mov	ip, r3
 800b7bc:	2300      	movs	r3, #0
 800b7be:	9305      	str	r3, [sp, #20]
 800b7c0:	9304      	str	r3, [sp, #16]
 800b7c2:	4662      	mov	r2, ip
 800b7c4:	ca08      	ldmia	r2!, {r3}
 800b7c6:	6828      	ldr	r0, [r5, #0]
 800b7c8:	4694      	mov	ip, r2
 800b7ca:	9a00      	ldr	r2, [sp, #0]
 800b7cc:	b299      	uxth	r1, r3
 800b7ce:	4351      	muls	r1, r2
 800b7d0:	9a05      	ldr	r2, [sp, #20]
 800b7d2:	0c1b      	lsrs	r3, r3, #16
 800b7d4:	1889      	adds	r1, r1, r2
 800b7d6:	9a00      	ldr	r2, [sp, #0]
 800b7d8:	4353      	muls	r3, r2
 800b7da:	0c0a      	lsrs	r2, r1, #16
 800b7dc:	189b      	adds	r3, r3, r2
 800b7de:	0c1a      	lsrs	r2, r3, #16
 800b7e0:	b289      	uxth	r1, r1
 800b7e2:	9205      	str	r2, [sp, #20]
 800b7e4:	b282      	uxth	r2, r0
 800b7e6:	1a52      	subs	r2, r2, r1
 800b7e8:	9904      	ldr	r1, [sp, #16]
 800b7ea:	0c00      	lsrs	r0, r0, #16
 800b7ec:	1852      	adds	r2, r2, r1
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	1411      	asrs	r1, r2, #16
 800b7f2:	1ac3      	subs	r3, r0, r3
 800b7f4:	185b      	adds	r3, r3, r1
 800b7f6:	1419      	asrs	r1, r3, #16
 800b7f8:	b292      	uxth	r2, r2
 800b7fa:	041b      	lsls	r3, r3, #16
 800b7fc:	431a      	orrs	r2, r3
 800b7fe:	9b03      	ldr	r3, [sp, #12]
 800b800:	9104      	str	r1, [sp, #16]
 800b802:	c504      	stmia	r5!, {r2}
 800b804:	4563      	cmp	r3, ip
 800b806:	d2dc      	bcs.n	800b7c2 <quorem+0x4e>
 800b808:	6823      	ldr	r3, [r4, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d030      	beq.n	800b870 <quorem+0xfc>
 800b80e:	0030      	movs	r0, r6
 800b810:	9902      	ldr	r1, [sp, #8]
 800b812:	f001 f9c5 	bl	800cba0 <__mcmp>
 800b816:	2800      	cmp	r0, #0
 800b818:	db23      	blt.n	800b862 <quorem+0xee>
 800b81a:	0034      	movs	r4, r6
 800b81c:	2500      	movs	r5, #0
 800b81e:	9902      	ldr	r1, [sp, #8]
 800b820:	3414      	adds	r4, #20
 800b822:	3114      	adds	r1, #20
 800b824:	6823      	ldr	r3, [r4, #0]
 800b826:	c901      	ldmia	r1!, {r0}
 800b828:	9302      	str	r3, [sp, #8]
 800b82a:	466b      	mov	r3, sp
 800b82c:	891b      	ldrh	r3, [r3, #8]
 800b82e:	b282      	uxth	r2, r0
 800b830:	1a9a      	subs	r2, r3, r2
 800b832:	9b02      	ldr	r3, [sp, #8]
 800b834:	1952      	adds	r2, r2, r5
 800b836:	0c00      	lsrs	r0, r0, #16
 800b838:	0c1b      	lsrs	r3, r3, #16
 800b83a:	1a1b      	subs	r3, r3, r0
 800b83c:	1410      	asrs	r0, r2, #16
 800b83e:	181b      	adds	r3, r3, r0
 800b840:	141d      	asrs	r5, r3, #16
 800b842:	b292      	uxth	r2, r2
 800b844:	041b      	lsls	r3, r3, #16
 800b846:	431a      	orrs	r2, r3
 800b848:	9b03      	ldr	r3, [sp, #12]
 800b84a:	c404      	stmia	r4!, {r2}
 800b84c:	428b      	cmp	r3, r1
 800b84e:	d2e9      	bcs.n	800b824 <quorem+0xb0>
 800b850:	9a01      	ldr	r2, [sp, #4]
 800b852:	00bb      	lsls	r3, r7, #2
 800b854:	18d3      	adds	r3, r2, r3
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	2a00      	cmp	r2, #0
 800b85a:	d013      	beq.n	800b884 <quorem+0x110>
 800b85c:	9b00      	ldr	r3, [sp, #0]
 800b85e:	3301      	adds	r3, #1
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	9800      	ldr	r0, [sp, #0]
 800b864:	b007      	add	sp, #28
 800b866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d104      	bne.n	800b878 <quorem+0x104>
 800b86e:	3f01      	subs	r7, #1
 800b870:	9b01      	ldr	r3, [sp, #4]
 800b872:	3c04      	subs	r4, #4
 800b874:	42a3      	cmp	r3, r4
 800b876:	d3f7      	bcc.n	800b868 <quorem+0xf4>
 800b878:	6137      	str	r7, [r6, #16]
 800b87a:	e7c8      	b.n	800b80e <quorem+0x9a>
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	2a00      	cmp	r2, #0
 800b880:	d104      	bne.n	800b88c <quorem+0x118>
 800b882:	3f01      	subs	r7, #1
 800b884:	9a01      	ldr	r2, [sp, #4]
 800b886:	3b04      	subs	r3, #4
 800b888:	429a      	cmp	r2, r3
 800b88a:	d3f7      	bcc.n	800b87c <quorem+0x108>
 800b88c:	6137      	str	r7, [r6, #16]
 800b88e:	e7e5      	b.n	800b85c <quorem+0xe8>

0800b890 <_dtoa_r>:
 800b890:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b892:	0014      	movs	r4, r2
 800b894:	001d      	movs	r5, r3
 800b896:	69c6      	ldr	r6, [r0, #28]
 800b898:	b09d      	sub	sp, #116	@ 0x74
 800b89a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b89c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800b89e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800b8a0:	9003      	str	r0, [sp, #12]
 800b8a2:	2e00      	cmp	r6, #0
 800b8a4:	d10f      	bne.n	800b8c6 <_dtoa_r+0x36>
 800b8a6:	2010      	movs	r0, #16
 800b8a8:	f000 fe30 	bl	800c50c <malloc>
 800b8ac:	9b03      	ldr	r3, [sp, #12]
 800b8ae:	1e02      	subs	r2, r0, #0
 800b8b0:	61d8      	str	r0, [r3, #28]
 800b8b2:	d104      	bne.n	800b8be <_dtoa_r+0x2e>
 800b8b4:	21ef      	movs	r1, #239	@ 0xef
 800b8b6:	4bc7      	ldr	r3, [pc, #796]	@ (800bbd4 <_dtoa_r+0x344>)
 800b8b8:	48c7      	ldr	r0, [pc, #796]	@ (800bbd8 <_dtoa_r+0x348>)
 800b8ba:	f001 fcc5 	bl	800d248 <__assert_func>
 800b8be:	6046      	str	r6, [r0, #4]
 800b8c0:	6086      	str	r6, [r0, #8]
 800b8c2:	6006      	str	r6, [r0, #0]
 800b8c4:	60c6      	str	r6, [r0, #12]
 800b8c6:	9b03      	ldr	r3, [sp, #12]
 800b8c8:	69db      	ldr	r3, [r3, #28]
 800b8ca:	6819      	ldr	r1, [r3, #0]
 800b8cc:	2900      	cmp	r1, #0
 800b8ce:	d00b      	beq.n	800b8e8 <_dtoa_r+0x58>
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	4093      	lsls	r3, r2
 800b8d6:	604a      	str	r2, [r1, #4]
 800b8d8:	608b      	str	r3, [r1, #8]
 800b8da:	9803      	ldr	r0, [sp, #12]
 800b8dc:	f000 ff16 	bl	800c70c <_Bfree>
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	9b03      	ldr	r3, [sp, #12]
 800b8e4:	69db      	ldr	r3, [r3, #28]
 800b8e6:	601a      	str	r2, [r3, #0]
 800b8e8:	2d00      	cmp	r5, #0
 800b8ea:	da1e      	bge.n	800b92a <_dtoa_r+0x9a>
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	603b      	str	r3, [r7, #0]
 800b8f0:	006b      	lsls	r3, r5, #1
 800b8f2:	085b      	lsrs	r3, r3, #1
 800b8f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8f6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b8f8:	4bb8      	ldr	r3, [pc, #736]	@ (800bbdc <_dtoa_r+0x34c>)
 800b8fa:	4ab8      	ldr	r2, [pc, #736]	@ (800bbdc <_dtoa_r+0x34c>)
 800b8fc:	403b      	ands	r3, r7
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d116      	bne.n	800b930 <_dtoa_r+0xa0>
 800b902:	4bb7      	ldr	r3, [pc, #732]	@ (800bbe0 <_dtoa_r+0x350>)
 800b904:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b906:	6013      	str	r3, [r2, #0]
 800b908:	033b      	lsls	r3, r7, #12
 800b90a:	0b1b      	lsrs	r3, r3, #12
 800b90c:	4323      	orrs	r3, r4
 800b90e:	d101      	bne.n	800b914 <_dtoa_r+0x84>
 800b910:	f000 fd83 	bl	800c41a <_dtoa_r+0xb8a>
 800b914:	4bb3      	ldr	r3, [pc, #716]	@ (800bbe4 <_dtoa_r+0x354>)
 800b916:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b918:	9308      	str	r3, [sp, #32]
 800b91a:	2a00      	cmp	r2, #0
 800b91c:	d002      	beq.n	800b924 <_dtoa_r+0x94>
 800b91e:	4bb2      	ldr	r3, [pc, #712]	@ (800bbe8 <_dtoa_r+0x358>)
 800b920:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b922:	6013      	str	r3, [r2, #0]
 800b924:	9808      	ldr	r0, [sp, #32]
 800b926:	b01d      	add	sp, #116	@ 0x74
 800b928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b92a:	2300      	movs	r3, #0
 800b92c:	603b      	str	r3, [r7, #0]
 800b92e:	e7e2      	b.n	800b8f6 <_dtoa_r+0x66>
 800b930:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b932:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b934:	9212      	str	r2, [sp, #72]	@ 0x48
 800b936:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b938:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b93a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b93c:	2200      	movs	r2, #0
 800b93e:	2300      	movs	r3, #0
 800b940:	f7f4 fd80 	bl	8000444 <__aeabi_dcmpeq>
 800b944:	1e06      	subs	r6, r0, #0
 800b946:	d00b      	beq.n	800b960 <_dtoa_r+0xd0>
 800b948:	2301      	movs	r3, #1
 800b94a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b94c:	6013      	str	r3, [r2, #0]
 800b94e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b950:	2b00      	cmp	r3, #0
 800b952:	d002      	beq.n	800b95a <_dtoa_r+0xca>
 800b954:	4ba5      	ldr	r3, [pc, #660]	@ (800bbec <_dtoa_r+0x35c>)
 800b956:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b958:	6013      	str	r3, [r2, #0]
 800b95a:	4ba5      	ldr	r3, [pc, #660]	@ (800bbf0 <_dtoa_r+0x360>)
 800b95c:	9308      	str	r3, [sp, #32]
 800b95e:	e7e1      	b.n	800b924 <_dtoa_r+0x94>
 800b960:	ab1a      	add	r3, sp, #104	@ 0x68
 800b962:	9301      	str	r3, [sp, #4]
 800b964:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b966:	9300      	str	r3, [sp, #0]
 800b968:	9803      	ldr	r0, [sp, #12]
 800b96a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b96c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b96e:	f001 f9cd 	bl	800cd0c <__d2b>
 800b972:	007a      	lsls	r2, r7, #1
 800b974:	9005      	str	r0, [sp, #20]
 800b976:	0d52      	lsrs	r2, r2, #21
 800b978:	d100      	bne.n	800b97c <_dtoa_r+0xec>
 800b97a:	e07b      	b.n	800ba74 <_dtoa_r+0x1e4>
 800b97c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b97e:	9618      	str	r6, [sp, #96]	@ 0x60
 800b980:	0319      	lsls	r1, r3, #12
 800b982:	4b9c      	ldr	r3, [pc, #624]	@ (800bbf4 <_dtoa_r+0x364>)
 800b984:	0b09      	lsrs	r1, r1, #12
 800b986:	430b      	orrs	r3, r1
 800b988:	499b      	ldr	r1, [pc, #620]	@ (800bbf8 <_dtoa_r+0x368>)
 800b98a:	1857      	adds	r7, r2, r1
 800b98c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b98e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b990:	0019      	movs	r1, r3
 800b992:	2200      	movs	r2, #0
 800b994:	4b99      	ldr	r3, [pc, #612]	@ (800bbfc <_dtoa_r+0x36c>)
 800b996:	f7f6 ff45 	bl	8002824 <__aeabi_dsub>
 800b99a:	4a99      	ldr	r2, [pc, #612]	@ (800bc00 <_dtoa_r+0x370>)
 800b99c:	4b99      	ldr	r3, [pc, #612]	@ (800bc04 <_dtoa_r+0x374>)
 800b99e:	f7f6 fc79 	bl	8002294 <__aeabi_dmul>
 800b9a2:	4a99      	ldr	r2, [pc, #612]	@ (800bc08 <_dtoa_r+0x378>)
 800b9a4:	4b99      	ldr	r3, [pc, #612]	@ (800bc0c <_dtoa_r+0x37c>)
 800b9a6:	f7f5 fccd 	bl	8001344 <__aeabi_dadd>
 800b9aa:	0004      	movs	r4, r0
 800b9ac:	0038      	movs	r0, r7
 800b9ae:	000d      	movs	r5, r1
 800b9b0:	f7f7 fb32 	bl	8003018 <__aeabi_i2d>
 800b9b4:	4a96      	ldr	r2, [pc, #600]	@ (800bc10 <_dtoa_r+0x380>)
 800b9b6:	4b97      	ldr	r3, [pc, #604]	@ (800bc14 <_dtoa_r+0x384>)
 800b9b8:	f7f6 fc6c 	bl	8002294 <__aeabi_dmul>
 800b9bc:	0002      	movs	r2, r0
 800b9be:	000b      	movs	r3, r1
 800b9c0:	0020      	movs	r0, r4
 800b9c2:	0029      	movs	r1, r5
 800b9c4:	f7f5 fcbe 	bl	8001344 <__aeabi_dadd>
 800b9c8:	0004      	movs	r4, r0
 800b9ca:	000d      	movs	r5, r1
 800b9cc:	f7f7 fae8 	bl	8002fa0 <__aeabi_d2iz>
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	9004      	str	r0, [sp, #16]
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	0020      	movs	r0, r4
 800b9d8:	0029      	movs	r1, r5
 800b9da:	f7f4 fd39 	bl	8000450 <__aeabi_dcmplt>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	d00b      	beq.n	800b9fa <_dtoa_r+0x16a>
 800b9e2:	9804      	ldr	r0, [sp, #16]
 800b9e4:	f7f7 fb18 	bl	8003018 <__aeabi_i2d>
 800b9e8:	002b      	movs	r3, r5
 800b9ea:	0022      	movs	r2, r4
 800b9ec:	f7f4 fd2a 	bl	8000444 <__aeabi_dcmpeq>
 800b9f0:	4243      	negs	r3, r0
 800b9f2:	4158      	adcs	r0, r3
 800b9f4:	9b04      	ldr	r3, [sp, #16]
 800b9f6:	1a1b      	subs	r3, r3, r0
 800b9f8:	9304      	str	r3, [sp, #16]
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	9315      	str	r3, [sp, #84]	@ 0x54
 800b9fe:	9b04      	ldr	r3, [sp, #16]
 800ba00:	2b16      	cmp	r3, #22
 800ba02:	d810      	bhi.n	800ba26 <_dtoa_r+0x196>
 800ba04:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800ba06:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ba08:	9a04      	ldr	r2, [sp, #16]
 800ba0a:	4b83      	ldr	r3, [pc, #524]	@ (800bc18 <_dtoa_r+0x388>)
 800ba0c:	00d2      	lsls	r2, r2, #3
 800ba0e:	189b      	adds	r3, r3, r2
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	f7f4 fd1c 	bl	8000450 <__aeabi_dcmplt>
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	d047      	beq.n	800baac <_dtoa_r+0x21c>
 800ba1c:	9b04      	ldr	r3, [sp, #16]
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	9304      	str	r3, [sp, #16]
 800ba22:	2300      	movs	r3, #0
 800ba24:	9315      	str	r3, [sp, #84]	@ 0x54
 800ba26:	2200      	movs	r2, #0
 800ba28:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ba2a:	9206      	str	r2, [sp, #24]
 800ba2c:	1bdb      	subs	r3, r3, r7
 800ba2e:	1e5a      	subs	r2, r3, #1
 800ba30:	d53e      	bpl.n	800bab0 <_dtoa_r+0x220>
 800ba32:	2201      	movs	r2, #1
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	9306      	str	r3, [sp, #24]
 800ba38:	2300      	movs	r3, #0
 800ba3a:	930d      	str	r3, [sp, #52]	@ 0x34
 800ba3c:	9b04      	ldr	r3, [sp, #16]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	db38      	blt.n	800bab4 <_dtoa_r+0x224>
 800ba42:	9a04      	ldr	r2, [sp, #16]
 800ba44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba46:	4694      	mov	ip, r2
 800ba48:	4463      	add	r3, ip
 800ba4a:	930d      	str	r3, [sp, #52]	@ 0x34
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	9214      	str	r2, [sp, #80]	@ 0x50
 800ba50:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba52:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ba54:	2401      	movs	r4, #1
 800ba56:	2b09      	cmp	r3, #9
 800ba58:	d867      	bhi.n	800bb2a <_dtoa_r+0x29a>
 800ba5a:	2b05      	cmp	r3, #5
 800ba5c:	dd02      	ble.n	800ba64 <_dtoa_r+0x1d4>
 800ba5e:	2400      	movs	r4, #0
 800ba60:	3b04      	subs	r3, #4
 800ba62:	9322      	str	r3, [sp, #136]	@ 0x88
 800ba64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ba66:	1e98      	subs	r0, r3, #2
 800ba68:	2803      	cmp	r0, #3
 800ba6a:	d867      	bhi.n	800bb3c <_dtoa_r+0x2ac>
 800ba6c:	f7f4 fb50 	bl	8000110 <__gnu_thumb1_case_uqi>
 800ba70:	5b383a2b 	.word	0x5b383a2b
 800ba74:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ba76:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800ba78:	18f6      	adds	r6, r6, r3
 800ba7a:	4b68      	ldr	r3, [pc, #416]	@ (800bc1c <_dtoa_r+0x38c>)
 800ba7c:	18f2      	adds	r2, r6, r3
 800ba7e:	2a20      	cmp	r2, #32
 800ba80:	dd0f      	ble.n	800baa2 <_dtoa_r+0x212>
 800ba82:	2340      	movs	r3, #64	@ 0x40
 800ba84:	1a9b      	subs	r3, r3, r2
 800ba86:	409f      	lsls	r7, r3
 800ba88:	4b65      	ldr	r3, [pc, #404]	@ (800bc20 <_dtoa_r+0x390>)
 800ba8a:	0038      	movs	r0, r7
 800ba8c:	18f3      	adds	r3, r6, r3
 800ba8e:	40dc      	lsrs	r4, r3
 800ba90:	4320      	orrs	r0, r4
 800ba92:	f7f7 faef 	bl	8003074 <__aeabi_ui2d>
 800ba96:	2201      	movs	r2, #1
 800ba98:	4b62      	ldr	r3, [pc, #392]	@ (800bc24 <_dtoa_r+0x394>)
 800ba9a:	1e77      	subs	r7, r6, #1
 800ba9c:	18cb      	adds	r3, r1, r3
 800ba9e:	9218      	str	r2, [sp, #96]	@ 0x60
 800baa0:	e776      	b.n	800b990 <_dtoa_r+0x100>
 800baa2:	2320      	movs	r3, #32
 800baa4:	0020      	movs	r0, r4
 800baa6:	1a9b      	subs	r3, r3, r2
 800baa8:	4098      	lsls	r0, r3
 800baaa:	e7f2      	b.n	800ba92 <_dtoa_r+0x202>
 800baac:	9015      	str	r0, [sp, #84]	@ 0x54
 800baae:	e7ba      	b.n	800ba26 <_dtoa_r+0x196>
 800bab0:	920d      	str	r2, [sp, #52]	@ 0x34
 800bab2:	e7c3      	b.n	800ba3c <_dtoa_r+0x1ac>
 800bab4:	9b06      	ldr	r3, [sp, #24]
 800bab6:	9a04      	ldr	r2, [sp, #16]
 800bab8:	1a9b      	subs	r3, r3, r2
 800baba:	9306      	str	r3, [sp, #24]
 800babc:	4253      	negs	r3, r2
 800babe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bac0:	2300      	movs	r3, #0
 800bac2:	9314      	str	r3, [sp, #80]	@ 0x50
 800bac4:	e7c5      	b.n	800ba52 <_dtoa_r+0x1c2>
 800bac6:	2300      	movs	r3, #0
 800bac8:	9310      	str	r3, [sp, #64]	@ 0x40
 800baca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bacc:	930e      	str	r3, [sp, #56]	@ 0x38
 800bace:	9309      	str	r3, [sp, #36]	@ 0x24
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	dc13      	bgt.n	800bafc <_dtoa_r+0x26c>
 800bad4:	2301      	movs	r3, #1
 800bad6:	001a      	movs	r2, r3
 800bad8:	930e      	str	r3, [sp, #56]	@ 0x38
 800bada:	9309      	str	r3, [sp, #36]	@ 0x24
 800badc:	9223      	str	r2, [sp, #140]	@ 0x8c
 800bade:	e00d      	b.n	800bafc <_dtoa_r+0x26c>
 800bae0:	2301      	movs	r3, #1
 800bae2:	e7f1      	b.n	800bac8 <_dtoa_r+0x238>
 800bae4:	2300      	movs	r3, #0
 800bae6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bae8:	9310      	str	r3, [sp, #64]	@ 0x40
 800baea:	4694      	mov	ip, r2
 800baec:	9b04      	ldr	r3, [sp, #16]
 800baee:	4463      	add	r3, ip
 800baf0:	930e      	str	r3, [sp, #56]	@ 0x38
 800baf2:	3301      	adds	r3, #1
 800baf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	dc00      	bgt.n	800bafc <_dtoa_r+0x26c>
 800bafa:	2301      	movs	r3, #1
 800bafc:	9a03      	ldr	r2, [sp, #12]
 800bafe:	2100      	movs	r1, #0
 800bb00:	69d0      	ldr	r0, [r2, #28]
 800bb02:	2204      	movs	r2, #4
 800bb04:	0015      	movs	r5, r2
 800bb06:	3514      	adds	r5, #20
 800bb08:	429d      	cmp	r5, r3
 800bb0a:	d91b      	bls.n	800bb44 <_dtoa_r+0x2b4>
 800bb0c:	6041      	str	r1, [r0, #4]
 800bb0e:	9803      	ldr	r0, [sp, #12]
 800bb10:	f000 fdb8 	bl	800c684 <_Balloc>
 800bb14:	9008      	str	r0, [sp, #32]
 800bb16:	2800      	cmp	r0, #0
 800bb18:	d117      	bne.n	800bb4a <_dtoa_r+0x2ba>
 800bb1a:	21b0      	movs	r1, #176	@ 0xb0
 800bb1c:	4b42      	ldr	r3, [pc, #264]	@ (800bc28 <_dtoa_r+0x398>)
 800bb1e:	482e      	ldr	r0, [pc, #184]	@ (800bbd8 <_dtoa_r+0x348>)
 800bb20:	9a08      	ldr	r2, [sp, #32]
 800bb22:	31ff      	adds	r1, #255	@ 0xff
 800bb24:	e6c9      	b.n	800b8ba <_dtoa_r+0x2a>
 800bb26:	2301      	movs	r3, #1
 800bb28:	e7dd      	b.n	800bae6 <_dtoa_r+0x256>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	9410      	str	r4, [sp, #64]	@ 0x40
 800bb2e:	9322      	str	r3, [sp, #136]	@ 0x88
 800bb30:	3b01      	subs	r3, #1
 800bb32:	930e      	str	r3, [sp, #56]	@ 0x38
 800bb34:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb36:	2200      	movs	r2, #0
 800bb38:	3313      	adds	r3, #19
 800bb3a:	e7cf      	b.n	800badc <_dtoa_r+0x24c>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb40:	3b02      	subs	r3, #2
 800bb42:	e7f6      	b.n	800bb32 <_dtoa_r+0x2a2>
 800bb44:	3101      	adds	r1, #1
 800bb46:	0052      	lsls	r2, r2, #1
 800bb48:	e7dc      	b.n	800bb04 <_dtoa_r+0x274>
 800bb4a:	9b03      	ldr	r3, [sp, #12]
 800bb4c:	9a08      	ldr	r2, [sp, #32]
 800bb4e:	69db      	ldr	r3, [r3, #28]
 800bb50:	601a      	str	r2, [r3, #0]
 800bb52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb54:	2b0e      	cmp	r3, #14
 800bb56:	d900      	bls.n	800bb5a <_dtoa_r+0x2ca>
 800bb58:	e0d9      	b.n	800bd0e <_dtoa_r+0x47e>
 800bb5a:	2c00      	cmp	r4, #0
 800bb5c:	d100      	bne.n	800bb60 <_dtoa_r+0x2d0>
 800bb5e:	e0d6      	b.n	800bd0e <_dtoa_r+0x47e>
 800bb60:	9b04      	ldr	r3, [sp, #16]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	dd64      	ble.n	800bc30 <_dtoa_r+0x3a0>
 800bb66:	210f      	movs	r1, #15
 800bb68:	9a04      	ldr	r2, [sp, #16]
 800bb6a:	4b2b      	ldr	r3, [pc, #172]	@ (800bc18 <_dtoa_r+0x388>)
 800bb6c:	400a      	ands	r2, r1
 800bb6e:	00d2      	lsls	r2, r2, #3
 800bb70:	189b      	adds	r3, r3, r2
 800bb72:	681e      	ldr	r6, [r3, #0]
 800bb74:	685f      	ldr	r7, [r3, #4]
 800bb76:	9b04      	ldr	r3, [sp, #16]
 800bb78:	2402      	movs	r4, #2
 800bb7a:	111d      	asrs	r5, r3, #4
 800bb7c:	05db      	lsls	r3, r3, #23
 800bb7e:	d50a      	bpl.n	800bb96 <_dtoa_r+0x306>
 800bb80:	4b2a      	ldr	r3, [pc, #168]	@ (800bc2c <_dtoa_r+0x39c>)
 800bb82:	400d      	ands	r5, r1
 800bb84:	6a1a      	ldr	r2, [r3, #32]
 800bb86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb88:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bb8a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bb8c:	f7f5 ff3e 	bl	8001a0c <__aeabi_ddiv>
 800bb90:	900a      	str	r0, [sp, #40]	@ 0x28
 800bb92:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bb94:	3401      	adds	r4, #1
 800bb96:	4b25      	ldr	r3, [pc, #148]	@ (800bc2c <_dtoa_r+0x39c>)
 800bb98:	930c      	str	r3, [sp, #48]	@ 0x30
 800bb9a:	2d00      	cmp	r5, #0
 800bb9c:	d108      	bne.n	800bbb0 <_dtoa_r+0x320>
 800bb9e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bba0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bba2:	0032      	movs	r2, r6
 800bba4:	003b      	movs	r3, r7
 800bba6:	f7f5 ff31 	bl	8001a0c <__aeabi_ddiv>
 800bbaa:	900a      	str	r0, [sp, #40]	@ 0x28
 800bbac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bbae:	e05a      	b.n	800bc66 <_dtoa_r+0x3d6>
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	421d      	tst	r5, r3
 800bbb4:	d009      	beq.n	800bbca <_dtoa_r+0x33a>
 800bbb6:	18e4      	adds	r4, r4, r3
 800bbb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbba:	0030      	movs	r0, r6
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	0039      	movs	r1, r7
 800bbc2:	f7f6 fb67 	bl	8002294 <__aeabi_dmul>
 800bbc6:	0006      	movs	r6, r0
 800bbc8:	000f      	movs	r7, r1
 800bbca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbcc:	106d      	asrs	r5, r5, #1
 800bbce:	3308      	adds	r3, #8
 800bbd0:	e7e2      	b.n	800bb98 <_dtoa_r+0x308>
 800bbd2:	46c0      	nop			@ (mov r8, r8)
 800bbd4:	0800dcad 	.word	0x0800dcad
 800bbd8:	0800dcc4 	.word	0x0800dcc4
 800bbdc:	7ff00000 	.word	0x7ff00000
 800bbe0:	0000270f 	.word	0x0000270f
 800bbe4:	0800dca9 	.word	0x0800dca9
 800bbe8:	0800dcac 	.word	0x0800dcac
 800bbec:	0800dc7d 	.word	0x0800dc7d
 800bbf0:	0800dc7c 	.word	0x0800dc7c
 800bbf4:	3ff00000 	.word	0x3ff00000
 800bbf8:	fffffc01 	.word	0xfffffc01
 800bbfc:	3ff80000 	.word	0x3ff80000
 800bc00:	636f4361 	.word	0x636f4361
 800bc04:	3fd287a7 	.word	0x3fd287a7
 800bc08:	8b60c8b3 	.word	0x8b60c8b3
 800bc0c:	3fc68a28 	.word	0x3fc68a28
 800bc10:	509f79fb 	.word	0x509f79fb
 800bc14:	3fd34413 	.word	0x3fd34413
 800bc18:	0800ddc0 	.word	0x0800ddc0
 800bc1c:	00000432 	.word	0x00000432
 800bc20:	00000412 	.word	0x00000412
 800bc24:	fe100000 	.word	0xfe100000
 800bc28:	0800dd1c 	.word	0x0800dd1c
 800bc2c:	0800dd98 	.word	0x0800dd98
 800bc30:	9b04      	ldr	r3, [sp, #16]
 800bc32:	2402      	movs	r4, #2
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d016      	beq.n	800bc66 <_dtoa_r+0x3d6>
 800bc38:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bc3a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bc3c:	220f      	movs	r2, #15
 800bc3e:	425d      	negs	r5, r3
 800bc40:	402a      	ands	r2, r5
 800bc42:	4bd7      	ldr	r3, [pc, #860]	@ (800bfa0 <_dtoa_r+0x710>)
 800bc44:	00d2      	lsls	r2, r2, #3
 800bc46:	189b      	adds	r3, r3, r2
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	f7f6 fb22 	bl	8002294 <__aeabi_dmul>
 800bc50:	2701      	movs	r7, #1
 800bc52:	2300      	movs	r3, #0
 800bc54:	900a      	str	r0, [sp, #40]	@ 0x28
 800bc56:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bc58:	4ed2      	ldr	r6, [pc, #840]	@ (800bfa4 <_dtoa_r+0x714>)
 800bc5a:	112d      	asrs	r5, r5, #4
 800bc5c:	2d00      	cmp	r5, #0
 800bc5e:	d000      	beq.n	800bc62 <_dtoa_r+0x3d2>
 800bc60:	e0ba      	b.n	800bdd8 <_dtoa_r+0x548>
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d1a1      	bne.n	800bbaa <_dtoa_r+0x31a>
 800bc66:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bc68:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bc6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d100      	bne.n	800bc72 <_dtoa_r+0x3e2>
 800bc70:	e0bd      	b.n	800bdee <_dtoa_r+0x55e>
 800bc72:	2200      	movs	r2, #0
 800bc74:	0030      	movs	r0, r6
 800bc76:	0039      	movs	r1, r7
 800bc78:	4bcb      	ldr	r3, [pc, #812]	@ (800bfa8 <_dtoa_r+0x718>)
 800bc7a:	f7f4 fbe9 	bl	8000450 <__aeabi_dcmplt>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d100      	bne.n	800bc84 <_dtoa_r+0x3f4>
 800bc82:	e0b4      	b.n	800bdee <_dtoa_r+0x55e>
 800bc84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d100      	bne.n	800bc8c <_dtoa_r+0x3fc>
 800bc8a:	e0b0      	b.n	800bdee <_dtoa_r+0x55e>
 800bc8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	dd39      	ble.n	800bd06 <_dtoa_r+0x476>
 800bc92:	9b04      	ldr	r3, [sp, #16]
 800bc94:	2200      	movs	r2, #0
 800bc96:	3b01      	subs	r3, #1
 800bc98:	930c      	str	r3, [sp, #48]	@ 0x30
 800bc9a:	0030      	movs	r0, r6
 800bc9c:	4bc3      	ldr	r3, [pc, #780]	@ (800bfac <_dtoa_r+0x71c>)
 800bc9e:	0039      	movs	r1, r7
 800bca0:	f7f6 faf8 	bl	8002294 <__aeabi_dmul>
 800bca4:	900a      	str	r0, [sp, #40]	@ 0x28
 800bca6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bca8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcaa:	3401      	adds	r4, #1
 800bcac:	0020      	movs	r0, r4
 800bcae:	9311      	str	r3, [sp, #68]	@ 0x44
 800bcb0:	f7f7 f9b2 	bl	8003018 <__aeabi_i2d>
 800bcb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bcb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcb8:	f7f6 faec 	bl	8002294 <__aeabi_dmul>
 800bcbc:	4bbc      	ldr	r3, [pc, #752]	@ (800bfb0 <_dtoa_r+0x720>)
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f7f5 fb40 	bl	8001344 <__aeabi_dadd>
 800bcc4:	4bbb      	ldr	r3, [pc, #748]	@ (800bfb4 <_dtoa_r+0x724>)
 800bcc6:	0006      	movs	r6, r0
 800bcc8:	18cf      	adds	r7, r1, r3
 800bcca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d000      	beq.n	800bcd2 <_dtoa_r+0x442>
 800bcd0:	e091      	b.n	800bdf6 <_dtoa_r+0x566>
 800bcd2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bcd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	4bb7      	ldr	r3, [pc, #732]	@ (800bfb8 <_dtoa_r+0x728>)
 800bcda:	f7f6 fda3 	bl	8002824 <__aeabi_dsub>
 800bcde:	0032      	movs	r2, r6
 800bce0:	003b      	movs	r3, r7
 800bce2:	0004      	movs	r4, r0
 800bce4:	000d      	movs	r5, r1
 800bce6:	f7f4 fbc7 	bl	8000478 <__aeabi_dcmpgt>
 800bcea:	2800      	cmp	r0, #0
 800bcec:	d000      	beq.n	800bcf0 <_dtoa_r+0x460>
 800bcee:	e29d      	b.n	800c22c <_dtoa_r+0x99c>
 800bcf0:	2180      	movs	r1, #128	@ 0x80
 800bcf2:	0609      	lsls	r1, r1, #24
 800bcf4:	187b      	adds	r3, r7, r1
 800bcf6:	0032      	movs	r2, r6
 800bcf8:	0020      	movs	r0, r4
 800bcfa:	0029      	movs	r1, r5
 800bcfc:	f7f4 fba8 	bl	8000450 <__aeabi_dcmplt>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d000      	beq.n	800bd06 <_dtoa_r+0x476>
 800bd04:	e130      	b.n	800bf68 <_dtoa_r+0x6d8>
 800bd06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd08:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800bd0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd0c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bd0e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	da00      	bge.n	800bd16 <_dtoa_r+0x486>
 800bd14:	e177      	b.n	800c006 <_dtoa_r+0x776>
 800bd16:	9a04      	ldr	r2, [sp, #16]
 800bd18:	2a0e      	cmp	r2, #14
 800bd1a:	dd00      	ble.n	800bd1e <_dtoa_r+0x48e>
 800bd1c:	e173      	b.n	800c006 <_dtoa_r+0x776>
 800bd1e:	4ba0      	ldr	r3, [pc, #640]	@ (800bfa0 <_dtoa_r+0x710>)
 800bd20:	00d2      	lsls	r2, r2, #3
 800bd22:	189b      	adds	r3, r3, r2
 800bd24:	685c      	ldr	r4, [r3, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	9306      	str	r3, [sp, #24]
 800bd2a:	9407      	str	r4, [sp, #28]
 800bd2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	da03      	bge.n	800bd3a <_dtoa_r+0x4aa>
 800bd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	dc00      	bgt.n	800bd3a <_dtoa_r+0x4aa>
 800bd38:	e106      	b.n	800bf48 <_dtoa_r+0x6b8>
 800bd3a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bd3c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bd3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd40:	9d08      	ldr	r5, [sp, #32]
 800bd42:	3b01      	subs	r3, #1
 800bd44:	195b      	adds	r3, r3, r5
 800bd46:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd48:	9a06      	ldr	r2, [sp, #24]
 800bd4a:	9b07      	ldr	r3, [sp, #28]
 800bd4c:	0030      	movs	r0, r6
 800bd4e:	0039      	movs	r1, r7
 800bd50:	f7f5 fe5c 	bl	8001a0c <__aeabi_ddiv>
 800bd54:	f7f7 f924 	bl	8002fa0 <__aeabi_d2iz>
 800bd58:	9009      	str	r0, [sp, #36]	@ 0x24
 800bd5a:	f7f7 f95d 	bl	8003018 <__aeabi_i2d>
 800bd5e:	9a06      	ldr	r2, [sp, #24]
 800bd60:	9b07      	ldr	r3, [sp, #28]
 800bd62:	f7f6 fa97 	bl	8002294 <__aeabi_dmul>
 800bd66:	0002      	movs	r2, r0
 800bd68:	000b      	movs	r3, r1
 800bd6a:	0030      	movs	r0, r6
 800bd6c:	0039      	movs	r1, r7
 800bd6e:	f7f6 fd59 	bl	8002824 <__aeabi_dsub>
 800bd72:	002b      	movs	r3, r5
 800bd74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd76:	3501      	adds	r5, #1
 800bd78:	3230      	adds	r2, #48	@ 0x30
 800bd7a:	701a      	strb	r2, [r3, #0]
 800bd7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd7e:	002c      	movs	r4, r5
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d000      	beq.n	800bd86 <_dtoa_r+0x4f6>
 800bd84:	e131      	b.n	800bfea <_dtoa_r+0x75a>
 800bd86:	0002      	movs	r2, r0
 800bd88:	000b      	movs	r3, r1
 800bd8a:	f7f5 fadb 	bl	8001344 <__aeabi_dadd>
 800bd8e:	9a06      	ldr	r2, [sp, #24]
 800bd90:	9b07      	ldr	r3, [sp, #28]
 800bd92:	0006      	movs	r6, r0
 800bd94:	000f      	movs	r7, r1
 800bd96:	f7f4 fb6f 	bl	8000478 <__aeabi_dcmpgt>
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d000      	beq.n	800bda0 <_dtoa_r+0x510>
 800bd9e:	e10f      	b.n	800bfc0 <_dtoa_r+0x730>
 800bda0:	9a06      	ldr	r2, [sp, #24]
 800bda2:	9b07      	ldr	r3, [sp, #28]
 800bda4:	0030      	movs	r0, r6
 800bda6:	0039      	movs	r1, r7
 800bda8:	f7f4 fb4c 	bl	8000444 <__aeabi_dcmpeq>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d003      	beq.n	800bdb8 <_dtoa_r+0x528>
 800bdb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb2:	07dd      	lsls	r5, r3, #31
 800bdb4:	d500      	bpl.n	800bdb8 <_dtoa_r+0x528>
 800bdb6:	e103      	b.n	800bfc0 <_dtoa_r+0x730>
 800bdb8:	9905      	ldr	r1, [sp, #20]
 800bdba:	9803      	ldr	r0, [sp, #12]
 800bdbc:	f000 fca6 	bl	800c70c <_Bfree>
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	7023      	strb	r3, [r4, #0]
 800bdc4:	9b04      	ldr	r3, [sp, #16]
 800bdc6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bdc8:	3301      	adds	r3, #1
 800bdca:	6013      	str	r3, [r2, #0]
 800bdcc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d100      	bne.n	800bdd4 <_dtoa_r+0x544>
 800bdd2:	e5a7      	b.n	800b924 <_dtoa_r+0x94>
 800bdd4:	601c      	str	r4, [r3, #0]
 800bdd6:	e5a5      	b.n	800b924 <_dtoa_r+0x94>
 800bdd8:	423d      	tst	r5, r7
 800bdda:	d005      	beq.n	800bde8 <_dtoa_r+0x558>
 800bddc:	6832      	ldr	r2, [r6, #0]
 800bdde:	6873      	ldr	r3, [r6, #4]
 800bde0:	f7f6 fa58 	bl	8002294 <__aeabi_dmul>
 800bde4:	003b      	movs	r3, r7
 800bde6:	3401      	adds	r4, #1
 800bde8:	106d      	asrs	r5, r5, #1
 800bdea:	3608      	adds	r6, #8
 800bdec:	e736      	b.n	800bc5c <_dtoa_r+0x3cc>
 800bdee:	9b04      	ldr	r3, [sp, #16]
 800bdf0:	930c      	str	r3, [sp, #48]	@ 0x30
 800bdf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdf4:	e75a      	b.n	800bcac <_dtoa_r+0x41c>
 800bdf6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bdf8:	4b69      	ldr	r3, [pc, #420]	@ (800bfa0 <_dtoa_r+0x710>)
 800bdfa:	3a01      	subs	r2, #1
 800bdfc:	00d2      	lsls	r2, r2, #3
 800bdfe:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800be00:	189b      	adds	r3, r3, r2
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	2900      	cmp	r1, #0
 800be08:	d04c      	beq.n	800bea4 <_dtoa_r+0x614>
 800be0a:	2000      	movs	r0, #0
 800be0c:	496b      	ldr	r1, [pc, #428]	@ (800bfbc <_dtoa_r+0x72c>)
 800be0e:	f7f5 fdfd 	bl	8001a0c <__aeabi_ddiv>
 800be12:	0032      	movs	r2, r6
 800be14:	003b      	movs	r3, r7
 800be16:	f7f6 fd05 	bl	8002824 <__aeabi_dsub>
 800be1a:	9a08      	ldr	r2, [sp, #32]
 800be1c:	0006      	movs	r6, r0
 800be1e:	4694      	mov	ip, r2
 800be20:	000f      	movs	r7, r1
 800be22:	9b08      	ldr	r3, [sp, #32]
 800be24:	9316      	str	r3, [sp, #88]	@ 0x58
 800be26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be28:	4463      	add	r3, ip
 800be2a:	9311      	str	r3, [sp, #68]	@ 0x44
 800be2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800be2e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be30:	f7f7 f8b6 	bl	8002fa0 <__aeabi_d2iz>
 800be34:	0005      	movs	r5, r0
 800be36:	f7f7 f8ef 	bl	8003018 <__aeabi_i2d>
 800be3a:	0002      	movs	r2, r0
 800be3c:	000b      	movs	r3, r1
 800be3e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800be40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be42:	f7f6 fcef 	bl	8002824 <__aeabi_dsub>
 800be46:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800be48:	3530      	adds	r5, #48	@ 0x30
 800be4a:	1c5c      	adds	r4, r3, #1
 800be4c:	701d      	strb	r5, [r3, #0]
 800be4e:	0032      	movs	r2, r6
 800be50:	003b      	movs	r3, r7
 800be52:	900a      	str	r0, [sp, #40]	@ 0x28
 800be54:	910b      	str	r1, [sp, #44]	@ 0x2c
 800be56:	f7f4 fafb 	bl	8000450 <__aeabi_dcmplt>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d16a      	bne.n	800bf34 <_dtoa_r+0x6a4>
 800be5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800be60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be62:	2000      	movs	r0, #0
 800be64:	4950      	ldr	r1, [pc, #320]	@ (800bfa8 <_dtoa_r+0x718>)
 800be66:	f7f6 fcdd 	bl	8002824 <__aeabi_dsub>
 800be6a:	0032      	movs	r2, r6
 800be6c:	003b      	movs	r3, r7
 800be6e:	f7f4 faef 	bl	8000450 <__aeabi_dcmplt>
 800be72:	2800      	cmp	r0, #0
 800be74:	d000      	beq.n	800be78 <_dtoa_r+0x5e8>
 800be76:	e0a5      	b.n	800bfc4 <_dtoa_r+0x734>
 800be78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be7a:	42a3      	cmp	r3, r4
 800be7c:	d100      	bne.n	800be80 <_dtoa_r+0x5f0>
 800be7e:	e742      	b.n	800bd06 <_dtoa_r+0x476>
 800be80:	2200      	movs	r2, #0
 800be82:	0030      	movs	r0, r6
 800be84:	0039      	movs	r1, r7
 800be86:	4b49      	ldr	r3, [pc, #292]	@ (800bfac <_dtoa_r+0x71c>)
 800be88:	f7f6 fa04 	bl	8002294 <__aeabi_dmul>
 800be8c:	2200      	movs	r2, #0
 800be8e:	0006      	movs	r6, r0
 800be90:	000f      	movs	r7, r1
 800be92:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800be94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be96:	4b45      	ldr	r3, [pc, #276]	@ (800bfac <_dtoa_r+0x71c>)
 800be98:	f7f6 f9fc 	bl	8002294 <__aeabi_dmul>
 800be9c:	9416      	str	r4, [sp, #88]	@ 0x58
 800be9e:	900a      	str	r0, [sp, #40]	@ 0x28
 800bea0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bea2:	e7c3      	b.n	800be2c <_dtoa_r+0x59c>
 800bea4:	0030      	movs	r0, r6
 800bea6:	0039      	movs	r1, r7
 800bea8:	f7f6 f9f4 	bl	8002294 <__aeabi_dmul>
 800beac:	9d08      	ldr	r5, [sp, #32]
 800beae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800beb0:	002b      	movs	r3, r5
 800beb2:	4694      	mov	ip, r2
 800beb4:	9016      	str	r0, [sp, #88]	@ 0x58
 800beb6:	9117      	str	r1, [sp, #92]	@ 0x5c
 800beb8:	4463      	add	r3, ip
 800beba:	9319      	str	r3, [sp, #100]	@ 0x64
 800bebc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bebe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bec0:	f7f7 f86e 	bl	8002fa0 <__aeabi_d2iz>
 800bec4:	0004      	movs	r4, r0
 800bec6:	f7f7 f8a7 	bl	8003018 <__aeabi_i2d>
 800beca:	000b      	movs	r3, r1
 800becc:	0002      	movs	r2, r0
 800bece:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bed0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bed2:	f7f6 fca7 	bl	8002824 <__aeabi_dsub>
 800bed6:	3430      	adds	r4, #48	@ 0x30
 800bed8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800beda:	702c      	strb	r4, [r5, #0]
 800bedc:	3501      	adds	r5, #1
 800bede:	0006      	movs	r6, r0
 800bee0:	000f      	movs	r7, r1
 800bee2:	42ab      	cmp	r3, r5
 800bee4:	d129      	bne.n	800bf3a <_dtoa_r+0x6aa>
 800bee6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800bee8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800beea:	9b08      	ldr	r3, [sp, #32]
 800beec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800beee:	469c      	mov	ip, r3
 800bef0:	2200      	movs	r2, #0
 800bef2:	4b32      	ldr	r3, [pc, #200]	@ (800bfbc <_dtoa_r+0x72c>)
 800bef4:	4464      	add	r4, ip
 800bef6:	f7f5 fa25 	bl	8001344 <__aeabi_dadd>
 800befa:	0002      	movs	r2, r0
 800befc:	000b      	movs	r3, r1
 800befe:	0030      	movs	r0, r6
 800bf00:	0039      	movs	r1, r7
 800bf02:	f7f4 fab9 	bl	8000478 <__aeabi_dcmpgt>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d15c      	bne.n	800bfc4 <_dtoa_r+0x734>
 800bf0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bf0c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bf0e:	2000      	movs	r0, #0
 800bf10:	492a      	ldr	r1, [pc, #168]	@ (800bfbc <_dtoa_r+0x72c>)
 800bf12:	f7f6 fc87 	bl	8002824 <__aeabi_dsub>
 800bf16:	0002      	movs	r2, r0
 800bf18:	000b      	movs	r3, r1
 800bf1a:	0030      	movs	r0, r6
 800bf1c:	0039      	movs	r1, r7
 800bf1e:	f7f4 fa97 	bl	8000450 <__aeabi_dcmplt>
 800bf22:	2800      	cmp	r0, #0
 800bf24:	d100      	bne.n	800bf28 <_dtoa_r+0x698>
 800bf26:	e6ee      	b.n	800bd06 <_dtoa_r+0x476>
 800bf28:	0023      	movs	r3, r4
 800bf2a:	3c01      	subs	r4, #1
 800bf2c:	7822      	ldrb	r2, [r4, #0]
 800bf2e:	2a30      	cmp	r2, #48	@ 0x30
 800bf30:	d0fa      	beq.n	800bf28 <_dtoa_r+0x698>
 800bf32:	001c      	movs	r4, r3
 800bf34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf36:	9304      	str	r3, [sp, #16]
 800bf38:	e73e      	b.n	800bdb8 <_dtoa_r+0x528>
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	4b1b      	ldr	r3, [pc, #108]	@ (800bfac <_dtoa_r+0x71c>)
 800bf3e:	f7f6 f9a9 	bl	8002294 <__aeabi_dmul>
 800bf42:	900a      	str	r0, [sp, #40]	@ 0x28
 800bf44:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bf46:	e7b9      	b.n	800bebc <_dtoa_r+0x62c>
 800bf48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d10c      	bne.n	800bf68 <_dtoa_r+0x6d8>
 800bf4e:	9806      	ldr	r0, [sp, #24]
 800bf50:	9907      	ldr	r1, [sp, #28]
 800bf52:	2200      	movs	r2, #0
 800bf54:	4b18      	ldr	r3, [pc, #96]	@ (800bfb8 <_dtoa_r+0x728>)
 800bf56:	f7f6 f99d 	bl	8002294 <__aeabi_dmul>
 800bf5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf5e:	f7f4 fa95 	bl	800048c <__aeabi_dcmpge>
 800bf62:	2800      	cmp	r0, #0
 800bf64:	d100      	bne.n	800bf68 <_dtoa_r+0x6d8>
 800bf66:	e164      	b.n	800c232 <_dtoa_r+0x9a2>
 800bf68:	2600      	movs	r6, #0
 800bf6a:	0037      	movs	r7, r6
 800bf6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf6e:	9c08      	ldr	r4, [sp, #32]
 800bf70:	43db      	mvns	r3, r3
 800bf72:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf74:	2300      	movs	r3, #0
 800bf76:	9304      	str	r3, [sp, #16]
 800bf78:	0031      	movs	r1, r6
 800bf7a:	9803      	ldr	r0, [sp, #12]
 800bf7c:	f000 fbc6 	bl	800c70c <_Bfree>
 800bf80:	2f00      	cmp	r7, #0
 800bf82:	d0d7      	beq.n	800bf34 <_dtoa_r+0x6a4>
 800bf84:	9b04      	ldr	r3, [sp, #16]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d005      	beq.n	800bf96 <_dtoa_r+0x706>
 800bf8a:	42bb      	cmp	r3, r7
 800bf8c:	d003      	beq.n	800bf96 <_dtoa_r+0x706>
 800bf8e:	0019      	movs	r1, r3
 800bf90:	9803      	ldr	r0, [sp, #12]
 800bf92:	f000 fbbb 	bl	800c70c <_Bfree>
 800bf96:	0039      	movs	r1, r7
 800bf98:	9803      	ldr	r0, [sp, #12]
 800bf9a:	f000 fbb7 	bl	800c70c <_Bfree>
 800bf9e:	e7c9      	b.n	800bf34 <_dtoa_r+0x6a4>
 800bfa0:	0800ddc0 	.word	0x0800ddc0
 800bfa4:	0800dd98 	.word	0x0800dd98
 800bfa8:	3ff00000 	.word	0x3ff00000
 800bfac:	40240000 	.word	0x40240000
 800bfb0:	401c0000 	.word	0x401c0000
 800bfb4:	fcc00000 	.word	0xfcc00000
 800bfb8:	40140000 	.word	0x40140000
 800bfbc:	3fe00000 	.word	0x3fe00000
 800bfc0:	9b04      	ldr	r3, [sp, #16]
 800bfc2:	930c      	str	r3, [sp, #48]	@ 0x30
 800bfc4:	0023      	movs	r3, r4
 800bfc6:	001c      	movs	r4, r3
 800bfc8:	3b01      	subs	r3, #1
 800bfca:	781a      	ldrb	r2, [r3, #0]
 800bfcc:	2a39      	cmp	r2, #57	@ 0x39
 800bfce:	d108      	bne.n	800bfe2 <_dtoa_r+0x752>
 800bfd0:	9a08      	ldr	r2, [sp, #32]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d1f7      	bne.n	800bfc6 <_dtoa_r+0x736>
 800bfd6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bfd8:	9908      	ldr	r1, [sp, #32]
 800bfda:	3201      	adds	r2, #1
 800bfdc:	920c      	str	r2, [sp, #48]	@ 0x30
 800bfde:	2230      	movs	r2, #48	@ 0x30
 800bfe0:	700a      	strb	r2, [r1, #0]
 800bfe2:	781a      	ldrb	r2, [r3, #0]
 800bfe4:	3201      	adds	r2, #1
 800bfe6:	701a      	strb	r2, [r3, #0]
 800bfe8:	e7a4      	b.n	800bf34 <_dtoa_r+0x6a4>
 800bfea:	2200      	movs	r2, #0
 800bfec:	4bc6      	ldr	r3, [pc, #792]	@ (800c308 <_dtoa_r+0xa78>)
 800bfee:	f7f6 f951 	bl	8002294 <__aeabi_dmul>
 800bff2:	2200      	movs	r2, #0
 800bff4:	2300      	movs	r3, #0
 800bff6:	0006      	movs	r6, r0
 800bff8:	000f      	movs	r7, r1
 800bffa:	f7f4 fa23 	bl	8000444 <__aeabi_dcmpeq>
 800bffe:	2800      	cmp	r0, #0
 800c000:	d100      	bne.n	800c004 <_dtoa_r+0x774>
 800c002:	e6a1      	b.n	800bd48 <_dtoa_r+0x4b8>
 800c004:	e6d8      	b.n	800bdb8 <_dtoa_r+0x528>
 800c006:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800c008:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800c00a:	9c06      	ldr	r4, [sp, #24]
 800c00c:	2f00      	cmp	r7, #0
 800c00e:	d014      	beq.n	800c03a <_dtoa_r+0x7aa>
 800c010:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c012:	2a01      	cmp	r2, #1
 800c014:	dd00      	ble.n	800c018 <_dtoa_r+0x788>
 800c016:	e0c8      	b.n	800c1aa <_dtoa_r+0x91a>
 800c018:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c01a:	2a00      	cmp	r2, #0
 800c01c:	d100      	bne.n	800c020 <_dtoa_r+0x790>
 800c01e:	e0be      	b.n	800c19e <_dtoa_r+0x90e>
 800c020:	4aba      	ldr	r2, [pc, #744]	@ (800c30c <_dtoa_r+0xa7c>)
 800c022:	189b      	adds	r3, r3, r2
 800c024:	9a06      	ldr	r2, [sp, #24]
 800c026:	2101      	movs	r1, #1
 800c028:	18d2      	adds	r2, r2, r3
 800c02a:	9206      	str	r2, [sp, #24]
 800c02c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c02e:	9803      	ldr	r0, [sp, #12]
 800c030:	18d3      	adds	r3, r2, r3
 800c032:	930d      	str	r3, [sp, #52]	@ 0x34
 800c034:	f000 fc22 	bl	800c87c <__i2b>
 800c038:	0007      	movs	r7, r0
 800c03a:	2c00      	cmp	r4, #0
 800c03c:	d00e      	beq.n	800c05c <_dtoa_r+0x7cc>
 800c03e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c040:	2b00      	cmp	r3, #0
 800c042:	dd0b      	ble.n	800c05c <_dtoa_r+0x7cc>
 800c044:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c046:	0023      	movs	r3, r4
 800c048:	4294      	cmp	r4, r2
 800c04a:	dd00      	ble.n	800c04e <_dtoa_r+0x7be>
 800c04c:	0013      	movs	r3, r2
 800c04e:	9a06      	ldr	r2, [sp, #24]
 800c050:	1ae4      	subs	r4, r4, r3
 800c052:	1ad2      	subs	r2, r2, r3
 800c054:	9206      	str	r2, [sp, #24]
 800c056:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c058:	1ad3      	subs	r3, r2, r3
 800c05a:	930d      	str	r3, [sp, #52]	@ 0x34
 800c05c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d01f      	beq.n	800c0a2 <_dtoa_r+0x812>
 800c062:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c064:	2b00      	cmp	r3, #0
 800c066:	d100      	bne.n	800c06a <_dtoa_r+0x7da>
 800c068:	e0b5      	b.n	800c1d6 <_dtoa_r+0x946>
 800c06a:	2d00      	cmp	r5, #0
 800c06c:	d010      	beq.n	800c090 <_dtoa_r+0x800>
 800c06e:	0039      	movs	r1, r7
 800c070:	002a      	movs	r2, r5
 800c072:	9803      	ldr	r0, [sp, #12]
 800c074:	f000 fccc 	bl	800ca10 <__pow5mult>
 800c078:	9a05      	ldr	r2, [sp, #20]
 800c07a:	0001      	movs	r1, r0
 800c07c:	0007      	movs	r7, r0
 800c07e:	9803      	ldr	r0, [sp, #12]
 800c080:	f000 fc14 	bl	800c8ac <__multiply>
 800c084:	0006      	movs	r6, r0
 800c086:	9905      	ldr	r1, [sp, #20]
 800c088:	9803      	ldr	r0, [sp, #12]
 800c08a:	f000 fb3f 	bl	800c70c <_Bfree>
 800c08e:	9605      	str	r6, [sp, #20]
 800c090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c092:	1b5a      	subs	r2, r3, r5
 800c094:	42ab      	cmp	r3, r5
 800c096:	d004      	beq.n	800c0a2 <_dtoa_r+0x812>
 800c098:	9905      	ldr	r1, [sp, #20]
 800c09a:	9803      	ldr	r0, [sp, #12]
 800c09c:	f000 fcb8 	bl	800ca10 <__pow5mult>
 800c0a0:	9005      	str	r0, [sp, #20]
 800c0a2:	2101      	movs	r1, #1
 800c0a4:	9803      	ldr	r0, [sp, #12]
 800c0a6:	f000 fbe9 	bl	800c87c <__i2b>
 800c0aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c0ac:	0006      	movs	r6, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d100      	bne.n	800c0b4 <_dtoa_r+0x824>
 800c0b2:	e1bc      	b.n	800c42e <_dtoa_r+0xb9e>
 800c0b4:	001a      	movs	r2, r3
 800c0b6:	0001      	movs	r1, r0
 800c0b8:	9803      	ldr	r0, [sp, #12]
 800c0ba:	f000 fca9 	bl	800ca10 <__pow5mult>
 800c0be:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c0c0:	0006      	movs	r6, r0
 800c0c2:	2500      	movs	r5, #0
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	dc16      	bgt.n	800c0f6 <_dtoa_r+0x866>
 800c0c8:	2500      	movs	r5, #0
 800c0ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0cc:	42ab      	cmp	r3, r5
 800c0ce:	d10e      	bne.n	800c0ee <_dtoa_r+0x85e>
 800c0d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0d2:	031b      	lsls	r3, r3, #12
 800c0d4:	42ab      	cmp	r3, r5
 800c0d6:	d10a      	bne.n	800c0ee <_dtoa_r+0x85e>
 800c0d8:	4b8d      	ldr	r3, [pc, #564]	@ (800c310 <_dtoa_r+0xa80>)
 800c0da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c0dc:	4213      	tst	r3, r2
 800c0de:	d006      	beq.n	800c0ee <_dtoa_r+0x85e>
 800c0e0:	9b06      	ldr	r3, [sp, #24]
 800c0e2:	3501      	adds	r5, #1
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	9306      	str	r3, [sp, #24]
 800c0e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	930d      	str	r3, [sp, #52]	@ 0x34
 800c0ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c0f0:	2001      	movs	r0, #1
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d008      	beq.n	800c108 <_dtoa_r+0x878>
 800c0f6:	6933      	ldr	r3, [r6, #16]
 800c0f8:	3303      	adds	r3, #3
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	18f3      	adds	r3, r6, r3
 800c0fe:	6858      	ldr	r0, [r3, #4]
 800c100:	f000 fb6c 	bl	800c7dc <__hi0bits>
 800c104:	2320      	movs	r3, #32
 800c106:	1a18      	subs	r0, r3, r0
 800c108:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c10a:	1818      	adds	r0, r3, r0
 800c10c:	0002      	movs	r2, r0
 800c10e:	231f      	movs	r3, #31
 800c110:	401a      	ands	r2, r3
 800c112:	4218      	tst	r0, r3
 800c114:	d065      	beq.n	800c1e2 <_dtoa_r+0x952>
 800c116:	3301      	adds	r3, #1
 800c118:	1a9b      	subs	r3, r3, r2
 800c11a:	2b04      	cmp	r3, #4
 800c11c:	dd5d      	ble.n	800c1da <_dtoa_r+0x94a>
 800c11e:	231c      	movs	r3, #28
 800c120:	1a9b      	subs	r3, r3, r2
 800c122:	9a06      	ldr	r2, [sp, #24]
 800c124:	18e4      	adds	r4, r4, r3
 800c126:	18d2      	adds	r2, r2, r3
 800c128:	9206      	str	r2, [sp, #24]
 800c12a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c12c:	18d3      	adds	r3, r2, r3
 800c12e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c130:	9b06      	ldr	r3, [sp, #24]
 800c132:	2b00      	cmp	r3, #0
 800c134:	dd05      	ble.n	800c142 <_dtoa_r+0x8b2>
 800c136:	001a      	movs	r2, r3
 800c138:	9905      	ldr	r1, [sp, #20]
 800c13a:	9803      	ldr	r0, [sp, #12]
 800c13c:	f000 fcc4 	bl	800cac8 <__lshift>
 800c140:	9005      	str	r0, [sp, #20]
 800c142:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c144:	2b00      	cmp	r3, #0
 800c146:	dd05      	ble.n	800c154 <_dtoa_r+0x8c4>
 800c148:	0031      	movs	r1, r6
 800c14a:	001a      	movs	r2, r3
 800c14c:	9803      	ldr	r0, [sp, #12]
 800c14e:	f000 fcbb 	bl	800cac8 <__lshift>
 800c152:	0006      	movs	r6, r0
 800c154:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c156:	2b00      	cmp	r3, #0
 800c158:	d045      	beq.n	800c1e6 <_dtoa_r+0x956>
 800c15a:	0031      	movs	r1, r6
 800c15c:	9805      	ldr	r0, [sp, #20]
 800c15e:	f000 fd1f 	bl	800cba0 <__mcmp>
 800c162:	2800      	cmp	r0, #0
 800c164:	da3f      	bge.n	800c1e6 <_dtoa_r+0x956>
 800c166:	9b04      	ldr	r3, [sp, #16]
 800c168:	220a      	movs	r2, #10
 800c16a:	3b01      	subs	r3, #1
 800c16c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c16e:	9905      	ldr	r1, [sp, #20]
 800c170:	2300      	movs	r3, #0
 800c172:	9803      	ldr	r0, [sp, #12]
 800c174:	f000 faee 	bl	800c754 <__multadd>
 800c178:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c17a:	9005      	str	r0, [sp, #20]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d100      	bne.n	800c182 <_dtoa_r+0x8f2>
 800c180:	e15c      	b.n	800c43c <_dtoa_r+0xbac>
 800c182:	2300      	movs	r3, #0
 800c184:	0039      	movs	r1, r7
 800c186:	220a      	movs	r2, #10
 800c188:	9803      	ldr	r0, [sp, #12]
 800c18a:	f000 fae3 	bl	800c754 <__multadd>
 800c18e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c190:	0007      	movs	r7, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	dc55      	bgt.n	800c242 <_dtoa_r+0x9b2>
 800c196:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c198:	2b02      	cmp	r3, #2
 800c19a:	dc2d      	bgt.n	800c1f8 <_dtoa_r+0x968>
 800c19c:	e051      	b.n	800c242 <_dtoa_r+0x9b2>
 800c19e:	2336      	movs	r3, #54	@ 0x36
 800c1a0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c1a2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800c1a4:	9c06      	ldr	r4, [sp, #24]
 800c1a6:	1a9b      	subs	r3, r3, r2
 800c1a8:	e73c      	b.n	800c024 <_dtoa_r+0x794>
 800c1aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1ac:	1e5d      	subs	r5, r3, #1
 800c1ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1b0:	42ab      	cmp	r3, r5
 800c1b2:	db08      	blt.n	800c1c6 <_dtoa_r+0x936>
 800c1b4:	1b5d      	subs	r5, r3, r5
 800c1b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1b8:	9c06      	ldr	r4, [sp, #24]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	db00      	blt.n	800c1c0 <_dtoa_r+0x930>
 800c1be:	e731      	b.n	800c024 <_dtoa_r+0x794>
 800c1c0:	1ae4      	subs	r4, r4, r3
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	e72e      	b.n	800c024 <_dtoa_r+0x794>
 800c1c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1c8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c1ca:	1aeb      	subs	r3, r5, r3
 800c1cc:	18d3      	adds	r3, r2, r3
 800c1ce:	950f      	str	r5, [sp, #60]	@ 0x3c
 800c1d0:	9314      	str	r3, [sp, #80]	@ 0x50
 800c1d2:	2500      	movs	r5, #0
 800c1d4:	e7ef      	b.n	800c1b6 <_dtoa_r+0x926>
 800c1d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c1d8:	e75e      	b.n	800c098 <_dtoa_r+0x808>
 800c1da:	2b04      	cmp	r3, #4
 800c1dc:	d0a8      	beq.n	800c130 <_dtoa_r+0x8a0>
 800c1de:	331c      	adds	r3, #28
 800c1e0:	e79f      	b.n	800c122 <_dtoa_r+0x892>
 800c1e2:	0013      	movs	r3, r2
 800c1e4:	e7fb      	b.n	800c1de <_dtoa_r+0x94e>
 800c1e6:	9b04      	ldr	r3, [sp, #16]
 800c1e8:	930c      	str	r3, [sp, #48]	@ 0x30
 800c1ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1ec:	930e      	str	r3, [sp, #56]	@ 0x38
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	dc23      	bgt.n	800c23a <_dtoa_r+0x9aa>
 800c1f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	dd20      	ble.n	800c23a <_dtoa_r+0x9aa>
 800c1f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d000      	beq.n	800c200 <_dtoa_r+0x970>
 800c1fe:	e6b5      	b.n	800bf6c <_dtoa_r+0x6dc>
 800c200:	0031      	movs	r1, r6
 800c202:	2205      	movs	r2, #5
 800c204:	9803      	ldr	r0, [sp, #12]
 800c206:	f000 faa5 	bl	800c754 <__multadd>
 800c20a:	0006      	movs	r6, r0
 800c20c:	0001      	movs	r1, r0
 800c20e:	9805      	ldr	r0, [sp, #20]
 800c210:	f000 fcc6 	bl	800cba0 <__mcmp>
 800c214:	2800      	cmp	r0, #0
 800c216:	dc00      	bgt.n	800c21a <_dtoa_r+0x98a>
 800c218:	e6a8      	b.n	800bf6c <_dtoa_r+0x6dc>
 800c21a:	9b08      	ldr	r3, [sp, #32]
 800c21c:	9a08      	ldr	r2, [sp, #32]
 800c21e:	1c5c      	adds	r4, r3, #1
 800c220:	2331      	movs	r3, #49	@ 0x31
 800c222:	7013      	strb	r3, [r2, #0]
 800c224:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c226:	3301      	adds	r3, #1
 800c228:	930c      	str	r3, [sp, #48]	@ 0x30
 800c22a:	e6a3      	b.n	800bf74 <_dtoa_r+0x6e4>
 800c22c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800c22e:	0037      	movs	r7, r6
 800c230:	e7f3      	b.n	800c21a <_dtoa_r+0x98a>
 800c232:	9b04      	ldr	r3, [sp, #16]
 800c234:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800c236:	930c      	str	r3, [sp, #48]	@ 0x30
 800c238:	e7f9      	b.n	800c22e <_dtoa_r+0x99e>
 800c23a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d100      	bne.n	800c242 <_dtoa_r+0x9b2>
 800c240:	e100      	b.n	800c444 <_dtoa_r+0xbb4>
 800c242:	2c00      	cmp	r4, #0
 800c244:	dd05      	ble.n	800c252 <_dtoa_r+0x9c2>
 800c246:	0039      	movs	r1, r7
 800c248:	0022      	movs	r2, r4
 800c24a:	9803      	ldr	r0, [sp, #12]
 800c24c:	f000 fc3c 	bl	800cac8 <__lshift>
 800c250:	0007      	movs	r7, r0
 800c252:	0038      	movs	r0, r7
 800c254:	2d00      	cmp	r5, #0
 800c256:	d018      	beq.n	800c28a <_dtoa_r+0x9fa>
 800c258:	6879      	ldr	r1, [r7, #4]
 800c25a:	9803      	ldr	r0, [sp, #12]
 800c25c:	f000 fa12 	bl	800c684 <_Balloc>
 800c260:	1e04      	subs	r4, r0, #0
 800c262:	d105      	bne.n	800c270 <_dtoa_r+0x9e0>
 800c264:	0022      	movs	r2, r4
 800c266:	4b2b      	ldr	r3, [pc, #172]	@ (800c314 <_dtoa_r+0xa84>)
 800c268:	482b      	ldr	r0, [pc, #172]	@ (800c318 <_dtoa_r+0xa88>)
 800c26a:	492c      	ldr	r1, [pc, #176]	@ (800c31c <_dtoa_r+0xa8c>)
 800c26c:	f7ff fb25 	bl	800b8ba <_dtoa_r+0x2a>
 800c270:	0039      	movs	r1, r7
 800c272:	693a      	ldr	r2, [r7, #16]
 800c274:	310c      	adds	r1, #12
 800c276:	3202      	adds	r2, #2
 800c278:	0092      	lsls	r2, r2, #2
 800c27a:	300c      	adds	r0, #12
 800c27c:	f000 ffda 	bl	800d234 <memcpy>
 800c280:	2201      	movs	r2, #1
 800c282:	0021      	movs	r1, r4
 800c284:	9803      	ldr	r0, [sp, #12]
 800c286:	f000 fc1f 	bl	800cac8 <__lshift>
 800c28a:	9b08      	ldr	r3, [sp, #32]
 800c28c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c28e:	9306      	str	r3, [sp, #24]
 800c290:	3b01      	subs	r3, #1
 800c292:	189b      	adds	r3, r3, r2
 800c294:	2201      	movs	r2, #1
 800c296:	9704      	str	r7, [sp, #16]
 800c298:	0007      	movs	r7, r0
 800c29a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c29c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c29e:	4013      	ands	r3, r2
 800c2a0:	930e      	str	r3, [sp, #56]	@ 0x38
 800c2a2:	0031      	movs	r1, r6
 800c2a4:	9805      	ldr	r0, [sp, #20]
 800c2a6:	f7ff fa65 	bl	800b774 <quorem>
 800c2aa:	9904      	ldr	r1, [sp, #16]
 800c2ac:	0005      	movs	r5, r0
 800c2ae:	900a      	str	r0, [sp, #40]	@ 0x28
 800c2b0:	9805      	ldr	r0, [sp, #20]
 800c2b2:	f000 fc75 	bl	800cba0 <__mcmp>
 800c2b6:	003a      	movs	r2, r7
 800c2b8:	900d      	str	r0, [sp, #52]	@ 0x34
 800c2ba:	0031      	movs	r1, r6
 800c2bc:	9803      	ldr	r0, [sp, #12]
 800c2be:	f000 fc8b 	bl	800cbd8 <__mdiff>
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	68c3      	ldr	r3, [r0, #12]
 800c2c6:	0004      	movs	r4, r0
 800c2c8:	3530      	adds	r5, #48	@ 0x30
 800c2ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d104      	bne.n	800c2da <_dtoa_r+0xa4a>
 800c2d0:	0001      	movs	r1, r0
 800c2d2:	9805      	ldr	r0, [sp, #20]
 800c2d4:	f000 fc64 	bl	800cba0 <__mcmp>
 800c2d8:	9009      	str	r0, [sp, #36]	@ 0x24
 800c2da:	0021      	movs	r1, r4
 800c2dc:	9803      	ldr	r0, [sp, #12]
 800c2de:	f000 fa15 	bl	800c70c <_Bfree>
 800c2e2:	9b06      	ldr	r3, [sp, #24]
 800c2e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2e6:	1c5c      	adds	r4, r3, #1
 800c2e8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	d116      	bne.n	800c320 <_dtoa_r+0xa90>
 800c2f2:	2d39      	cmp	r5, #57	@ 0x39
 800c2f4:	d02f      	beq.n	800c356 <_dtoa_r+0xac6>
 800c2f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	dd01      	ble.n	800c300 <_dtoa_r+0xa70>
 800c2fc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c2fe:	3531      	adds	r5, #49	@ 0x31
 800c300:	9b06      	ldr	r3, [sp, #24]
 800c302:	701d      	strb	r5, [r3, #0]
 800c304:	e638      	b.n	800bf78 <_dtoa_r+0x6e8>
 800c306:	46c0      	nop			@ (mov r8, r8)
 800c308:	40240000 	.word	0x40240000
 800c30c:	00000433 	.word	0x00000433
 800c310:	7ff00000 	.word	0x7ff00000
 800c314:	0800dd1c 	.word	0x0800dd1c
 800c318:	0800dcc4 	.word	0x0800dcc4
 800c31c:	000002ef 	.word	0x000002ef
 800c320:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c322:	2b00      	cmp	r3, #0
 800c324:	db04      	blt.n	800c330 <_dtoa_r+0xaa0>
 800c326:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c328:	4313      	orrs	r3, r2
 800c32a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c32c:	4313      	orrs	r3, r2
 800c32e:	d11e      	bne.n	800c36e <_dtoa_r+0xade>
 800c330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c332:	2b00      	cmp	r3, #0
 800c334:	dde4      	ble.n	800c300 <_dtoa_r+0xa70>
 800c336:	9905      	ldr	r1, [sp, #20]
 800c338:	2201      	movs	r2, #1
 800c33a:	9803      	ldr	r0, [sp, #12]
 800c33c:	f000 fbc4 	bl	800cac8 <__lshift>
 800c340:	0031      	movs	r1, r6
 800c342:	9005      	str	r0, [sp, #20]
 800c344:	f000 fc2c 	bl	800cba0 <__mcmp>
 800c348:	2800      	cmp	r0, #0
 800c34a:	dc02      	bgt.n	800c352 <_dtoa_r+0xac2>
 800c34c:	d1d8      	bne.n	800c300 <_dtoa_r+0xa70>
 800c34e:	07eb      	lsls	r3, r5, #31
 800c350:	d5d6      	bpl.n	800c300 <_dtoa_r+0xa70>
 800c352:	2d39      	cmp	r5, #57	@ 0x39
 800c354:	d1d2      	bne.n	800c2fc <_dtoa_r+0xa6c>
 800c356:	2339      	movs	r3, #57	@ 0x39
 800c358:	9a06      	ldr	r2, [sp, #24]
 800c35a:	7013      	strb	r3, [r2, #0]
 800c35c:	0023      	movs	r3, r4
 800c35e:	001c      	movs	r4, r3
 800c360:	3b01      	subs	r3, #1
 800c362:	781a      	ldrb	r2, [r3, #0]
 800c364:	2a39      	cmp	r2, #57	@ 0x39
 800c366:	d04f      	beq.n	800c408 <_dtoa_r+0xb78>
 800c368:	3201      	adds	r2, #1
 800c36a:	701a      	strb	r2, [r3, #0]
 800c36c:	e604      	b.n	800bf78 <_dtoa_r+0x6e8>
 800c36e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c370:	2b00      	cmp	r3, #0
 800c372:	dd03      	ble.n	800c37c <_dtoa_r+0xaec>
 800c374:	2d39      	cmp	r5, #57	@ 0x39
 800c376:	d0ee      	beq.n	800c356 <_dtoa_r+0xac6>
 800c378:	3501      	adds	r5, #1
 800c37a:	e7c1      	b.n	800c300 <_dtoa_r+0xa70>
 800c37c:	9b06      	ldr	r3, [sp, #24]
 800c37e:	9a06      	ldr	r2, [sp, #24]
 800c380:	701d      	strb	r5, [r3, #0]
 800c382:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c384:	4293      	cmp	r3, r2
 800c386:	d02a      	beq.n	800c3de <_dtoa_r+0xb4e>
 800c388:	2300      	movs	r3, #0
 800c38a:	220a      	movs	r2, #10
 800c38c:	9905      	ldr	r1, [sp, #20]
 800c38e:	9803      	ldr	r0, [sp, #12]
 800c390:	f000 f9e0 	bl	800c754 <__multadd>
 800c394:	9b04      	ldr	r3, [sp, #16]
 800c396:	9005      	str	r0, [sp, #20]
 800c398:	42bb      	cmp	r3, r7
 800c39a:	d109      	bne.n	800c3b0 <_dtoa_r+0xb20>
 800c39c:	2300      	movs	r3, #0
 800c39e:	220a      	movs	r2, #10
 800c3a0:	9904      	ldr	r1, [sp, #16]
 800c3a2:	9803      	ldr	r0, [sp, #12]
 800c3a4:	f000 f9d6 	bl	800c754 <__multadd>
 800c3a8:	9004      	str	r0, [sp, #16]
 800c3aa:	0007      	movs	r7, r0
 800c3ac:	9406      	str	r4, [sp, #24]
 800c3ae:	e778      	b.n	800c2a2 <_dtoa_r+0xa12>
 800c3b0:	9904      	ldr	r1, [sp, #16]
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	220a      	movs	r2, #10
 800c3b6:	9803      	ldr	r0, [sp, #12]
 800c3b8:	f000 f9cc 	bl	800c754 <__multadd>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	9004      	str	r0, [sp, #16]
 800c3c0:	220a      	movs	r2, #10
 800c3c2:	0039      	movs	r1, r7
 800c3c4:	9803      	ldr	r0, [sp, #12]
 800c3c6:	f000 f9c5 	bl	800c754 <__multadd>
 800c3ca:	e7ee      	b.n	800c3aa <_dtoa_r+0xb1a>
 800c3cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3ce:	2401      	movs	r4, #1
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	dd00      	ble.n	800c3d6 <_dtoa_r+0xb46>
 800c3d4:	001c      	movs	r4, r3
 800c3d6:	9b08      	ldr	r3, [sp, #32]
 800c3d8:	191c      	adds	r4, r3, r4
 800c3da:	2300      	movs	r3, #0
 800c3dc:	9304      	str	r3, [sp, #16]
 800c3de:	9905      	ldr	r1, [sp, #20]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	9803      	ldr	r0, [sp, #12]
 800c3e4:	f000 fb70 	bl	800cac8 <__lshift>
 800c3e8:	0031      	movs	r1, r6
 800c3ea:	9005      	str	r0, [sp, #20]
 800c3ec:	f000 fbd8 	bl	800cba0 <__mcmp>
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	dcb3      	bgt.n	800c35c <_dtoa_r+0xacc>
 800c3f4:	d101      	bne.n	800c3fa <_dtoa_r+0xb6a>
 800c3f6:	07ed      	lsls	r5, r5, #31
 800c3f8:	d4b0      	bmi.n	800c35c <_dtoa_r+0xacc>
 800c3fa:	0023      	movs	r3, r4
 800c3fc:	001c      	movs	r4, r3
 800c3fe:	3b01      	subs	r3, #1
 800c400:	781a      	ldrb	r2, [r3, #0]
 800c402:	2a30      	cmp	r2, #48	@ 0x30
 800c404:	d0fa      	beq.n	800c3fc <_dtoa_r+0xb6c>
 800c406:	e5b7      	b.n	800bf78 <_dtoa_r+0x6e8>
 800c408:	9a08      	ldr	r2, [sp, #32]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d1a7      	bne.n	800c35e <_dtoa_r+0xace>
 800c40e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c410:	3301      	adds	r3, #1
 800c412:	930c      	str	r3, [sp, #48]	@ 0x30
 800c414:	2331      	movs	r3, #49	@ 0x31
 800c416:	7013      	strb	r3, [r2, #0]
 800c418:	e5ae      	b.n	800bf78 <_dtoa_r+0x6e8>
 800c41a:	4b15      	ldr	r3, [pc, #84]	@ (800c470 <_dtoa_r+0xbe0>)
 800c41c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c41e:	9308      	str	r3, [sp, #32]
 800c420:	4b14      	ldr	r3, [pc, #80]	@ (800c474 <_dtoa_r+0xbe4>)
 800c422:	2a00      	cmp	r2, #0
 800c424:	d001      	beq.n	800c42a <_dtoa_r+0xb9a>
 800c426:	f7ff fa7b 	bl	800b920 <_dtoa_r+0x90>
 800c42a:	f7ff fa7b 	bl	800b924 <_dtoa_r+0x94>
 800c42e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c430:	2b01      	cmp	r3, #1
 800c432:	dc00      	bgt.n	800c436 <_dtoa_r+0xba6>
 800c434:	e648      	b.n	800c0c8 <_dtoa_r+0x838>
 800c436:	2001      	movs	r0, #1
 800c438:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c43a:	e665      	b.n	800c108 <_dtoa_r+0x878>
 800c43c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c43e:	2b00      	cmp	r3, #0
 800c440:	dc00      	bgt.n	800c444 <_dtoa_r+0xbb4>
 800c442:	e6d6      	b.n	800c1f2 <_dtoa_r+0x962>
 800c444:	2400      	movs	r4, #0
 800c446:	0031      	movs	r1, r6
 800c448:	9805      	ldr	r0, [sp, #20]
 800c44a:	f7ff f993 	bl	800b774 <quorem>
 800c44e:	9b08      	ldr	r3, [sp, #32]
 800c450:	3030      	adds	r0, #48	@ 0x30
 800c452:	5518      	strb	r0, [r3, r4]
 800c454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c456:	3401      	adds	r4, #1
 800c458:	0005      	movs	r5, r0
 800c45a:	429c      	cmp	r4, r3
 800c45c:	dab6      	bge.n	800c3cc <_dtoa_r+0xb3c>
 800c45e:	2300      	movs	r3, #0
 800c460:	220a      	movs	r2, #10
 800c462:	9905      	ldr	r1, [sp, #20]
 800c464:	9803      	ldr	r0, [sp, #12]
 800c466:	f000 f975 	bl	800c754 <__multadd>
 800c46a:	9005      	str	r0, [sp, #20]
 800c46c:	e7eb      	b.n	800c446 <_dtoa_r+0xbb6>
 800c46e:	46c0      	nop			@ (mov r8, r8)
 800c470:	0800dca0 	.word	0x0800dca0
 800c474:	0800dca8 	.word	0x0800dca8

0800c478 <_free_r>:
 800c478:	b570      	push	{r4, r5, r6, lr}
 800c47a:	0005      	movs	r5, r0
 800c47c:	1e0c      	subs	r4, r1, #0
 800c47e:	d010      	beq.n	800c4a2 <_free_r+0x2a>
 800c480:	3c04      	subs	r4, #4
 800c482:	6823      	ldr	r3, [r4, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	da00      	bge.n	800c48a <_free_r+0x12>
 800c488:	18e4      	adds	r4, r4, r3
 800c48a:	0028      	movs	r0, r5
 800c48c:	f000 f8ea 	bl	800c664 <__malloc_lock>
 800c490:	4a1d      	ldr	r2, [pc, #116]	@ (800c508 <_free_r+0x90>)
 800c492:	6813      	ldr	r3, [r2, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d105      	bne.n	800c4a4 <_free_r+0x2c>
 800c498:	6063      	str	r3, [r4, #4]
 800c49a:	6014      	str	r4, [r2, #0]
 800c49c:	0028      	movs	r0, r5
 800c49e:	f000 f8e9 	bl	800c674 <__malloc_unlock>
 800c4a2:	bd70      	pop	{r4, r5, r6, pc}
 800c4a4:	42a3      	cmp	r3, r4
 800c4a6:	d908      	bls.n	800c4ba <_free_r+0x42>
 800c4a8:	6820      	ldr	r0, [r4, #0]
 800c4aa:	1821      	adds	r1, r4, r0
 800c4ac:	428b      	cmp	r3, r1
 800c4ae:	d1f3      	bne.n	800c498 <_free_r+0x20>
 800c4b0:	6819      	ldr	r1, [r3, #0]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	1809      	adds	r1, r1, r0
 800c4b6:	6021      	str	r1, [r4, #0]
 800c4b8:	e7ee      	b.n	800c498 <_free_r+0x20>
 800c4ba:	001a      	movs	r2, r3
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d001      	beq.n	800c4c6 <_free_r+0x4e>
 800c4c2:	42a3      	cmp	r3, r4
 800c4c4:	d9f9      	bls.n	800c4ba <_free_r+0x42>
 800c4c6:	6811      	ldr	r1, [r2, #0]
 800c4c8:	1850      	adds	r0, r2, r1
 800c4ca:	42a0      	cmp	r0, r4
 800c4cc:	d10b      	bne.n	800c4e6 <_free_r+0x6e>
 800c4ce:	6820      	ldr	r0, [r4, #0]
 800c4d0:	1809      	adds	r1, r1, r0
 800c4d2:	1850      	adds	r0, r2, r1
 800c4d4:	6011      	str	r1, [r2, #0]
 800c4d6:	4283      	cmp	r3, r0
 800c4d8:	d1e0      	bne.n	800c49c <_free_r+0x24>
 800c4da:	6818      	ldr	r0, [r3, #0]
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	1841      	adds	r1, r0, r1
 800c4e0:	6011      	str	r1, [r2, #0]
 800c4e2:	6053      	str	r3, [r2, #4]
 800c4e4:	e7da      	b.n	800c49c <_free_r+0x24>
 800c4e6:	42a0      	cmp	r0, r4
 800c4e8:	d902      	bls.n	800c4f0 <_free_r+0x78>
 800c4ea:	230c      	movs	r3, #12
 800c4ec:	602b      	str	r3, [r5, #0]
 800c4ee:	e7d5      	b.n	800c49c <_free_r+0x24>
 800c4f0:	6820      	ldr	r0, [r4, #0]
 800c4f2:	1821      	adds	r1, r4, r0
 800c4f4:	428b      	cmp	r3, r1
 800c4f6:	d103      	bne.n	800c500 <_free_r+0x88>
 800c4f8:	6819      	ldr	r1, [r3, #0]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	1809      	adds	r1, r1, r0
 800c4fe:	6021      	str	r1, [r4, #0]
 800c500:	6063      	str	r3, [r4, #4]
 800c502:	6054      	str	r4, [r2, #4]
 800c504:	e7ca      	b.n	800c49c <_free_r+0x24>
 800c506:	46c0      	nop			@ (mov r8, r8)
 800c508:	2000065c 	.word	0x2000065c

0800c50c <malloc>:
 800c50c:	b510      	push	{r4, lr}
 800c50e:	4b03      	ldr	r3, [pc, #12]	@ (800c51c <malloc+0x10>)
 800c510:	0001      	movs	r1, r0
 800c512:	6818      	ldr	r0, [r3, #0]
 800c514:	f000 f826 	bl	800c564 <_malloc_r>
 800c518:	bd10      	pop	{r4, pc}
 800c51a:	46c0      	nop			@ (mov r8, r8)
 800c51c:	20000028 	.word	0x20000028

0800c520 <sbrk_aligned>:
 800c520:	b570      	push	{r4, r5, r6, lr}
 800c522:	4e0f      	ldr	r6, [pc, #60]	@ (800c560 <sbrk_aligned+0x40>)
 800c524:	000d      	movs	r5, r1
 800c526:	6831      	ldr	r1, [r6, #0]
 800c528:	0004      	movs	r4, r0
 800c52a:	2900      	cmp	r1, #0
 800c52c:	d102      	bne.n	800c534 <sbrk_aligned+0x14>
 800c52e:	f000 fe6f 	bl	800d210 <_sbrk_r>
 800c532:	6030      	str	r0, [r6, #0]
 800c534:	0029      	movs	r1, r5
 800c536:	0020      	movs	r0, r4
 800c538:	f000 fe6a 	bl	800d210 <_sbrk_r>
 800c53c:	1c43      	adds	r3, r0, #1
 800c53e:	d103      	bne.n	800c548 <sbrk_aligned+0x28>
 800c540:	2501      	movs	r5, #1
 800c542:	426d      	negs	r5, r5
 800c544:	0028      	movs	r0, r5
 800c546:	bd70      	pop	{r4, r5, r6, pc}
 800c548:	2303      	movs	r3, #3
 800c54a:	1cc5      	adds	r5, r0, #3
 800c54c:	439d      	bics	r5, r3
 800c54e:	42a8      	cmp	r0, r5
 800c550:	d0f8      	beq.n	800c544 <sbrk_aligned+0x24>
 800c552:	1a29      	subs	r1, r5, r0
 800c554:	0020      	movs	r0, r4
 800c556:	f000 fe5b 	bl	800d210 <_sbrk_r>
 800c55a:	3001      	adds	r0, #1
 800c55c:	d1f2      	bne.n	800c544 <sbrk_aligned+0x24>
 800c55e:	e7ef      	b.n	800c540 <sbrk_aligned+0x20>
 800c560:	20000658 	.word	0x20000658

0800c564 <_malloc_r>:
 800c564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c566:	2203      	movs	r2, #3
 800c568:	1ccb      	adds	r3, r1, #3
 800c56a:	4393      	bics	r3, r2
 800c56c:	3308      	adds	r3, #8
 800c56e:	0005      	movs	r5, r0
 800c570:	001f      	movs	r7, r3
 800c572:	2b0c      	cmp	r3, #12
 800c574:	d234      	bcs.n	800c5e0 <_malloc_r+0x7c>
 800c576:	270c      	movs	r7, #12
 800c578:	42b9      	cmp	r1, r7
 800c57a:	d833      	bhi.n	800c5e4 <_malloc_r+0x80>
 800c57c:	0028      	movs	r0, r5
 800c57e:	f000 f871 	bl	800c664 <__malloc_lock>
 800c582:	4e37      	ldr	r6, [pc, #220]	@ (800c660 <_malloc_r+0xfc>)
 800c584:	6833      	ldr	r3, [r6, #0]
 800c586:	001c      	movs	r4, r3
 800c588:	2c00      	cmp	r4, #0
 800c58a:	d12f      	bne.n	800c5ec <_malloc_r+0x88>
 800c58c:	0039      	movs	r1, r7
 800c58e:	0028      	movs	r0, r5
 800c590:	f7ff ffc6 	bl	800c520 <sbrk_aligned>
 800c594:	0004      	movs	r4, r0
 800c596:	1c43      	adds	r3, r0, #1
 800c598:	d15f      	bne.n	800c65a <_malloc_r+0xf6>
 800c59a:	6834      	ldr	r4, [r6, #0]
 800c59c:	9400      	str	r4, [sp, #0]
 800c59e:	9b00      	ldr	r3, [sp, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d14a      	bne.n	800c63a <_malloc_r+0xd6>
 800c5a4:	2c00      	cmp	r4, #0
 800c5a6:	d052      	beq.n	800c64e <_malloc_r+0xea>
 800c5a8:	6823      	ldr	r3, [r4, #0]
 800c5aa:	0028      	movs	r0, r5
 800c5ac:	18e3      	adds	r3, r4, r3
 800c5ae:	9900      	ldr	r1, [sp, #0]
 800c5b0:	9301      	str	r3, [sp, #4]
 800c5b2:	f000 fe2d 	bl	800d210 <_sbrk_r>
 800c5b6:	9b01      	ldr	r3, [sp, #4]
 800c5b8:	4283      	cmp	r3, r0
 800c5ba:	d148      	bne.n	800c64e <_malloc_r+0xea>
 800c5bc:	6823      	ldr	r3, [r4, #0]
 800c5be:	0028      	movs	r0, r5
 800c5c0:	1aff      	subs	r7, r7, r3
 800c5c2:	0039      	movs	r1, r7
 800c5c4:	f7ff ffac 	bl	800c520 <sbrk_aligned>
 800c5c8:	3001      	adds	r0, #1
 800c5ca:	d040      	beq.n	800c64e <_malloc_r+0xea>
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	19db      	adds	r3, r3, r7
 800c5d0:	6023      	str	r3, [r4, #0]
 800c5d2:	6833      	ldr	r3, [r6, #0]
 800c5d4:	685a      	ldr	r2, [r3, #4]
 800c5d6:	2a00      	cmp	r2, #0
 800c5d8:	d133      	bne.n	800c642 <_malloc_r+0xde>
 800c5da:	9b00      	ldr	r3, [sp, #0]
 800c5dc:	6033      	str	r3, [r6, #0]
 800c5de:	e019      	b.n	800c614 <_malloc_r+0xb0>
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	dac9      	bge.n	800c578 <_malloc_r+0x14>
 800c5e4:	230c      	movs	r3, #12
 800c5e6:	602b      	str	r3, [r5, #0]
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c5ec:	6821      	ldr	r1, [r4, #0]
 800c5ee:	1bc9      	subs	r1, r1, r7
 800c5f0:	d420      	bmi.n	800c634 <_malloc_r+0xd0>
 800c5f2:	290b      	cmp	r1, #11
 800c5f4:	d90a      	bls.n	800c60c <_malloc_r+0xa8>
 800c5f6:	19e2      	adds	r2, r4, r7
 800c5f8:	6027      	str	r7, [r4, #0]
 800c5fa:	42a3      	cmp	r3, r4
 800c5fc:	d104      	bne.n	800c608 <_malloc_r+0xa4>
 800c5fe:	6032      	str	r2, [r6, #0]
 800c600:	6863      	ldr	r3, [r4, #4]
 800c602:	6011      	str	r1, [r2, #0]
 800c604:	6053      	str	r3, [r2, #4]
 800c606:	e005      	b.n	800c614 <_malloc_r+0xb0>
 800c608:	605a      	str	r2, [r3, #4]
 800c60a:	e7f9      	b.n	800c600 <_malloc_r+0x9c>
 800c60c:	6862      	ldr	r2, [r4, #4]
 800c60e:	42a3      	cmp	r3, r4
 800c610:	d10e      	bne.n	800c630 <_malloc_r+0xcc>
 800c612:	6032      	str	r2, [r6, #0]
 800c614:	0028      	movs	r0, r5
 800c616:	f000 f82d 	bl	800c674 <__malloc_unlock>
 800c61a:	0020      	movs	r0, r4
 800c61c:	2207      	movs	r2, #7
 800c61e:	300b      	adds	r0, #11
 800c620:	1d23      	adds	r3, r4, #4
 800c622:	4390      	bics	r0, r2
 800c624:	1ac2      	subs	r2, r0, r3
 800c626:	4298      	cmp	r0, r3
 800c628:	d0df      	beq.n	800c5ea <_malloc_r+0x86>
 800c62a:	1a1b      	subs	r3, r3, r0
 800c62c:	50a3      	str	r3, [r4, r2]
 800c62e:	e7dc      	b.n	800c5ea <_malloc_r+0x86>
 800c630:	605a      	str	r2, [r3, #4]
 800c632:	e7ef      	b.n	800c614 <_malloc_r+0xb0>
 800c634:	0023      	movs	r3, r4
 800c636:	6864      	ldr	r4, [r4, #4]
 800c638:	e7a6      	b.n	800c588 <_malloc_r+0x24>
 800c63a:	9c00      	ldr	r4, [sp, #0]
 800c63c:	6863      	ldr	r3, [r4, #4]
 800c63e:	9300      	str	r3, [sp, #0]
 800c640:	e7ad      	b.n	800c59e <_malloc_r+0x3a>
 800c642:	001a      	movs	r2, r3
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	42a3      	cmp	r3, r4
 800c648:	d1fb      	bne.n	800c642 <_malloc_r+0xde>
 800c64a:	2300      	movs	r3, #0
 800c64c:	e7da      	b.n	800c604 <_malloc_r+0xa0>
 800c64e:	230c      	movs	r3, #12
 800c650:	0028      	movs	r0, r5
 800c652:	602b      	str	r3, [r5, #0]
 800c654:	f000 f80e 	bl	800c674 <__malloc_unlock>
 800c658:	e7c6      	b.n	800c5e8 <_malloc_r+0x84>
 800c65a:	6007      	str	r7, [r0, #0]
 800c65c:	e7da      	b.n	800c614 <_malloc_r+0xb0>
 800c65e:	46c0      	nop			@ (mov r8, r8)
 800c660:	2000065c 	.word	0x2000065c

0800c664 <__malloc_lock>:
 800c664:	b510      	push	{r4, lr}
 800c666:	4802      	ldr	r0, [pc, #8]	@ (800c670 <__malloc_lock+0xc>)
 800c668:	f7ff f877 	bl	800b75a <__retarget_lock_acquire_recursive>
 800c66c:	bd10      	pop	{r4, pc}
 800c66e:	46c0      	nop			@ (mov r8, r8)
 800c670:	20000654 	.word	0x20000654

0800c674 <__malloc_unlock>:
 800c674:	b510      	push	{r4, lr}
 800c676:	4802      	ldr	r0, [pc, #8]	@ (800c680 <__malloc_unlock+0xc>)
 800c678:	f7ff f870 	bl	800b75c <__retarget_lock_release_recursive>
 800c67c:	bd10      	pop	{r4, pc}
 800c67e:	46c0      	nop			@ (mov r8, r8)
 800c680:	20000654 	.word	0x20000654

0800c684 <_Balloc>:
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	69c5      	ldr	r5, [r0, #28]
 800c688:	0006      	movs	r6, r0
 800c68a:	000c      	movs	r4, r1
 800c68c:	2d00      	cmp	r5, #0
 800c68e:	d10e      	bne.n	800c6ae <_Balloc+0x2a>
 800c690:	2010      	movs	r0, #16
 800c692:	f7ff ff3b 	bl	800c50c <malloc>
 800c696:	1e02      	subs	r2, r0, #0
 800c698:	61f0      	str	r0, [r6, #28]
 800c69a:	d104      	bne.n	800c6a6 <_Balloc+0x22>
 800c69c:	216b      	movs	r1, #107	@ 0x6b
 800c69e:	4b19      	ldr	r3, [pc, #100]	@ (800c704 <_Balloc+0x80>)
 800c6a0:	4819      	ldr	r0, [pc, #100]	@ (800c708 <_Balloc+0x84>)
 800c6a2:	f000 fdd1 	bl	800d248 <__assert_func>
 800c6a6:	6045      	str	r5, [r0, #4]
 800c6a8:	6085      	str	r5, [r0, #8]
 800c6aa:	6005      	str	r5, [r0, #0]
 800c6ac:	60c5      	str	r5, [r0, #12]
 800c6ae:	69f5      	ldr	r5, [r6, #28]
 800c6b0:	68eb      	ldr	r3, [r5, #12]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d013      	beq.n	800c6de <_Balloc+0x5a>
 800c6b6:	69f3      	ldr	r3, [r6, #28]
 800c6b8:	00a2      	lsls	r2, r4, #2
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	189b      	adds	r3, r3, r2
 800c6be:	6818      	ldr	r0, [r3, #0]
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	d118      	bne.n	800c6f6 <_Balloc+0x72>
 800c6c4:	2101      	movs	r1, #1
 800c6c6:	000d      	movs	r5, r1
 800c6c8:	40a5      	lsls	r5, r4
 800c6ca:	1d6a      	adds	r2, r5, #5
 800c6cc:	0030      	movs	r0, r6
 800c6ce:	0092      	lsls	r2, r2, #2
 800c6d0:	f000 fdd8 	bl	800d284 <_calloc_r>
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	d00c      	beq.n	800c6f2 <_Balloc+0x6e>
 800c6d8:	6044      	str	r4, [r0, #4]
 800c6da:	6085      	str	r5, [r0, #8]
 800c6dc:	e00d      	b.n	800c6fa <_Balloc+0x76>
 800c6de:	2221      	movs	r2, #33	@ 0x21
 800c6e0:	2104      	movs	r1, #4
 800c6e2:	0030      	movs	r0, r6
 800c6e4:	f000 fdce 	bl	800d284 <_calloc_r>
 800c6e8:	69f3      	ldr	r3, [r6, #28]
 800c6ea:	60e8      	str	r0, [r5, #12]
 800c6ec:	68db      	ldr	r3, [r3, #12]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d1e1      	bne.n	800c6b6 <_Balloc+0x32>
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	bd70      	pop	{r4, r5, r6, pc}
 800c6f6:	6802      	ldr	r2, [r0, #0]
 800c6f8:	601a      	str	r2, [r3, #0]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	6103      	str	r3, [r0, #16]
 800c6fe:	60c3      	str	r3, [r0, #12]
 800c700:	e7f8      	b.n	800c6f4 <_Balloc+0x70>
 800c702:	46c0      	nop			@ (mov r8, r8)
 800c704:	0800dcad 	.word	0x0800dcad
 800c708:	0800dd2d 	.word	0x0800dd2d

0800c70c <_Bfree>:
 800c70c:	b570      	push	{r4, r5, r6, lr}
 800c70e:	69c6      	ldr	r6, [r0, #28]
 800c710:	0005      	movs	r5, r0
 800c712:	000c      	movs	r4, r1
 800c714:	2e00      	cmp	r6, #0
 800c716:	d10e      	bne.n	800c736 <_Bfree+0x2a>
 800c718:	2010      	movs	r0, #16
 800c71a:	f7ff fef7 	bl	800c50c <malloc>
 800c71e:	1e02      	subs	r2, r0, #0
 800c720:	61e8      	str	r0, [r5, #28]
 800c722:	d104      	bne.n	800c72e <_Bfree+0x22>
 800c724:	218f      	movs	r1, #143	@ 0x8f
 800c726:	4b09      	ldr	r3, [pc, #36]	@ (800c74c <_Bfree+0x40>)
 800c728:	4809      	ldr	r0, [pc, #36]	@ (800c750 <_Bfree+0x44>)
 800c72a:	f000 fd8d 	bl	800d248 <__assert_func>
 800c72e:	6046      	str	r6, [r0, #4]
 800c730:	6086      	str	r6, [r0, #8]
 800c732:	6006      	str	r6, [r0, #0]
 800c734:	60c6      	str	r6, [r0, #12]
 800c736:	2c00      	cmp	r4, #0
 800c738:	d007      	beq.n	800c74a <_Bfree+0x3e>
 800c73a:	69eb      	ldr	r3, [r5, #28]
 800c73c:	6862      	ldr	r2, [r4, #4]
 800c73e:	68db      	ldr	r3, [r3, #12]
 800c740:	0092      	lsls	r2, r2, #2
 800c742:	189b      	adds	r3, r3, r2
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	6022      	str	r2, [r4, #0]
 800c748:	601c      	str	r4, [r3, #0]
 800c74a:	bd70      	pop	{r4, r5, r6, pc}
 800c74c:	0800dcad 	.word	0x0800dcad
 800c750:	0800dd2d 	.word	0x0800dd2d

0800c754 <__multadd>:
 800c754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c756:	000f      	movs	r7, r1
 800c758:	9001      	str	r0, [sp, #4]
 800c75a:	000c      	movs	r4, r1
 800c75c:	001e      	movs	r6, r3
 800c75e:	2000      	movs	r0, #0
 800c760:	690d      	ldr	r5, [r1, #16]
 800c762:	3714      	adds	r7, #20
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	3001      	adds	r0, #1
 800c768:	b299      	uxth	r1, r3
 800c76a:	4351      	muls	r1, r2
 800c76c:	0c1b      	lsrs	r3, r3, #16
 800c76e:	4353      	muls	r3, r2
 800c770:	1989      	adds	r1, r1, r6
 800c772:	0c0e      	lsrs	r6, r1, #16
 800c774:	199b      	adds	r3, r3, r6
 800c776:	0c1e      	lsrs	r6, r3, #16
 800c778:	b289      	uxth	r1, r1
 800c77a:	041b      	lsls	r3, r3, #16
 800c77c:	185b      	adds	r3, r3, r1
 800c77e:	c708      	stmia	r7!, {r3}
 800c780:	4285      	cmp	r5, r0
 800c782:	dcef      	bgt.n	800c764 <__multadd+0x10>
 800c784:	2e00      	cmp	r6, #0
 800c786:	d022      	beq.n	800c7ce <__multadd+0x7a>
 800c788:	68a3      	ldr	r3, [r4, #8]
 800c78a:	42ab      	cmp	r3, r5
 800c78c:	dc19      	bgt.n	800c7c2 <__multadd+0x6e>
 800c78e:	6861      	ldr	r1, [r4, #4]
 800c790:	9801      	ldr	r0, [sp, #4]
 800c792:	3101      	adds	r1, #1
 800c794:	f7ff ff76 	bl	800c684 <_Balloc>
 800c798:	1e07      	subs	r7, r0, #0
 800c79a:	d105      	bne.n	800c7a8 <__multadd+0x54>
 800c79c:	003a      	movs	r2, r7
 800c79e:	21ba      	movs	r1, #186	@ 0xba
 800c7a0:	4b0c      	ldr	r3, [pc, #48]	@ (800c7d4 <__multadd+0x80>)
 800c7a2:	480d      	ldr	r0, [pc, #52]	@ (800c7d8 <__multadd+0x84>)
 800c7a4:	f000 fd50 	bl	800d248 <__assert_func>
 800c7a8:	0021      	movs	r1, r4
 800c7aa:	6922      	ldr	r2, [r4, #16]
 800c7ac:	310c      	adds	r1, #12
 800c7ae:	3202      	adds	r2, #2
 800c7b0:	0092      	lsls	r2, r2, #2
 800c7b2:	300c      	adds	r0, #12
 800c7b4:	f000 fd3e 	bl	800d234 <memcpy>
 800c7b8:	0021      	movs	r1, r4
 800c7ba:	9801      	ldr	r0, [sp, #4]
 800c7bc:	f7ff ffa6 	bl	800c70c <_Bfree>
 800c7c0:	003c      	movs	r4, r7
 800c7c2:	1d2b      	adds	r3, r5, #4
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	18e3      	adds	r3, r4, r3
 800c7c8:	3501      	adds	r5, #1
 800c7ca:	605e      	str	r6, [r3, #4]
 800c7cc:	6125      	str	r5, [r4, #16]
 800c7ce:	0020      	movs	r0, r4
 800c7d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c7d2:	46c0      	nop			@ (mov r8, r8)
 800c7d4:	0800dd1c 	.word	0x0800dd1c
 800c7d8:	0800dd2d 	.word	0x0800dd2d

0800c7dc <__hi0bits>:
 800c7dc:	2280      	movs	r2, #128	@ 0x80
 800c7de:	0003      	movs	r3, r0
 800c7e0:	0252      	lsls	r2, r2, #9
 800c7e2:	2000      	movs	r0, #0
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d201      	bcs.n	800c7ec <__hi0bits+0x10>
 800c7e8:	041b      	lsls	r3, r3, #16
 800c7ea:	3010      	adds	r0, #16
 800c7ec:	2280      	movs	r2, #128	@ 0x80
 800c7ee:	0452      	lsls	r2, r2, #17
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d201      	bcs.n	800c7f8 <__hi0bits+0x1c>
 800c7f4:	3008      	adds	r0, #8
 800c7f6:	021b      	lsls	r3, r3, #8
 800c7f8:	2280      	movs	r2, #128	@ 0x80
 800c7fa:	0552      	lsls	r2, r2, #21
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d201      	bcs.n	800c804 <__hi0bits+0x28>
 800c800:	3004      	adds	r0, #4
 800c802:	011b      	lsls	r3, r3, #4
 800c804:	2280      	movs	r2, #128	@ 0x80
 800c806:	05d2      	lsls	r2, r2, #23
 800c808:	4293      	cmp	r3, r2
 800c80a:	d201      	bcs.n	800c810 <__hi0bits+0x34>
 800c80c:	3002      	adds	r0, #2
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	2b00      	cmp	r3, #0
 800c812:	db03      	blt.n	800c81c <__hi0bits+0x40>
 800c814:	3001      	adds	r0, #1
 800c816:	4213      	tst	r3, r2
 800c818:	d100      	bne.n	800c81c <__hi0bits+0x40>
 800c81a:	2020      	movs	r0, #32
 800c81c:	4770      	bx	lr

0800c81e <__lo0bits>:
 800c81e:	6803      	ldr	r3, [r0, #0]
 800c820:	0001      	movs	r1, r0
 800c822:	2207      	movs	r2, #7
 800c824:	0018      	movs	r0, r3
 800c826:	4010      	ands	r0, r2
 800c828:	4213      	tst	r3, r2
 800c82a:	d00d      	beq.n	800c848 <__lo0bits+0x2a>
 800c82c:	3a06      	subs	r2, #6
 800c82e:	2000      	movs	r0, #0
 800c830:	4213      	tst	r3, r2
 800c832:	d105      	bne.n	800c840 <__lo0bits+0x22>
 800c834:	3002      	adds	r0, #2
 800c836:	4203      	tst	r3, r0
 800c838:	d003      	beq.n	800c842 <__lo0bits+0x24>
 800c83a:	40d3      	lsrs	r3, r2
 800c83c:	0010      	movs	r0, r2
 800c83e:	600b      	str	r3, [r1, #0]
 800c840:	4770      	bx	lr
 800c842:	089b      	lsrs	r3, r3, #2
 800c844:	600b      	str	r3, [r1, #0]
 800c846:	e7fb      	b.n	800c840 <__lo0bits+0x22>
 800c848:	b29a      	uxth	r2, r3
 800c84a:	2a00      	cmp	r2, #0
 800c84c:	d101      	bne.n	800c852 <__lo0bits+0x34>
 800c84e:	2010      	movs	r0, #16
 800c850:	0c1b      	lsrs	r3, r3, #16
 800c852:	b2da      	uxtb	r2, r3
 800c854:	2a00      	cmp	r2, #0
 800c856:	d101      	bne.n	800c85c <__lo0bits+0x3e>
 800c858:	3008      	adds	r0, #8
 800c85a:	0a1b      	lsrs	r3, r3, #8
 800c85c:	071a      	lsls	r2, r3, #28
 800c85e:	d101      	bne.n	800c864 <__lo0bits+0x46>
 800c860:	3004      	adds	r0, #4
 800c862:	091b      	lsrs	r3, r3, #4
 800c864:	079a      	lsls	r2, r3, #30
 800c866:	d101      	bne.n	800c86c <__lo0bits+0x4e>
 800c868:	3002      	adds	r0, #2
 800c86a:	089b      	lsrs	r3, r3, #2
 800c86c:	07da      	lsls	r2, r3, #31
 800c86e:	d4e9      	bmi.n	800c844 <__lo0bits+0x26>
 800c870:	3001      	adds	r0, #1
 800c872:	085b      	lsrs	r3, r3, #1
 800c874:	d1e6      	bne.n	800c844 <__lo0bits+0x26>
 800c876:	2020      	movs	r0, #32
 800c878:	e7e2      	b.n	800c840 <__lo0bits+0x22>
	...

0800c87c <__i2b>:
 800c87c:	b510      	push	{r4, lr}
 800c87e:	000c      	movs	r4, r1
 800c880:	2101      	movs	r1, #1
 800c882:	f7ff feff 	bl	800c684 <_Balloc>
 800c886:	2800      	cmp	r0, #0
 800c888:	d107      	bne.n	800c89a <__i2b+0x1e>
 800c88a:	2146      	movs	r1, #70	@ 0x46
 800c88c:	4c05      	ldr	r4, [pc, #20]	@ (800c8a4 <__i2b+0x28>)
 800c88e:	0002      	movs	r2, r0
 800c890:	4b05      	ldr	r3, [pc, #20]	@ (800c8a8 <__i2b+0x2c>)
 800c892:	0020      	movs	r0, r4
 800c894:	31ff      	adds	r1, #255	@ 0xff
 800c896:	f000 fcd7 	bl	800d248 <__assert_func>
 800c89a:	2301      	movs	r3, #1
 800c89c:	6144      	str	r4, [r0, #20]
 800c89e:	6103      	str	r3, [r0, #16]
 800c8a0:	bd10      	pop	{r4, pc}
 800c8a2:	46c0      	nop			@ (mov r8, r8)
 800c8a4:	0800dd2d 	.word	0x0800dd2d
 800c8a8:	0800dd1c 	.word	0x0800dd1c

0800c8ac <__multiply>:
 800c8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ae:	0014      	movs	r4, r2
 800c8b0:	690a      	ldr	r2, [r1, #16]
 800c8b2:	6923      	ldr	r3, [r4, #16]
 800c8b4:	000d      	movs	r5, r1
 800c8b6:	b08b      	sub	sp, #44	@ 0x2c
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	db02      	blt.n	800c8c2 <__multiply+0x16>
 800c8bc:	0023      	movs	r3, r4
 800c8be:	000c      	movs	r4, r1
 800c8c0:	001d      	movs	r5, r3
 800c8c2:	6927      	ldr	r7, [r4, #16]
 800c8c4:	692e      	ldr	r6, [r5, #16]
 800c8c6:	6861      	ldr	r1, [r4, #4]
 800c8c8:	19bb      	adds	r3, r7, r6
 800c8ca:	9303      	str	r3, [sp, #12]
 800c8cc:	68a3      	ldr	r3, [r4, #8]
 800c8ce:	19ba      	adds	r2, r7, r6
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	da00      	bge.n	800c8d6 <__multiply+0x2a>
 800c8d4:	3101      	adds	r1, #1
 800c8d6:	f7ff fed5 	bl	800c684 <_Balloc>
 800c8da:	9002      	str	r0, [sp, #8]
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	d106      	bne.n	800c8ee <__multiply+0x42>
 800c8e0:	21b1      	movs	r1, #177	@ 0xb1
 800c8e2:	4b49      	ldr	r3, [pc, #292]	@ (800ca08 <__multiply+0x15c>)
 800c8e4:	4849      	ldr	r0, [pc, #292]	@ (800ca0c <__multiply+0x160>)
 800c8e6:	9a02      	ldr	r2, [sp, #8]
 800c8e8:	0049      	lsls	r1, r1, #1
 800c8ea:	f000 fcad 	bl	800d248 <__assert_func>
 800c8ee:	9b02      	ldr	r3, [sp, #8]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	3314      	adds	r3, #20
 800c8f4:	469c      	mov	ip, r3
 800c8f6:	19bb      	adds	r3, r7, r6
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	4463      	add	r3, ip
 800c8fc:	9304      	str	r3, [sp, #16]
 800c8fe:	4663      	mov	r3, ip
 800c900:	9904      	ldr	r1, [sp, #16]
 800c902:	428b      	cmp	r3, r1
 800c904:	d32a      	bcc.n	800c95c <__multiply+0xb0>
 800c906:	0023      	movs	r3, r4
 800c908:	00bf      	lsls	r7, r7, #2
 800c90a:	3314      	adds	r3, #20
 800c90c:	3514      	adds	r5, #20
 800c90e:	9308      	str	r3, [sp, #32]
 800c910:	00b6      	lsls	r6, r6, #2
 800c912:	19db      	adds	r3, r3, r7
 800c914:	9305      	str	r3, [sp, #20]
 800c916:	19ab      	adds	r3, r5, r6
 800c918:	9309      	str	r3, [sp, #36]	@ 0x24
 800c91a:	2304      	movs	r3, #4
 800c91c:	9306      	str	r3, [sp, #24]
 800c91e:	0023      	movs	r3, r4
 800c920:	9a05      	ldr	r2, [sp, #20]
 800c922:	3315      	adds	r3, #21
 800c924:	9501      	str	r5, [sp, #4]
 800c926:	429a      	cmp	r2, r3
 800c928:	d305      	bcc.n	800c936 <__multiply+0x8a>
 800c92a:	1b13      	subs	r3, r2, r4
 800c92c:	3b15      	subs	r3, #21
 800c92e:	089b      	lsrs	r3, r3, #2
 800c930:	3301      	adds	r3, #1
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	9306      	str	r3, [sp, #24]
 800c936:	9b01      	ldr	r3, [sp, #4]
 800c938:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d310      	bcc.n	800c960 <__multiply+0xb4>
 800c93e:	9b03      	ldr	r3, [sp, #12]
 800c940:	2b00      	cmp	r3, #0
 800c942:	dd05      	ble.n	800c950 <__multiply+0xa4>
 800c944:	9b04      	ldr	r3, [sp, #16]
 800c946:	3b04      	subs	r3, #4
 800c948:	9304      	str	r3, [sp, #16]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d056      	beq.n	800c9fe <__multiply+0x152>
 800c950:	9b02      	ldr	r3, [sp, #8]
 800c952:	9a03      	ldr	r2, [sp, #12]
 800c954:	0018      	movs	r0, r3
 800c956:	611a      	str	r2, [r3, #16]
 800c958:	b00b      	add	sp, #44	@ 0x2c
 800c95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c95c:	c304      	stmia	r3!, {r2}
 800c95e:	e7cf      	b.n	800c900 <__multiply+0x54>
 800c960:	9b01      	ldr	r3, [sp, #4]
 800c962:	6818      	ldr	r0, [r3, #0]
 800c964:	b280      	uxth	r0, r0
 800c966:	2800      	cmp	r0, #0
 800c968:	d01e      	beq.n	800c9a8 <__multiply+0xfc>
 800c96a:	4667      	mov	r7, ip
 800c96c:	2500      	movs	r5, #0
 800c96e:	9e08      	ldr	r6, [sp, #32]
 800c970:	ce02      	ldmia	r6!, {r1}
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	9307      	str	r3, [sp, #28]
 800c976:	b28b      	uxth	r3, r1
 800c978:	4343      	muls	r3, r0
 800c97a:	001a      	movs	r2, r3
 800c97c:	466b      	mov	r3, sp
 800c97e:	0c09      	lsrs	r1, r1, #16
 800c980:	8b9b      	ldrh	r3, [r3, #28]
 800c982:	4341      	muls	r1, r0
 800c984:	18d3      	adds	r3, r2, r3
 800c986:	9a07      	ldr	r2, [sp, #28]
 800c988:	195b      	adds	r3, r3, r5
 800c98a:	0c12      	lsrs	r2, r2, #16
 800c98c:	1889      	adds	r1, r1, r2
 800c98e:	0c1a      	lsrs	r2, r3, #16
 800c990:	188a      	adds	r2, r1, r2
 800c992:	b29b      	uxth	r3, r3
 800c994:	0c15      	lsrs	r5, r2, #16
 800c996:	0412      	lsls	r2, r2, #16
 800c998:	431a      	orrs	r2, r3
 800c99a:	9b05      	ldr	r3, [sp, #20]
 800c99c:	c704      	stmia	r7!, {r2}
 800c99e:	42b3      	cmp	r3, r6
 800c9a0:	d8e6      	bhi.n	800c970 <__multiply+0xc4>
 800c9a2:	4663      	mov	r3, ip
 800c9a4:	9a06      	ldr	r2, [sp, #24]
 800c9a6:	509d      	str	r5, [r3, r2]
 800c9a8:	9b01      	ldr	r3, [sp, #4]
 800c9aa:	6818      	ldr	r0, [r3, #0]
 800c9ac:	0c00      	lsrs	r0, r0, #16
 800c9ae:	d020      	beq.n	800c9f2 <__multiply+0x146>
 800c9b0:	4663      	mov	r3, ip
 800c9b2:	0025      	movs	r5, r4
 800c9b4:	4661      	mov	r1, ip
 800c9b6:	2700      	movs	r7, #0
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	3514      	adds	r5, #20
 800c9bc:	682a      	ldr	r2, [r5, #0]
 800c9be:	680e      	ldr	r6, [r1, #0]
 800c9c0:	b292      	uxth	r2, r2
 800c9c2:	4342      	muls	r2, r0
 800c9c4:	0c36      	lsrs	r6, r6, #16
 800c9c6:	1992      	adds	r2, r2, r6
 800c9c8:	19d2      	adds	r2, r2, r7
 800c9ca:	0416      	lsls	r6, r2, #16
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	431e      	orrs	r6, r3
 800c9d0:	600e      	str	r6, [r1, #0]
 800c9d2:	cd40      	ldmia	r5!, {r6}
 800c9d4:	684b      	ldr	r3, [r1, #4]
 800c9d6:	0c36      	lsrs	r6, r6, #16
 800c9d8:	4346      	muls	r6, r0
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	0c12      	lsrs	r2, r2, #16
 800c9de:	18f3      	adds	r3, r6, r3
 800c9e0:	189b      	adds	r3, r3, r2
 800c9e2:	9a05      	ldr	r2, [sp, #20]
 800c9e4:	0c1f      	lsrs	r7, r3, #16
 800c9e6:	3104      	adds	r1, #4
 800c9e8:	42aa      	cmp	r2, r5
 800c9ea:	d8e7      	bhi.n	800c9bc <__multiply+0x110>
 800c9ec:	4662      	mov	r2, ip
 800c9ee:	9906      	ldr	r1, [sp, #24]
 800c9f0:	5053      	str	r3, [r2, r1]
 800c9f2:	9b01      	ldr	r3, [sp, #4]
 800c9f4:	3304      	adds	r3, #4
 800c9f6:	9301      	str	r3, [sp, #4]
 800c9f8:	2304      	movs	r3, #4
 800c9fa:	449c      	add	ip, r3
 800c9fc:	e79b      	b.n	800c936 <__multiply+0x8a>
 800c9fe:	9b03      	ldr	r3, [sp, #12]
 800ca00:	3b01      	subs	r3, #1
 800ca02:	9303      	str	r3, [sp, #12]
 800ca04:	e79b      	b.n	800c93e <__multiply+0x92>
 800ca06:	46c0      	nop			@ (mov r8, r8)
 800ca08:	0800dd1c 	.word	0x0800dd1c
 800ca0c:	0800dd2d 	.word	0x0800dd2d

0800ca10 <__pow5mult>:
 800ca10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca12:	2303      	movs	r3, #3
 800ca14:	0015      	movs	r5, r2
 800ca16:	0007      	movs	r7, r0
 800ca18:	000e      	movs	r6, r1
 800ca1a:	401a      	ands	r2, r3
 800ca1c:	421d      	tst	r5, r3
 800ca1e:	d008      	beq.n	800ca32 <__pow5mult+0x22>
 800ca20:	4925      	ldr	r1, [pc, #148]	@ (800cab8 <__pow5mult+0xa8>)
 800ca22:	3a01      	subs	r2, #1
 800ca24:	0092      	lsls	r2, r2, #2
 800ca26:	5852      	ldr	r2, [r2, r1]
 800ca28:	2300      	movs	r3, #0
 800ca2a:	0031      	movs	r1, r6
 800ca2c:	f7ff fe92 	bl	800c754 <__multadd>
 800ca30:	0006      	movs	r6, r0
 800ca32:	10ad      	asrs	r5, r5, #2
 800ca34:	d03d      	beq.n	800cab2 <__pow5mult+0xa2>
 800ca36:	69fc      	ldr	r4, [r7, #28]
 800ca38:	2c00      	cmp	r4, #0
 800ca3a:	d10f      	bne.n	800ca5c <__pow5mult+0x4c>
 800ca3c:	2010      	movs	r0, #16
 800ca3e:	f7ff fd65 	bl	800c50c <malloc>
 800ca42:	1e02      	subs	r2, r0, #0
 800ca44:	61f8      	str	r0, [r7, #28]
 800ca46:	d105      	bne.n	800ca54 <__pow5mult+0x44>
 800ca48:	21b4      	movs	r1, #180	@ 0xb4
 800ca4a:	4b1c      	ldr	r3, [pc, #112]	@ (800cabc <__pow5mult+0xac>)
 800ca4c:	481c      	ldr	r0, [pc, #112]	@ (800cac0 <__pow5mult+0xb0>)
 800ca4e:	31ff      	adds	r1, #255	@ 0xff
 800ca50:	f000 fbfa 	bl	800d248 <__assert_func>
 800ca54:	6044      	str	r4, [r0, #4]
 800ca56:	6084      	str	r4, [r0, #8]
 800ca58:	6004      	str	r4, [r0, #0]
 800ca5a:	60c4      	str	r4, [r0, #12]
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	689c      	ldr	r4, [r3, #8]
 800ca60:	9301      	str	r3, [sp, #4]
 800ca62:	2c00      	cmp	r4, #0
 800ca64:	d108      	bne.n	800ca78 <__pow5mult+0x68>
 800ca66:	0038      	movs	r0, r7
 800ca68:	4916      	ldr	r1, [pc, #88]	@ (800cac4 <__pow5mult+0xb4>)
 800ca6a:	f7ff ff07 	bl	800c87c <__i2b>
 800ca6e:	9b01      	ldr	r3, [sp, #4]
 800ca70:	0004      	movs	r4, r0
 800ca72:	6098      	str	r0, [r3, #8]
 800ca74:	2300      	movs	r3, #0
 800ca76:	6003      	str	r3, [r0, #0]
 800ca78:	2301      	movs	r3, #1
 800ca7a:	421d      	tst	r5, r3
 800ca7c:	d00a      	beq.n	800ca94 <__pow5mult+0x84>
 800ca7e:	0031      	movs	r1, r6
 800ca80:	0022      	movs	r2, r4
 800ca82:	0038      	movs	r0, r7
 800ca84:	f7ff ff12 	bl	800c8ac <__multiply>
 800ca88:	0031      	movs	r1, r6
 800ca8a:	9001      	str	r0, [sp, #4]
 800ca8c:	0038      	movs	r0, r7
 800ca8e:	f7ff fe3d 	bl	800c70c <_Bfree>
 800ca92:	9e01      	ldr	r6, [sp, #4]
 800ca94:	106d      	asrs	r5, r5, #1
 800ca96:	d00c      	beq.n	800cab2 <__pow5mult+0xa2>
 800ca98:	6820      	ldr	r0, [r4, #0]
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d107      	bne.n	800caae <__pow5mult+0x9e>
 800ca9e:	0022      	movs	r2, r4
 800caa0:	0021      	movs	r1, r4
 800caa2:	0038      	movs	r0, r7
 800caa4:	f7ff ff02 	bl	800c8ac <__multiply>
 800caa8:	2300      	movs	r3, #0
 800caaa:	6020      	str	r0, [r4, #0]
 800caac:	6003      	str	r3, [r0, #0]
 800caae:	0004      	movs	r4, r0
 800cab0:	e7e2      	b.n	800ca78 <__pow5mult+0x68>
 800cab2:	0030      	movs	r0, r6
 800cab4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cab6:	46c0      	nop			@ (mov r8, r8)
 800cab8:	0800dd88 	.word	0x0800dd88
 800cabc:	0800dcad 	.word	0x0800dcad
 800cac0:	0800dd2d 	.word	0x0800dd2d
 800cac4:	00000271 	.word	0x00000271

0800cac8 <__lshift>:
 800cac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caca:	000c      	movs	r4, r1
 800cacc:	0016      	movs	r6, r2
 800cace:	6923      	ldr	r3, [r4, #16]
 800cad0:	1157      	asrs	r7, r2, #5
 800cad2:	b085      	sub	sp, #20
 800cad4:	18fb      	adds	r3, r7, r3
 800cad6:	9301      	str	r3, [sp, #4]
 800cad8:	3301      	adds	r3, #1
 800cada:	9300      	str	r3, [sp, #0]
 800cadc:	6849      	ldr	r1, [r1, #4]
 800cade:	68a3      	ldr	r3, [r4, #8]
 800cae0:	9002      	str	r0, [sp, #8]
 800cae2:	9a00      	ldr	r2, [sp, #0]
 800cae4:	4293      	cmp	r3, r2
 800cae6:	db10      	blt.n	800cb0a <__lshift+0x42>
 800cae8:	9802      	ldr	r0, [sp, #8]
 800caea:	f7ff fdcb 	bl	800c684 <_Balloc>
 800caee:	2300      	movs	r3, #0
 800caf0:	0001      	movs	r1, r0
 800caf2:	0005      	movs	r5, r0
 800caf4:	001a      	movs	r2, r3
 800caf6:	3114      	adds	r1, #20
 800caf8:	4298      	cmp	r0, r3
 800cafa:	d10c      	bne.n	800cb16 <__lshift+0x4e>
 800cafc:	21ef      	movs	r1, #239	@ 0xef
 800cafe:	002a      	movs	r2, r5
 800cb00:	4b25      	ldr	r3, [pc, #148]	@ (800cb98 <__lshift+0xd0>)
 800cb02:	4826      	ldr	r0, [pc, #152]	@ (800cb9c <__lshift+0xd4>)
 800cb04:	0049      	lsls	r1, r1, #1
 800cb06:	f000 fb9f 	bl	800d248 <__assert_func>
 800cb0a:	3101      	adds	r1, #1
 800cb0c:	005b      	lsls	r3, r3, #1
 800cb0e:	e7e8      	b.n	800cae2 <__lshift+0x1a>
 800cb10:	0098      	lsls	r0, r3, #2
 800cb12:	500a      	str	r2, [r1, r0]
 800cb14:	3301      	adds	r3, #1
 800cb16:	42bb      	cmp	r3, r7
 800cb18:	dbfa      	blt.n	800cb10 <__lshift+0x48>
 800cb1a:	43fb      	mvns	r3, r7
 800cb1c:	17db      	asrs	r3, r3, #31
 800cb1e:	401f      	ands	r7, r3
 800cb20:	00bf      	lsls	r7, r7, #2
 800cb22:	0023      	movs	r3, r4
 800cb24:	201f      	movs	r0, #31
 800cb26:	19c9      	adds	r1, r1, r7
 800cb28:	0037      	movs	r7, r6
 800cb2a:	6922      	ldr	r2, [r4, #16]
 800cb2c:	3314      	adds	r3, #20
 800cb2e:	0092      	lsls	r2, r2, #2
 800cb30:	189a      	adds	r2, r3, r2
 800cb32:	4007      	ands	r7, r0
 800cb34:	4206      	tst	r6, r0
 800cb36:	d029      	beq.n	800cb8c <__lshift+0xc4>
 800cb38:	3001      	adds	r0, #1
 800cb3a:	1bc0      	subs	r0, r0, r7
 800cb3c:	9003      	str	r0, [sp, #12]
 800cb3e:	468c      	mov	ip, r1
 800cb40:	2000      	movs	r0, #0
 800cb42:	681e      	ldr	r6, [r3, #0]
 800cb44:	40be      	lsls	r6, r7
 800cb46:	4306      	orrs	r6, r0
 800cb48:	4660      	mov	r0, ip
 800cb4a:	c040      	stmia	r0!, {r6}
 800cb4c:	4684      	mov	ip, r0
 800cb4e:	9e03      	ldr	r6, [sp, #12]
 800cb50:	cb01      	ldmia	r3!, {r0}
 800cb52:	40f0      	lsrs	r0, r6
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d8f4      	bhi.n	800cb42 <__lshift+0x7a>
 800cb58:	0026      	movs	r6, r4
 800cb5a:	3615      	adds	r6, #21
 800cb5c:	2304      	movs	r3, #4
 800cb5e:	42b2      	cmp	r2, r6
 800cb60:	d304      	bcc.n	800cb6c <__lshift+0xa4>
 800cb62:	1b13      	subs	r3, r2, r4
 800cb64:	3b15      	subs	r3, #21
 800cb66:	089b      	lsrs	r3, r3, #2
 800cb68:	3301      	adds	r3, #1
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	50c8      	str	r0, [r1, r3]
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	d002      	beq.n	800cb78 <__lshift+0xb0>
 800cb72:	9b01      	ldr	r3, [sp, #4]
 800cb74:	3302      	adds	r3, #2
 800cb76:	9300      	str	r3, [sp, #0]
 800cb78:	9b00      	ldr	r3, [sp, #0]
 800cb7a:	9802      	ldr	r0, [sp, #8]
 800cb7c:	3b01      	subs	r3, #1
 800cb7e:	0021      	movs	r1, r4
 800cb80:	612b      	str	r3, [r5, #16]
 800cb82:	f7ff fdc3 	bl	800c70c <_Bfree>
 800cb86:	0028      	movs	r0, r5
 800cb88:	b005      	add	sp, #20
 800cb8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb8c:	cb01      	ldmia	r3!, {r0}
 800cb8e:	c101      	stmia	r1!, {r0}
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d8fb      	bhi.n	800cb8c <__lshift+0xc4>
 800cb94:	e7f0      	b.n	800cb78 <__lshift+0xb0>
 800cb96:	46c0      	nop			@ (mov r8, r8)
 800cb98:	0800dd1c 	.word	0x0800dd1c
 800cb9c:	0800dd2d 	.word	0x0800dd2d

0800cba0 <__mcmp>:
 800cba0:	b530      	push	{r4, r5, lr}
 800cba2:	690b      	ldr	r3, [r1, #16]
 800cba4:	6904      	ldr	r4, [r0, #16]
 800cba6:	0002      	movs	r2, r0
 800cba8:	1ae0      	subs	r0, r4, r3
 800cbaa:	429c      	cmp	r4, r3
 800cbac:	d10f      	bne.n	800cbce <__mcmp+0x2e>
 800cbae:	3214      	adds	r2, #20
 800cbb0:	009b      	lsls	r3, r3, #2
 800cbb2:	3114      	adds	r1, #20
 800cbb4:	0014      	movs	r4, r2
 800cbb6:	18c9      	adds	r1, r1, r3
 800cbb8:	18d2      	adds	r2, r2, r3
 800cbba:	3a04      	subs	r2, #4
 800cbbc:	3904      	subs	r1, #4
 800cbbe:	6815      	ldr	r5, [r2, #0]
 800cbc0:	680b      	ldr	r3, [r1, #0]
 800cbc2:	429d      	cmp	r5, r3
 800cbc4:	d004      	beq.n	800cbd0 <__mcmp+0x30>
 800cbc6:	2001      	movs	r0, #1
 800cbc8:	429d      	cmp	r5, r3
 800cbca:	d200      	bcs.n	800cbce <__mcmp+0x2e>
 800cbcc:	3802      	subs	r0, #2
 800cbce:	bd30      	pop	{r4, r5, pc}
 800cbd0:	4294      	cmp	r4, r2
 800cbd2:	d3f2      	bcc.n	800cbba <__mcmp+0x1a>
 800cbd4:	e7fb      	b.n	800cbce <__mcmp+0x2e>
	...

0800cbd8 <__mdiff>:
 800cbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbda:	000c      	movs	r4, r1
 800cbdc:	b087      	sub	sp, #28
 800cbde:	9000      	str	r0, [sp, #0]
 800cbe0:	0011      	movs	r1, r2
 800cbe2:	0020      	movs	r0, r4
 800cbe4:	0017      	movs	r7, r2
 800cbe6:	f7ff ffdb 	bl	800cba0 <__mcmp>
 800cbea:	1e05      	subs	r5, r0, #0
 800cbec:	d110      	bne.n	800cc10 <__mdiff+0x38>
 800cbee:	0001      	movs	r1, r0
 800cbf0:	9800      	ldr	r0, [sp, #0]
 800cbf2:	f7ff fd47 	bl	800c684 <_Balloc>
 800cbf6:	1e02      	subs	r2, r0, #0
 800cbf8:	d104      	bne.n	800cc04 <__mdiff+0x2c>
 800cbfa:	4b40      	ldr	r3, [pc, #256]	@ (800ccfc <__mdiff+0x124>)
 800cbfc:	4840      	ldr	r0, [pc, #256]	@ (800cd00 <__mdiff+0x128>)
 800cbfe:	4941      	ldr	r1, [pc, #260]	@ (800cd04 <__mdiff+0x12c>)
 800cc00:	f000 fb22 	bl	800d248 <__assert_func>
 800cc04:	2301      	movs	r3, #1
 800cc06:	6145      	str	r5, [r0, #20]
 800cc08:	6103      	str	r3, [r0, #16]
 800cc0a:	0010      	movs	r0, r2
 800cc0c:	b007      	add	sp, #28
 800cc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc10:	2600      	movs	r6, #0
 800cc12:	42b0      	cmp	r0, r6
 800cc14:	da03      	bge.n	800cc1e <__mdiff+0x46>
 800cc16:	0023      	movs	r3, r4
 800cc18:	003c      	movs	r4, r7
 800cc1a:	001f      	movs	r7, r3
 800cc1c:	3601      	adds	r6, #1
 800cc1e:	6861      	ldr	r1, [r4, #4]
 800cc20:	9800      	ldr	r0, [sp, #0]
 800cc22:	f7ff fd2f 	bl	800c684 <_Balloc>
 800cc26:	1e02      	subs	r2, r0, #0
 800cc28:	d103      	bne.n	800cc32 <__mdiff+0x5a>
 800cc2a:	4b34      	ldr	r3, [pc, #208]	@ (800ccfc <__mdiff+0x124>)
 800cc2c:	4834      	ldr	r0, [pc, #208]	@ (800cd00 <__mdiff+0x128>)
 800cc2e:	4936      	ldr	r1, [pc, #216]	@ (800cd08 <__mdiff+0x130>)
 800cc30:	e7e6      	b.n	800cc00 <__mdiff+0x28>
 800cc32:	6923      	ldr	r3, [r4, #16]
 800cc34:	3414      	adds	r4, #20
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	18e3      	adds	r3, r4, r3
 800cc3c:	0021      	movs	r1, r4
 800cc3e:	9401      	str	r4, [sp, #4]
 800cc40:	003c      	movs	r4, r7
 800cc42:	9302      	str	r3, [sp, #8]
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	3414      	adds	r4, #20
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	18e3      	adds	r3, r4, r3
 800cc4c:	9303      	str	r3, [sp, #12]
 800cc4e:	0003      	movs	r3, r0
 800cc50:	60c6      	str	r6, [r0, #12]
 800cc52:	468c      	mov	ip, r1
 800cc54:	2000      	movs	r0, #0
 800cc56:	3314      	adds	r3, #20
 800cc58:	9304      	str	r3, [sp, #16]
 800cc5a:	9305      	str	r3, [sp, #20]
 800cc5c:	4663      	mov	r3, ip
 800cc5e:	cb20      	ldmia	r3!, {r5}
 800cc60:	b2a9      	uxth	r1, r5
 800cc62:	000e      	movs	r6, r1
 800cc64:	469c      	mov	ip, r3
 800cc66:	cc08      	ldmia	r4!, {r3}
 800cc68:	0c2d      	lsrs	r5, r5, #16
 800cc6a:	b299      	uxth	r1, r3
 800cc6c:	1a71      	subs	r1, r6, r1
 800cc6e:	1809      	adds	r1, r1, r0
 800cc70:	0c1b      	lsrs	r3, r3, #16
 800cc72:	1408      	asrs	r0, r1, #16
 800cc74:	1aeb      	subs	r3, r5, r3
 800cc76:	181b      	adds	r3, r3, r0
 800cc78:	1418      	asrs	r0, r3, #16
 800cc7a:	b289      	uxth	r1, r1
 800cc7c:	041b      	lsls	r3, r3, #16
 800cc7e:	4319      	orrs	r1, r3
 800cc80:	9b05      	ldr	r3, [sp, #20]
 800cc82:	c302      	stmia	r3!, {r1}
 800cc84:	9305      	str	r3, [sp, #20]
 800cc86:	9b03      	ldr	r3, [sp, #12]
 800cc88:	42a3      	cmp	r3, r4
 800cc8a:	d8e7      	bhi.n	800cc5c <__mdiff+0x84>
 800cc8c:	0039      	movs	r1, r7
 800cc8e:	9c03      	ldr	r4, [sp, #12]
 800cc90:	3115      	adds	r1, #21
 800cc92:	2304      	movs	r3, #4
 800cc94:	428c      	cmp	r4, r1
 800cc96:	d304      	bcc.n	800cca2 <__mdiff+0xca>
 800cc98:	1be3      	subs	r3, r4, r7
 800cc9a:	3b15      	subs	r3, #21
 800cc9c:	089b      	lsrs	r3, r3, #2
 800cc9e:	3301      	adds	r3, #1
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	9901      	ldr	r1, [sp, #4]
 800cca4:	18cd      	adds	r5, r1, r3
 800cca6:	9904      	ldr	r1, [sp, #16]
 800cca8:	002e      	movs	r6, r5
 800ccaa:	18cb      	adds	r3, r1, r3
 800ccac:	001f      	movs	r7, r3
 800ccae:	9902      	ldr	r1, [sp, #8]
 800ccb0:	428e      	cmp	r6, r1
 800ccb2:	d311      	bcc.n	800ccd8 <__mdiff+0x100>
 800ccb4:	9c02      	ldr	r4, [sp, #8]
 800ccb6:	1ee9      	subs	r1, r5, #3
 800ccb8:	2000      	movs	r0, #0
 800ccba:	428c      	cmp	r4, r1
 800ccbc:	d304      	bcc.n	800ccc8 <__mdiff+0xf0>
 800ccbe:	0021      	movs	r1, r4
 800ccc0:	3103      	adds	r1, #3
 800ccc2:	1b49      	subs	r1, r1, r5
 800ccc4:	0889      	lsrs	r1, r1, #2
 800ccc6:	0088      	lsls	r0, r1, #2
 800ccc8:	181b      	adds	r3, r3, r0
 800ccca:	3b04      	subs	r3, #4
 800cccc:	6819      	ldr	r1, [r3, #0]
 800ccce:	2900      	cmp	r1, #0
 800ccd0:	d010      	beq.n	800ccf4 <__mdiff+0x11c>
 800ccd2:	9b00      	ldr	r3, [sp, #0]
 800ccd4:	6113      	str	r3, [r2, #16]
 800ccd6:	e798      	b.n	800cc0a <__mdiff+0x32>
 800ccd8:	4684      	mov	ip, r0
 800ccda:	ce02      	ldmia	r6!, {r1}
 800ccdc:	b288      	uxth	r0, r1
 800ccde:	4460      	add	r0, ip
 800cce0:	1400      	asrs	r0, r0, #16
 800cce2:	0c0c      	lsrs	r4, r1, #16
 800cce4:	1904      	adds	r4, r0, r4
 800cce6:	4461      	add	r1, ip
 800cce8:	1420      	asrs	r0, r4, #16
 800ccea:	b289      	uxth	r1, r1
 800ccec:	0424      	lsls	r4, r4, #16
 800ccee:	4321      	orrs	r1, r4
 800ccf0:	c702      	stmia	r7!, {r1}
 800ccf2:	e7dc      	b.n	800ccae <__mdiff+0xd6>
 800ccf4:	9900      	ldr	r1, [sp, #0]
 800ccf6:	3901      	subs	r1, #1
 800ccf8:	9100      	str	r1, [sp, #0]
 800ccfa:	e7e6      	b.n	800ccca <__mdiff+0xf2>
 800ccfc:	0800dd1c 	.word	0x0800dd1c
 800cd00:	0800dd2d 	.word	0x0800dd2d
 800cd04:	00000237 	.word	0x00000237
 800cd08:	00000245 	.word	0x00000245

0800cd0c <__d2b>:
 800cd0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd0e:	2101      	movs	r1, #1
 800cd10:	0016      	movs	r6, r2
 800cd12:	001f      	movs	r7, r3
 800cd14:	f7ff fcb6 	bl	800c684 <_Balloc>
 800cd18:	1e04      	subs	r4, r0, #0
 800cd1a:	d105      	bne.n	800cd28 <__d2b+0x1c>
 800cd1c:	0022      	movs	r2, r4
 800cd1e:	4b25      	ldr	r3, [pc, #148]	@ (800cdb4 <__d2b+0xa8>)
 800cd20:	4825      	ldr	r0, [pc, #148]	@ (800cdb8 <__d2b+0xac>)
 800cd22:	4926      	ldr	r1, [pc, #152]	@ (800cdbc <__d2b+0xb0>)
 800cd24:	f000 fa90 	bl	800d248 <__assert_func>
 800cd28:	033b      	lsls	r3, r7, #12
 800cd2a:	007d      	lsls	r5, r7, #1
 800cd2c:	0b1b      	lsrs	r3, r3, #12
 800cd2e:	0d6d      	lsrs	r5, r5, #21
 800cd30:	d002      	beq.n	800cd38 <__d2b+0x2c>
 800cd32:	2280      	movs	r2, #128	@ 0x80
 800cd34:	0352      	lsls	r2, r2, #13
 800cd36:	4313      	orrs	r3, r2
 800cd38:	9301      	str	r3, [sp, #4]
 800cd3a:	2e00      	cmp	r6, #0
 800cd3c:	d025      	beq.n	800cd8a <__d2b+0x7e>
 800cd3e:	4668      	mov	r0, sp
 800cd40:	9600      	str	r6, [sp, #0]
 800cd42:	f7ff fd6c 	bl	800c81e <__lo0bits>
 800cd46:	9b01      	ldr	r3, [sp, #4]
 800cd48:	9900      	ldr	r1, [sp, #0]
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	d01b      	beq.n	800cd86 <__d2b+0x7a>
 800cd4e:	2220      	movs	r2, #32
 800cd50:	001e      	movs	r6, r3
 800cd52:	1a12      	subs	r2, r2, r0
 800cd54:	4096      	lsls	r6, r2
 800cd56:	0032      	movs	r2, r6
 800cd58:	40c3      	lsrs	r3, r0
 800cd5a:	430a      	orrs	r2, r1
 800cd5c:	6162      	str	r2, [r4, #20]
 800cd5e:	9301      	str	r3, [sp, #4]
 800cd60:	9e01      	ldr	r6, [sp, #4]
 800cd62:	61a6      	str	r6, [r4, #24]
 800cd64:	1e73      	subs	r3, r6, #1
 800cd66:	419e      	sbcs	r6, r3
 800cd68:	3601      	adds	r6, #1
 800cd6a:	6126      	str	r6, [r4, #16]
 800cd6c:	2d00      	cmp	r5, #0
 800cd6e:	d014      	beq.n	800cd9a <__d2b+0x8e>
 800cd70:	2635      	movs	r6, #53	@ 0x35
 800cd72:	4b13      	ldr	r3, [pc, #76]	@ (800cdc0 <__d2b+0xb4>)
 800cd74:	18ed      	adds	r5, r5, r3
 800cd76:	9b08      	ldr	r3, [sp, #32]
 800cd78:	182d      	adds	r5, r5, r0
 800cd7a:	601d      	str	r5, [r3, #0]
 800cd7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd7e:	1a36      	subs	r6, r6, r0
 800cd80:	601e      	str	r6, [r3, #0]
 800cd82:	0020      	movs	r0, r4
 800cd84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cd86:	6161      	str	r1, [r4, #20]
 800cd88:	e7ea      	b.n	800cd60 <__d2b+0x54>
 800cd8a:	a801      	add	r0, sp, #4
 800cd8c:	f7ff fd47 	bl	800c81e <__lo0bits>
 800cd90:	9b01      	ldr	r3, [sp, #4]
 800cd92:	2601      	movs	r6, #1
 800cd94:	6163      	str	r3, [r4, #20]
 800cd96:	3020      	adds	r0, #32
 800cd98:	e7e7      	b.n	800cd6a <__d2b+0x5e>
 800cd9a:	4b0a      	ldr	r3, [pc, #40]	@ (800cdc4 <__d2b+0xb8>)
 800cd9c:	18c0      	adds	r0, r0, r3
 800cd9e:	9b08      	ldr	r3, [sp, #32]
 800cda0:	6018      	str	r0, [r3, #0]
 800cda2:	4b09      	ldr	r3, [pc, #36]	@ (800cdc8 <__d2b+0xbc>)
 800cda4:	18f3      	adds	r3, r6, r3
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	18e3      	adds	r3, r4, r3
 800cdaa:	6958      	ldr	r0, [r3, #20]
 800cdac:	f7ff fd16 	bl	800c7dc <__hi0bits>
 800cdb0:	0176      	lsls	r6, r6, #5
 800cdb2:	e7e3      	b.n	800cd7c <__d2b+0x70>
 800cdb4:	0800dd1c 	.word	0x0800dd1c
 800cdb8:	0800dd2d 	.word	0x0800dd2d
 800cdbc:	0000030f 	.word	0x0000030f
 800cdc0:	fffffbcd 	.word	0xfffffbcd
 800cdc4:	fffffbce 	.word	0xfffffbce
 800cdc8:	3fffffff 	.word	0x3fffffff

0800cdcc <__ssputs_r>:
 800cdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdce:	688e      	ldr	r6, [r1, #8]
 800cdd0:	b085      	sub	sp, #20
 800cdd2:	001f      	movs	r7, r3
 800cdd4:	000c      	movs	r4, r1
 800cdd6:	680b      	ldr	r3, [r1, #0]
 800cdd8:	9002      	str	r0, [sp, #8]
 800cdda:	9203      	str	r2, [sp, #12]
 800cddc:	42be      	cmp	r6, r7
 800cdde:	d830      	bhi.n	800ce42 <__ssputs_r+0x76>
 800cde0:	210c      	movs	r1, #12
 800cde2:	5e62      	ldrsh	r2, [r4, r1]
 800cde4:	2190      	movs	r1, #144	@ 0x90
 800cde6:	00c9      	lsls	r1, r1, #3
 800cde8:	420a      	tst	r2, r1
 800cdea:	d028      	beq.n	800ce3e <__ssputs_r+0x72>
 800cdec:	2003      	movs	r0, #3
 800cdee:	6921      	ldr	r1, [r4, #16]
 800cdf0:	1a5b      	subs	r3, r3, r1
 800cdf2:	9301      	str	r3, [sp, #4]
 800cdf4:	6963      	ldr	r3, [r4, #20]
 800cdf6:	4343      	muls	r3, r0
 800cdf8:	9801      	ldr	r0, [sp, #4]
 800cdfa:	0fdd      	lsrs	r5, r3, #31
 800cdfc:	18ed      	adds	r5, r5, r3
 800cdfe:	1c7b      	adds	r3, r7, #1
 800ce00:	181b      	adds	r3, r3, r0
 800ce02:	106d      	asrs	r5, r5, #1
 800ce04:	42ab      	cmp	r3, r5
 800ce06:	d900      	bls.n	800ce0a <__ssputs_r+0x3e>
 800ce08:	001d      	movs	r5, r3
 800ce0a:	0552      	lsls	r2, r2, #21
 800ce0c:	d528      	bpl.n	800ce60 <__ssputs_r+0x94>
 800ce0e:	0029      	movs	r1, r5
 800ce10:	9802      	ldr	r0, [sp, #8]
 800ce12:	f7ff fba7 	bl	800c564 <_malloc_r>
 800ce16:	1e06      	subs	r6, r0, #0
 800ce18:	d02c      	beq.n	800ce74 <__ssputs_r+0xa8>
 800ce1a:	9a01      	ldr	r2, [sp, #4]
 800ce1c:	6921      	ldr	r1, [r4, #16]
 800ce1e:	f000 fa09 	bl	800d234 <memcpy>
 800ce22:	89a2      	ldrh	r2, [r4, #12]
 800ce24:	4b18      	ldr	r3, [pc, #96]	@ (800ce88 <__ssputs_r+0xbc>)
 800ce26:	401a      	ands	r2, r3
 800ce28:	2380      	movs	r3, #128	@ 0x80
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	81a3      	strh	r3, [r4, #12]
 800ce2e:	9b01      	ldr	r3, [sp, #4]
 800ce30:	6126      	str	r6, [r4, #16]
 800ce32:	18f6      	adds	r6, r6, r3
 800ce34:	6026      	str	r6, [r4, #0]
 800ce36:	003e      	movs	r6, r7
 800ce38:	6165      	str	r5, [r4, #20]
 800ce3a:	1aed      	subs	r5, r5, r3
 800ce3c:	60a5      	str	r5, [r4, #8]
 800ce3e:	42be      	cmp	r6, r7
 800ce40:	d900      	bls.n	800ce44 <__ssputs_r+0x78>
 800ce42:	003e      	movs	r6, r7
 800ce44:	0032      	movs	r2, r6
 800ce46:	9903      	ldr	r1, [sp, #12]
 800ce48:	6820      	ldr	r0, [r4, #0]
 800ce4a:	f000 f9ce 	bl	800d1ea <memmove>
 800ce4e:	2000      	movs	r0, #0
 800ce50:	68a3      	ldr	r3, [r4, #8]
 800ce52:	1b9b      	subs	r3, r3, r6
 800ce54:	60a3      	str	r3, [r4, #8]
 800ce56:	6823      	ldr	r3, [r4, #0]
 800ce58:	199b      	adds	r3, r3, r6
 800ce5a:	6023      	str	r3, [r4, #0]
 800ce5c:	b005      	add	sp, #20
 800ce5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce60:	002a      	movs	r2, r5
 800ce62:	9802      	ldr	r0, [sp, #8]
 800ce64:	f000 fa4d 	bl	800d302 <_realloc_r>
 800ce68:	1e06      	subs	r6, r0, #0
 800ce6a:	d1e0      	bne.n	800ce2e <__ssputs_r+0x62>
 800ce6c:	6921      	ldr	r1, [r4, #16]
 800ce6e:	9802      	ldr	r0, [sp, #8]
 800ce70:	f7ff fb02 	bl	800c478 <_free_r>
 800ce74:	230c      	movs	r3, #12
 800ce76:	2001      	movs	r0, #1
 800ce78:	9a02      	ldr	r2, [sp, #8]
 800ce7a:	4240      	negs	r0, r0
 800ce7c:	6013      	str	r3, [r2, #0]
 800ce7e:	89a2      	ldrh	r2, [r4, #12]
 800ce80:	3334      	adds	r3, #52	@ 0x34
 800ce82:	4313      	orrs	r3, r2
 800ce84:	81a3      	strh	r3, [r4, #12]
 800ce86:	e7e9      	b.n	800ce5c <__ssputs_r+0x90>
 800ce88:	fffffb7f 	.word	0xfffffb7f

0800ce8c <_svfiprintf_r>:
 800ce8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce8e:	b0a1      	sub	sp, #132	@ 0x84
 800ce90:	9003      	str	r0, [sp, #12]
 800ce92:	001d      	movs	r5, r3
 800ce94:	898b      	ldrh	r3, [r1, #12]
 800ce96:	000f      	movs	r7, r1
 800ce98:	0016      	movs	r6, r2
 800ce9a:	061b      	lsls	r3, r3, #24
 800ce9c:	d511      	bpl.n	800cec2 <_svfiprintf_r+0x36>
 800ce9e:	690b      	ldr	r3, [r1, #16]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10e      	bne.n	800cec2 <_svfiprintf_r+0x36>
 800cea4:	2140      	movs	r1, #64	@ 0x40
 800cea6:	f7ff fb5d 	bl	800c564 <_malloc_r>
 800ceaa:	6038      	str	r0, [r7, #0]
 800ceac:	6138      	str	r0, [r7, #16]
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	d105      	bne.n	800cebe <_svfiprintf_r+0x32>
 800ceb2:	230c      	movs	r3, #12
 800ceb4:	9a03      	ldr	r2, [sp, #12]
 800ceb6:	6013      	str	r3, [r2, #0]
 800ceb8:	2001      	movs	r0, #1
 800ceba:	4240      	negs	r0, r0
 800cebc:	e0cf      	b.n	800d05e <_svfiprintf_r+0x1d2>
 800cebe:	2340      	movs	r3, #64	@ 0x40
 800cec0:	617b      	str	r3, [r7, #20]
 800cec2:	2300      	movs	r3, #0
 800cec4:	ac08      	add	r4, sp, #32
 800cec6:	6163      	str	r3, [r4, #20]
 800cec8:	3320      	adds	r3, #32
 800ceca:	7663      	strb	r3, [r4, #25]
 800cecc:	3310      	adds	r3, #16
 800cece:	76a3      	strb	r3, [r4, #26]
 800ced0:	9507      	str	r5, [sp, #28]
 800ced2:	0035      	movs	r5, r6
 800ced4:	782b      	ldrb	r3, [r5, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d001      	beq.n	800cede <_svfiprintf_r+0x52>
 800ceda:	2b25      	cmp	r3, #37	@ 0x25
 800cedc:	d148      	bne.n	800cf70 <_svfiprintf_r+0xe4>
 800cede:	1bab      	subs	r3, r5, r6
 800cee0:	9305      	str	r3, [sp, #20]
 800cee2:	42b5      	cmp	r5, r6
 800cee4:	d00b      	beq.n	800cefe <_svfiprintf_r+0x72>
 800cee6:	0032      	movs	r2, r6
 800cee8:	0039      	movs	r1, r7
 800ceea:	9803      	ldr	r0, [sp, #12]
 800ceec:	f7ff ff6e 	bl	800cdcc <__ssputs_r>
 800cef0:	3001      	adds	r0, #1
 800cef2:	d100      	bne.n	800cef6 <_svfiprintf_r+0x6a>
 800cef4:	e0ae      	b.n	800d054 <_svfiprintf_r+0x1c8>
 800cef6:	6963      	ldr	r3, [r4, #20]
 800cef8:	9a05      	ldr	r2, [sp, #20]
 800cefa:	189b      	adds	r3, r3, r2
 800cefc:	6163      	str	r3, [r4, #20]
 800cefe:	782b      	ldrb	r3, [r5, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d100      	bne.n	800cf06 <_svfiprintf_r+0x7a>
 800cf04:	e0a6      	b.n	800d054 <_svfiprintf_r+0x1c8>
 800cf06:	2201      	movs	r2, #1
 800cf08:	2300      	movs	r3, #0
 800cf0a:	4252      	negs	r2, r2
 800cf0c:	6062      	str	r2, [r4, #4]
 800cf0e:	a904      	add	r1, sp, #16
 800cf10:	3254      	adds	r2, #84	@ 0x54
 800cf12:	1852      	adds	r2, r2, r1
 800cf14:	1c6e      	adds	r6, r5, #1
 800cf16:	6023      	str	r3, [r4, #0]
 800cf18:	60e3      	str	r3, [r4, #12]
 800cf1a:	60a3      	str	r3, [r4, #8]
 800cf1c:	7013      	strb	r3, [r2, #0]
 800cf1e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800cf20:	4b54      	ldr	r3, [pc, #336]	@ (800d074 <_svfiprintf_r+0x1e8>)
 800cf22:	2205      	movs	r2, #5
 800cf24:	0018      	movs	r0, r3
 800cf26:	7831      	ldrb	r1, [r6, #0]
 800cf28:	9305      	str	r3, [sp, #20]
 800cf2a:	f7fe fc18 	bl	800b75e <memchr>
 800cf2e:	1c75      	adds	r5, r6, #1
 800cf30:	2800      	cmp	r0, #0
 800cf32:	d11f      	bne.n	800cf74 <_svfiprintf_r+0xe8>
 800cf34:	6822      	ldr	r2, [r4, #0]
 800cf36:	06d3      	lsls	r3, r2, #27
 800cf38:	d504      	bpl.n	800cf44 <_svfiprintf_r+0xb8>
 800cf3a:	2353      	movs	r3, #83	@ 0x53
 800cf3c:	a904      	add	r1, sp, #16
 800cf3e:	185b      	adds	r3, r3, r1
 800cf40:	2120      	movs	r1, #32
 800cf42:	7019      	strb	r1, [r3, #0]
 800cf44:	0713      	lsls	r3, r2, #28
 800cf46:	d504      	bpl.n	800cf52 <_svfiprintf_r+0xc6>
 800cf48:	2353      	movs	r3, #83	@ 0x53
 800cf4a:	a904      	add	r1, sp, #16
 800cf4c:	185b      	adds	r3, r3, r1
 800cf4e:	212b      	movs	r1, #43	@ 0x2b
 800cf50:	7019      	strb	r1, [r3, #0]
 800cf52:	7833      	ldrb	r3, [r6, #0]
 800cf54:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf56:	d016      	beq.n	800cf86 <_svfiprintf_r+0xfa>
 800cf58:	0035      	movs	r5, r6
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	200a      	movs	r0, #10
 800cf5e:	68e3      	ldr	r3, [r4, #12]
 800cf60:	782a      	ldrb	r2, [r5, #0]
 800cf62:	1c6e      	adds	r6, r5, #1
 800cf64:	3a30      	subs	r2, #48	@ 0x30
 800cf66:	2a09      	cmp	r2, #9
 800cf68:	d950      	bls.n	800d00c <_svfiprintf_r+0x180>
 800cf6a:	2900      	cmp	r1, #0
 800cf6c:	d111      	bne.n	800cf92 <_svfiprintf_r+0x106>
 800cf6e:	e017      	b.n	800cfa0 <_svfiprintf_r+0x114>
 800cf70:	3501      	adds	r5, #1
 800cf72:	e7af      	b.n	800ced4 <_svfiprintf_r+0x48>
 800cf74:	9b05      	ldr	r3, [sp, #20]
 800cf76:	6822      	ldr	r2, [r4, #0]
 800cf78:	1ac0      	subs	r0, r0, r3
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	4083      	lsls	r3, r0
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	002e      	movs	r6, r5
 800cf82:	6023      	str	r3, [r4, #0]
 800cf84:	e7cc      	b.n	800cf20 <_svfiprintf_r+0x94>
 800cf86:	9b07      	ldr	r3, [sp, #28]
 800cf88:	1d19      	adds	r1, r3, #4
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	9107      	str	r1, [sp, #28]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	db01      	blt.n	800cf96 <_svfiprintf_r+0x10a>
 800cf92:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf94:	e004      	b.n	800cfa0 <_svfiprintf_r+0x114>
 800cf96:	425b      	negs	r3, r3
 800cf98:	60e3      	str	r3, [r4, #12]
 800cf9a:	2302      	movs	r3, #2
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	6023      	str	r3, [r4, #0]
 800cfa0:	782b      	ldrb	r3, [r5, #0]
 800cfa2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfa4:	d10c      	bne.n	800cfc0 <_svfiprintf_r+0x134>
 800cfa6:	786b      	ldrb	r3, [r5, #1]
 800cfa8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfaa:	d134      	bne.n	800d016 <_svfiprintf_r+0x18a>
 800cfac:	9b07      	ldr	r3, [sp, #28]
 800cfae:	3502      	adds	r5, #2
 800cfb0:	1d1a      	adds	r2, r3, #4
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	9207      	str	r2, [sp, #28]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	da01      	bge.n	800cfbe <_svfiprintf_r+0x132>
 800cfba:	2301      	movs	r3, #1
 800cfbc:	425b      	negs	r3, r3
 800cfbe:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfc0:	4e2d      	ldr	r6, [pc, #180]	@ (800d078 <_svfiprintf_r+0x1ec>)
 800cfc2:	2203      	movs	r2, #3
 800cfc4:	0030      	movs	r0, r6
 800cfc6:	7829      	ldrb	r1, [r5, #0]
 800cfc8:	f7fe fbc9 	bl	800b75e <memchr>
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	d006      	beq.n	800cfde <_svfiprintf_r+0x152>
 800cfd0:	2340      	movs	r3, #64	@ 0x40
 800cfd2:	1b80      	subs	r0, r0, r6
 800cfd4:	4083      	lsls	r3, r0
 800cfd6:	6822      	ldr	r2, [r4, #0]
 800cfd8:	3501      	adds	r5, #1
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	7829      	ldrb	r1, [r5, #0]
 800cfe0:	2206      	movs	r2, #6
 800cfe2:	4826      	ldr	r0, [pc, #152]	@ (800d07c <_svfiprintf_r+0x1f0>)
 800cfe4:	1c6e      	adds	r6, r5, #1
 800cfe6:	7621      	strb	r1, [r4, #24]
 800cfe8:	f7fe fbb9 	bl	800b75e <memchr>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	d038      	beq.n	800d062 <_svfiprintf_r+0x1d6>
 800cff0:	4b23      	ldr	r3, [pc, #140]	@ (800d080 <_svfiprintf_r+0x1f4>)
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d122      	bne.n	800d03c <_svfiprintf_r+0x1b0>
 800cff6:	2207      	movs	r2, #7
 800cff8:	9b07      	ldr	r3, [sp, #28]
 800cffa:	3307      	adds	r3, #7
 800cffc:	4393      	bics	r3, r2
 800cffe:	3308      	adds	r3, #8
 800d000:	9307      	str	r3, [sp, #28]
 800d002:	6963      	ldr	r3, [r4, #20]
 800d004:	9a04      	ldr	r2, [sp, #16]
 800d006:	189b      	adds	r3, r3, r2
 800d008:	6163      	str	r3, [r4, #20]
 800d00a:	e762      	b.n	800ced2 <_svfiprintf_r+0x46>
 800d00c:	4343      	muls	r3, r0
 800d00e:	0035      	movs	r5, r6
 800d010:	2101      	movs	r1, #1
 800d012:	189b      	adds	r3, r3, r2
 800d014:	e7a4      	b.n	800cf60 <_svfiprintf_r+0xd4>
 800d016:	2300      	movs	r3, #0
 800d018:	200a      	movs	r0, #10
 800d01a:	0019      	movs	r1, r3
 800d01c:	3501      	adds	r5, #1
 800d01e:	6063      	str	r3, [r4, #4]
 800d020:	782a      	ldrb	r2, [r5, #0]
 800d022:	1c6e      	adds	r6, r5, #1
 800d024:	3a30      	subs	r2, #48	@ 0x30
 800d026:	2a09      	cmp	r2, #9
 800d028:	d903      	bls.n	800d032 <_svfiprintf_r+0x1a6>
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d0c8      	beq.n	800cfc0 <_svfiprintf_r+0x134>
 800d02e:	9109      	str	r1, [sp, #36]	@ 0x24
 800d030:	e7c6      	b.n	800cfc0 <_svfiprintf_r+0x134>
 800d032:	4341      	muls	r1, r0
 800d034:	0035      	movs	r5, r6
 800d036:	2301      	movs	r3, #1
 800d038:	1889      	adds	r1, r1, r2
 800d03a:	e7f1      	b.n	800d020 <_svfiprintf_r+0x194>
 800d03c:	aa07      	add	r2, sp, #28
 800d03e:	9200      	str	r2, [sp, #0]
 800d040:	0021      	movs	r1, r4
 800d042:	003a      	movs	r2, r7
 800d044:	4b0f      	ldr	r3, [pc, #60]	@ (800d084 <_svfiprintf_r+0x1f8>)
 800d046:	9803      	ldr	r0, [sp, #12]
 800d048:	f7fd fe00 	bl	800ac4c <_printf_float>
 800d04c:	9004      	str	r0, [sp, #16]
 800d04e:	9b04      	ldr	r3, [sp, #16]
 800d050:	3301      	adds	r3, #1
 800d052:	d1d6      	bne.n	800d002 <_svfiprintf_r+0x176>
 800d054:	89bb      	ldrh	r3, [r7, #12]
 800d056:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d058:	065b      	lsls	r3, r3, #25
 800d05a:	d500      	bpl.n	800d05e <_svfiprintf_r+0x1d2>
 800d05c:	e72c      	b.n	800ceb8 <_svfiprintf_r+0x2c>
 800d05e:	b021      	add	sp, #132	@ 0x84
 800d060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d062:	aa07      	add	r2, sp, #28
 800d064:	9200      	str	r2, [sp, #0]
 800d066:	0021      	movs	r1, r4
 800d068:	003a      	movs	r2, r7
 800d06a:	4b06      	ldr	r3, [pc, #24]	@ (800d084 <_svfiprintf_r+0x1f8>)
 800d06c:	9803      	ldr	r0, [sp, #12]
 800d06e:	f7fe f89b 	bl	800b1a8 <_printf_i>
 800d072:	e7eb      	b.n	800d04c <_svfiprintf_r+0x1c0>
 800d074:	0800de88 	.word	0x0800de88
 800d078:	0800de8e 	.word	0x0800de8e
 800d07c:	0800de92 	.word	0x0800de92
 800d080:	0800ac4d 	.word	0x0800ac4d
 800d084:	0800cdcd 	.word	0x0800cdcd

0800d088 <__sflush_r>:
 800d088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d08a:	220c      	movs	r2, #12
 800d08c:	5e8b      	ldrsh	r3, [r1, r2]
 800d08e:	0005      	movs	r5, r0
 800d090:	000c      	movs	r4, r1
 800d092:	071a      	lsls	r2, r3, #28
 800d094:	d456      	bmi.n	800d144 <__sflush_r+0xbc>
 800d096:	684a      	ldr	r2, [r1, #4]
 800d098:	2a00      	cmp	r2, #0
 800d09a:	dc02      	bgt.n	800d0a2 <__sflush_r+0x1a>
 800d09c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800d09e:	2a00      	cmp	r2, #0
 800d0a0:	dd4e      	ble.n	800d140 <__sflush_r+0xb8>
 800d0a2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800d0a4:	2f00      	cmp	r7, #0
 800d0a6:	d04b      	beq.n	800d140 <__sflush_r+0xb8>
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	2080      	movs	r0, #128	@ 0x80
 800d0ac:	682e      	ldr	r6, [r5, #0]
 800d0ae:	602a      	str	r2, [r5, #0]
 800d0b0:	001a      	movs	r2, r3
 800d0b2:	0140      	lsls	r0, r0, #5
 800d0b4:	6a21      	ldr	r1, [r4, #32]
 800d0b6:	4002      	ands	r2, r0
 800d0b8:	4203      	tst	r3, r0
 800d0ba:	d033      	beq.n	800d124 <__sflush_r+0x9c>
 800d0bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d0be:	89a3      	ldrh	r3, [r4, #12]
 800d0c0:	075b      	lsls	r3, r3, #29
 800d0c2:	d506      	bpl.n	800d0d2 <__sflush_r+0x4a>
 800d0c4:	6863      	ldr	r3, [r4, #4]
 800d0c6:	1ad2      	subs	r2, r2, r3
 800d0c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d001      	beq.n	800d0d2 <__sflush_r+0x4a>
 800d0ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d0d0:	1ad2      	subs	r2, r2, r3
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	0028      	movs	r0, r5
 800d0d6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800d0d8:	6a21      	ldr	r1, [r4, #32]
 800d0da:	47b8      	blx	r7
 800d0dc:	89a2      	ldrh	r2, [r4, #12]
 800d0de:	1c43      	adds	r3, r0, #1
 800d0e0:	d106      	bne.n	800d0f0 <__sflush_r+0x68>
 800d0e2:	6829      	ldr	r1, [r5, #0]
 800d0e4:	291d      	cmp	r1, #29
 800d0e6:	d846      	bhi.n	800d176 <__sflush_r+0xee>
 800d0e8:	4b29      	ldr	r3, [pc, #164]	@ (800d190 <__sflush_r+0x108>)
 800d0ea:	410b      	asrs	r3, r1
 800d0ec:	07db      	lsls	r3, r3, #31
 800d0ee:	d442      	bmi.n	800d176 <__sflush_r+0xee>
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	6063      	str	r3, [r4, #4]
 800d0f4:	6923      	ldr	r3, [r4, #16]
 800d0f6:	6023      	str	r3, [r4, #0]
 800d0f8:	04d2      	lsls	r2, r2, #19
 800d0fa:	d505      	bpl.n	800d108 <__sflush_r+0x80>
 800d0fc:	1c43      	adds	r3, r0, #1
 800d0fe:	d102      	bne.n	800d106 <__sflush_r+0x7e>
 800d100:	682b      	ldr	r3, [r5, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d100      	bne.n	800d108 <__sflush_r+0x80>
 800d106:	6560      	str	r0, [r4, #84]	@ 0x54
 800d108:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d10a:	602e      	str	r6, [r5, #0]
 800d10c:	2900      	cmp	r1, #0
 800d10e:	d017      	beq.n	800d140 <__sflush_r+0xb8>
 800d110:	0023      	movs	r3, r4
 800d112:	3344      	adds	r3, #68	@ 0x44
 800d114:	4299      	cmp	r1, r3
 800d116:	d002      	beq.n	800d11e <__sflush_r+0x96>
 800d118:	0028      	movs	r0, r5
 800d11a:	f7ff f9ad 	bl	800c478 <_free_r>
 800d11e:	2300      	movs	r3, #0
 800d120:	6363      	str	r3, [r4, #52]	@ 0x34
 800d122:	e00d      	b.n	800d140 <__sflush_r+0xb8>
 800d124:	2301      	movs	r3, #1
 800d126:	0028      	movs	r0, r5
 800d128:	47b8      	blx	r7
 800d12a:	0002      	movs	r2, r0
 800d12c:	1c43      	adds	r3, r0, #1
 800d12e:	d1c6      	bne.n	800d0be <__sflush_r+0x36>
 800d130:	682b      	ldr	r3, [r5, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d0c3      	beq.n	800d0be <__sflush_r+0x36>
 800d136:	2b1d      	cmp	r3, #29
 800d138:	d001      	beq.n	800d13e <__sflush_r+0xb6>
 800d13a:	2b16      	cmp	r3, #22
 800d13c:	d11a      	bne.n	800d174 <__sflush_r+0xec>
 800d13e:	602e      	str	r6, [r5, #0]
 800d140:	2000      	movs	r0, #0
 800d142:	e01e      	b.n	800d182 <__sflush_r+0xfa>
 800d144:	690e      	ldr	r6, [r1, #16]
 800d146:	2e00      	cmp	r6, #0
 800d148:	d0fa      	beq.n	800d140 <__sflush_r+0xb8>
 800d14a:	680f      	ldr	r7, [r1, #0]
 800d14c:	600e      	str	r6, [r1, #0]
 800d14e:	1bba      	subs	r2, r7, r6
 800d150:	9201      	str	r2, [sp, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	079b      	lsls	r3, r3, #30
 800d156:	d100      	bne.n	800d15a <__sflush_r+0xd2>
 800d158:	694a      	ldr	r2, [r1, #20]
 800d15a:	60a2      	str	r2, [r4, #8]
 800d15c:	9b01      	ldr	r3, [sp, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	ddee      	ble.n	800d140 <__sflush_r+0xb8>
 800d162:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d164:	0032      	movs	r2, r6
 800d166:	001f      	movs	r7, r3
 800d168:	0028      	movs	r0, r5
 800d16a:	9b01      	ldr	r3, [sp, #4]
 800d16c:	6a21      	ldr	r1, [r4, #32]
 800d16e:	47b8      	blx	r7
 800d170:	2800      	cmp	r0, #0
 800d172:	dc07      	bgt.n	800d184 <__sflush_r+0xfc>
 800d174:	89a2      	ldrh	r2, [r4, #12]
 800d176:	2340      	movs	r3, #64	@ 0x40
 800d178:	2001      	movs	r0, #1
 800d17a:	4313      	orrs	r3, r2
 800d17c:	b21b      	sxth	r3, r3
 800d17e:	81a3      	strh	r3, [r4, #12]
 800d180:	4240      	negs	r0, r0
 800d182:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d184:	9b01      	ldr	r3, [sp, #4]
 800d186:	1836      	adds	r6, r6, r0
 800d188:	1a1b      	subs	r3, r3, r0
 800d18a:	9301      	str	r3, [sp, #4]
 800d18c:	e7e6      	b.n	800d15c <__sflush_r+0xd4>
 800d18e:	46c0      	nop			@ (mov r8, r8)
 800d190:	dfbffffe 	.word	0xdfbffffe

0800d194 <_fflush_r>:
 800d194:	690b      	ldr	r3, [r1, #16]
 800d196:	b570      	push	{r4, r5, r6, lr}
 800d198:	0005      	movs	r5, r0
 800d19a:	000c      	movs	r4, r1
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d102      	bne.n	800d1a6 <_fflush_r+0x12>
 800d1a0:	2500      	movs	r5, #0
 800d1a2:	0028      	movs	r0, r5
 800d1a4:	bd70      	pop	{r4, r5, r6, pc}
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	d004      	beq.n	800d1b4 <_fflush_r+0x20>
 800d1aa:	6a03      	ldr	r3, [r0, #32]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d101      	bne.n	800d1b4 <_fflush_r+0x20>
 800d1b0:	f7fe f998 	bl	800b4e4 <__sinit>
 800d1b4:	220c      	movs	r2, #12
 800d1b6:	5ea3      	ldrsh	r3, [r4, r2]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d0f1      	beq.n	800d1a0 <_fflush_r+0xc>
 800d1bc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d1be:	07d2      	lsls	r2, r2, #31
 800d1c0:	d404      	bmi.n	800d1cc <_fflush_r+0x38>
 800d1c2:	059b      	lsls	r3, r3, #22
 800d1c4:	d402      	bmi.n	800d1cc <_fflush_r+0x38>
 800d1c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d1c8:	f7fe fac7 	bl	800b75a <__retarget_lock_acquire_recursive>
 800d1cc:	0028      	movs	r0, r5
 800d1ce:	0021      	movs	r1, r4
 800d1d0:	f7ff ff5a 	bl	800d088 <__sflush_r>
 800d1d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d1d6:	0005      	movs	r5, r0
 800d1d8:	07db      	lsls	r3, r3, #31
 800d1da:	d4e2      	bmi.n	800d1a2 <_fflush_r+0xe>
 800d1dc:	89a3      	ldrh	r3, [r4, #12]
 800d1de:	059b      	lsls	r3, r3, #22
 800d1e0:	d4df      	bmi.n	800d1a2 <_fflush_r+0xe>
 800d1e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d1e4:	f7fe faba 	bl	800b75c <__retarget_lock_release_recursive>
 800d1e8:	e7db      	b.n	800d1a2 <_fflush_r+0xe>

0800d1ea <memmove>:
 800d1ea:	b510      	push	{r4, lr}
 800d1ec:	4288      	cmp	r0, r1
 800d1ee:	d806      	bhi.n	800d1fe <memmove+0x14>
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d008      	beq.n	800d208 <memmove+0x1e>
 800d1f6:	5ccc      	ldrb	r4, [r1, r3]
 800d1f8:	54c4      	strb	r4, [r0, r3]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	e7f9      	b.n	800d1f2 <memmove+0x8>
 800d1fe:	188b      	adds	r3, r1, r2
 800d200:	4298      	cmp	r0, r3
 800d202:	d2f5      	bcs.n	800d1f0 <memmove+0x6>
 800d204:	3a01      	subs	r2, #1
 800d206:	d200      	bcs.n	800d20a <memmove+0x20>
 800d208:	bd10      	pop	{r4, pc}
 800d20a:	5c8b      	ldrb	r3, [r1, r2]
 800d20c:	5483      	strb	r3, [r0, r2]
 800d20e:	e7f9      	b.n	800d204 <memmove+0x1a>

0800d210 <_sbrk_r>:
 800d210:	2300      	movs	r3, #0
 800d212:	b570      	push	{r4, r5, r6, lr}
 800d214:	4d06      	ldr	r5, [pc, #24]	@ (800d230 <_sbrk_r+0x20>)
 800d216:	0004      	movs	r4, r0
 800d218:	0008      	movs	r0, r1
 800d21a:	602b      	str	r3, [r5, #0]
 800d21c:	f7f8 f936 	bl	800548c <_sbrk>
 800d220:	1c43      	adds	r3, r0, #1
 800d222:	d103      	bne.n	800d22c <_sbrk_r+0x1c>
 800d224:	682b      	ldr	r3, [r5, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d000      	beq.n	800d22c <_sbrk_r+0x1c>
 800d22a:	6023      	str	r3, [r4, #0]
 800d22c:	bd70      	pop	{r4, r5, r6, pc}
 800d22e:	46c0      	nop			@ (mov r8, r8)
 800d230:	20000650 	.word	0x20000650

0800d234 <memcpy>:
 800d234:	2300      	movs	r3, #0
 800d236:	b510      	push	{r4, lr}
 800d238:	429a      	cmp	r2, r3
 800d23a:	d100      	bne.n	800d23e <memcpy+0xa>
 800d23c:	bd10      	pop	{r4, pc}
 800d23e:	5ccc      	ldrb	r4, [r1, r3]
 800d240:	54c4      	strb	r4, [r0, r3]
 800d242:	3301      	adds	r3, #1
 800d244:	e7f8      	b.n	800d238 <memcpy+0x4>
	...

0800d248 <__assert_func>:
 800d248:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d24a:	0014      	movs	r4, r2
 800d24c:	001a      	movs	r2, r3
 800d24e:	4b09      	ldr	r3, [pc, #36]	@ (800d274 <__assert_func+0x2c>)
 800d250:	0005      	movs	r5, r0
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	000e      	movs	r6, r1
 800d256:	68d8      	ldr	r0, [r3, #12]
 800d258:	4b07      	ldr	r3, [pc, #28]	@ (800d278 <__assert_func+0x30>)
 800d25a:	2c00      	cmp	r4, #0
 800d25c:	d101      	bne.n	800d262 <__assert_func+0x1a>
 800d25e:	4b07      	ldr	r3, [pc, #28]	@ (800d27c <__assert_func+0x34>)
 800d260:	001c      	movs	r4, r3
 800d262:	4907      	ldr	r1, [pc, #28]	@ (800d280 <__assert_func+0x38>)
 800d264:	9301      	str	r3, [sp, #4]
 800d266:	9402      	str	r4, [sp, #8]
 800d268:	002b      	movs	r3, r5
 800d26a:	9600      	str	r6, [sp, #0]
 800d26c:	f000 f886 	bl	800d37c <fiprintf>
 800d270:	f000 f894 	bl	800d39c <abort>
 800d274:	20000028 	.word	0x20000028
 800d278:	0800dea3 	.word	0x0800dea3
 800d27c:	0800dede 	.word	0x0800dede
 800d280:	0800deb0 	.word	0x0800deb0

0800d284 <_calloc_r>:
 800d284:	b570      	push	{r4, r5, r6, lr}
 800d286:	0c0b      	lsrs	r3, r1, #16
 800d288:	0c15      	lsrs	r5, r2, #16
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d11e      	bne.n	800d2cc <_calloc_r+0x48>
 800d28e:	2d00      	cmp	r5, #0
 800d290:	d10c      	bne.n	800d2ac <_calloc_r+0x28>
 800d292:	b289      	uxth	r1, r1
 800d294:	b294      	uxth	r4, r2
 800d296:	434c      	muls	r4, r1
 800d298:	0021      	movs	r1, r4
 800d29a:	f7ff f963 	bl	800c564 <_malloc_r>
 800d29e:	1e05      	subs	r5, r0, #0
 800d2a0:	d01a      	beq.n	800d2d8 <_calloc_r+0x54>
 800d2a2:	0022      	movs	r2, r4
 800d2a4:	2100      	movs	r1, #0
 800d2a6:	f7fe f9bd 	bl	800b624 <memset>
 800d2aa:	e016      	b.n	800d2da <_calloc_r+0x56>
 800d2ac:	1c2b      	adds	r3, r5, #0
 800d2ae:	1c0c      	adds	r4, r1, #0
 800d2b0:	b289      	uxth	r1, r1
 800d2b2:	b292      	uxth	r2, r2
 800d2b4:	434a      	muls	r2, r1
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	b2a1      	uxth	r1, r4
 800d2ba:	4359      	muls	r1, r3
 800d2bc:	0c14      	lsrs	r4, r2, #16
 800d2be:	190c      	adds	r4, r1, r4
 800d2c0:	0c23      	lsrs	r3, r4, #16
 800d2c2:	d107      	bne.n	800d2d4 <_calloc_r+0x50>
 800d2c4:	0424      	lsls	r4, r4, #16
 800d2c6:	b292      	uxth	r2, r2
 800d2c8:	4314      	orrs	r4, r2
 800d2ca:	e7e5      	b.n	800d298 <_calloc_r+0x14>
 800d2cc:	2d00      	cmp	r5, #0
 800d2ce:	d101      	bne.n	800d2d4 <_calloc_r+0x50>
 800d2d0:	1c14      	adds	r4, r2, #0
 800d2d2:	e7ed      	b.n	800d2b0 <_calloc_r+0x2c>
 800d2d4:	230c      	movs	r3, #12
 800d2d6:	6003      	str	r3, [r0, #0]
 800d2d8:	2500      	movs	r5, #0
 800d2da:	0028      	movs	r0, r5
 800d2dc:	bd70      	pop	{r4, r5, r6, pc}

0800d2de <__ascii_mbtowc>:
 800d2de:	b082      	sub	sp, #8
 800d2e0:	2900      	cmp	r1, #0
 800d2e2:	d100      	bne.n	800d2e6 <__ascii_mbtowc+0x8>
 800d2e4:	a901      	add	r1, sp, #4
 800d2e6:	1e10      	subs	r0, r2, #0
 800d2e8:	d006      	beq.n	800d2f8 <__ascii_mbtowc+0x1a>
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d006      	beq.n	800d2fc <__ascii_mbtowc+0x1e>
 800d2ee:	7813      	ldrb	r3, [r2, #0]
 800d2f0:	600b      	str	r3, [r1, #0]
 800d2f2:	7810      	ldrb	r0, [r2, #0]
 800d2f4:	1e43      	subs	r3, r0, #1
 800d2f6:	4198      	sbcs	r0, r3
 800d2f8:	b002      	add	sp, #8
 800d2fa:	4770      	bx	lr
 800d2fc:	2002      	movs	r0, #2
 800d2fe:	4240      	negs	r0, r0
 800d300:	e7fa      	b.n	800d2f8 <__ascii_mbtowc+0x1a>

0800d302 <_realloc_r>:
 800d302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d304:	0006      	movs	r6, r0
 800d306:	000c      	movs	r4, r1
 800d308:	0015      	movs	r5, r2
 800d30a:	2900      	cmp	r1, #0
 800d30c:	d105      	bne.n	800d31a <_realloc_r+0x18>
 800d30e:	0011      	movs	r1, r2
 800d310:	f7ff f928 	bl	800c564 <_malloc_r>
 800d314:	0004      	movs	r4, r0
 800d316:	0020      	movs	r0, r4
 800d318:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d31a:	2a00      	cmp	r2, #0
 800d31c:	d103      	bne.n	800d326 <_realloc_r+0x24>
 800d31e:	f7ff f8ab 	bl	800c478 <_free_r>
 800d322:	2400      	movs	r4, #0
 800d324:	e7f7      	b.n	800d316 <_realloc_r+0x14>
 800d326:	f000 f840 	bl	800d3aa <_malloc_usable_size_r>
 800d32a:	0007      	movs	r7, r0
 800d32c:	4285      	cmp	r5, r0
 800d32e:	d802      	bhi.n	800d336 <_realloc_r+0x34>
 800d330:	0843      	lsrs	r3, r0, #1
 800d332:	42ab      	cmp	r3, r5
 800d334:	d3ef      	bcc.n	800d316 <_realloc_r+0x14>
 800d336:	0029      	movs	r1, r5
 800d338:	0030      	movs	r0, r6
 800d33a:	f7ff f913 	bl	800c564 <_malloc_r>
 800d33e:	9001      	str	r0, [sp, #4]
 800d340:	2800      	cmp	r0, #0
 800d342:	d0ee      	beq.n	800d322 <_realloc_r+0x20>
 800d344:	002a      	movs	r2, r5
 800d346:	42bd      	cmp	r5, r7
 800d348:	d900      	bls.n	800d34c <_realloc_r+0x4a>
 800d34a:	003a      	movs	r2, r7
 800d34c:	0021      	movs	r1, r4
 800d34e:	9801      	ldr	r0, [sp, #4]
 800d350:	f7ff ff70 	bl	800d234 <memcpy>
 800d354:	0021      	movs	r1, r4
 800d356:	0030      	movs	r0, r6
 800d358:	f7ff f88e 	bl	800c478 <_free_r>
 800d35c:	9c01      	ldr	r4, [sp, #4]
 800d35e:	e7da      	b.n	800d316 <_realloc_r+0x14>

0800d360 <__ascii_wctomb>:
 800d360:	0003      	movs	r3, r0
 800d362:	1e08      	subs	r0, r1, #0
 800d364:	d005      	beq.n	800d372 <__ascii_wctomb+0x12>
 800d366:	2aff      	cmp	r2, #255	@ 0xff
 800d368:	d904      	bls.n	800d374 <__ascii_wctomb+0x14>
 800d36a:	228a      	movs	r2, #138	@ 0x8a
 800d36c:	2001      	movs	r0, #1
 800d36e:	601a      	str	r2, [r3, #0]
 800d370:	4240      	negs	r0, r0
 800d372:	4770      	bx	lr
 800d374:	2001      	movs	r0, #1
 800d376:	700a      	strb	r2, [r1, #0]
 800d378:	e7fb      	b.n	800d372 <__ascii_wctomb+0x12>
	...

0800d37c <fiprintf>:
 800d37c:	b40e      	push	{r1, r2, r3}
 800d37e:	b517      	push	{r0, r1, r2, r4, lr}
 800d380:	4c05      	ldr	r4, [pc, #20]	@ (800d398 <fiprintf+0x1c>)
 800d382:	ab05      	add	r3, sp, #20
 800d384:	cb04      	ldmia	r3!, {r2}
 800d386:	0001      	movs	r1, r0
 800d388:	6820      	ldr	r0, [r4, #0]
 800d38a:	9301      	str	r3, [sp, #4]
 800d38c:	f000 f83c 	bl	800d408 <_vfiprintf_r>
 800d390:	bc1e      	pop	{r1, r2, r3, r4}
 800d392:	bc08      	pop	{r3}
 800d394:	b003      	add	sp, #12
 800d396:	4718      	bx	r3
 800d398:	20000028 	.word	0x20000028

0800d39c <abort>:
 800d39c:	2006      	movs	r0, #6
 800d39e:	b510      	push	{r4, lr}
 800d3a0:	f000 fa18 	bl	800d7d4 <raise>
 800d3a4:	2001      	movs	r0, #1
 800d3a6:	f7f7 ffff 	bl	80053a8 <_exit>

0800d3aa <_malloc_usable_size_r>:
 800d3aa:	1f0b      	subs	r3, r1, #4
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	1f18      	subs	r0, r3, #4
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	da01      	bge.n	800d3b8 <_malloc_usable_size_r+0xe>
 800d3b4:	580b      	ldr	r3, [r1, r0]
 800d3b6:	18c0      	adds	r0, r0, r3
 800d3b8:	4770      	bx	lr

0800d3ba <__sfputc_r>:
 800d3ba:	6893      	ldr	r3, [r2, #8]
 800d3bc:	b510      	push	{r4, lr}
 800d3be:	3b01      	subs	r3, #1
 800d3c0:	6093      	str	r3, [r2, #8]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	da04      	bge.n	800d3d0 <__sfputc_r+0x16>
 800d3c6:	6994      	ldr	r4, [r2, #24]
 800d3c8:	42a3      	cmp	r3, r4
 800d3ca:	db07      	blt.n	800d3dc <__sfputc_r+0x22>
 800d3cc:	290a      	cmp	r1, #10
 800d3ce:	d005      	beq.n	800d3dc <__sfputc_r+0x22>
 800d3d0:	6813      	ldr	r3, [r2, #0]
 800d3d2:	1c58      	adds	r0, r3, #1
 800d3d4:	6010      	str	r0, [r2, #0]
 800d3d6:	7019      	strb	r1, [r3, #0]
 800d3d8:	0008      	movs	r0, r1
 800d3da:	bd10      	pop	{r4, pc}
 800d3dc:	f000 f930 	bl	800d640 <__swbuf_r>
 800d3e0:	0001      	movs	r1, r0
 800d3e2:	e7f9      	b.n	800d3d8 <__sfputc_r+0x1e>

0800d3e4 <__sfputs_r>:
 800d3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e6:	0006      	movs	r6, r0
 800d3e8:	000f      	movs	r7, r1
 800d3ea:	0014      	movs	r4, r2
 800d3ec:	18d5      	adds	r5, r2, r3
 800d3ee:	42ac      	cmp	r4, r5
 800d3f0:	d101      	bne.n	800d3f6 <__sfputs_r+0x12>
 800d3f2:	2000      	movs	r0, #0
 800d3f4:	e007      	b.n	800d406 <__sfputs_r+0x22>
 800d3f6:	7821      	ldrb	r1, [r4, #0]
 800d3f8:	003a      	movs	r2, r7
 800d3fa:	0030      	movs	r0, r6
 800d3fc:	f7ff ffdd 	bl	800d3ba <__sfputc_r>
 800d400:	3401      	adds	r4, #1
 800d402:	1c43      	adds	r3, r0, #1
 800d404:	d1f3      	bne.n	800d3ee <__sfputs_r+0xa>
 800d406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d408 <_vfiprintf_r>:
 800d408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d40a:	b0a1      	sub	sp, #132	@ 0x84
 800d40c:	000f      	movs	r7, r1
 800d40e:	0015      	movs	r5, r2
 800d410:	001e      	movs	r6, r3
 800d412:	9003      	str	r0, [sp, #12]
 800d414:	2800      	cmp	r0, #0
 800d416:	d004      	beq.n	800d422 <_vfiprintf_r+0x1a>
 800d418:	6a03      	ldr	r3, [r0, #32]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d101      	bne.n	800d422 <_vfiprintf_r+0x1a>
 800d41e:	f7fe f861 	bl	800b4e4 <__sinit>
 800d422:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d424:	07db      	lsls	r3, r3, #31
 800d426:	d405      	bmi.n	800d434 <_vfiprintf_r+0x2c>
 800d428:	89bb      	ldrh	r3, [r7, #12]
 800d42a:	059b      	lsls	r3, r3, #22
 800d42c:	d402      	bmi.n	800d434 <_vfiprintf_r+0x2c>
 800d42e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d430:	f7fe f993 	bl	800b75a <__retarget_lock_acquire_recursive>
 800d434:	89bb      	ldrh	r3, [r7, #12]
 800d436:	071b      	lsls	r3, r3, #28
 800d438:	d502      	bpl.n	800d440 <_vfiprintf_r+0x38>
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d113      	bne.n	800d468 <_vfiprintf_r+0x60>
 800d440:	0039      	movs	r1, r7
 800d442:	9803      	ldr	r0, [sp, #12]
 800d444:	f000 f93e 	bl	800d6c4 <__swsetup_r>
 800d448:	2800      	cmp	r0, #0
 800d44a:	d00d      	beq.n	800d468 <_vfiprintf_r+0x60>
 800d44c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d44e:	07db      	lsls	r3, r3, #31
 800d450:	d503      	bpl.n	800d45a <_vfiprintf_r+0x52>
 800d452:	2001      	movs	r0, #1
 800d454:	4240      	negs	r0, r0
 800d456:	b021      	add	sp, #132	@ 0x84
 800d458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d45a:	89bb      	ldrh	r3, [r7, #12]
 800d45c:	059b      	lsls	r3, r3, #22
 800d45e:	d4f8      	bmi.n	800d452 <_vfiprintf_r+0x4a>
 800d460:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d462:	f7fe f97b 	bl	800b75c <__retarget_lock_release_recursive>
 800d466:	e7f4      	b.n	800d452 <_vfiprintf_r+0x4a>
 800d468:	2300      	movs	r3, #0
 800d46a:	ac08      	add	r4, sp, #32
 800d46c:	6163      	str	r3, [r4, #20]
 800d46e:	3320      	adds	r3, #32
 800d470:	7663      	strb	r3, [r4, #25]
 800d472:	3310      	adds	r3, #16
 800d474:	76a3      	strb	r3, [r4, #26]
 800d476:	9607      	str	r6, [sp, #28]
 800d478:	002e      	movs	r6, r5
 800d47a:	7833      	ldrb	r3, [r6, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d001      	beq.n	800d484 <_vfiprintf_r+0x7c>
 800d480:	2b25      	cmp	r3, #37	@ 0x25
 800d482:	d148      	bne.n	800d516 <_vfiprintf_r+0x10e>
 800d484:	1b73      	subs	r3, r6, r5
 800d486:	9305      	str	r3, [sp, #20]
 800d488:	42ae      	cmp	r6, r5
 800d48a:	d00b      	beq.n	800d4a4 <_vfiprintf_r+0x9c>
 800d48c:	002a      	movs	r2, r5
 800d48e:	0039      	movs	r1, r7
 800d490:	9803      	ldr	r0, [sp, #12]
 800d492:	f7ff ffa7 	bl	800d3e4 <__sfputs_r>
 800d496:	3001      	adds	r0, #1
 800d498:	d100      	bne.n	800d49c <_vfiprintf_r+0x94>
 800d49a:	e0ae      	b.n	800d5fa <_vfiprintf_r+0x1f2>
 800d49c:	6963      	ldr	r3, [r4, #20]
 800d49e:	9a05      	ldr	r2, [sp, #20]
 800d4a0:	189b      	adds	r3, r3, r2
 800d4a2:	6163      	str	r3, [r4, #20]
 800d4a4:	7833      	ldrb	r3, [r6, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d100      	bne.n	800d4ac <_vfiprintf_r+0xa4>
 800d4aa:	e0a6      	b.n	800d5fa <_vfiprintf_r+0x1f2>
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	4252      	negs	r2, r2
 800d4b2:	6062      	str	r2, [r4, #4]
 800d4b4:	a904      	add	r1, sp, #16
 800d4b6:	3254      	adds	r2, #84	@ 0x54
 800d4b8:	1852      	adds	r2, r2, r1
 800d4ba:	1c75      	adds	r5, r6, #1
 800d4bc:	6023      	str	r3, [r4, #0]
 800d4be:	60e3      	str	r3, [r4, #12]
 800d4c0:	60a3      	str	r3, [r4, #8]
 800d4c2:	7013      	strb	r3, [r2, #0]
 800d4c4:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d4c6:	4b59      	ldr	r3, [pc, #356]	@ (800d62c <_vfiprintf_r+0x224>)
 800d4c8:	2205      	movs	r2, #5
 800d4ca:	0018      	movs	r0, r3
 800d4cc:	7829      	ldrb	r1, [r5, #0]
 800d4ce:	9305      	str	r3, [sp, #20]
 800d4d0:	f7fe f945 	bl	800b75e <memchr>
 800d4d4:	1c6e      	adds	r6, r5, #1
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d11f      	bne.n	800d51a <_vfiprintf_r+0x112>
 800d4da:	6822      	ldr	r2, [r4, #0]
 800d4dc:	06d3      	lsls	r3, r2, #27
 800d4de:	d504      	bpl.n	800d4ea <_vfiprintf_r+0xe2>
 800d4e0:	2353      	movs	r3, #83	@ 0x53
 800d4e2:	a904      	add	r1, sp, #16
 800d4e4:	185b      	adds	r3, r3, r1
 800d4e6:	2120      	movs	r1, #32
 800d4e8:	7019      	strb	r1, [r3, #0]
 800d4ea:	0713      	lsls	r3, r2, #28
 800d4ec:	d504      	bpl.n	800d4f8 <_vfiprintf_r+0xf0>
 800d4ee:	2353      	movs	r3, #83	@ 0x53
 800d4f0:	a904      	add	r1, sp, #16
 800d4f2:	185b      	adds	r3, r3, r1
 800d4f4:	212b      	movs	r1, #43	@ 0x2b
 800d4f6:	7019      	strb	r1, [r3, #0]
 800d4f8:	782b      	ldrb	r3, [r5, #0]
 800d4fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4fc:	d016      	beq.n	800d52c <_vfiprintf_r+0x124>
 800d4fe:	002e      	movs	r6, r5
 800d500:	2100      	movs	r1, #0
 800d502:	200a      	movs	r0, #10
 800d504:	68e3      	ldr	r3, [r4, #12]
 800d506:	7832      	ldrb	r2, [r6, #0]
 800d508:	1c75      	adds	r5, r6, #1
 800d50a:	3a30      	subs	r2, #48	@ 0x30
 800d50c:	2a09      	cmp	r2, #9
 800d50e:	d950      	bls.n	800d5b2 <_vfiprintf_r+0x1aa>
 800d510:	2900      	cmp	r1, #0
 800d512:	d111      	bne.n	800d538 <_vfiprintf_r+0x130>
 800d514:	e017      	b.n	800d546 <_vfiprintf_r+0x13e>
 800d516:	3601      	adds	r6, #1
 800d518:	e7af      	b.n	800d47a <_vfiprintf_r+0x72>
 800d51a:	9b05      	ldr	r3, [sp, #20]
 800d51c:	6822      	ldr	r2, [r4, #0]
 800d51e:	1ac0      	subs	r0, r0, r3
 800d520:	2301      	movs	r3, #1
 800d522:	4083      	lsls	r3, r0
 800d524:	4313      	orrs	r3, r2
 800d526:	0035      	movs	r5, r6
 800d528:	6023      	str	r3, [r4, #0]
 800d52a:	e7cc      	b.n	800d4c6 <_vfiprintf_r+0xbe>
 800d52c:	9b07      	ldr	r3, [sp, #28]
 800d52e:	1d19      	adds	r1, r3, #4
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	9107      	str	r1, [sp, #28]
 800d534:	2b00      	cmp	r3, #0
 800d536:	db01      	blt.n	800d53c <_vfiprintf_r+0x134>
 800d538:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d53a:	e004      	b.n	800d546 <_vfiprintf_r+0x13e>
 800d53c:	425b      	negs	r3, r3
 800d53e:	60e3      	str	r3, [r4, #12]
 800d540:	2302      	movs	r3, #2
 800d542:	4313      	orrs	r3, r2
 800d544:	6023      	str	r3, [r4, #0]
 800d546:	7833      	ldrb	r3, [r6, #0]
 800d548:	2b2e      	cmp	r3, #46	@ 0x2e
 800d54a:	d10c      	bne.n	800d566 <_vfiprintf_r+0x15e>
 800d54c:	7873      	ldrb	r3, [r6, #1]
 800d54e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d550:	d134      	bne.n	800d5bc <_vfiprintf_r+0x1b4>
 800d552:	9b07      	ldr	r3, [sp, #28]
 800d554:	3602      	adds	r6, #2
 800d556:	1d1a      	adds	r2, r3, #4
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	9207      	str	r2, [sp, #28]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	da01      	bge.n	800d564 <_vfiprintf_r+0x15c>
 800d560:	2301      	movs	r3, #1
 800d562:	425b      	negs	r3, r3
 800d564:	9309      	str	r3, [sp, #36]	@ 0x24
 800d566:	4d32      	ldr	r5, [pc, #200]	@ (800d630 <_vfiprintf_r+0x228>)
 800d568:	2203      	movs	r2, #3
 800d56a:	0028      	movs	r0, r5
 800d56c:	7831      	ldrb	r1, [r6, #0]
 800d56e:	f7fe f8f6 	bl	800b75e <memchr>
 800d572:	2800      	cmp	r0, #0
 800d574:	d006      	beq.n	800d584 <_vfiprintf_r+0x17c>
 800d576:	2340      	movs	r3, #64	@ 0x40
 800d578:	1b40      	subs	r0, r0, r5
 800d57a:	4083      	lsls	r3, r0
 800d57c:	6822      	ldr	r2, [r4, #0]
 800d57e:	3601      	adds	r6, #1
 800d580:	4313      	orrs	r3, r2
 800d582:	6023      	str	r3, [r4, #0]
 800d584:	7831      	ldrb	r1, [r6, #0]
 800d586:	2206      	movs	r2, #6
 800d588:	482a      	ldr	r0, [pc, #168]	@ (800d634 <_vfiprintf_r+0x22c>)
 800d58a:	1c75      	adds	r5, r6, #1
 800d58c:	7621      	strb	r1, [r4, #24]
 800d58e:	f7fe f8e6 	bl	800b75e <memchr>
 800d592:	2800      	cmp	r0, #0
 800d594:	d040      	beq.n	800d618 <_vfiprintf_r+0x210>
 800d596:	4b28      	ldr	r3, [pc, #160]	@ (800d638 <_vfiprintf_r+0x230>)
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d122      	bne.n	800d5e2 <_vfiprintf_r+0x1da>
 800d59c:	2207      	movs	r2, #7
 800d59e:	9b07      	ldr	r3, [sp, #28]
 800d5a0:	3307      	adds	r3, #7
 800d5a2:	4393      	bics	r3, r2
 800d5a4:	3308      	adds	r3, #8
 800d5a6:	9307      	str	r3, [sp, #28]
 800d5a8:	6963      	ldr	r3, [r4, #20]
 800d5aa:	9a04      	ldr	r2, [sp, #16]
 800d5ac:	189b      	adds	r3, r3, r2
 800d5ae:	6163      	str	r3, [r4, #20]
 800d5b0:	e762      	b.n	800d478 <_vfiprintf_r+0x70>
 800d5b2:	4343      	muls	r3, r0
 800d5b4:	002e      	movs	r6, r5
 800d5b6:	2101      	movs	r1, #1
 800d5b8:	189b      	adds	r3, r3, r2
 800d5ba:	e7a4      	b.n	800d506 <_vfiprintf_r+0xfe>
 800d5bc:	2300      	movs	r3, #0
 800d5be:	200a      	movs	r0, #10
 800d5c0:	0019      	movs	r1, r3
 800d5c2:	3601      	adds	r6, #1
 800d5c4:	6063      	str	r3, [r4, #4]
 800d5c6:	7832      	ldrb	r2, [r6, #0]
 800d5c8:	1c75      	adds	r5, r6, #1
 800d5ca:	3a30      	subs	r2, #48	@ 0x30
 800d5cc:	2a09      	cmp	r2, #9
 800d5ce:	d903      	bls.n	800d5d8 <_vfiprintf_r+0x1d0>
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d0c8      	beq.n	800d566 <_vfiprintf_r+0x15e>
 800d5d4:	9109      	str	r1, [sp, #36]	@ 0x24
 800d5d6:	e7c6      	b.n	800d566 <_vfiprintf_r+0x15e>
 800d5d8:	4341      	muls	r1, r0
 800d5da:	002e      	movs	r6, r5
 800d5dc:	2301      	movs	r3, #1
 800d5de:	1889      	adds	r1, r1, r2
 800d5e0:	e7f1      	b.n	800d5c6 <_vfiprintf_r+0x1be>
 800d5e2:	aa07      	add	r2, sp, #28
 800d5e4:	9200      	str	r2, [sp, #0]
 800d5e6:	0021      	movs	r1, r4
 800d5e8:	003a      	movs	r2, r7
 800d5ea:	4b14      	ldr	r3, [pc, #80]	@ (800d63c <_vfiprintf_r+0x234>)
 800d5ec:	9803      	ldr	r0, [sp, #12]
 800d5ee:	f7fd fb2d 	bl	800ac4c <_printf_float>
 800d5f2:	9004      	str	r0, [sp, #16]
 800d5f4:	9b04      	ldr	r3, [sp, #16]
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	d1d6      	bne.n	800d5a8 <_vfiprintf_r+0x1a0>
 800d5fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d5fc:	07db      	lsls	r3, r3, #31
 800d5fe:	d405      	bmi.n	800d60c <_vfiprintf_r+0x204>
 800d600:	89bb      	ldrh	r3, [r7, #12]
 800d602:	059b      	lsls	r3, r3, #22
 800d604:	d402      	bmi.n	800d60c <_vfiprintf_r+0x204>
 800d606:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d608:	f7fe f8a8 	bl	800b75c <__retarget_lock_release_recursive>
 800d60c:	89bb      	ldrh	r3, [r7, #12]
 800d60e:	065b      	lsls	r3, r3, #25
 800d610:	d500      	bpl.n	800d614 <_vfiprintf_r+0x20c>
 800d612:	e71e      	b.n	800d452 <_vfiprintf_r+0x4a>
 800d614:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d616:	e71e      	b.n	800d456 <_vfiprintf_r+0x4e>
 800d618:	aa07      	add	r2, sp, #28
 800d61a:	9200      	str	r2, [sp, #0]
 800d61c:	0021      	movs	r1, r4
 800d61e:	003a      	movs	r2, r7
 800d620:	4b06      	ldr	r3, [pc, #24]	@ (800d63c <_vfiprintf_r+0x234>)
 800d622:	9803      	ldr	r0, [sp, #12]
 800d624:	f7fd fdc0 	bl	800b1a8 <_printf_i>
 800d628:	e7e3      	b.n	800d5f2 <_vfiprintf_r+0x1ea>
 800d62a:	46c0      	nop			@ (mov r8, r8)
 800d62c:	0800de88 	.word	0x0800de88
 800d630:	0800de8e 	.word	0x0800de8e
 800d634:	0800de92 	.word	0x0800de92
 800d638:	0800ac4d 	.word	0x0800ac4d
 800d63c:	0800d3e5 	.word	0x0800d3e5

0800d640 <__swbuf_r>:
 800d640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d642:	0006      	movs	r6, r0
 800d644:	000d      	movs	r5, r1
 800d646:	0014      	movs	r4, r2
 800d648:	2800      	cmp	r0, #0
 800d64a:	d004      	beq.n	800d656 <__swbuf_r+0x16>
 800d64c:	6a03      	ldr	r3, [r0, #32]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d101      	bne.n	800d656 <__swbuf_r+0x16>
 800d652:	f7fd ff47 	bl	800b4e4 <__sinit>
 800d656:	69a3      	ldr	r3, [r4, #24]
 800d658:	60a3      	str	r3, [r4, #8]
 800d65a:	89a3      	ldrh	r3, [r4, #12]
 800d65c:	071b      	lsls	r3, r3, #28
 800d65e:	d502      	bpl.n	800d666 <__swbuf_r+0x26>
 800d660:	6923      	ldr	r3, [r4, #16]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d109      	bne.n	800d67a <__swbuf_r+0x3a>
 800d666:	0021      	movs	r1, r4
 800d668:	0030      	movs	r0, r6
 800d66a:	f000 f82b 	bl	800d6c4 <__swsetup_r>
 800d66e:	2800      	cmp	r0, #0
 800d670:	d003      	beq.n	800d67a <__swbuf_r+0x3a>
 800d672:	2501      	movs	r5, #1
 800d674:	426d      	negs	r5, r5
 800d676:	0028      	movs	r0, r5
 800d678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d67a:	6923      	ldr	r3, [r4, #16]
 800d67c:	6820      	ldr	r0, [r4, #0]
 800d67e:	b2ef      	uxtb	r7, r5
 800d680:	1ac0      	subs	r0, r0, r3
 800d682:	6963      	ldr	r3, [r4, #20]
 800d684:	b2ed      	uxtb	r5, r5
 800d686:	4283      	cmp	r3, r0
 800d688:	dc05      	bgt.n	800d696 <__swbuf_r+0x56>
 800d68a:	0021      	movs	r1, r4
 800d68c:	0030      	movs	r0, r6
 800d68e:	f7ff fd81 	bl	800d194 <_fflush_r>
 800d692:	2800      	cmp	r0, #0
 800d694:	d1ed      	bne.n	800d672 <__swbuf_r+0x32>
 800d696:	68a3      	ldr	r3, [r4, #8]
 800d698:	3001      	adds	r0, #1
 800d69a:	3b01      	subs	r3, #1
 800d69c:	60a3      	str	r3, [r4, #8]
 800d69e:	6823      	ldr	r3, [r4, #0]
 800d6a0:	1c5a      	adds	r2, r3, #1
 800d6a2:	6022      	str	r2, [r4, #0]
 800d6a4:	701f      	strb	r7, [r3, #0]
 800d6a6:	6963      	ldr	r3, [r4, #20]
 800d6a8:	4283      	cmp	r3, r0
 800d6aa:	d004      	beq.n	800d6b6 <__swbuf_r+0x76>
 800d6ac:	89a3      	ldrh	r3, [r4, #12]
 800d6ae:	07db      	lsls	r3, r3, #31
 800d6b0:	d5e1      	bpl.n	800d676 <__swbuf_r+0x36>
 800d6b2:	2d0a      	cmp	r5, #10
 800d6b4:	d1df      	bne.n	800d676 <__swbuf_r+0x36>
 800d6b6:	0021      	movs	r1, r4
 800d6b8:	0030      	movs	r0, r6
 800d6ba:	f7ff fd6b 	bl	800d194 <_fflush_r>
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	d0d9      	beq.n	800d676 <__swbuf_r+0x36>
 800d6c2:	e7d6      	b.n	800d672 <__swbuf_r+0x32>

0800d6c4 <__swsetup_r>:
 800d6c4:	4b2d      	ldr	r3, [pc, #180]	@ (800d77c <__swsetup_r+0xb8>)
 800d6c6:	b570      	push	{r4, r5, r6, lr}
 800d6c8:	0005      	movs	r5, r0
 800d6ca:	6818      	ldr	r0, [r3, #0]
 800d6cc:	000c      	movs	r4, r1
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	d004      	beq.n	800d6dc <__swsetup_r+0x18>
 800d6d2:	6a03      	ldr	r3, [r0, #32]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d101      	bne.n	800d6dc <__swsetup_r+0x18>
 800d6d8:	f7fd ff04 	bl	800b4e4 <__sinit>
 800d6dc:	230c      	movs	r3, #12
 800d6de:	5ee2      	ldrsh	r2, [r4, r3]
 800d6e0:	0713      	lsls	r3, r2, #28
 800d6e2:	d423      	bmi.n	800d72c <__swsetup_r+0x68>
 800d6e4:	06d3      	lsls	r3, r2, #27
 800d6e6:	d407      	bmi.n	800d6f8 <__swsetup_r+0x34>
 800d6e8:	2309      	movs	r3, #9
 800d6ea:	602b      	str	r3, [r5, #0]
 800d6ec:	2340      	movs	r3, #64	@ 0x40
 800d6ee:	2001      	movs	r0, #1
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	81a3      	strh	r3, [r4, #12]
 800d6f4:	4240      	negs	r0, r0
 800d6f6:	e03a      	b.n	800d76e <__swsetup_r+0xaa>
 800d6f8:	0752      	lsls	r2, r2, #29
 800d6fa:	d513      	bpl.n	800d724 <__swsetup_r+0x60>
 800d6fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6fe:	2900      	cmp	r1, #0
 800d700:	d008      	beq.n	800d714 <__swsetup_r+0x50>
 800d702:	0023      	movs	r3, r4
 800d704:	3344      	adds	r3, #68	@ 0x44
 800d706:	4299      	cmp	r1, r3
 800d708:	d002      	beq.n	800d710 <__swsetup_r+0x4c>
 800d70a:	0028      	movs	r0, r5
 800d70c:	f7fe feb4 	bl	800c478 <_free_r>
 800d710:	2300      	movs	r3, #0
 800d712:	6363      	str	r3, [r4, #52]	@ 0x34
 800d714:	2224      	movs	r2, #36	@ 0x24
 800d716:	89a3      	ldrh	r3, [r4, #12]
 800d718:	4393      	bics	r3, r2
 800d71a:	81a3      	strh	r3, [r4, #12]
 800d71c:	2300      	movs	r3, #0
 800d71e:	6063      	str	r3, [r4, #4]
 800d720:	6923      	ldr	r3, [r4, #16]
 800d722:	6023      	str	r3, [r4, #0]
 800d724:	2308      	movs	r3, #8
 800d726:	89a2      	ldrh	r2, [r4, #12]
 800d728:	4313      	orrs	r3, r2
 800d72a:	81a3      	strh	r3, [r4, #12]
 800d72c:	6923      	ldr	r3, [r4, #16]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d10b      	bne.n	800d74a <__swsetup_r+0x86>
 800d732:	21a0      	movs	r1, #160	@ 0xa0
 800d734:	2280      	movs	r2, #128	@ 0x80
 800d736:	89a3      	ldrh	r3, [r4, #12]
 800d738:	0089      	lsls	r1, r1, #2
 800d73a:	0092      	lsls	r2, r2, #2
 800d73c:	400b      	ands	r3, r1
 800d73e:	4293      	cmp	r3, r2
 800d740:	d003      	beq.n	800d74a <__swsetup_r+0x86>
 800d742:	0021      	movs	r1, r4
 800d744:	0028      	movs	r0, r5
 800d746:	f000 f88f 	bl	800d868 <__smakebuf_r>
 800d74a:	230c      	movs	r3, #12
 800d74c:	5ee2      	ldrsh	r2, [r4, r3]
 800d74e:	2101      	movs	r1, #1
 800d750:	0013      	movs	r3, r2
 800d752:	400b      	ands	r3, r1
 800d754:	420a      	tst	r2, r1
 800d756:	d00b      	beq.n	800d770 <__swsetup_r+0xac>
 800d758:	2300      	movs	r3, #0
 800d75a:	60a3      	str	r3, [r4, #8]
 800d75c:	6963      	ldr	r3, [r4, #20]
 800d75e:	425b      	negs	r3, r3
 800d760:	61a3      	str	r3, [r4, #24]
 800d762:	2000      	movs	r0, #0
 800d764:	6923      	ldr	r3, [r4, #16]
 800d766:	4283      	cmp	r3, r0
 800d768:	d101      	bne.n	800d76e <__swsetup_r+0xaa>
 800d76a:	0613      	lsls	r3, r2, #24
 800d76c:	d4be      	bmi.n	800d6ec <__swsetup_r+0x28>
 800d76e:	bd70      	pop	{r4, r5, r6, pc}
 800d770:	0791      	lsls	r1, r2, #30
 800d772:	d400      	bmi.n	800d776 <__swsetup_r+0xb2>
 800d774:	6963      	ldr	r3, [r4, #20]
 800d776:	60a3      	str	r3, [r4, #8]
 800d778:	e7f3      	b.n	800d762 <__swsetup_r+0x9e>
 800d77a:	46c0      	nop			@ (mov r8, r8)
 800d77c:	20000028 	.word	0x20000028

0800d780 <_raise_r>:
 800d780:	b570      	push	{r4, r5, r6, lr}
 800d782:	0004      	movs	r4, r0
 800d784:	000d      	movs	r5, r1
 800d786:	291f      	cmp	r1, #31
 800d788:	d904      	bls.n	800d794 <_raise_r+0x14>
 800d78a:	2316      	movs	r3, #22
 800d78c:	6003      	str	r3, [r0, #0]
 800d78e:	2001      	movs	r0, #1
 800d790:	4240      	negs	r0, r0
 800d792:	bd70      	pop	{r4, r5, r6, pc}
 800d794:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800d796:	2b00      	cmp	r3, #0
 800d798:	d004      	beq.n	800d7a4 <_raise_r+0x24>
 800d79a:	008a      	lsls	r2, r1, #2
 800d79c:	189b      	adds	r3, r3, r2
 800d79e:	681a      	ldr	r2, [r3, #0]
 800d7a0:	2a00      	cmp	r2, #0
 800d7a2:	d108      	bne.n	800d7b6 <_raise_r+0x36>
 800d7a4:	0020      	movs	r0, r4
 800d7a6:	f000 f831 	bl	800d80c <_getpid_r>
 800d7aa:	002a      	movs	r2, r5
 800d7ac:	0001      	movs	r1, r0
 800d7ae:	0020      	movs	r0, r4
 800d7b0:	f000 f81a 	bl	800d7e8 <_kill_r>
 800d7b4:	e7ed      	b.n	800d792 <_raise_r+0x12>
 800d7b6:	2a01      	cmp	r2, #1
 800d7b8:	d009      	beq.n	800d7ce <_raise_r+0x4e>
 800d7ba:	1c51      	adds	r1, r2, #1
 800d7bc:	d103      	bne.n	800d7c6 <_raise_r+0x46>
 800d7be:	2316      	movs	r3, #22
 800d7c0:	6003      	str	r3, [r0, #0]
 800d7c2:	2001      	movs	r0, #1
 800d7c4:	e7e5      	b.n	800d792 <_raise_r+0x12>
 800d7c6:	2100      	movs	r1, #0
 800d7c8:	0028      	movs	r0, r5
 800d7ca:	6019      	str	r1, [r3, #0]
 800d7cc:	4790      	blx	r2
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	e7df      	b.n	800d792 <_raise_r+0x12>
	...

0800d7d4 <raise>:
 800d7d4:	b510      	push	{r4, lr}
 800d7d6:	4b03      	ldr	r3, [pc, #12]	@ (800d7e4 <raise+0x10>)
 800d7d8:	0001      	movs	r1, r0
 800d7da:	6818      	ldr	r0, [r3, #0]
 800d7dc:	f7ff ffd0 	bl	800d780 <_raise_r>
 800d7e0:	bd10      	pop	{r4, pc}
 800d7e2:	46c0      	nop			@ (mov r8, r8)
 800d7e4:	20000028 	.word	0x20000028

0800d7e8 <_kill_r>:
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	b570      	push	{r4, r5, r6, lr}
 800d7ec:	4d06      	ldr	r5, [pc, #24]	@ (800d808 <_kill_r+0x20>)
 800d7ee:	0004      	movs	r4, r0
 800d7f0:	0008      	movs	r0, r1
 800d7f2:	0011      	movs	r1, r2
 800d7f4:	602b      	str	r3, [r5, #0]
 800d7f6:	f7f7 fdc7 	bl	8005388 <_kill>
 800d7fa:	1c43      	adds	r3, r0, #1
 800d7fc:	d103      	bne.n	800d806 <_kill_r+0x1e>
 800d7fe:	682b      	ldr	r3, [r5, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d000      	beq.n	800d806 <_kill_r+0x1e>
 800d804:	6023      	str	r3, [r4, #0]
 800d806:	bd70      	pop	{r4, r5, r6, pc}
 800d808:	20000650 	.word	0x20000650

0800d80c <_getpid_r>:
 800d80c:	b510      	push	{r4, lr}
 800d80e:	f7f7 fdb5 	bl	800537c <_getpid>
 800d812:	bd10      	pop	{r4, pc}

0800d814 <__swhatbuf_r>:
 800d814:	b570      	push	{r4, r5, r6, lr}
 800d816:	000e      	movs	r6, r1
 800d818:	001d      	movs	r5, r3
 800d81a:	230e      	movs	r3, #14
 800d81c:	5ec9      	ldrsh	r1, [r1, r3]
 800d81e:	0014      	movs	r4, r2
 800d820:	b096      	sub	sp, #88	@ 0x58
 800d822:	2900      	cmp	r1, #0
 800d824:	da0c      	bge.n	800d840 <__swhatbuf_r+0x2c>
 800d826:	89b2      	ldrh	r2, [r6, #12]
 800d828:	2380      	movs	r3, #128	@ 0x80
 800d82a:	0011      	movs	r1, r2
 800d82c:	4019      	ands	r1, r3
 800d82e:	421a      	tst	r2, r3
 800d830:	d114      	bne.n	800d85c <__swhatbuf_r+0x48>
 800d832:	2380      	movs	r3, #128	@ 0x80
 800d834:	00db      	lsls	r3, r3, #3
 800d836:	2000      	movs	r0, #0
 800d838:	6029      	str	r1, [r5, #0]
 800d83a:	6023      	str	r3, [r4, #0]
 800d83c:	b016      	add	sp, #88	@ 0x58
 800d83e:	bd70      	pop	{r4, r5, r6, pc}
 800d840:	466a      	mov	r2, sp
 800d842:	f000 f853 	bl	800d8ec <_fstat_r>
 800d846:	2800      	cmp	r0, #0
 800d848:	dbed      	blt.n	800d826 <__swhatbuf_r+0x12>
 800d84a:	23f0      	movs	r3, #240	@ 0xf0
 800d84c:	9901      	ldr	r1, [sp, #4]
 800d84e:	021b      	lsls	r3, r3, #8
 800d850:	4019      	ands	r1, r3
 800d852:	4b04      	ldr	r3, [pc, #16]	@ (800d864 <__swhatbuf_r+0x50>)
 800d854:	18c9      	adds	r1, r1, r3
 800d856:	424b      	negs	r3, r1
 800d858:	4159      	adcs	r1, r3
 800d85a:	e7ea      	b.n	800d832 <__swhatbuf_r+0x1e>
 800d85c:	2100      	movs	r1, #0
 800d85e:	2340      	movs	r3, #64	@ 0x40
 800d860:	e7e9      	b.n	800d836 <__swhatbuf_r+0x22>
 800d862:	46c0      	nop			@ (mov r8, r8)
 800d864:	ffffe000 	.word	0xffffe000

0800d868 <__smakebuf_r>:
 800d868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d86a:	2602      	movs	r6, #2
 800d86c:	898b      	ldrh	r3, [r1, #12]
 800d86e:	0005      	movs	r5, r0
 800d870:	000c      	movs	r4, r1
 800d872:	b085      	sub	sp, #20
 800d874:	4233      	tst	r3, r6
 800d876:	d007      	beq.n	800d888 <__smakebuf_r+0x20>
 800d878:	0023      	movs	r3, r4
 800d87a:	3347      	adds	r3, #71	@ 0x47
 800d87c:	6023      	str	r3, [r4, #0]
 800d87e:	6123      	str	r3, [r4, #16]
 800d880:	2301      	movs	r3, #1
 800d882:	6163      	str	r3, [r4, #20]
 800d884:	b005      	add	sp, #20
 800d886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d888:	ab03      	add	r3, sp, #12
 800d88a:	aa02      	add	r2, sp, #8
 800d88c:	f7ff ffc2 	bl	800d814 <__swhatbuf_r>
 800d890:	9f02      	ldr	r7, [sp, #8]
 800d892:	9001      	str	r0, [sp, #4]
 800d894:	0039      	movs	r1, r7
 800d896:	0028      	movs	r0, r5
 800d898:	f7fe fe64 	bl	800c564 <_malloc_r>
 800d89c:	2800      	cmp	r0, #0
 800d89e:	d108      	bne.n	800d8b2 <__smakebuf_r+0x4a>
 800d8a0:	220c      	movs	r2, #12
 800d8a2:	5ea3      	ldrsh	r3, [r4, r2]
 800d8a4:	059a      	lsls	r2, r3, #22
 800d8a6:	d4ed      	bmi.n	800d884 <__smakebuf_r+0x1c>
 800d8a8:	2203      	movs	r2, #3
 800d8aa:	4393      	bics	r3, r2
 800d8ac:	431e      	orrs	r6, r3
 800d8ae:	81a6      	strh	r6, [r4, #12]
 800d8b0:	e7e2      	b.n	800d878 <__smakebuf_r+0x10>
 800d8b2:	2380      	movs	r3, #128	@ 0x80
 800d8b4:	89a2      	ldrh	r2, [r4, #12]
 800d8b6:	6020      	str	r0, [r4, #0]
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	81a3      	strh	r3, [r4, #12]
 800d8bc:	9b03      	ldr	r3, [sp, #12]
 800d8be:	6120      	str	r0, [r4, #16]
 800d8c0:	6167      	str	r7, [r4, #20]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00c      	beq.n	800d8e0 <__smakebuf_r+0x78>
 800d8c6:	0028      	movs	r0, r5
 800d8c8:	230e      	movs	r3, #14
 800d8ca:	5ee1      	ldrsh	r1, [r4, r3]
 800d8cc:	f000 f820 	bl	800d910 <_isatty_r>
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	d005      	beq.n	800d8e0 <__smakebuf_r+0x78>
 800d8d4:	2303      	movs	r3, #3
 800d8d6:	89a2      	ldrh	r2, [r4, #12]
 800d8d8:	439a      	bics	r2, r3
 800d8da:	3b02      	subs	r3, #2
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	81a3      	strh	r3, [r4, #12]
 800d8e0:	89a3      	ldrh	r3, [r4, #12]
 800d8e2:	9a01      	ldr	r2, [sp, #4]
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	81a3      	strh	r3, [r4, #12]
 800d8e8:	e7cc      	b.n	800d884 <__smakebuf_r+0x1c>
	...

0800d8ec <_fstat_r>:
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	b570      	push	{r4, r5, r6, lr}
 800d8f0:	4d06      	ldr	r5, [pc, #24]	@ (800d90c <_fstat_r+0x20>)
 800d8f2:	0004      	movs	r4, r0
 800d8f4:	0008      	movs	r0, r1
 800d8f6:	0011      	movs	r1, r2
 800d8f8:	602b      	str	r3, [r5, #0]
 800d8fa:	f7f7 fda5 	bl	8005448 <_fstat>
 800d8fe:	1c43      	adds	r3, r0, #1
 800d900:	d103      	bne.n	800d90a <_fstat_r+0x1e>
 800d902:	682b      	ldr	r3, [r5, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d000      	beq.n	800d90a <_fstat_r+0x1e>
 800d908:	6023      	str	r3, [r4, #0]
 800d90a:	bd70      	pop	{r4, r5, r6, pc}
 800d90c:	20000650 	.word	0x20000650

0800d910 <_isatty_r>:
 800d910:	2300      	movs	r3, #0
 800d912:	b570      	push	{r4, r5, r6, lr}
 800d914:	4d06      	ldr	r5, [pc, #24]	@ (800d930 <_isatty_r+0x20>)
 800d916:	0004      	movs	r4, r0
 800d918:	0008      	movs	r0, r1
 800d91a:	602b      	str	r3, [r5, #0]
 800d91c:	f7f7 fda2 	bl	8005464 <_isatty>
 800d920:	1c43      	adds	r3, r0, #1
 800d922:	d103      	bne.n	800d92c <_isatty_r+0x1c>
 800d924:	682b      	ldr	r3, [r5, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d000      	beq.n	800d92c <_isatty_r+0x1c>
 800d92a:	6023      	str	r3, [r4, #0]
 800d92c:	bd70      	pop	{r4, r5, r6, pc}
 800d92e:	46c0      	nop			@ (mov r8, r8)
 800d930:	20000650 	.word	0x20000650

0800d934 <_init>:
 800d934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d936:	46c0      	nop			@ (mov r8, r8)
 800d938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d93a:	bc08      	pop	{r3}
 800d93c:	469e      	mov	lr, r3
 800d93e:	4770      	bx	lr

0800d940 <_fini>:
 800d940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d942:	46c0      	nop			@ (mov r8, r8)
 800d944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d946:	bc08      	pop	{r3}
 800d948:	469e      	mov	lr, r3
 800d94a:	4770      	bx	lr
